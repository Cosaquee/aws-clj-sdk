(ns portkey.aws.clouddirectory (:require [portkey.aws]))

(def
 endpoints
 '{"eu-west-1"
   {:credential-scope {:service "clouddirectory", :region "eu-west-1"},
    :ssl-common-name "clouddirectory.eu-west-1.amazonaws.com",
    :endpoint "https://clouddirectory.eu-west-1.amazonaws.com"},
   "us-east-2"
   {:credential-scope {:service "clouddirectory", :region "us-east-2"},
    :ssl-common-name "clouddirectory.us-east-2.amazonaws.com",
    :endpoint "https://clouddirectory.us-east-2.amazonaws.com"},
   "ap-southeast-2"
   {:credential-scope
    {:service "clouddirectory", :region "ap-southeast-2"},
    :ssl-common-name "clouddirectory.ap-southeast-2.amazonaws.com",
    :endpoint "https://clouddirectory.ap-southeast-2.amazonaws.com"},
   "ap-southeast-1"
   {:credential-scope
    {:service "clouddirectory", :region "ap-southeast-1"},
    :ssl-common-name "clouddirectory.ap-southeast-1.amazonaws.com",
    :endpoint "https://clouddirectory.ap-southeast-1.amazonaws.com"},
   "eu-west-2"
   {:credential-scope {:service "clouddirectory", :region "eu-west-2"},
    :ssl-common-name "clouddirectory.eu-west-2.amazonaws.com",
    :endpoint "https://clouddirectory.eu-west-2.amazonaws.com"},
   "us-west-2"
   {:credential-scope {:service "clouddirectory", :region "us-west-2"},
    :ssl-common-name "clouddirectory.us-west-2.amazonaws.com",
    :endpoint "https://clouddirectory.us-west-2.amazonaws.com"},
   "us-east-1"
   {:credential-scope {:service "clouddirectory", :region "us-east-1"},
    :ssl-common-name "clouddirectory.us-east-1.amazonaws.com",
    :endpoint "https://clouddirectory.us-east-1.amazonaws.com"}})

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-update-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.delete-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/delete-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.delete-object-request/DirectoryArn :portkey.aws.clouddirectory/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.invalid-rule-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/invalid-rule-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.invalid-rule-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-to-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-to-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-to-index-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/attach-to-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.attach-to-index-request/DirectoryArn :portkey.aws.clouddirectory.attach-to-index-request/IndexReference :portkey.aws.clouddirectory.attach-to-index-request/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/facet-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__56601__auto__] (clojure.core/<= 1 (clojure.core/count s__56601__auto__))) (clojure.core/fn [s__56602__auto__] (clojure.core/< (clojure.core/count s__56602__auto__) 64)) (clojure.core/fn [s__56603__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__56603__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-directory-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-directory-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/create-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.create-directory-request/Name :portkey.aws.clouddirectory.create-directory-request/SchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-exception/index (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-operation-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-exception/type (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-write-exception-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-write-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-write-exception/Index :portkey.aws.clouddirectory.batch-write-exception/Type :portkey.aws.clouddirectory.batch-write-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-incoming-typed-links-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-incoming-typed-links-request/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-incoming-typed-links-request/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-incoming-typed-links-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-incoming-typed-links-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-incoming-typed-links-request/DirectoryArn :portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory.list-incoming-typed-links-request/FilterAttributeRanges :portkey.aws.clouddirectory.list-incoming-typed-links-request/FilterTypedLink :portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-incoming-typed-links-request/MaxResults :portkey.aws.clouddirectory/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-successful-response/list-object-policies (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-object-policies-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-successful-response/list-object-parent-paths (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-object-parent-paths-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-successful-response/list-incoming-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-incoming-typed-links-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-successful-response/get-object-information (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-get-object-information-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-successful-response/list-policy-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-policy-attachments-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-successful-response/list-outgoing-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-outgoing-typed-links-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-successful-response/list-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-object-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-successful-response/list-index (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-successful-response/list-object-children (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-object-children-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-successful-response/list-attached-indices (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-attached-indices-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-successful-response/lookup-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-lookup-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-read-successful-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-read-successful-response/ListObjectPolicies :portkey.aws.clouddirectory.batch-read-successful-response/ListObjectParentPaths :portkey.aws.clouddirectory.batch-read-successful-response/ListIncomingTypedLinks :portkey.aws.clouddirectory.batch-read-successful-response/GetObjectInformation :portkey.aws.clouddirectory.batch-read-successful-response/ListPolicyAttachments :portkey.aws.clouddirectory.batch-read-successful-response/ListOutgoingTypedLinks :portkey.aws.clouddirectory.batch-read-successful-response/ListObjectAttributes :portkey.aws.clouddirectory.batch-read-successful-response/ListIndex :portkey.aws.clouddirectory.batch-read-successful-response/ListObjectChildren :portkey.aws.clouddirectory.batch-read-successful-response/ListAttachedIndices :portkey.aws.clouddirectory.batch-read-successful-response/LookupPolicy]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-index/ranges-on-indexed-values (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-index/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.batch-list-index/IndexReference] :opt-un [:portkey.aws.clouddirectory.batch-list-index/RangesOnIndexedValues :portkey.aws.clouddirectory.batch-list-index/MaxResults :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-children-response/children (clojure.spec.alpha/and :portkey.aws.clouddirectory/link-name-to-object-identifier-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-object-children-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-object-children-response/Children :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.policy-attachment/policy-id (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/policy-attachment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.policy-attachment/PolicyId :portkey.aws.clouddirectory/ObjectIdentifier :portkey.aws.clouddirectory/PolicyType]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-parents-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-parents-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-object-parents-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-object-parents-request/DirectoryArn :portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-object-parents-request/MaxResults :portkey.aws.clouddirectory/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.object-not-detached-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/object-not-detached-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.object-not-detached-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-attach-typed-link-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/TypedLinkSpecifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/put-schema-from-json-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/Arn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.schema-facet/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/schema-facet (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.schema-facet/SchemaArn :portkey.aws.clouddirectory/FacetName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-index-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-list-index-response/IndexAttachments :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-attached-indices-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-attached-indices-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-list-attached-indices-response/IndexAttachments :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-write-operation-response-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/batch-write-operation-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-typed-link-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-typed-link-request/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-typed-link-request/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-typed-link-request/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-typed-link-request/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/attach-typed-link-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.attach-typed-link-request/DirectoryArn :portkey.aws.clouddirectory.attach-typed-link-request/SourceObjectReference :portkey.aws.clouddirectory.attach-typed-link-request/TargetObjectReference :portkey.aws.clouddirectory.attach-typed-link-request/TypedLinkFacet :portkey.aws.clouddirectory.attach-typed-link-request/Attributes] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-object-attributes/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-object-attributes/facet-filter (clojure.spec.alpha/and :portkey.aws.clouddirectory/schema-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-object-attributes (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.batch-list-object-attributes/MaxResults :portkey.aws.clouddirectory.batch-list-object-attributes/FacetFilter]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-attribute/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-attribute/attribute-definition (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-attribute-definition))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-attribute/attribute-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-attribute-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-attribute/required-behavior (clojure.spec.alpha/and :portkey.aws.clouddirectory/required-attribute-behavior))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/facet-attribute (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.facet-attribute/Name] :opt-un [:portkey.aws.clouddirectory.facet-attribute/AttributeDefinition :portkey.aws.clouddirectory.facet-attribute/AttributeReference :portkey.aws.clouddirectory.facet-attribute/RequiredBehavior]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.object-attribute-update/object-attribute-key (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/object-attribute-update (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.object-attribute-update/ObjectAttributeKey :portkey.aws.clouddirectory/ObjectAttributeAction]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.invalid-facet-update-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/invalid-facet-update-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.invalid-facet-update-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-attribute-value/string-value (clojure.spec.alpha/and :portkey.aws.clouddirectory/string-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-attribute-value/binary-value (clojure.spec.alpha/and :portkey.aws.clouddirectory/binary-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-attribute-value/boolean-value (clojure.spec.alpha/and :portkey.aws.clouddirectory/boolean-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-attribute-value/number-value (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-attribute-value/datetime-value (clojure.spec.alpha/and :portkey.aws.clouddirectory/datetime-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/typed-attribute-value (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.typed-attribute-value/StringValue :portkey.aws.clouddirectory.typed-attribute-value/BinaryValue :portkey.aws.clouddirectory.typed-attribute-value/BooleanValue :portkey.aws.clouddirectory.typed-attribute-value/NumberValue :portkey.aws.clouddirectory.typed-attribute-value/DatetimeValue]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.detach-from-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.detach-from-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.detach-from-index-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/detach-from-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.detach-from-index-request/DirectoryArn :portkey.aws.clouddirectory.detach-from-index-request/IndexReference :portkey.aws.clouddirectory.detach-from-index-request/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-attribute-definition/type (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-attribute-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-attribute-definition/default-value (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-attribute-definition/is-immutable (clojure.spec.alpha/and :portkey.aws.clouddirectory/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-attribute-definition/rules (clojure.spec.alpha/and :portkey.aws.clouddirectory/rule-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/facet-attribute-definition (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.facet-attribute-definition/Type] :opt-un [:portkey.aws.clouddirectory.facet-attribute-definition/DefaultValue :portkey.aws.clouddirectory.facet-attribute-definition/IsImmutable :portkey.aws.clouddirectory.facet-attribute-definition/Rules]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.validation-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/validation-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.validation-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-index-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-index-response/IndexAttachments :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.get-object-information-response/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/get-object-information-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.get-object-information-response/SchemaFacets :portkey.aws.clouddirectory/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-parents-response/parents (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier-to-link-name-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-object-parents-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-object-parents-response/Parents :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/facet-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/facet-attribute :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.delete-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/delete-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.delete-directory-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/datetime-attribute-value clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-tags-for-resource-response/tags (clojure.spec.alpha/and :portkey.aws.clouddirectory/tag-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-tags-for-resource-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-tags-for-resource-response/Tags :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.get-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.get-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/get-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.get-facet-request/SchemaArn :portkey.aws.clouddirectory.get-facet-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-object-policies-response/attached-policy-ids (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-object-policies-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-list-object-policies-response/AttachedPolicyIds :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.object-attribute-range/range (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-attribute-value-range))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/object-attribute-range (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/AttributeKey :portkey.aws.clouddirectory.object-attribute-range/Range]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-policy-attachments-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-policy-attachments-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-policy-attachments-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-policy-attachments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-policy-attachments-request/DirectoryArn :portkey.aws.clouddirectory.list-policy-attachments-request/PolicyReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-policy-attachments-request/MaxResults :portkey.aws.clouddirectory/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-operation/list-object-policies (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-object-policies))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-operation/list-object-parent-paths (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-object-parent-paths))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-operation/list-incoming-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-incoming-typed-links))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-operation/get-object-information (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-get-object-information))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-operation/list-policy-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-policy-attachments))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-operation/list-outgoing-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-outgoing-typed-links))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-operation/list-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-object-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-operation/list-index (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-operation/list-object-children (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-object-children))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-operation/list-attached-indices (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-list-attached-indices))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-operation/lookup-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-lookup-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-read-operation (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-read-operation/ListObjectPolicies :portkey.aws.clouddirectory.batch-read-operation/ListObjectParentPaths :portkey.aws.clouddirectory.batch-read-operation/ListIncomingTypedLinks :portkey.aws.clouddirectory.batch-read-operation/GetObjectInformation :portkey.aws.clouddirectory.batch-read-operation/ListPolicyAttachments :portkey.aws.clouddirectory.batch-read-operation/ListOutgoingTypedLinks :portkey.aws.clouddirectory.batch-read-operation/ListObjectAttributes :portkey.aws.clouddirectory.batch-read-operation/ListIndex :portkey.aws.clouddirectory.batch-read-operation/ListObjectChildren :portkey.aws.clouddirectory.batch-read-operation/ListAttachedIndices :portkey.aws.clouddirectory.batch-read-operation/LookupPolicy]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/number-attribute-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.object-attribute-action/object-attribute-action-type (clojure.spec.alpha/and :portkey.aws.clouddirectory/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.object-attribute-action/object-attribute-update-value (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/object-attribute-action (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.object-attribute-action/ObjectAttributeActionType :portkey.aws.clouddirectory.object-attribute-action/ObjectAttributeUpdateValue]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.directory-not-enabled-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/directory-not-enabled-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.directory-not-enabled-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-children-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-children-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-object-children-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-object-children-request/DirectoryArn :portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-object-children-request/MaxResults :portkey.aws.clouddirectory/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/delete-typed-link-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-typed-link-facet-names-response/facet-names (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-typed-link-facet-names-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-typed-link-facet-names-response/FacetNames :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/typed-link-attribute-range-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/typed-link-attribute-range :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/attribute-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__56601__auto__] (clojure.core/<= 1 (clojure.core/count s__56601__auto__))) (clojure.core/fn [s__56602__auto__] (clojure.core/< (clojure.core/count s__56602__auto__) 64)) (clojure.core/fn [s__56603__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__56603__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/required-attribute-behavior (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"REQUIRED_ALWAYS" "REQUIRED_ALWAYS", :required-always "REQUIRED_ALWAYS", "NOT_REQUIRED" "NOT_REQUIRED", :not-required "NOT_REQUIRED"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-attribute-value-range/start-mode (clojure.spec.alpha/and :portkey.aws.clouddirectory/range-mode))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-attribute-value-range/start-value (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-attribute-value-range/end-mode (clojure.spec.alpha/and :portkey.aws.clouddirectory/range-mode))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-attribute-value-range/end-value (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/typed-attribute-value-range (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.typed-attribute-value-range/StartMode :portkey.aws.clouddirectory.typed-attribute-value-range/EndMode] :opt-un [:portkey.aws.clouddirectory.typed-attribute-value-range/StartValue :portkey.aws.clouddirectory.typed-attribute-value-range/EndValue]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.unsupported-index-type-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/unsupported-index-type-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.unsupported-index-type-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-add-facet-to-object/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-add-facet-to-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/SchemaFacet :portkey.aws.clouddirectory.batch-add-facet-to-object/ObjectAttributeList :portkey.aws.clouddirectory/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/get-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/Facet]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-attributes-request/facet-filter (clojure.spec.alpha/and :portkey.aws.clouddirectory/schema-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-object-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-object-attributes-request/DirectoryArn :portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-object-attributes-request/MaxResults :portkey.aws.clouddirectory/ConsistencyLevel :portkey.aws.clouddirectory.list-object-attributes-request/FacetFilter]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-tags-for-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-tags-for-resource-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/tags-number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-tags-for-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-tags-for-resource-request/ResourceArn] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-tags-for-resource-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/typed-link-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__56603__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__56603__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.publish-schema-response/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/publish-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.publish-schema-response/PublishedSchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-policy-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/attach-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.attach-policy-request/PolicyReference :portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory.attach-policy-request/DirectoryArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-update-object-attributes/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-update-object-attributes (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/ObjectReference :portkey.aws.clouddirectory.batch-update-object-attributes/AttributeUpdates] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.delete-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/delete-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.delete-directory-response/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.update-schema-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.update-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/update-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.update-schema-request/SchemaArn :portkey.aws.clouddirectory.update-schema-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/create-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.create-schema-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-write-operation-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/batch-write-operation :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-object-policies/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-object-policies (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.batch-list-object-policies/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-remove-facet-from-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/SchemaFacet :portkey.aws.clouddirectory/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-exception/type (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-read-exception-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-read-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-read-exception/Type :portkey.aws.clouddirectory.batch-read-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-outgoing-typed-links-response/typed-link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-outgoing-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-outgoing-typed-links-response/TypedLinkSpecifiers :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-attach-typed-link/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-attach-typed-link/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-attach-typed-link/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-attach-typed-link/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-attach-typed-link (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.batch-attach-typed-link/SourceObjectReference :portkey.aws.clouddirectory.batch-attach-typed-link/TargetObjectReference :portkey.aws.clouddirectory.batch-attach-typed-link/TypedLinkFacet :portkey.aws.clouddirectory.batch-attach-typed-link/Attributes] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-index-request/ordered-indexed-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-index-request/is-unique (clojure.spec.alpha/and :portkey.aws.clouddirectory/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-index-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/create-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.create-index-request/DirectoryArn :portkey.aws.clouddirectory.create-index-request/OrderedIndexedAttributeList :portkey.aws.clouddirectory.create-index-request/IsUnique] :opt-un [:portkey.aws.clouddirectory.create-index-request/ParentReference :portkey.aws.clouddirectory/LinkName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-request/operations (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-read-operation-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-read-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.batch-read-request/DirectoryArn :portkey.aws.clouddirectory.batch-read-request/Operations] :opt-un [:portkey.aws.clouddirectory/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.enable-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/enable-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.enable-directory-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-object-parent-paths-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/PathToObjectIdentifiersList :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.update-object-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.update-object-attributes-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/update-object-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.update-object-attributes-request/DirectoryArn :portkey.aws.clouddirectory/ObjectReference :portkey.aws.clouddirectory.update-object-attributes-request/AttributeUpdates] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-get-object-information (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-delete-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-to-index-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/attach-to-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.attach-to-index-response/AttachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/typed-link-attribute-definition-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/typed-link-attribute-definition :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.invalid-schema-doc-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/invalid-schema-doc-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.invalid-schema-doc-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/tag-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/update-action-type (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"CREATE_OR_UPDATE" "CREATE_OR_UPDATE", :create-or-update "CREATE_OR_UPDATE", "DELETE" "DELETE", :delete "DELETE"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/facet-attribute-type (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {:binary "BINARY", :number "NUMBER", "NUMBER" "NUMBER", :string "STRING", "STRING" "STRING", :datetime "DATETIME", "DATETIME" "DATETIME", :boolean "BOOLEAN", "BOOLEAN" "BOOLEAN", "BINARY" "BINARY"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-object-children/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-object-children (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.batch-list-object-children/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/attach-typed-link-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/TypedLinkSpecifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/boolean-attribute-value clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.link-name-already-in-use-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/link-name-already-in-use-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.link-name-already-in-use-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/policy-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/policy-attachment :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.limit-exceeded-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-in-use-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/facet-in-use-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.facet-in-use-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-object-parent-paths-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/PathToObjectIdentifiersList :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-attach-policy/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-attach-policy (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.batch-attach-policy/PolicyReference :portkey.aws.clouddirectory/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-object-attributes-response/Attributes :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/schema-json-document (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/create-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-write-exception-type (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {:object-already-detached-exception "ObjectAlreadyDetachedException", :not-policy-exception "NotPolicyException", "ObjectNotDetachedException" "ObjectNotDetachedException", "ValidationException" "ValidationException", :internal-service-exception "InternalServiceException", :not-index-exception "NotIndexException", "DirectoryNotEnabledException" "DirectoryNotEnabledException", "UnsupportedIndexTypeException" "UnsupportedIndexTypeException", :resource-not-found-exception "ResourceNotFoundException", :limit-exceeded-exception "LimitExceededException", "LinkNameAlreadyInUseException" "LinkNameAlreadyInUseException", "LimitExceededException" "LimitExceededException", :object-not-detached-exception "ObjectNotDetachedException", "InvalidArnException" "InvalidArnException", "NotPolicyException" "NotPolicyException", "ResourceNotFoundException" "ResourceNotFoundException", "FacetValidationException" "FacetValidationException", "AccessDeniedException" "AccessDeniedException", :validation-exception "ValidationException", "NotIndexException" "NotIndexException", :indexed-attribute-missing-exception "IndexedAttributeMissingException", :facet-validation-exception "FacetValidationException", "IndexedAttributeMissingException" "IndexedAttributeMissingException", :directory-not-enabled-exception "DirectoryNotEnabledException", :access-denied-exception "AccessDeniedException", "InvalidAttachmentException" "InvalidAttachmentException", "ObjectAlreadyDetachedException" "ObjectAlreadyDetachedException", :still-contains-links-exception "StillContainsLinksException", :link-name-already-in-use-exception "LinkNameAlreadyInUseException", :unsupported-index-type-exception "UnsupportedIndexTypeException", "StillContainsLinksException" "StillContainsLinksException", "InternalServiceException" "InternalServiceException", :invalid-arn-exception "InvalidArnException", :invalid-attachment-exception "InvalidAttachmentException"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/update-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/lookup-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/PolicyToPathList :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/attribute-key-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/attribute-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.invalid-tagging-request-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/invalid-tagging-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.invalid-tagging-request-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/selector-object-reference (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/create-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.detach-from-index-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/detach-from-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.detach-from-index-response/DetachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/typed-link-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/typed-link-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/rule-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory/rule-key :portkey.aws.clouddirectory/rule))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-read-operation-response-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/batch-read-operation-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation-response/create-index (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-create-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation-response/create-object (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-create-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation-response/detach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-detach-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation-response/detach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-detach-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation-response/detach-from-index (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-detach-from-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation-response/attach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-attach-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation-response/attach-to-index (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-attach-to-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation-response/attach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-attach-typed-link-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation-response/detach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-detach-typed-link-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation-response/add-facet-to-object (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-add-facet-to-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation-response/update-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-update-object-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation-response/delete-object (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-delete-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation-response/attach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-attach-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation-response/remove-facet-from-object (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-remove-facet-from-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-write-operation-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-write-operation-response/CreateIndex :portkey.aws.clouddirectory.batch-write-operation-response/CreateObject :portkey.aws.clouddirectory.batch-write-operation-response/DetachPolicy :portkey.aws.clouddirectory.batch-write-operation-response/DetachObject :portkey.aws.clouddirectory.batch-write-operation-response/DetachFromIndex :portkey.aws.clouddirectory.batch-write-operation-response/AttachObject :portkey.aws.clouddirectory.batch-write-operation-response/AttachToIndex :portkey.aws.clouddirectory.batch-write-operation-response/AttachTypedLink :portkey.aws.clouddirectory.batch-write-operation-response/DetachTypedLink :portkey.aws.clouddirectory.batch-write-operation-response/AddFacetToObject :portkey.aws.clouddirectory.batch-write-operation-response/UpdateObjectAttributes :portkey.aws.clouddirectory.batch-write-operation-response/DeleteObject :portkey.aws.clouddirectory.batch-write-operation-response/AttachPolicy :portkey.aws.clouddirectory.batch-write-operation-response/RemoveFacetFromObject]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/arns (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/arn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/update-typed-link-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-attach-to-index-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-attach-to-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-attach-to-index-response/AttachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.add-facet-to-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.add-facet-to-object-request/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/add-facet-to-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.add-facet-to-object-request/DirectoryArn :portkey.aws.clouddirectory/SchemaFacet :portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory.add-facet-to-object-request/ObjectAttributeList]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-response/responses (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-write-operation-response-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-write-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-write-response/Responses]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.directory-not-disabled-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/directory-not-disabled-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.directory-not-disabled-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.remove-facet-from-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/remove-facet-from-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.remove-facet-from-object-request/DirectoryArn :portkey.aws.clouddirectory/SchemaFacet :portkey.aws.clouddirectory/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-object-parent-paths/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-object-parent-paths (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.batch-list-object-parent-paths/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.detach-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.detach-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/detach-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.detach-object-request/DirectoryArn :portkey.aws.clouddirectory.detach-object-request/ParentReference :portkey.aws.clouddirectory/LinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-development-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-development-schema-arns-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-development-schema-arns-response/SchemaArns :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/next-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/tag-resource-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-outgoing-typed-links/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-outgoing-typed-links/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-outgoing-typed-links/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-outgoing-typed-links (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory.batch-list-outgoing-typed-links/FilterAttributeRanges :portkey.aws.clouddirectory.batch-list-outgoing-typed-links/FilterTypedLink :portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.batch-list-outgoing-typed-links/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-incoming-typed-links/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-incoming-typed-links/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-incoming-typed-links/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-incoming-typed-links (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory.batch-list-incoming-typed-links/FilterAttributeRanges :portkey.aws.clouddirectory.batch-list-incoming-typed-links/FilterTypedLink :portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.batch-list-incoming-typed-links/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/attribute-key-and-value-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/attribute-key-and-value :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-attribute-range/range (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-attribute-value-range))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/typed-link-attribute-range (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.typed-link-attribute-range/Range] :opt-un [:portkey.aws.clouddirectory/AttributeName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.invalid-next-token-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/invalid-next-token-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.invalid-next-token-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.update-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/update-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.update-schema-response/SchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-outgoing-typed-links-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-outgoing-typed-links-request/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-outgoing-typed-links-request/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-outgoing-typed-links-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-outgoing-typed-links-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-outgoing-typed-links-request/DirectoryArn :portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory.list-outgoing-typed-links-request/FilterAttributeRanges :portkey.aws.clouddirectory.list-outgoing-typed-links-request/FilterTypedLink :portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-outgoing-typed-links-request/MaxResults :portkey.aws.clouddirectory/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.directory-deleted-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/directory-deleted-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.directory-deleted-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.directory/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.directory/state (clojure.spec.alpha/and :portkey.aws.clouddirectory/directory-state))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.directory/creation-date-time (clojure.spec.alpha/and :portkey.aws.clouddirectory/date))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/directory (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.directory/Name :portkey.aws.clouddirectory/DirectoryArn :portkey.aws.clouddirectory.directory/State :portkey.aws.clouddirectory.directory/CreationDateTime]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-specifier/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-specifier/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-specifier/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-specifier/identity-attribute-values (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/typed-link-specifier (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.typed-link-specifier/TypedLinkFacet :portkey.aws.clouddirectory.typed-link-specifier/SourceObjectReference :portkey.aws.clouddirectory.typed-link-specifier/TargetObjectReference :portkey.aws.clouddirectory.typed-link-specifier/IdentityAttributeValues] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-facet-names-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-facet-names-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-facet-names-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-facet-names-request/SchemaArn] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-facet-names-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-directories-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-directories-request/state (clojure.spec.alpha/and :portkey.aws.clouddirectory/directory-state))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-directories-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-directories-request/MaxResults :portkey.aws.clouddirectory.list-directories-request/state]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.policy-to-path/path (clojure.spec.alpha/and :portkey.aws.clouddirectory/path-string))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.policy-to-path/policies (clojure.spec.alpha/and :portkey.aws.clouddirectory/policy-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/policy-to-path (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.policy-to-path/Path :portkey.aws.clouddirectory.policy-to-path/Policies]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/create-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/object-attribute-range-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/object-attribute-range :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.detach-object-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/detach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.detach-object-response/DetachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-facet/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-facet/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-attribute-definition-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-facet/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/typed-link-facet (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.typed-link-facet/Name :portkey.aws.clouddirectory.typed-link-facet/Attributes :portkey.aws.clouddirectory.typed-link-facet/IdentityAttributeOrder] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.invalid-arn-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/invalid-arn-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.invalid-arn-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/facet-not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.facet-not-found-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.not-policy-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/not-policy-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.not-policy-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.tag-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.tag-resource-request/tags (clojure.spec.alpha/and :portkey.aws.clouddirectory/tag-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/tag-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.tag-resource-request/ResourceArn :portkey.aws.clouddirectory.tag-resource-request/Tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-facet-request/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-attribute-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/create-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.create-facet-request/SchemaArn :portkey.aws.clouddirectory.create-facet-request/Name :portkey.aws.clouddirectory/ObjectType] :opt-un [:portkey.aws.clouddirectory.create-facet-request/Attributes]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/typed-link-specifier-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/typed-link-specifier :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-object-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/attach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.attach-object-response/AttachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-attach-object-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-attach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-attach-object-response/attachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/range-mode (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {:exclusive "EXCLUSIVE", "LAST" "LAST", :inclusive "INCLUSIVE", :last-before-missing-values "LAST_BEFORE_MISSING_VALUES", "EXCLUSIVE" "EXCLUSIVE", :first "FIRST", "INCLUSIVE" "INCLUSIVE", :last "LAST", "FIRST" "FIRST", "LAST_BEFORE_MISSING_VALUES" "LAST_BEFORE_MISSING_VALUES"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/tag-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/tag :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.cannot-list-parent-of-root-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/cannot-list-parent-of-root-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.cannot-list-parent-of-root-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-facet-names-response/facet-names (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-facet-names-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-facet-names-response/FacetNames :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-object-children-response/children (clojure.spec.alpha/and :portkey.aws.clouddirectory/link-name-to-object-identifier-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-object-children-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-list-object-children-response/Children :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/tag-key-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/tag-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-policies-response/attached-policy-ids (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-object-policies-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-object-policies-response/AttachedPolicyIds :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/binary-attribute-value (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.awsgen/base64-encode portkey.awsgen/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-attached-indices-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-attached-indices-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-attached-indices-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-attached-indices-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-attached-indices-request/DirectoryArn :portkey.aws.clouddirectory.list-attached-indices-request/TargetReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-attached-indices-request/MaxResults :portkey.aws.clouddirectory/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-policy-attachments-response/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-policy-attachments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-list-policy-attachments-response/ObjectIdentifiers :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-read-operation-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/batch-read-operation :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/path-to-object-identifiers-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/path-to-object-identifiers :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-add-facet-to-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.update-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.update-typed-link-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.update-typed-link-facet-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-facet-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.update-typed-link-facet-request/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/update-typed-link-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.update-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.update-typed-link-facet-request/Name :portkey.aws.clouddirectory.update-typed-link-facet-request/AttributeUpdates :portkey.aws.clouddirectory.update-typed-link-facet-request/IdentityAttributeOrder] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/create-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.create-schema-response/SchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-operation-index (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.apply-schema-response/applied-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.apply-schema-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/apply-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.apply-schema-response/AppliedSchemaArn :portkey.aws.clouddirectory.apply-schema-response/DirectoryArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/resource-not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.resource-not-found-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-detach-typed-link (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/TypedLinkSpecifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/object-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/object-attribute-update :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.lookup-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.lookup-policy-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/lookup-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.lookup-policy-request/DirectoryArn :portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.lookup-policy-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.get-schema-as-json-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/get-schema-as-json-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.get-schema-as-json-request/SchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/attach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-policies-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-policies-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-object-policies-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-object-policies-request/DirectoryArn :portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-object-policies-request/MaxResults :portkey.aws.clouddirectory/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/attribute-name-and-value-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/attribute-name-and-value :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-index-request/ranges-on-indexed-values (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-index-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-index-request/DirectoryArn :portkey.aws.clouddirectory.list-index-request/IndexReference] :opt-un [:portkey.aws.clouddirectory.list-index-request/RangesOnIndexedValues :portkey.aws.clouddirectory.list-index-request/MaxResults :portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.schema-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/schema-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.schema-already-exists-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/tag-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/facet-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/facet-attribute-update :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-validation-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/facet-validation-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.facet-validation-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.schema-already-published-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/schema-already-published-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.schema-already-published-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.attribute-name-and-value/value (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/attribute-name-and-value (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/AttributeName :portkey.aws.clouddirectory.attribute-name-and-value/Value] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-policy-attachments/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-policy-attachments/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-policy-attachments (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.batch-list-policy-attachments/PolicyReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.batch-list-policy-attachments/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/facet (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.facet/Name :portkey.aws.clouddirectory/ObjectType]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.get-typed-link-facet-information-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.get-typed-link-facet-information-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/get-typed-link-facet-information-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.get-typed-link-facet-information-request/SchemaArn :portkey.aws.clouddirectory.get-typed-link-facet-information-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-incoming-typed-links-response/link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-incoming-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-incoming-typed-links-response/LinkSpecifiers :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/exception-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/get-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.object-reference/selector (clojure.spec.alpha/and :portkey.aws.clouddirectory/selector-object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/object-reference (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.object-reference/Selector]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.update-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.update-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.update-facet-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/update-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.update-facet-request/SchemaArn :portkey.aws.clouddirectory.update-facet-request/Name] :opt-un [:portkey.aws.clouddirectory.update-facet-request/AttributeUpdates :portkey.aws.clouddirectory/ObjectType]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.attribute-key/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.attribute-key/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/attribute-key (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.attribute-key/SchemaArn :portkey.aws.clouddirectory/FacetName :portkey.aws.clouddirectory.attribute-key/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/bool clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory/attribute-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/attribute-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-attach-to-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-attach-to-index/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-attach-to-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.batch-attach-to-index/IndexReference :portkey.aws.clouddirectory.batch-attach-to-index/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/create-typed-link-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-reference-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation/create-index (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-create-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation/create-object (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-create-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation/detach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-detach-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation/detach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-detach-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation/detach-from-index (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-detach-from-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation/attach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-attach-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation/attach-to-index (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-attach-to-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation/attach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-attach-typed-link))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation/detach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-detach-typed-link))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation/add-facet-to-object (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-add-facet-to-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation/update-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-update-object-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation/delete-object (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-delete-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation/attach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-attach-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-operation/remove-facet-from-object (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-remove-facet-from-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-write-operation (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-write-operation/CreateIndex :portkey.aws.clouddirectory.batch-write-operation/CreateObject :portkey.aws.clouddirectory.batch-write-operation/DetachPolicy :portkey.aws.clouddirectory.batch-write-operation/DetachObject :portkey.aws.clouddirectory.batch-write-operation/DetachFromIndex :portkey.aws.clouddirectory.batch-write-operation/AttachObject :portkey.aws.clouddirectory.batch-write-operation/AttachToIndex :portkey.aws.clouddirectory.batch-write-operation/AttachTypedLink :portkey.aws.clouddirectory.batch-write-operation/DetachTypedLink :portkey.aws.clouddirectory.batch-write-operation/AddFacetToObject :portkey.aws.clouddirectory.batch-write-operation/UpdateObjectAttributes :portkey.aws.clouddirectory.batch-write-operation/DeleteObject :portkey.aws.clouddirectory.batch-write-operation/AttachPolicy :portkey.aws.clouddirectory.batch-write-operation/RemoveFacetFromObject]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.put-schema-from-json-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.put-schema-from-json-request/document (clojure.spec.alpha/and :portkey.aws.clouddirectory/schema-json-document))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/put-schema-from-json-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.put-schema-from-json-request/SchemaArn :portkey.aws.clouddirectory.put-schema-from-json-request/Document] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-detach-typed-link-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/directory-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.access-denied-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/access-denied-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.access-denied-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-attached-indices-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-attached-indices-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-attached-indices-response/IndexAttachments :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-development-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-development-schema-arns-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-development-schema-arns-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/remove-facet-from-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/rule-parameter-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/object-identifier-to-link-name-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory/object-identifier :portkey.aws.clouddirectory/link-name))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.publish-schema-request/development-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.publish-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/publish-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.publish-schema-request/DevelopmentSchemaArn :portkey.aws.clouddirectory/Version] :opt-un [:portkey.aws.clouddirectory.publish-schema-request/Name]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-create-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-detach-from-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-detach-from-index/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-detach-from-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.batch-detach-from-index/IndexReference :portkey.aws.clouddirectory.batch-detach-from-index/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-detach-from-index-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-detach-from-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-detach-from-index-response/DetachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-facet-attribute-update/attribute (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-attribute-definition))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-facet-attribute-update/action (clojure.spec.alpha/and :portkey.aws.clouddirectory/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/typed-link-facet-attribute-update (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.typed-link-facet-attribute-update/Attribute :portkey.aws.clouddirectory.typed-link-facet-attribute-update/Action] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.delete-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/delete-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.delete-schema-response/SchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-typed-link-facet-request/facet (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/create-typed-link-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.create-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.create-typed-link-facet-request/Facet] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-remove-facet-from-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-attach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-incoming-typed-links-response/link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-incoming-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-list-incoming-typed-links-response/LinkSpecifiers :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-attribute-update/attribute (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-attribute))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-attribute-update/action (clojure.spec.alpha/and :portkey.aws.clouddirectory/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/facet-attribute-update (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.facet-attribute-update/Attribute :portkey.aws.clouddirectory.facet-attribute-update/Action]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-facet-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-attribute-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-facet-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-facet-attributes-response/Attributes :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.index-attachment/indexed-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/index-attachment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.index-attachment/IndexedAttributes :portkey.aws.clouddirectory/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.not-index-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/not-index-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.not-index-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/link-name-to-object-identifier-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory/link-name :portkey.aws.clouddirectory/object-identifier))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-schema-and-facet-name/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/typed-link-schema-and-facet-name (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.typed-link-schema-and-facet-name/SchemaArn :portkey.aws.clouddirectory/TypedLinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-policy-attachments-response/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-policy-attachments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-policy-attachments-response/ObjectIdentifiers :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/path-string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-write-request/operations (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-write-operation-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-write-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.batch-write-request/DirectoryArn :portkey.aws.clouddirectory.batch-write-request/Operations] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.rule/type (clojure.spec.alpha/and :portkey.aws.clouddirectory/rule-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.rule/parameters (clojure.spec.alpha/and :portkey.aws.clouddirectory/rule-parameter-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/rule (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.rule/Type :portkey.aws.clouddirectory.rule/Parameters]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-attach-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-attach-object/child-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-attach-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.batch-attach-object/ParentReference :portkey.aws.clouddirectory.batch-attach-object/ChildReference :portkey.aws.clouddirectory/LinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/policy-to-path-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/policy-to-path :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-delete-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/rule-parameter-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.path-to-object-identifiers/path (clojure.spec.alpha/and :portkey.aws.clouddirectory/path-string))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.path-to-object-identifiers/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/path-to-object-identifiers (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.path-to-object-identifiers/Path :portkey.aws.clouddirectory.path-to-object-identifiers/ObjectIdentifiers]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-create-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-lookup-policy/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-lookup-policy (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.batch-lookup-policy/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/typed-link-facet-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/typed-link-facet-attribute-update :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.delete-schema-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/delete-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.delete-schema-request/SchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.apply-schema-request/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.apply-schema-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/apply-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.apply-schema-request/PublishedSchemaArn :portkey.aws.clouddirectory.apply-schema-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.get-object-information-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/get-object-information-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.get-object-information-request/DirectoryArn :portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.not-node-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/not-node-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.not-node-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.get-typed-link-facet-information-response/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/get-typed-link-facet-information-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.get-typed-link-facet-information-response/IdentityAttributeOrder]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.delete-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.delete-typed-link-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/delete-typed-link-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.delete-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.delete-typed-link-facet-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-create-index/ordered-indexed-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-create-index/is-unique (clojure.spec.alpha/and :portkey.aws.clouddirectory/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-create-index/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-create-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.batch-create-index/OrderedIndexedAttributeList :portkey.aws.clouddirectory.batch-create-index/IsUnique] :opt-un [:portkey.aws.clouddirectory.batch-create-index/ParentReference :portkey.aws.clouddirectory/LinkName :portkey.aws.clouddirectory/BatchReferenceName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/object-identifier (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/directory-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/directory :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-read-exception-type (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {:cannot-list-parent-of-root-exception "CannotListParentOfRootException", :not-policy-exception "NotPolicyException", "ValidationException" "ValidationException", :internal-service-exception "InternalServiceException", :not-index-exception "NotIndexException", "DirectoryNotEnabledException" "DirectoryNotEnabledException", :resource-not-found-exception "ResourceNotFoundException", :limit-exceeded-exception "LimitExceededException", "LimitExceededException" "LimitExceededException", "InvalidNextTokenException" "InvalidNextTokenException", "InvalidArnException" "InvalidArnException", "NotPolicyException" "NotPolicyException", "CannotListParentOfRootException" "CannotListParentOfRootException", "ResourceNotFoundException" "ResourceNotFoundException", "FacetValidationException" "FacetValidationException", "AccessDeniedException" "AccessDeniedException", :validation-exception "ValidationException", "NotIndexException" "NotIndexException", :facet-validation-exception "FacetValidationException", "NotNodeException" "NotNodeException", :invalid-next-token-exception "InvalidNextTokenException", :directory-not-enabled-exception "DirectoryNotEnabledException", :access-denied-exception "AccessDeniedException", :not-node-exception "NotNodeException", "InternalServiceException" "InternalServiceException", :invalid-arn-exception "InvalidArnException"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/link-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__56601__auto__] (clojure.core/<= 1 (clojure.core/count s__56601__auto__))) (clojure.core/fn [s__56602__auto__] (clojure.core/< (clojure.core/count s__56602__auto__) 64)) (clojure.core/fn [s__56603__auto__] (clojure.core/re-matches #"[^\/\[\]\(\):\{\}#@!?\s\\;]+" s__56603__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/number-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__56642__56643__auto__] (clojure.core/<= 1 p1__56642__56643__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-directories-response/directories (clojure.spec.alpha/and :portkey.aws.clouddirectory/directory-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-directories-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-directories-response/Directories] :opt-un [:portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.indexed-attribute-missing-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/indexed-attribute-missing-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.indexed-attribute-missing-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/tags-number-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__56642__56643__auto__] (clojure.core/<= 50 p1__56642__56643__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-detach-policy/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-detach-policy (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.batch-detach-policy/PolicyReference :portkey.aws.clouddirectory/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/directory-state (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"ENABLED" "ENABLED", :enabled "ENABLED", "DISABLED" "DISABLED", :disabled "DISABLED", "DELETED" "DELETED", :deleted "DELETED"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/rule-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__56601__auto__] (clojure.core/<= 1 (clojure.core/count s__56601__auto__))) (clojure.core/fn [s__56602__auto__] (clojure.core/< (clojure.core/count s__56602__auto__) 64)) (clojure.core/fn [s__56603__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__56603__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/object-type (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"NODE" "NODE", :node "NODE", "LEAF_NODE" "LEAF_NODE", :leaf-node "LEAF_NODE", "POLICY" "POLICY", :policy "POLICY", "INDEX" "INDEX", :index "INDEX"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/object-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/object-identifier :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.retryable-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/retryable-conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.retryable-conflict-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-typed-link-facet-names-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-typed-link-facet-names-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-typed-link-facet-names-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-typed-link-facet-names-request/SchemaArn] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-typed-link-facet-names-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/consistency-level (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"SERIALIZABLE" "SERIALIZABLE", :serializable "SERIALIZABLE", "EVENTUAL" "EVENTUAL", :eventual "EVENTUAL"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/directory-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__56601__auto__] (clojure.core/<= 1 (clojure.core/count s__56601__auto__))) (clojure.core/fn [s__56602__auto__] (clojure.core/< (clojure.core/count s__56602__auto__) 64)) (clojure.core/fn [s__56603__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__56603__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.detach-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.detach-policy-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/detach-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.detach-policy-request/DirectoryArn :portkey.aws.clouddirectory.detach-policy-request/PolicyReference :portkey.aws.clouddirectory/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.tag/key (clojure.spec.alpha/and :portkey.aws.clouddirectory/tag-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.tag/value (clojure.spec.alpha/and :portkey.aws.clouddirectory/tag-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/tag (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.tag/Key :portkey.aws.clouddirectory.tag/Value]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-object-request/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-object-request/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/create-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.create-object-request/DirectoryArn :portkey.aws.clouddirectory.create-object-request/SchemaFacets] :opt-un [:portkey.aws.clouddirectory.create-object-request/ObjectAttributeList :portkey.aws.clouddirectory.create-object-request/ParentReference :portkey.aws.clouddirectory/LinkName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/version (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__56601__auto__] (clojure.core/<= 1 (clojure.core/count s__56601__auto__))) (clojure.core/fn [s__56602__auto__] (clojure.core/< (clojure.core/count s__56602__auto__) 10)) (clojure.core/fn [s__56603__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__56603__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-create-object/schema-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-create-object/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-create-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-create-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.batch-create-object/SchemaFacet :portkey.aws.clouddirectory.batch-create-object/ObjectAttributeList :portkey.aws.clouddirectory.batch-create-object/ParentReference :portkey.aws.clouddirectory/LinkName :portkey.aws.clouddirectory/BatchReferenceName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-typed-link-facet-attributes-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-typed-link-facet-attributes-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-typed-link-facet-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-typed-link-facet-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-typed-link-facet-attributes-request/SchemaArn :portkey.aws.clouddirectory.list-typed-link-facet-attributes-request/Name] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-typed-link-facet-attributes-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.detach-typed-link-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/detach-typed-link-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.detach-typed-link-request/DirectoryArn :portkey.aws.clouddirectory/TypedLinkSpecifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.directory-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/directory-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.directory-already-exists-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.disable-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/disable-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.disable-directory-response/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.invalid-attachment-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/invalid-attachment-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.invalid-attachment-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.object-already-detached-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/object-already-detached-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.object-already-detached-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.disable-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/disable-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.disable-directory-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-response/responses (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-read-operation-response-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-read-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-read-response/Responses]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-facet-attributes-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-facet-attributes-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-facet-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-facet-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-facet-attributes-request/SchemaArn :portkey.aws.clouddirectory.list-facet-attributes-request/Name] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-facet-attributes-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-detach-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-detach-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.batch-detach-object/ParentReference :portkey.aws.clouddirectory/LinkName :portkey.aws.clouddirectory/BatchReferenceName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-operation-response/successful-response (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-read-successful-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-read-operation-response/exception-response (clojure.spec.alpha/and :portkey.aws.clouddirectory/batch-read-exception))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-read-operation-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-read-operation-response/SuccessfulResponse :portkey.aws.clouddirectory.batch-read-operation-response/ExceptionResponse]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/schema-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__56601__auto__] (clojure.core/<= 1 (clojure.core/count s__56601__auto__))) (clojure.core/fn [s__56602__auto__] (clojure.core/< (clojure.core/count s__56602__auto__) 32)) (clojure.core/fn [s__56603__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__56603__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-attribute-definition/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-attribute-definition/type (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-attribute-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-attribute-definition/default-value (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-attribute-definition/is-immutable (clojure.spec.alpha/and :portkey.aws.clouddirectory/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-attribute-definition/rules (clojure.spec.alpha/and :portkey.aws.clouddirectory/rule-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.typed-link-attribute-definition/required-behavior (clojure.spec.alpha/and :portkey.aws.clouddirectory/required-attribute-behavior))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/typed-link-attribute-definition (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.typed-link-attribute-definition/Name :portkey.aws.clouddirectory.typed-link-attribute-definition/Type :portkey.aws.clouddirectory.typed-link-attribute-definition/RequiredBehavior] :opt-un [:portkey.aws.clouddirectory.typed-link-attribute-definition/DefaultValue :portkey.aws.clouddirectory.typed-link-attribute-definition/IsImmutable :portkey.aws.clouddirectory.typed-link-attribute-definition/Rules]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/string-attribute-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/rule-parameter-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory/rule-parameter-key :portkey.aws.clouddirectory/rule-parameter-value))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-outgoing-typed-links-response/typed-link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-outgoing-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-list-outgoing-typed-links-response/TypedLinkSpecifiers :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-detach-object-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-detach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-detach-object-response/detachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/schema-facet-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/schema-facet :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-detach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.attach-object-request/child-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/attach-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.attach-object-request/DirectoryArn :portkey.aws.clouddirectory.attach-object-request/ParentReference :portkey.aws.clouddirectory.attach-object-request/ChildReference :portkey.aws.clouddirectory/LinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.attribute-key-and-value/key (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.attribute-key-and-value/value (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/attribute-key-and-value (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.attribute-key-and-value/Key :portkey.aws.clouddirectory.attribute-key-and-value/Value] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-applied-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-applied-schema-arns-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-applied-schema-arns-response/SchemaArns :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-attached-indices/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-attached-indices/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-attached-indices (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.batch-list-attached-indices/TargetReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.batch-list-attached-indices/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-list-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-list-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-list-object-attributes-response/Attributes :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.still-contains-links-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/still-contains-links-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.still-contains-links-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/policy-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/add-facet-to-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/delete-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/delete-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/facet-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.facet-already-exists-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.get-schema-as-json-response/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.get-schema-as-json-response/document (clojure.spec.alpha/and :portkey.aws.clouddirectory/schema-json-document))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/get-schema-as-json-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.get-schema-as-json-response/Name :portkey.aws.clouddirectory.get-schema-as-json-response/Document]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.internal-service-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/internal-service-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.internal-service-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.batch-get-object-information-response/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-get-object-information-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.batch-get-object-information-response/SchemaFacets :portkey.aws.clouddirectory/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-typed-link-facet-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory/typed-link-attribute-definition-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-typed-link-facet-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-typed-link-facet-attributes-response/Attributes :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/untag-resource-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.delete-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.delete-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/delete-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.delete-facet-request/SchemaArn :portkey.aws.clouddirectory.delete-facet-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-published-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-published-schema-arns-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-published-schema-arns-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-applied-schema-arns-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-applied-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-applied-schema-arns-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-applied-schema-arns-request/DirectoryArn] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-applied-schema-arns-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-parent-paths-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-object-parent-paths-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-object-parent-paths-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.list-object-parent-paths-request/DirectoryArn :portkey.aws.clouddirectory/ObjectReference] :opt-un [:portkey.aws.clouddirectory/NextToken :portkey.aws.clouddirectory.list-object-parent-paths-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/update-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-attribute-reference/target-facet-name (clojure.spec.alpha/and :portkey.aws.clouddirectory/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.facet-attribute-reference/target-attribute-name (clojure.spec.alpha/and :portkey.aws.clouddirectory/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/facet-attribute-reference (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.facet-attribute-reference/TargetFacetName :portkey.aws.clouddirectory.facet-attribute-reference/TargetAttributeName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.untag-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.untag-resource-request/tag-keys (clojure.spec.alpha/and :portkey.aws.clouddirectory/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/untag-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.untag-resource-request/ResourceArn :portkey.aws.clouddirectory.untag-resource-request/TagKeys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/index-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/index-attachment :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/batch-lookup-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory/PolicyToPathList :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/detach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.list-published-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/list-published-schema-arns-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.list-published-schema-arns-response/SchemaArns :portkey.aws.clouddirectory/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.enable-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/enable-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.enable-directory-response/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/facet-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory/facet-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-directory-response/name (clojure.spec.alpha/and :portkey.aws.clouddirectory/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.create-directory-response/applied-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory/create-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/DirectoryArn :portkey.aws.clouddirectory.create-directory-response/Name :portkey.aws.clouddirectory/ObjectIdentifier :portkey.aws.clouddirectory.create-directory-response/AppliedSchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/get-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory/Directory] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory/rule-type (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"BINARY_LENGTH" "BINARY_LENGTH", :binary-length "BINARY_LENGTH", "NUMBER_COMPARISON" "NUMBER_COMPARISON", :number-comparison "NUMBER_COMPARISON", "STRING_FROM_SET" "STRING_FROM_SET", :string-from-set "STRING_FROM_SET", "STRING_LENGTH" "STRING_LENGTH", :string-length "STRING_LENGTH"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.core/defn tag-resource ([input__56767__auto__] (tag-resource input__56767__auto__ portkey.aws/*http-client*)) ([input58090 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/tags/add"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/TagResourceRequest input58090)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58089] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory/invalid-tagging-request-exception}] (if (clojure.core/= 200 (:status response58089)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/tag-resource-response (:body response58089)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58089 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58089)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58089})))))))))))

(clojure.core/defn list-object-policies ([input__56767__auto__] (list-object-policies input__56767__auto__ portkey.aws/*http-client*)) ([input58092 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/policy"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListObjectPoliciesRequest input58092)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58091] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58091)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-object-policies-response (:body response58091)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58091 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58091)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58091})))))))))))

(clojure.core/defn create-index ([input__56767__auto__] (create-index input__56767__auto__ portkey.aws/*http-client*)) ([input58094 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/index"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/CreateIndexRequest input58094)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58093] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "UnsupportedIndexTypeException" :portkey.aws.clouddirectory/unsupported-index-type-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58093)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/create-index-response (:body response58093)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58093 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58093)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58093})))))))))))

(clojure.core/defn list-object-parent-paths ([input__56767__auto__] (list-object-parent-paths input__56767__auto__ portkey.aws/*http-client*)) ([input58096 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/parentpaths"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListObjectParentPathsRequest input58096)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58095] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58095)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-object-parent-paths-response (:body response58095)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58095 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58095)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58095})))))))))))

(clojure.core/defn put-schema-from-json ([input__56767__auto__] (put-schema-from-json input__56767__auto__ portkey.aws/*http-client*)) ([input58098 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/json"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/PutSchemaFromJsonRequest input58098)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58097] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "InvalidSchemaDocException" :portkey.aws.clouddirectory/invalid-schema-doc-exception, "InvalidRuleException" :portkey.aws.clouddirectory/invalid-rule-exception}] (if (clojure.core/= 200 (:status response58097)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/put-schema-from-json-response (:body response58097)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58097 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58097)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58097})))))))))))

(clojure.core/defn create-object ([input__56767__auto__] (create-object input__56767__auto__ portkey.aws/*http-client*)) ([input58100 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/CreateObjectRequest input58100)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58099] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "UnsupportedIndexTypeException" :portkey.aws.clouddirectory/unsupported-index-type-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58099)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/create-object-response (:body response58099)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58099 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58099)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58099})))))))))))

(clojure.core/defn detach-policy ([input__56767__auto__] (detach-policy input__56767__auto__ portkey.aws/*http-client*)) ([input58102 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/policy/detach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/DetachPolicyRequest input58102)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58101] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58101)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/detach-policy-response (:body response58101)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58101 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58101)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58101})))))))))))

(clojure.core/defn delete-directory ([input__56767__auto__] (delete-directory input__56767__auto__ portkey.aws/*http-client*)) ([input58104 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/directory"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/DeleteDirectoryRequest input58104)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58103] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "DirectoryNotDisabledException" :portkey.aws.clouddirectory/directory-not-disabled-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory/directory-deleted-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58103)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/delete-directory-response (:body response58103)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58103 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58103)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58103})))))))))))

(clojure.core/defn batch-write ([input__56767__auto__] (batch-write input__56767__auto__ portkey.aws/*http-client*)) ([input58106 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/batchwrite"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/BatchWriteRequest input58106)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58105] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "BatchWriteException" :portkey.aws.clouddirectory/batch-write-exception}] (if (clojure.core/= 200 (:status response58105)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/batch-write-response (:body response58105)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58105 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58105)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58105})))))))))))

(clojure.core/defn list-typed-link-facet-names ([input__56767__auto__] (list-typed-link-facet-names input__56767__auto__ portkey.aws/*http-client*)) ([input58108 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/facet/list"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListTypedLinkFacetNamesRequest input58108)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58107] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response58107)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-typed-link-facet-names-response (:body response58107)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58107 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58107)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58107})))))))))))

(clojure.core/defn batch-read ([input__56767__auto__] (batch-read input__56767__auto__ portkey.aws/*http-client*)) ([input58110 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/batchread"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/BatchReadRequest input58110)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58109] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception}] (if (clojure.core/= 200 (:status response58109)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/batch-read-response (:body response58109)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58109 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58109)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58109})))))))))))

(clojure.core/defn list-incoming-typed-links ([input__56767__auto__] (list-incoming-typed-links input__56767__auto__ portkey.aws/*http-client*)) ([input58112 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/incoming"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListIncomingTypedLinksRequest input58112)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58111] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58111)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-incoming-typed-links-response (:body response58111)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58111 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58111)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58111})))))))))))

(clojure.core/defn list-development-schema-arns ([input__56767__auto__] (list-development-schema-arns input__56767__auto__ portkey.aws/*http-client*)) ([input58114 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/development"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListDevelopmentSchemaArnsRequest input58114)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58113] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response58113)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-development-schema-arns-response (:body response58113)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58113 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58113)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58113})))))))))))

(clojure.core/defn delete-schema ([input__56767__auto__] (delete-schema input__56767__auto__ portkey.aws/*http-client*)) ([input58116 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/DeleteSchemaRequest input58116)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58115] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "StillContainsLinksException" :portkey.aws.clouddirectory/still-contains-links-exception}] (if (clojure.core/= 200 (:status response58115)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/delete-schema-response (:body response58115)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58115 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58115)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58115})))))))))))

(clojure.core/defn delete-typed-link-facet ([input__56767__auto__] (delete-typed-link-facet input__56767__auto__ portkey.aws/*http-client*)) ([input58118 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/facet/delete"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/DeleteTypedLinkFacetRequest input58118)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58117] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetNotFoundException" :portkey.aws.clouddirectory/facet-not-found-exception}] (if (clojure.core/= 200 (:status response58117)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/delete-typed-link-facet-response (:body response58117)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58117 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58117)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58117})))))))))))

(clojure.core/defn publish-schema ([input__56767__auto__] (publish-schema input__56767__auto__ portkey.aws/*http-client*)) ([input58120 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/publish"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/PublishSchemaRequest input58120)} (portkey.awsgen/params-to-header {"DevelopmentSchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58119] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "SchemaAlreadyPublishedException" :portkey.aws.clouddirectory/schema-already-published-exception}] (if (clojure.core/= 200 (:status response58119)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/publish-schema-response (:body response58119)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58119 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58119)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58119})))))))))))

(clojure.core/defn disable-directory ([input__56767__auto__] (disable-directory input__56767__auto__ portkey.aws/*http-client*)) ([input58122 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/directory/disable"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/DisableDirectoryRequest input58122)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58121] (clojure.core/let [errors__56772__auto__ {"ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory/directory-deleted-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception}] (if (clojure.core/= 200 (:status response58121)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/disable-directory-response (:body response58121)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58121 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58121)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58121})))))))))))

(clojure.core/defn create-typed-link-facet ([input__56767__auto__] (create-typed-link-facet input__56767__auto__ portkey.aws/*http-client*)) ([input58124 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/facet/create"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/CreateTypedLinkFacetRequest input58124)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58123] (clojure.core/let [errors__56772__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory/invalid-rule-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "FacetAlreadyExistsException" :portkey.aws.clouddirectory/facet-already-exists-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58123)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/create-typed-link-facet-response (:body response58123)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58123 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58123)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58123})))))))))))

(clojure.core/defn create-facet ([input__56767__auto__] (create-facet input__56767__auto__ portkey.aws/*http-client*)) ([input58126 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/facet/create"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/CreateFacetRequest input58126)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58125] (clojure.core/let [errors__56772__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory/invalid-rule-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "FacetAlreadyExistsException" :portkey.aws.clouddirectory/facet-already-exists-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58125)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/create-facet-response (:body response58125)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58125 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58125)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58125})))))))))))

(clojure.core/defn detach-object ([input__56767__auto__] (detach-object input__56767__auto__ portkey.aws/*http-client*)) ([input58128 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/detach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/DetachObjectRequest input58128)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58127] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception}] (if (clojure.core/= 200 (:status response58127)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/detach-object-response (:body response58127)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58127 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58127)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58127})))))))))))

(clojure.core/defn get-object-information ([input__56767__auto__] (get-object-information input__56767__auto__ portkey.aws/*http-client*)) ([input58130 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/information"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/GetObjectInformationRequest input58130)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58129] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception}] (if (clojure.core/= 200 (:status response58129)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/get-object-information-response (:body response58129)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58129 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58129)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58129})))))))))))

(clojure.core/defn list-facet-names ([input__56767__auto__] (list-facet-names input__56767__auto__ portkey.aws/*http-client*)) ([input58132 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/facet/list"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListFacetNamesRequest input58132)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58131] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response58131)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-facet-names-response (:body response58131)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58131 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58131)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58131})))))))))))

(clojure.core/defn detach-from-index ([input__56767__auto__] (detach-from-index input__56767__auto__ portkey.aws/*http-client*)) ([input58134 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/index/detach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/DetachFromIndexRequest input58134)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58133] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory/not-index-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ObjectAlreadyDetachedException" :portkey.aws.clouddirectory/object-already-detached-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58133)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/detach-from-index-response (:body response58133)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58133 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58133)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58133})))))))))))

(clojure.core/defn attach-object ([input__56767__auto__] (attach-object input__56767__auto__ portkey.aws/*http-client*)) ([input58136 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/attach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/AttachObjectRequest input58136)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58135] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58135)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/attach-object-response (:body response58135)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58135 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58135)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58135})))))))))))

(clojure.core/defn list-tags-for-resource ([input__56767__auto__] (list-tags-for-resource input__56767__auto__ portkey.aws/*http-client*)) ([input58138 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/tags"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListTagsForResourceRequest input58138)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58137] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory/invalid-tagging-request-exception}] (if (clojure.core/= 200 (:status response58137)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-tags-for-resource-response (:body response58137)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58137 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58137)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58137})))))))))))

(clojure.core/defn apply-schema ([input__56767__auto__] (apply-schema input__56767__auto__ portkey.aws/*http-client*)) ([input58140 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/apply"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ApplySchemaRequest input58140)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58139] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory/invalid-attachment-exception}] (if (clojure.core/= 200 (:status response58139)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/apply-schema-response (:body response58139)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58139 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58139)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58139})))))))))))

(clojure.core/defn list-policy-attachments ([input__56767__auto__] (list-policy-attachments input__56767__auto__ portkey.aws/*http-client*)) ([input58142 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/policy/attachment"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListPolicyAttachmentsRequest input58142)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58141] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58141)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-policy-attachments-response (:body response58141)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58141 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58141)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58141})))))))))))

(clojure.core/defn list-outgoing-typed-links ([input__56767__auto__] (list-outgoing-typed-links input__56767__auto__ portkey.aws/*http-client*)) ([input58144 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/outgoing"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListOutgoingTypedLinksRequest input58144)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58143] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58143)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-outgoing-typed-links-response (:body response58143)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58143 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58143)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58143})))))))))))

(clojure.core/defn get-facet ([input__56767__auto__] (get-facet input__56767__auto__ portkey.aws/*http-client*)) ([input58146 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/facet"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/GetFacetRequest input58146)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58145] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetNotFoundException" :portkey.aws.clouddirectory/facet-not-found-exception}] (if (clojure.core/= 200 (:status response58145)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/get-facet-response (:body response58145)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58145 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58145)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58145})))))))))))

(clojure.core/defn list-facet-attributes ([input__56767__auto__] (list-facet-attributes input__56767__auto__ portkey.aws/*http-client*)) ([input58148 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/facet/attributes"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListFacetAttributesRequest input58148)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58147] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58147)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-facet-attributes-response (:body response58147)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58147 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58147)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58147})))))))))))

(clojure.core/defn attach-to-index ([input__56767__auto__] (attach-to-index input__56767__auto__ portkey.aws/*http-client*)) ([input58150 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/index/attach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/AttachToIndexRequest input58150)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58149] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory/not-index-exception, "IndexedAttributeMissingException" :portkey.aws.clouddirectory/indexed-attribute-missing-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58149)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/attach-to-index-response (:body response58149)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58149 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58149)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58149})))))))))))

(clojure.core/defn list-directories ([input__56767__auto__] (list-directories input__56767__auto__ portkey.aws/*http-client*)) ([input58152 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/directory/list"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListDirectoriesRequest input58152)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58151] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response58151)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-directories-response (:body response58151)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58151 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58151)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58151})))))))))))

(clojure.core/defn list-object-attributes ([input__56767__auto__] (list-object-attributes input__56767__auto__ portkey.aws/*http-client*)) ([input58154 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/attributes"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListObjectAttributesRequest input58154)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58153] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58153)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-object-attributes-response (:body response58153)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58153 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58153)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58153})))))))))))

(clojure.core/defn list-index ([input__56767__auto__] (list-index input__56767__auto__ portkey.aws/*http-client*)) ([input58156 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/index/targets"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListIndexRequest input58156)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58155] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory/not-index-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58155)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-index-response (:body response58155)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58155 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58155)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58155})))))))))))

(clojure.core/defn attach-typed-link ([input__56767__auto__] (attach-typed-link input__56767__auto__ portkey.aws/*http-client*)) ([input58158 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/attach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/AttachTypedLinkRequest input58158)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58157] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58157)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/attach-typed-link-response (:body response58157)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58157 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58157)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58157})))))))))))

(clojure.core/defn detach-typed-link ([input__56767__auto__] (detach-typed-link input__56767__auto__ portkey.aws/*http-client*)) ([input58160 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/detach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/DetachTypedLinkRequest input58160)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58159] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58159)) true (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58159 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58159)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58159})))))))))))

(clojure.core/defn list-object-children ([input__56767__auto__] (list-object-children input__56767__auto__ portkey.aws/*http-client*)) ([input58162 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/children"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListObjectChildrenRequest input58162)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58161] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "NotNodeException" :portkey.aws.clouddirectory/not-node-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58161)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-object-children-response (:body response58161)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58161 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58161)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58161})))))))))))

(clojure.core/defn update-typed-link-facet ([input__56767__auto__] (update-typed-link-facet input__56767__auto__ portkey.aws/*http-client*)) ([input58164 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/facet"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/UpdateTypedLinkFacetRequest input58164)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58163] (clojure.core/let [errors__56772__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory/invalid-rule-exception, "InvalidFacetUpdateException" :portkey.aws.clouddirectory/invalid-facet-update-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58163)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/update-typed-link-facet-response (:body response58163)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58163 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58163)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58163})))))))))))

(clojure.core/defn add-facet-to-object ([input__56767__auto__] (add-facet-to-object input__56767__auto__ portkey.aws/*http-client*)) ([input58166 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/facets"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/AddFacetToObjectRequest input58166)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58165] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58165)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/add-facet-to-object-response (:body response58165)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58165 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58165)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58165})))))))))))

(clojure.core/defn create-schema ([input__56767__auto__] (create-schema input__56767__auto__ portkey.aws/*http-client*)) ([input58168 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/create"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/CreateSchemaRequest input58168)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58167] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "SchemaAlreadyExistsException" :portkey.aws.clouddirectory/schema-already-exists-exception}] (if (clojure.core/= 200 (:status response58167)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/create-schema-response (:body response58167)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58167 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58167)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58167})))))))))))

(clojure.core/defn update-object-attributes ([input__56767__auto__] (update-object-attributes input__56767__auto__ portkey.aws/*http-client*)) ([input58170 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/update"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/UpdateObjectAttributesRequest input58170)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58169] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58169)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/update-object-attributes-response (:body response58169)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58169 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58169)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58169})))))))))))

(clojure.core/defn delete-object ([input__56767__auto__] (delete-object input__56767__auto__ portkey.aws/*http-client*)) ([input58172 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/delete"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/DeleteObjectRequest input58172)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58171] (clojure.core/let [errors__56772__auto__ {"ObjectNotDetachedException" :portkey.aws.clouddirectory/object-not-detached-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58171)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/delete-object-response (:body response58171)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58171 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58171)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58171})))))))))))

(clojure.core/defn list-object-parents ([input__56767__auto__] (list-object-parents input__56767__auto__ portkey.aws/*http-client*)) ([input58174 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/parent"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListObjectParentsRequest input58174)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58173] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "CannotListParentOfRootException" :portkey.aws.clouddirectory/cannot-list-parent-of-root-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58173)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-object-parents-response (:body response58173)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58173 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58173)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58173})))))))))))

(clojure.core/defn update-schema ([input__56767__auto__] (update-schema input__56767__auto__ portkey.aws/*http-client*)) ([input58176 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/update"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/UpdateSchemaRequest input58176)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58175] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception}] (if (clojure.core/= 200 (:status response58175)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/update-schema-response (:body response58175)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58175 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58175)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58175})))))))))))

(clojure.core/defn untag-resource ([input__56767__auto__] (untag-resource input__56767__auto__ portkey.aws/*http-client*)) ([input58178 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/tags/remove"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/UntagResourceRequest input58178)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58177] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory/invalid-tagging-request-exception}] (if (clojure.core/= 200 (:status response58177)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/untag-resource-response (:body response58177)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58177 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58177)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58177})))))))))))

(clojure.core/defn update-facet ([input__56767__auto__] (update-facet input__56767__auto__ portkey.aws/*http-client*)) ([input58180 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/facet"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/UpdateFacetRequest input58180)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58179] (clojure.core/let [errors__56772__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory/invalid-rule-exception, "InvalidFacetUpdateException" :portkey.aws.clouddirectory/invalid-facet-update-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58179)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/update-facet-response (:body response58179)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58179 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58179)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58179})))))))))))

(clojure.core/defn list-applied-schema-arns ([input__56767__auto__] (list-applied-schema-arns input__56767__auto__ portkey.aws/*http-client*)) ([input58182 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/applied"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListAppliedSchemaArnsRequest input58182)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58181] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response58181)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-applied-schema-arns-response (:body response58181)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58181 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58181)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58181})))))))))))

(clojure.core/defn create-directory ([input__56767__auto__] (create-directory input__56767__auto__ portkey.aws/*http-client*)) ([input58184 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/directory/create"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/CreateDirectoryRequest input58184)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58183] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "DirectoryAlreadyExistsException" :portkey.aws.clouddirectory/directory-already-exists-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception}] (if (clojure.core/= 200 (:status response58183)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/create-directory-response (:body response58183)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58183 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58183)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58183})))))))))))

(clojure.core/defn get-schema-as-json ([input__56767__auto__] (get-schema-as-json input__56767__auto__ portkey.aws/*http-client*)) ([input58186 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/json"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/GetSchemaAsJsonRequest input58186)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58185] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception}] (if (clojure.core/= 200 (:status response58185)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/get-schema-as-json-response (:body response58185)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58185 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58185)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58185})))))))))))

(clojure.core/defn list-attached-indices ([input__56767__auto__] (list-attached-indices input__56767__auto__ portkey.aws/*http-client*)) ([input58188 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/indices"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListAttachedIndicesRequest input58188)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58187] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception}] (if (clojure.core/= 200 (:status response58187)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-attached-indices-response (:body response58187)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58187 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58187)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58187})))))))))))

(clojure.core/defn attach-policy ([input__56767__auto__] (attach-policy input__56767__auto__ portkey.aws/*http-client*)) ([input58190 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/policy/attach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/AttachPolicyRequest input58190)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58189] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58189)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/attach-policy-response (:body response58189)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58189 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58189)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58189})))))))))))

(clojure.core/defn get-typed-link-facet-information ([input__56767__auto__] (get-typed-link-facet-information input__56767__auto__ portkey.aws/*http-client*)) ([input58192 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/facet/get"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/GetTypedLinkFacetInformationRequest input58192)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58191] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58191)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/get-typed-link-facet-information-response (:body response58191)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58191 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58191)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58191})))))))))))

(clojure.core/defn lookup-policy ([input__56767__auto__] (lookup-policy input__56767__auto__ portkey.aws/*http-client*)) ([input58194 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/policy/lookup"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/LookupPolicyRequest input58194)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58193] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58193)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/lookup-policy-response (:body response58193)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58193 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58193)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58193})))))))))))

(clojure.core/defn get-directory ([input__56767__auto__] (get-directory input__56767__auto__ portkey.aws/*http-client*)) ([input58196 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/directory/get"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/GetDirectoryRequest input58196)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58195] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception}] (if (clojure.core/= 200 (:status response58195)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/get-directory-response (:body response58195)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58195 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58195)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58195})))))))))))

(clojure.core/defn list-published-schema-arns ([input__56767__auto__] (list-published-schema-arns input__56767__auto__ portkey.aws/*http-client*)) ([input58198 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/published"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListPublishedSchemaArnsRequest input58198)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58197] (clojure.core/let [errors__56772__auto__ {"InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response58197)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-published-schema-arns-response (:body response58197)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58197 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58197)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58197})))))))))))

(clojure.core/defn list-typed-link-facet-attributes ([input__56767__auto__] (list-typed-link-facet-attributes input__56767__auto__ portkey.aws/*http-client*)) ([input58200 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/facet/attributes"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/ListTypedLinkFacetAttributesRequest input58200)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58199] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58199)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/list-typed-link-facet-attributes-response (:body response58199)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58199 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58199)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58199})))))))))))

(clojure.core/defn enable-directory ([input__56767__auto__] (enable-directory input__56767__auto__ portkey.aws/*http-client*)) ([input58202 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/directory/enable"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/EnableDirectoryRequest input58202)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58201] (clojure.core/let [errors__56772__auto__ {"ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory/directory-deleted-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception, "ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception}] (if (clojure.core/= 200 (:status response58201)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/enable-directory-response (:body response58201)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58201 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58201)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58201})))))))))))

(clojure.core/defn delete-facet ([input__56767__auto__] (delete-facet input__56767__auto__ portkey.aws/*http-client*)) ([input58204 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/facet/delete"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/DeleteFacetRequest input58204)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58203] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "FacetInUseException" :portkey.aws.clouddirectory/facet-in-use-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58203)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/delete-facet-response (:body response58203)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58203 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58203)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58203})))))))))))

(clojure.core/defn remove-facet-from-object ([input__56767__auto__] (remove-facet-from-object input__56767__auto__ portkey.aws/*http-client*)) ([input58206 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.clouddirectory/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/facets/delete"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory/RemoveFacetFromObjectRequest input58206)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58205] (clojure.core/let [errors__56772__auto__ {"ValidationException" :portkey.aws.clouddirectory/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory/internal-service-exception}] (if (clojure.core/= 200 (:status response58205)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory/remove-facet-from-object-response (:body response58205)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58205 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58205)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58205})))))))))))
