(ns portkey.aws.glacier.-2012-06-01 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credentialScope {"service" "glacier", "region" "ap-northeast-1"},
    :sslCommonName "glacier.ap-northeast-1.amazonaws.com",
    :endpoint "https://glacier.ap-northeast-1.amazonaws.com"},
   "eu-west-1"
   {:credentialScope {"service" "glacier", "region" "eu-west-1"},
    :sslCommonName "glacier.eu-west-1.amazonaws.com",
    :endpoint "https://glacier.eu-west-1.amazonaws.com"},
   "us-east-2"
   {:credentialScope {"service" "glacier", "region" "us-east-2"},
    :sslCommonName "glacier.us-east-2.amazonaws.com",
    :endpoint "https://glacier.us-east-2.amazonaws.com"},
   "ap-southeast-2"
   {:credentialScope {"service" "glacier", "region" "ap-southeast-2"},
    :sslCommonName "glacier.ap-southeast-2.amazonaws.com",
    :endpoint "https://glacier.ap-southeast-2.amazonaws.com"},
   "cn-north-1"
   {:credentialScope {"service" "glacier", "region" "cn-north-1"},
    :sslCommonName "glacier.cn-north-1.amazonaws.com.cn",
    :endpoint "https://glacier.cn-north-1.amazonaws.com.cn"},
   "ap-northeast-2"
   {:credentialScope {"service" "glacier", "region" "ap-northeast-2"},
    :sslCommonName "glacier.ap-northeast-2.amazonaws.com",
    :endpoint "https://glacier.ap-northeast-2.amazonaws.com"},
   "ca-central-1"
   {:credentialScope {"service" "glacier", "region" "ca-central-1"},
    :sslCommonName "glacier.ca-central-1.amazonaws.com",
    :endpoint "https://glacier.ca-central-1.amazonaws.com"},
   "eu-central-1"
   {:credentialScope {"service" "glacier", "region" "eu-central-1"},
    :sslCommonName "glacier.eu-central-1.amazonaws.com",
    :endpoint "https://glacier.eu-central-1.amazonaws.com"},
   "eu-west-2"
   {:credentialScope {"service" "glacier", "region" "eu-west-2"},
    :sslCommonName "glacier.eu-west-2.amazonaws.com",
    :endpoint "https://glacier.eu-west-2.amazonaws.com"},
   "us-gov-west-1"
   {:credentialScope {"service" "glacier", "region" "us-gov-west-1"},
    :sslCommonName "glacier.us-gov-west-1.amazonaws.com",
    :endpoint "https://glacier.us-gov-west-1.amazonaws.com"},
   "us-west-2"
   {:credentialScope {"service" "glacier", "region" "us-west-2"},
    :sslCommonName "glacier.us-west-2.amazonaws.com",
    :endpoint "https://glacier.us-west-2.amazonaws.com"},
   "us-east-1"
   {:credentialScope {"service" "glacier", "region" "us-east-1"},
    :sslCommonName "glacier.us-east-1.amazonaws.com",
    :endpoint "https://glacier.us-east-1.amazonaws.com"},
   "us-west-1"
   {:credentialScope {"service" "glacier", "region" "us-west-1"},
    :sslCommonName "glacier.us-west-1.amazonaws.com",
    :endpoint "https://glacier.us-west-1.amazonaws.com"},
   "ap-south-1"
   {:credentialScope {"service" "glacier", "region" "ap-south-1"},
    :sslCommonName "glacier.ap-south-1.amazonaws.com",
    :endpoint "https://glacier.ap-south-1.amazonaws.com"}})

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/limit (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-multipart-uploads-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/accountId :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/marker :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/limit]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.provisioned-capacity-description/capacity-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.provisioned-capacity-description/start-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.provisioned-capacity-description/expiration-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/provisioned-capacity-description (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.provisioned-capacity-description/CapacityId :portkey.aws.glacier.-2012-06-01.provisioned-capacity-description/StartDate :portkey.aws.glacier.-2012-06-01.provisioned-capacity-description/ExpirationDate]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-vault-access-policy-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-vault-access-policy-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-vault-access-policy-input/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/vault-access-policy))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/set-vault-access-policy-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.set-vault-access-policy-input/accountId :portkey.aws.glacier.-2012-06-01.set-vault-access-policy-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.set-vault-access-policy-input/policy]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-input/job-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-input/range (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-job-output-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.get-job-output-input/accountId :portkey.aws.glacier.-2012-06-01.get-job-output-input/vaultName :portkey.aws.glacier.-2012-06-01.get-job-output-input/jobId] :opt-un [:portkey.aws.glacier.-2012-06-01.get-job-output-input/range]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.data-retrieval-rule/strategy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.data-retrieval-rule/bytes-per-hour (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/nullable-long))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/data-retrieval-rule (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.data-retrieval-rule/Strategy :portkey.aws.glacier.-2012-06-01.data-retrieval-rule/BytesPerHour]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/uploads-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/upload-list-element :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.create-vault-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.create-vault-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/create-vault-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.create-vault-input/accountId :portkey.aws.glacier.-2012-06-01.create-vault-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-output/body (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/stream))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-output/checksum (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-output/status (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/httpstatus))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-output/content-range (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-output/accept-ranges (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-output/content-type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-output/archive-description (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-job-output-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.get-job-output-output/body :portkey.aws.glacier.-2012-06-01.get-job-output-output/checksum :portkey.aws.glacier.-2012-06-01.get-job-output-output/status :portkey.aws.glacier.-2012-06-01.get-job-output-output/contentRange :portkey.aws.glacier.-2012-06-01.get-job-output-output/acceptRanges :portkey.aws.glacier.-2012-06-01.get-job-output-output/contentType :portkey.aws.glacier.-2012-06-01.get-job-output-output/archiveDescription]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/archive-description (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/part-size (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/initiate-multipart-upload-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/accountId :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/archiveDescription :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/partSize]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-vault-lock-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-vault-lock-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-vault-lock-input/lock-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/complete-vault-lock-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.complete-vault-lock-input/accountId :portkey.aws.glacier.-2012-06-01.complete-vault-lock-input/vaultName :portkey.aws.glacier.-2012-06-01.complete-vault-lock-input/lockId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.part-list-element/range-in-bytes (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.part-list-element/sha256-tree-hash (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/part-list-element (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.part-list-element/RangeInBytes :portkey.aws.glacier.-2012-06-01.part-list-element/SHA256TreeHash]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.vault-access-policy/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/vault-access-policy (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.vault-access-policy/Policy]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/job-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/glacier-job-description :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/upload-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/archive-size (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/checksum (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/complete-multipart-upload-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/accountId :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/vaultName :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/uploadId] :opt-un [:portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/archiveSize :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/checksum]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/status-code (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"InProgress" "InProgress", :in-progress "InProgress", "Succeeded" "Succeeded", :succeeded "Succeeded", "Failed" "Failed", :failed "Failed"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-output/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-multipart-uploads-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01/UploadsList :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-output/Marker]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.create-vault-output/location (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/create-vault-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.create-vault-output/location]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-provisioned-capacity-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-provisioned-capacity-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.list-provisioned-capacity-input/accountId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.purchase-provisioned-capacity-output/capacity-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/purchase-provisioned-capacity-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.purchase-provisioned-capacity-output/capacityId]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/tag-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-data-retrieval-policy-output/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/data-retrieval-policy))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-data-retrieval-policy-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.get-data-retrieval-policy-output/Policy]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/format (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/start-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/date-time))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/end-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/date-time))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/limit (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/inventory-retrieval-job-description (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/Format :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/StartDate :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/EndDate :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/Limit :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/Marker]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.limit-exceeded-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.limit-exceeded-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.limit-exceeded-exception/type :portkey.aws.glacier.-2012-06-01.limit-exceeded-exception/code :portkey.aws.glacier.-2012-06-01.limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-archive-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-archive-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-archive-input/archive-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/delete-archive-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.delete-archive-input/accountId :portkey.aws.glacier.-2012-06-01.delete-archive-input/vaultName :portkey.aws.glacier.-2012-06-01.delete-archive-input/archiveId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-data-retrieval-policy-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-data-retrieval-policy-input/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/data-retrieval-policy))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/set-data-retrieval-policy-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.set-data-retrieval-policy-input/accountId] :opt-un [:portkey.aws.glacier.-2012-06-01.set-data-retrieval-policy-input/Policy]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-lock-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-lock-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-vault-lock-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.get-vault-lock-input/accountId :portkey.aws.glacier.-2012-06-01.get-vault-lock-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.vault-notification-config/snstopic (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.vault-notification-config/events (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/notification-event-list))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/vault-notification-config (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.vault-notification-config/SNSTopic :portkey.aws.glacier.-2012-06-01.vault-notification-config/Events]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/provisioned-capacity-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/provisioned-capacity-description :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-output/multipart-upload-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-output/vaultarn (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-output/archive-description (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-output/part-size-in-bytes (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/long))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-output/creation-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-output/parts (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/part-list))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-output/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-parts-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.list-parts-output/MultipartUploadId :portkey.aws.glacier.-2012-06-01.list-parts-output/VaultARN :portkey.aws.glacier.-2012-06-01.list-parts-output/ArchiveDescription :portkey.aws.glacier.-2012-06-01.list-parts-output/PartSizeInBytes :portkey.aws.glacier.-2012-06-01.list-parts-output/CreationDate :portkey.aws.glacier.-2012-06-01.list-parts-output/Parts :portkey.aws.glacier.-2012-06-01.list-parts-output/Marker]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-jobs-output/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-jobs-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01/JobList :portkey.aws.glacier.-2012-06-01.list-jobs-output/Marker]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/vault-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/describe-vault-output :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.service-unavailable-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.service-unavailable-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.service-unavailable-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/service-unavailable-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.service-unavailable-exception/type :portkey.aws.glacier.-2012-06-01.service-unavailable-exception/code :portkey.aws.glacier.-2012-06-01.service-unavailable-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/upload-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/checksum (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/range (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/body (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/stream))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/upload-multipart-part-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/accountId :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/vaultName :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/uploadId] :opt-un [:portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/checksum :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/range :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/body]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-vault-lock-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-vault-lock-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-vault-lock-input/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/vault-lock-policy))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/initiate-vault-lock-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.initiate-vault-lock-input/accountId :portkey.aws.glacier.-2012-06-01.initiate-vault-lock-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.initiate-vault-lock-input/policy]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.data-retrieval-policy/rules (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/data-retrieval-rules-list))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/data-retrieval-policy (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.data-retrieval-policy/Rules]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/action-code (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"ArchiveRetrieval" "ArchiveRetrieval", :archive-retrieval "ArchiveRetrieval", "InventoryRetrieval" "InventoryRetrieval", :inventory-retrieval "InventoryRetrieval"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-vault-access-policy-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-vault-access-policy-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/delete-vault-access-policy-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.delete-vault-access-policy-input/accountId :portkey.aws.glacier.-2012-06-01.delete-vault-access-policy-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-tags-for-vault-output/tags (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/tag-map))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-tags-for-vault-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.list-tags-for-vault-output/Tags]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-notifications-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-notifications-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-vault-notifications-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.get-vault-notifications-input/accountId :portkey.aws.glacier.-2012-06-01.get-vault-notifications-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-data-retrieval-policy-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-data-retrieval-policy-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.get-data-retrieval-policy-input/accountId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.abort-multipart-upload-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.abort-multipart-upload-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.abort-multipart-upload-input/upload-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/abort-multipart-upload-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.abort-multipart-upload-input/accountId :portkey.aws.glacier.-2012-06-01.abort-multipart-upload-input/vaultName :portkey.aws.glacier.-2012-06-01.abort-multipart-upload-input/uploadId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/tag-key-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-access-policy-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-access-policy-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-vault-access-policy-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.get-vault-access-policy-input/accountId :portkey.aws.glacier.-2012-06-01.get-vault-access-policy-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-vault-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-vault-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/delete-vault-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.delete-vault-input/accountId :portkey.aws.glacier.-2012-06-01.delete-vault-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.resource-not-found-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.resource-not-found-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/resource-not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.resource-not-found-exception/type :portkey.aws.glacier.-2012-06-01.resource-not-found-exception/code :portkey.aws.glacier.-2012-06-01.resource-not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.policy-enforced-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.policy-enforced-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.policy-enforced-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/policy-enforced-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.policy-enforced-exception/type :portkey.aws.glacier.-2012-06-01.policy-enforced-exception/code :portkey.aws.glacier.-2012-06-01.policy-enforced-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/nullable-long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.purchase-provisioned-capacity-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/purchase-provisioned-capacity-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.purchase-provisioned-capacity-input/accountId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-output/vaultarn (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-output/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-output/creation-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-output/last-inventory-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-output/number-of-archives (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/long))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-output/size-in-bytes (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/long))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/describe-vault-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.describe-vault-output/VaultARN :portkey.aws.glacier.-2012-06-01.describe-vault-output/VaultName :portkey.aws.glacier.-2012-06-01.describe-vault-output/CreationDate :portkey.aws.glacier.-2012-06-01.describe-vault-output/LastInventoryDate :portkey.aws.glacier.-2012-06-01.describe-vault-output/NumberOfArchives :portkey.aws.glacier.-2012-06-01.describe-vault-output/SizeInBytes]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/tag-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.vault-lock-policy/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/vault-lock-policy (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.vault-lock-policy/Policy]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-lock-output/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-lock-output/state (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-lock-output/expiration-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-lock-output/creation-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-vault-lock-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.get-vault-lock-output/Policy :portkey.aws.glacier.-2012-06-01.get-vault-lock-output/State :portkey.aws.glacier.-2012-06-01.get-vault-lock-output/ExpirationDate :portkey.aws.glacier.-2012-06-01.get-vault-lock-output/CreationDate]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.add-tags-to-vault-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.add-tags-to-vault-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.add-tags-to-vault-input/tags (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/tag-map))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/add-tags-to-vault-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.add-tags-to-vault-input/accountId :portkey.aws.glacier.-2012-06-01.add-tags-to-vault-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.add-tags-to-vault-input/Tags]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-job-output/location (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-job-output/job-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/initiate-job-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.initiate-job-output/location :portkey.aws.glacier.-2012-06-01.initiate-job-output/jobId]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-notifications-output/vault-notification-config (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/vault-notification-config))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-vault-notifications-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.get-vault-notifications-output/vaultNotificationConfig]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-jobs-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-jobs-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-jobs-input/limit (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-jobs-input/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-jobs-input/statuscode (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-jobs-input/completed (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-jobs-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.list-jobs-input/accountId :portkey.aws.glacier.-2012-06-01.list-jobs-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.list-jobs-input/limit :portkey.aws.glacier.-2012-06-01.list-jobs-input/marker :portkey.aws.glacier.-2012-06-01.list-jobs-input/statuscode :portkey.aws.glacier.-2012-06-01.list-jobs-input/completed]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/part-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/part-list-element :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/tag-map (clojure.spec.alpha/map-of :portkey.aws.glacier.-2012-06-01/tag-key :portkey.aws.glacier.-2012-06-01/tag-value))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/size clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.request-timeout-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.request-timeout-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.request-timeout-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/request-timeout-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.request-timeout-exception/type :portkey.aws.glacier.-2012-06-01.request-timeout-exception/code :portkey.aws.glacier.-2012-06-01.request-timeout-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-list-element/multipart-upload-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-list-element/vaultarn (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-list-element/archive-description (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-list-element/part-size-in-bytes (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/long))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-list-element/creation-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/upload-list-element (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.upload-list-element/MultipartUploadId :portkey.aws.glacier.-2012-06-01.upload-list-element/VaultARN :portkey.aws.glacier.-2012-06-01.upload-list-element/ArchiveDescription :portkey.aws.glacier.-2012-06-01.upload-list-element/PartSizeInBytes :portkey.aws.glacier.-2012-06-01.upload-list-element/CreationDate]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-vaults-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-vaults-input/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-vaults-input/limit (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-vaults-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.list-vaults-input/accountId] :opt-un [:portkey.aws.glacier.-2012-06-01.list-vaults-input/marker :portkey.aws.glacier.-2012-06-01.list-vaults-input/limit]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/stream (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.awsgen/base64-encode portkey.awsgen/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-job-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-job-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-job-input/job-parameters (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/job-parameters))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/initiate-job-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.initiate-job-input/accountId :portkey.aws.glacier.-2012-06-01.initiate-job-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.initiate-job-input/jobParameters]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-vault-lock-output/lock-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/initiate-vault-lock-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.initiate-vault-lock-output/lockId]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/describe-vault-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.describe-vault-input/accountId :portkey.aws.glacier.-2012-06-01.describe-vault-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.remove-tags-from-vault-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.remove-tags-from-vault-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.remove-tags-from-vault-input/tag-keys (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/remove-tags-from-vault-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.remove-tags-from-vault-input/accountId :portkey.aws.glacier.-2012-06-01.remove-tags-from-vault-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.remove-tags-from-vault-input/TagKeys]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-tags-for-vault-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-tags-for-vault-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-tags-for-vault-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.list-tags-for-vault-input/accountId :portkey.aws.glacier.-2012-06-01.list-tags-for-vault-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.insufficient-capacity-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.insufficient-capacity-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.insufficient-capacity-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/insufficient-capacity-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.insufficient-capacity-exception/type :portkey.aws.glacier.-2012-06-01.insufficient-capacity-exception/code :portkey.aws.glacier.-2012-06-01.insufficient-capacity-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-vault-notifications-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-vault-notifications-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/delete-vault-notifications-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.delete-vault-notifications-input/accountId :portkey.aws.glacier.-2012-06-01.delete-vault-notifications-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-job-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-job-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-job-input/job-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/describe-job-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.describe-job-input/accountId :portkey.aws.glacier.-2012-06-01.describe-job-input/vaultName :portkey.aws.glacier.-2012-06-01.describe-job-input/jobId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/tier (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/completion-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/archive-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/status-message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/archive-size-in-bytes (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/size))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/snstopic (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/vaultarn (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/inventory-retrieval-parameters (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/inventory-retrieval-job-description))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/archivesha256-tree-hash (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/sha256-tree-hash (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/creation-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/inventory-size-in-bytes (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/size))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/completed (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/boolean))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/action (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/action-code))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/job-description (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/retrieval-byte-range (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/job-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/glacier-job-description (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.glacier-job-description/Tier :portkey.aws.glacier.-2012-06-01.glacier-job-description/CompletionDate :portkey.aws.glacier.-2012-06-01/StatusCode :portkey.aws.glacier.-2012-06-01.glacier-job-description/ArchiveId :portkey.aws.glacier.-2012-06-01.glacier-job-description/StatusMessage :portkey.aws.glacier.-2012-06-01.glacier-job-description/ArchiveSizeInBytes :portkey.aws.glacier.-2012-06-01.glacier-job-description/SNSTopic :portkey.aws.glacier.-2012-06-01.glacier-job-description/VaultARN :portkey.aws.glacier.-2012-06-01.glacier-job-description/InventoryRetrievalParameters :portkey.aws.glacier.-2012-06-01.glacier-job-description/ArchiveSHA256TreeHash :portkey.aws.glacier.-2012-06-01.glacier-job-description/SHA256TreeHash :portkey.aws.glacier.-2012-06-01.glacier-job-description/CreationDate :portkey.aws.glacier.-2012-06-01.glacier-job-description/InventorySizeInBytes :portkey.aws.glacier.-2012-06-01.glacier-job-description/Completed :portkey.aws.glacier.-2012-06-01.glacier-job-description/Action :portkey.aws.glacier.-2012-06-01.glacier-job-description/JobDescription :portkey.aws.glacier.-2012-06-01.glacier-job-description/RetrievalByteRange :portkey.aws.glacier.-2012-06-01.glacier-job-description/JobId]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.missing-parameter-value-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.missing-parameter-value-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.missing-parameter-value-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.missing-parameter-value-exception/type :portkey.aws.glacier.-2012-06-01.missing-parameter-value-exception/code :portkey.aws.glacier.-2012-06-01.missing-parameter-value-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-output/location (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-output/upload-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/initiate-multipart-upload-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-output/location :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-output/uploadId]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-input/upload-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-input/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-input/limit (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-parts-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.list-parts-input/accountId :portkey.aws.glacier.-2012-06-01.list-parts-input/vaultName :portkey.aws.glacier.-2012-06-01.list-parts-input/uploadId] :opt-un [:portkey.aws.glacier.-2012-06-01.list-parts-input/marker :portkey.aws.glacier.-2012-06-01.list-parts-input/limit]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-access-policy-output/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/vault-access-policy))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-vault-access-policy-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.get-vault-access-policy-output/policy]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.archive-creation-output/location (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.archive-creation-output/checksum (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.archive-creation-output/archive-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/archive-creation-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.archive-creation-output/location :portkey.aws.glacier.-2012-06-01.archive-creation-output/checksum :portkey.aws.glacier.-2012-06-01.archive-creation-output/archiveId]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-provisioned-capacity-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01/ProvisionedCapacityList]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/start-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/end-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/limit (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/inventory-retrieval-job-input (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/StartDate :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/EndDate :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/Limit :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/Marker]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-multipart-part-output/checksum (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/upload-multipart-part-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.upload-multipart-part-output/checksum]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-archive-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-archive-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-archive-input/archive-description (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-archive-input/checksum (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-archive-input/body (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/stream))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/upload-archive-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.upload-archive-input/vaultName :portkey.aws.glacier.-2012-06-01.upload-archive-input/accountId] :opt-un [:portkey.aws.glacier.-2012-06-01.upload-archive-input/archiveDescription :portkey.aws.glacier.-2012-06-01.upload-archive-input/checksum :portkey.aws.glacier.-2012-06-01.upload-archive-input/body]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/data-retrieval-rules-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/data-retrieval-rule :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.invalid-parameter-value-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.invalid-parameter-value-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.invalid-parameter-value-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.invalid-parameter-value-exception/type :portkey.aws.glacier.-2012-06-01.invalid-parameter-value-exception/code :portkey.aws.glacier.-2012-06-01.invalid-parameter-value-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.abort-vault-lock-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.abort-vault-lock-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/abort-vault-lock-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.abort-vault-lock-input/accountId :portkey.aws.glacier.-2012-06-01.abort-vault-lock-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-vaults-output/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-vaults-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01/VaultList :portkey.aws.glacier.-2012-06-01.list-vaults-output/Marker]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/format (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/archive-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/description (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/snstopic (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/retrieval-byte-range (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/tier (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/inventory-retrieval-parameters (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/inventory-retrieval-job-input))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/job-parameters (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.job-parameters/Format :portkey.aws.glacier.-2012-06-01.job-parameters/Type :portkey.aws.glacier.-2012-06-01.job-parameters/ArchiveId :portkey.aws.glacier.-2012-06-01.job-parameters/Description :portkey.aws.glacier.-2012-06-01.job-parameters/SNSTopic :portkey.aws.glacier.-2012-06-01.job-parameters/RetrievalByteRange :portkey.aws.glacier.-2012-06-01.job-parameters/Tier :portkey.aws.glacier.-2012-06-01.job-parameters/InventoryRetrievalParameters]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-vault-notifications-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-vault-notifications-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-vault-notifications-input/vault-notification-config (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/vault-notification-config))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/set-vault-notifications-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.set-vault-notifications-input/accountId :portkey.aws.glacier.-2012-06-01.set-vault-notifications-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.set-vault-notifications-input/vaultNotificationConfig]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/notification-event-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/httpstatus (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/date-time (clojure.spec.alpha/and clojure.core/string?))

(clojure.core/defn initiate-multipart-upload ([input__47307__auto__] (initiate-multipart-upload input__47307__auto__ portkey.aws/*http-client*)) ([input47935 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/multipart-uploads"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/InitiateMultipartUploadInput input47935)} (portkey.awsgen/params-to-header {"archiveDescription" ["x-amz-archive-description" nil], "partSize" ["x-amz-part-size" nil]}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47934] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 201 (:status response47934)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/initiate-multipart-upload-output (:body response47934)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47934 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47934)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47934}))))))))))

(clojure.core/defn describe-vault ([input__47307__auto__] (describe-vault input__47307__auto__ portkey.aws/*http-client*)) ([input47937 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/DescribeVaultInput input47937)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47936] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response47936)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/describe-vault-output (:body response47936)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47936 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47936)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47936}))))))))))

(clojure.core/defn initiate-job ([input__47307__auto__] (initiate-job input__47307__auto__ portkey.aws/*http-client*)) ([input47939 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/jobs"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/InitiateJobInput input47939)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "jobParameters") (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47938] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "PolicyEnforcedException" :portkey.aws.glacier.-2012-06-01/policy-enforced-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "InsufficientCapacityException" :portkey.aws.glacier.-2012-06-01/insufficient-capacity-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 202 (:status response47938)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/initiate-job-output (:body response47938)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47938 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47938)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47938}))))))))))

(clojure.core/defn delete-vault-notifications ([input__47307__auto__] (delete-vault-notifications input__47307__auto__ portkey.aws/*http-client*)) ([input47941 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/notification-configuration"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/DeleteVaultNotificationsInput input47941)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47940] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response47940)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47940 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47940)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47940}))))))))))

(clojure.core/defn get-vault-notifications ([input__47307__auto__] (get-vault-notifications input__47307__auto__ portkey.aws/*http-client*)) ([input47943 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/notification-configuration"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/GetVaultNotificationsInput input47943)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47942] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response47942)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/get-vault-notifications-output (:body response47942)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47942 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47942)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47942}))))))))))

(clojure.core/defn set-vault-notifications ([input__47307__auto__] (set-vault-notifications input__47307__auto__ portkey.aws/*http-client*)) ([input47945 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/notification-configuration"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/SetVaultNotificationsInput input47945)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "vaultNotificationConfig") (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47944] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response47944)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47944 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47944)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47944}))))))))))

(clojure.core/defn list-tags-for-vault ([input__47307__auto__] (list-tags-for-vault input__47307__auto__ portkey.aws/*http-client*)) ([input47947 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/tags"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/ListTagsForVaultInput input47947)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47946] (clojure.core/let [errors__47310__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response47946)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/list-tags-for-vault-output (:body response47946)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47946 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47946)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47946}))))))))))

(clojure.core/defn list-multipart-uploads ([input__47307__auto__] (list-multipart-uploads input__47307__auto__ portkey.aws/*http-client*)) ([input47949 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/multipart-uploads"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/ListMultipartUploadsInput input47949)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {"marker" "marker", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47948] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response47948)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/list-multipart-uploads-output (:body response47948)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47948 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47948)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47948}))))))))))

(clojure.core/defn delete-vault-access-policy ([input__47307__auto__] (delete-vault-access-policy input__47307__auto__ portkey.aws/*http-client*)) ([input47951 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/access-policy"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/DeleteVaultAccessPolicyInput input47951)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47950] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response47950)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47950 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47950)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47950}))))))))))

(clojure.core/defn get-data-retrieval-policy ([input__47307__auto__] (get-data-retrieval-policy input__47307__auto__ portkey.aws/*http-client*)) ([input47953 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/policies/data-retrieval"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/GetDataRetrievalPolicyInput input47953)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47952] (clojure.core/let [errors__47310__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response47952)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/get-data-retrieval-policy-output (:body response47952)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47952 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47952)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47952}))))))))))

(clojure.core/defn purchase-provisioned-capacity ([input__47307__auto__] (purchase-provisioned-capacity input__47307__auto__ portkey.aws/*http-client*)) ([input47955 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/provisioned-capacity"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/PurchaseProvisionedCapacityInput input47955)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47954] (clojure.core/let [errors__47310__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "LimitExceededException" :portkey.aws.glacier.-2012-06-01/limit-exceeded-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 201 (:status response47954)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/purchase-provisioned-capacity-output (:body response47954)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47954 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47954)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47954}))))))))))

(clojure.core/defn delete-archive ([input__47307__auto__] (delete-archive input__47307__auto__ portkey.aws/*http-client*)) ([input47957 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/archives/{archiveId}"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/DeleteArchiveInput input47957)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName", "archiveId" "archiveId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47956] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response47956)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47956 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47956)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47956}))))))))))

(clojure.core/defn describe-job ([input__47307__auto__] (describe-job input__47307__auto__ portkey.aws/*http-client*)) ([input47959 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/jobs/{jobId}"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/DescribeJobInput input47959)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName", "jobId" "jobId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47958] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response47958)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/glacier-job-description (:body response47958)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47958 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47958)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47958}))))))))))

(clojure.core/defn complete-multipart-upload ([input__47307__auto__] (complete-multipart-upload input__47307__auto__ portkey.aws/*http-client*)) ([input47961 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/CompleteMultipartUploadInput input47961)} (portkey.awsgen/params-to-header {"archiveSize" ["x-amz-archive-size" nil], "checksum" ["x-amz-sha256-tree-hash" nil]}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName", "uploadId" "uploadId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47960] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 201 (:status response47960)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/archive-creation-output (:body response47960)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47960 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47960)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47960}))))))))))

(clojure.core/defn abort-multipart-upload ([input__47307__auto__] (abort-multipart-upload input__47307__auto__ portkey.aws/*http-client*)) ([input47963 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/AbortMultipartUploadInput input47963)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName", "uploadId" "uploadId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47962] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response47962)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47962 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47962)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47962}))))))))))

(clojure.core/defn add-tags-to-vault ([input__47307__auto__] (add-tags-to-vault input__47307__auto__ portkey.aws/*http-client*)) ([input47965 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/tags?operation=add"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/AddTagsToVaultInput input47965)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47964] (clojure.core/let [errors__47310__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "LimitExceededException" :portkey.aws.glacier.-2012-06-01/limit-exceeded-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response47964)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47964 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47964)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47964}))))))))))

(clojure.core/defn initiate-vault-lock ([input__47307__auto__] (initiate-vault-lock input__47307__auto__ portkey.aws/*http-client*)) ([input47967 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/lock-policy"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/InitiateVaultLockInput input47967)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "policy") (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47966] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 201 (:status response47966)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/initiate-vault-lock-output (:body response47966)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47966 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47966)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47966}))))))))))

(clojure.core/defn delete-vault ([input__47307__auto__] (delete-vault input__47307__auto__ portkey.aws/*http-client*)) ([input47969 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/DeleteVaultInput input47969)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47968] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response47968)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47968 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47968)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47968}))))))))))

(clojure.core/defn list-provisioned-capacity ([input__47307__auto__] (list-provisioned-capacity input__47307__auto__ portkey.aws/*http-client*)) ([input47971 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/provisioned-capacity"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/ListProvisionedCapacityInput input47971)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47970] (clojure.core/let [errors__47310__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response47970)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/list-provisioned-capacity-output (:body response47970)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47970 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47970)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47970}))))))))))

(clojure.core/defn get-vault-lock ([input__47307__auto__] (get-vault-lock input__47307__auto__ portkey.aws/*http-client*)) ([input47973 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/lock-policy"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/GetVaultLockInput input47973)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47972] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response47972)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/get-vault-lock-output (:body response47972)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47972 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47972)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47972}))))))))))

(clojure.core/defn list-vaults ([input__47307__auto__] (list-vaults input__47307__auto__ portkey.aws/*http-client*)) ([input47975 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/ListVaultsInput input47975)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId"}) (portkey.awsgen/params-to-querystring {"marker" "marker", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47974] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response47974)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/list-vaults-output (:body response47974)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47974 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47974)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47974}))))))))))

(clojure.core/defn set-data-retrieval-policy ([input__47307__auto__] (set-data-retrieval-policy input__47307__auto__ portkey.aws/*http-client*)) ([input47977 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/policies/data-retrieval"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/SetDataRetrievalPolicyInput input47977)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47976] (clojure.core/let [errors__47310__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response47976)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47976 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47976)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47976}))))))))))

(clojure.core/defn get-job-output ([input__47307__auto__] (get-job-output input__47307__auto__ portkey.aws/*http-client*)) ([input47979 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/jobs/{jobId}/output"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/GetJobOutputInput input47979)} (portkey.awsgen/params-to-header {"range" ["Range" nil]}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName", "jobId" "jobId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47978] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response47978)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/get-job-output-output (:body response47978)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47978 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47978)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47978}))))))))))

(clojure.core/defn remove-tags-from-vault ([input__47307__auto__] (remove-tags-from-vault input__47307__auto__ portkey.aws/*http-client*)) ([input47981 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/tags?operation=remove"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/RemoveTagsFromVaultInput input47981)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47980] (clojure.core/let [errors__47310__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response47980)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47980 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47980)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47980}))))))))))

(clojure.core/defn abort-vault-lock ([input__47307__auto__] (abort-vault-lock input__47307__auto__ portkey.aws/*http-client*)) ([input47983 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/lock-policy"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/AbortVaultLockInput input47983)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47982] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response47982)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47982 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47982)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47982}))))))))))

(clojure.core/defn list-parts ([input__47307__auto__] (list-parts input__47307__auto__ portkey.aws/*http-client*)) ([input47985 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/ListPartsInput input47985)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName", "uploadId" "uploadId"}) (portkey.awsgen/params-to-querystring {"marker" "marker", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47984] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response47984)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/list-parts-output (:body response47984)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47984 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47984)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47984}))))))))))

(clojure.core/defn set-vault-access-policy ([input__47307__auto__] (set-vault-access-policy input__47307__auto__ portkey.aws/*http-client*)) ([input47987 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/access-policy"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/SetVaultAccessPolicyInput input47987)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "policy") (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47986] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response47986)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47986 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47986)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47986}))))))))))

(clojure.core/defn create-vault ([input__47307__auto__] (create-vault input__47307__auto__ portkey.aws/*http-client*)) ([input47989 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/CreateVaultInput input47989)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47988] (clojure.core/let [errors__47310__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception, "LimitExceededException" :portkey.aws.glacier.-2012-06-01/limit-exceeded-exception}] (if (clojure.core/= 201 (:status response47988)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/create-vault-output (:body response47988)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47988 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47988)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47988}))))))))))

(clojure.core/defn complete-vault-lock ([input__47307__auto__] (complete-vault-lock input__47307__auto__ portkey.aws/*http-client*)) ([input47991 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/lock-policy/{lockId}"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/CompleteVaultLockInput input47991)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName", "lockId" "lockId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47990] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response47990)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47990 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47990)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47990}))))))))))

(clojure.core/defn upload-multipart-part ([input__47307__auto__] (upload-multipart-part input__47307__auto__ portkey.aws/*http-client*)) ([input47993 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/UploadMultipartPartInput input47993)} (portkey.awsgen/params-to-header {"checksum" ["x-amz-sha256-tree-hash" nil], "range" ["Content-Range" nil]}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName", "uploadId" "uploadId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47992] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "RequestTimeoutException" :portkey.aws.glacier.-2012-06-01/request-timeout-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response47992)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/upload-multipart-part-output (:body response47992)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47992 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47992)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47992}))))))))))

(clojure.core/defn upload-archive ([input__47307__auto__] (upload-archive input__47307__auto__ portkey.aws/*http-client*)) ([input47995 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/archives"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/UploadArchiveInput input47995)} (portkey.awsgen/params-to-header {"archiveDescription" ["x-amz-archive-description" nil], "checksum" ["x-amz-sha256-tree-hash" nil]}) (portkey.awsgen/params-to-uri {"vaultName" "vaultName", "accountId" "accountId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47994] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "RequestTimeoutException" :portkey.aws.glacier.-2012-06-01/request-timeout-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 201 (:status response47994)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/archive-creation-output (:body response47994)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47994 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47994)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47994}))))))))))

(clojure.core/defn get-vault-access-policy ([input__47307__auto__] (get-vault-access-policy input__47307__auto__ portkey.aws/*http-client*)) ([input47997 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/access-policy"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/GetVaultAccessPolicyInput input47997)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47996] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response47996)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/get-vault-access-policy-output (:body response47996)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47996 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47996)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47996}))))))))))

(clojure.core/defn list-jobs ([input__47307__auto__] (list-jobs input__47307__auto__ portkey.aws/*http-client*)) ([input47999 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/{accountId}/vaults/{vaultName}/jobs"), :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/ListJobsInput input47999)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"accountId" "accountId", "vaultName" "vaultName"}) (portkey.awsgen/params-to-querystring {"limit" "limit", "marker" "marker", "statuscode" "statuscode", "completed" "completed"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47998] (clojure.core/let [errors__47310__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response47998)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/list-jobs-output (:body response47998)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47998 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47998)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47998}))))))))))
