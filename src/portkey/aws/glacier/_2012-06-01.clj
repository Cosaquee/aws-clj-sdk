(ns portkey.aws.glacier.-2012-06-01 (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/limit (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-multipart-uploads-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/accountId :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/marker :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-input/limit]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.provisioned-capacity-description/capacity-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.provisioned-capacity-description/start-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.provisioned-capacity-description/expiration-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/provisioned-capacity-description (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.provisioned-capacity-description/CapacityId :portkey.aws.glacier.-2012-06-01.provisioned-capacity-description/StartDate :portkey.aws.glacier.-2012-06-01.provisioned-capacity-description/ExpirationDate]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-vault-access-policy-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-vault-access-policy-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-vault-access-policy-input/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/vault-access-policy))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/set-vault-access-policy-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.set-vault-access-policy-input/accountId :portkey.aws.glacier.-2012-06-01.set-vault-access-policy-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.set-vault-access-policy-input/policy]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-input/job-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-input/range (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-job-output-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.get-job-output-input/accountId :portkey.aws.glacier.-2012-06-01.get-job-output-input/vaultName :portkey.aws.glacier.-2012-06-01.get-job-output-input/jobId] :opt-un [:portkey.aws.glacier.-2012-06-01.get-job-output-input/range]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.data-retrieval-rule/strategy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.data-retrieval-rule/bytes-per-hour (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/nullable-long))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/data-retrieval-rule (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.data-retrieval-rule/Strategy :portkey.aws.glacier.-2012-06-01.data-retrieval-rule/BytesPerHour]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/uploads-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/upload-list-element :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.create-vault-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.create-vault-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/create-vault-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.create-vault-input/accountId :portkey.aws.glacier.-2012-06-01.create-vault-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-output/body (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/stream))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-output/checksum (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-output/status (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/httpstatus))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-output/content-range (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-output/accept-ranges (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-output/content-type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-job-output-output/archive-description (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-job-output-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.get-job-output-output/body :portkey.aws.glacier.-2012-06-01.get-job-output-output/checksum :portkey.aws.glacier.-2012-06-01.get-job-output-output/status :portkey.aws.glacier.-2012-06-01.get-job-output-output/contentRange :portkey.aws.glacier.-2012-06-01.get-job-output-output/acceptRanges :portkey.aws.glacier.-2012-06-01.get-job-output-output/contentType :portkey.aws.glacier.-2012-06-01.get-job-output-output/archiveDescription]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/archive-description (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/part-size (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/initiate-multipart-upload-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/accountId :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/archiveDescription :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-input/partSize]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-vault-lock-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-vault-lock-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-vault-lock-input/lock-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/complete-vault-lock-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.complete-vault-lock-input/accountId :portkey.aws.glacier.-2012-06-01.complete-vault-lock-input/vaultName :portkey.aws.glacier.-2012-06-01.complete-vault-lock-input/lockId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.part-list-element/range-in-bytes (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.part-list-element/sha256-tree-hash (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/part-list-element (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.part-list-element/RangeInBytes :portkey.aws.glacier.-2012-06-01.part-list-element/SHA256TreeHash]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.vault-access-policy/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/vault-access-policy (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.vault-access-policy/Policy]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/job-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/glacier-job-description :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/upload-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/archive-size (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/checksum (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/complete-multipart-upload-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/accountId :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/vaultName :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/uploadId] :opt-un [:portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/archiveSize :portkey.aws.glacier.-2012-06-01.complete-multipart-upload-input/checksum]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/status-code (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"InProgress" "InProgress", :in-progress "InProgress", "Succeeded" "Succeeded", :succeeded "Succeeded", "Failed" "Failed", :failed "Failed"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-output/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-multipart-uploads-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01/UploadsList :portkey.aws.glacier.-2012-06-01.list-multipart-uploads-output/Marker]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.create-vault-output/location (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/create-vault-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.create-vault-output/location]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-provisioned-capacity-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-provisioned-capacity-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.list-provisioned-capacity-input/accountId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.purchase-provisioned-capacity-output/capacity-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/purchase-provisioned-capacity-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.purchase-provisioned-capacity-output/capacityId]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/tag-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-data-retrieval-policy-output/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/data-retrieval-policy))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-data-retrieval-policy-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.get-data-retrieval-policy-output/Policy]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/format (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/start-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/date-time))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/end-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/date-time))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/limit (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/inventory-retrieval-job-description (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/Format :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/StartDate :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/EndDate :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/Limit :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-description/Marker]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.limit-exceeded-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.limit-exceeded-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.limit-exceeded-exception/type :portkey.aws.glacier.-2012-06-01.limit-exceeded-exception/code :portkey.aws.glacier.-2012-06-01.limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-archive-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-archive-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-archive-input/archive-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/delete-archive-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.delete-archive-input/accountId :portkey.aws.glacier.-2012-06-01.delete-archive-input/vaultName :portkey.aws.glacier.-2012-06-01.delete-archive-input/archiveId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-data-retrieval-policy-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-data-retrieval-policy-input/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/data-retrieval-policy))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/set-data-retrieval-policy-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.set-data-retrieval-policy-input/accountId] :opt-un [:portkey.aws.glacier.-2012-06-01.set-data-retrieval-policy-input/Policy]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-lock-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-lock-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-vault-lock-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.get-vault-lock-input/accountId :portkey.aws.glacier.-2012-06-01.get-vault-lock-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.vault-notification-config/snstopic (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.vault-notification-config/events (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/notification-event-list))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/vault-notification-config (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.vault-notification-config/SNSTopic :portkey.aws.glacier.-2012-06-01.vault-notification-config/Events]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/provisioned-capacity-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/provisioned-capacity-description :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-output/multipart-upload-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-output/vaultarn (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-output/archive-description (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-output/part-size-in-bytes (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/long))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-output/creation-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-output/parts (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/part-list))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-output/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-parts-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.list-parts-output/MultipartUploadId :portkey.aws.glacier.-2012-06-01.list-parts-output/VaultARN :portkey.aws.glacier.-2012-06-01.list-parts-output/ArchiveDescription :portkey.aws.glacier.-2012-06-01.list-parts-output/PartSizeInBytes :portkey.aws.glacier.-2012-06-01.list-parts-output/CreationDate :portkey.aws.glacier.-2012-06-01.list-parts-output/Parts :portkey.aws.glacier.-2012-06-01.list-parts-output/Marker]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-jobs-output/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-jobs-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01/JobList :portkey.aws.glacier.-2012-06-01.list-jobs-output/Marker]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/vault-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/describe-vault-output :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.service-unavailable-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.service-unavailable-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.service-unavailable-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/service-unavailable-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.service-unavailable-exception/type :portkey.aws.glacier.-2012-06-01.service-unavailable-exception/code :portkey.aws.glacier.-2012-06-01.service-unavailable-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/upload-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/checksum (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/range (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/body (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/stream))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/upload-multipart-part-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/accountId :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/vaultName :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/uploadId] :opt-un [:portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/checksum :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/range :portkey.aws.glacier.-2012-06-01.upload-multipart-part-input/body]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-vault-lock-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-vault-lock-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-vault-lock-input/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/vault-lock-policy))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/initiate-vault-lock-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.initiate-vault-lock-input/accountId :portkey.aws.glacier.-2012-06-01.initiate-vault-lock-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.initiate-vault-lock-input/policy]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.data-retrieval-policy/rules (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/data-retrieval-rules-list))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/data-retrieval-policy (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.data-retrieval-policy/Rules]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/action-code (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"ArchiveRetrieval" "ArchiveRetrieval", :archive-retrieval "ArchiveRetrieval", "InventoryRetrieval" "InventoryRetrieval", :inventory-retrieval "InventoryRetrieval"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-vault-access-policy-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-vault-access-policy-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/delete-vault-access-policy-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.delete-vault-access-policy-input/accountId :portkey.aws.glacier.-2012-06-01.delete-vault-access-policy-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-tags-for-vault-output/tags (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/tag-map))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-tags-for-vault-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.list-tags-for-vault-output/Tags]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-notifications-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-notifications-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-vault-notifications-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.get-vault-notifications-input/accountId :portkey.aws.glacier.-2012-06-01.get-vault-notifications-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-data-retrieval-policy-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-data-retrieval-policy-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.get-data-retrieval-policy-input/accountId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.abort-multipart-upload-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.abort-multipart-upload-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.abort-multipart-upload-input/upload-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/abort-multipart-upload-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.abort-multipart-upload-input/accountId :portkey.aws.glacier.-2012-06-01.abort-multipart-upload-input/vaultName :portkey.aws.glacier.-2012-06-01.abort-multipart-upload-input/uploadId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/tag-key-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-access-policy-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-access-policy-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-vault-access-policy-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.get-vault-access-policy-input/accountId :portkey.aws.glacier.-2012-06-01.get-vault-access-policy-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-vault-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-vault-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/delete-vault-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.delete-vault-input/accountId :portkey.aws.glacier.-2012-06-01.delete-vault-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.resource-not-found-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.resource-not-found-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/resource-not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.resource-not-found-exception/type :portkey.aws.glacier.-2012-06-01.resource-not-found-exception/code :portkey.aws.glacier.-2012-06-01.resource-not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.policy-enforced-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.policy-enforced-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.policy-enforced-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/policy-enforced-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.policy-enforced-exception/type :portkey.aws.glacier.-2012-06-01.policy-enforced-exception/code :portkey.aws.glacier.-2012-06-01.policy-enforced-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/nullable-long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.purchase-provisioned-capacity-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/purchase-provisioned-capacity-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.purchase-provisioned-capacity-input/accountId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-output/vaultarn (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-output/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-output/creation-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-output/last-inventory-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-output/number-of-archives (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/long))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-output/size-in-bytes (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/long))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/describe-vault-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.describe-vault-output/VaultARN :portkey.aws.glacier.-2012-06-01.describe-vault-output/VaultName :portkey.aws.glacier.-2012-06-01.describe-vault-output/CreationDate :portkey.aws.glacier.-2012-06-01.describe-vault-output/LastInventoryDate :portkey.aws.glacier.-2012-06-01.describe-vault-output/NumberOfArchives :portkey.aws.glacier.-2012-06-01.describe-vault-output/SizeInBytes]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/tag-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.vault-lock-policy/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/vault-lock-policy (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.vault-lock-policy/Policy]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-lock-output/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-lock-output/state (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-lock-output/expiration-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-lock-output/creation-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-vault-lock-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.get-vault-lock-output/Policy :portkey.aws.glacier.-2012-06-01.get-vault-lock-output/State :portkey.aws.glacier.-2012-06-01.get-vault-lock-output/ExpirationDate :portkey.aws.glacier.-2012-06-01.get-vault-lock-output/CreationDate]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.add-tags-to-vault-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.add-tags-to-vault-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.add-tags-to-vault-input/tags (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/tag-map))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/add-tags-to-vault-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.add-tags-to-vault-input/accountId :portkey.aws.glacier.-2012-06-01.add-tags-to-vault-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.add-tags-to-vault-input/Tags]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-job-output/location (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-job-output/job-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/initiate-job-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.initiate-job-output/location :portkey.aws.glacier.-2012-06-01.initiate-job-output/jobId]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-notifications-output/vault-notification-config (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/vault-notification-config))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-vault-notifications-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.get-vault-notifications-output/vaultNotificationConfig]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-jobs-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-jobs-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-jobs-input/limit (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-jobs-input/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-jobs-input/statuscode (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-jobs-input/completed (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-jobs-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.list-jobs-input/accountId :portkey.aws.glacier.-2012-06-01.list-jobs-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.list-jobs-input/limit :portkey.aws.glacier.-2012-06-01.list-jobs-input/marker :portkey.aws.glacier.-2012-06-01.list-jobs-input/statuscode :portkey.aws.glacier.-2012-06-01.list-jobs-input/completed]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/part-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/part-list-element :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/tag-map (clojure.spec.alpha/map-of :portkey.aws.glacier.-2012-06-01/tag-key :portkey.aws.glacier.-2012-06-01/tag-value))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/size clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.request-timeout-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.request-timeout-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.request-timeout-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/request-timeout-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.request-timeout-exception/type :portkey.aws.glacier.-2012-06-01.request-timeout-exception/code :portkey.aws.glacier.-2012-06-01.request-timeout-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-list-element/multipart-upload-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-list-element/vaultarn (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-list-element/archive-description (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-list-element/part-size-in-bytes (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/long))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-list-element/creation-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/upload-list-element (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.upload-list-element/MultipartUploadId :portkey.aws.glacier.-2012-06-01.upload-list-element/VaultARN :portkey.aws.glacier.-2012-06-01.upload-list-element/ArchiveDescription :portkey.aws.glacier.-2012-06-01.upload-list-element/PartSizeInBytes :portkey.aws.glacier.-2012-06-01.upload-list-element/CreationDate]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-vaults-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-vaults-input/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-vaults-input/limit (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-vaults-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.list-vaults-input/accountId] :opt-un [:portkey.aws.glacier.-2012-06-01.list-vaults-input/marker :portkey.aws.glacier.-2012-06-01.list-vaults-input/limit]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/stream (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.awsgen/base64-encode portkey.awsgen/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-job-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-job-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-job-input/job-parameters (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/job-parameters))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/initiate-job-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.initiate-job-input/accountId :portkey.aws.glacier.-2012-06-01.initiate-job-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.initiate-job-input/jobParameters]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-vault-lock-output/lock-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/initiate-vault-lock-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.initiate-vault-lock-output/lockId]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-vault-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/describe-vault-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.describe-vault-input/accountId :portkey.aws.glacier.-2012-06-01.describe-vault-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.remove-tags-from-vault-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.remove-tags-from-vault-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.remove-tags-from-vault-input/tag-keys (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/remove-tags-from-vault-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.remove-tags-from-vault-input/accountId :portkey.aws.glacier.-2012-06-01.remove-tags-from-vault-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.remove-tags-from-vault-input/TagKeys]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-tags-for-vault-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-tags-for-vault-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-tags-for-vault-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.list-tags-for-vault-input/accountId :portkey.aws.glacier.-2012-06-01.list-tags-for-vault-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.insufficient-capacity-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.insufficient-capacity-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.insufficient-capacity-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/insufficient-capacity-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.insufficient-capacity-exception/type :portkey.aws.glacier.-2012-06-01.insufficient-capacity-exception/code :portkey.aws.glacier.-2012-06-01.insufficient-capacity-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-vault-notifications-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.delete-vault-notifications-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/delete-vault-notifications-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.delete-vault-notifications-input/accountId :portkey.aws.glacier.-2012-06-01.delete-vault-notifications-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-job-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-job-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.describe-job-input/job-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/describe-job-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.describe-job-input/accountId :portkey.aws.glacier.-2012-06-01.describe-job-input/vaultName :portkey.aws.glacier.-2012-06-01.describe-job-input/jobId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/tier (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/completion-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/archive-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/status-message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/archive-size-in-bytes (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/size))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/snstopic (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/vaultarn (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/inventory-retrieval-parameters (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/inventory-retrieval-job-description))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/archivesha256-tree-hash (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/sha256-tree-hash (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/creation-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/inventory-size-in-bytes (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/size))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/completed (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/boolean))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/action (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/action-code))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/job-description (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/retrieval-byte-range (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.glacier-job-description/job-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/glacier-job-description (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.glacier-job-description/Tier :portkey.aws.glacier.-2012-06-01.glacier-job-description/CompletionDate :portkey.aws.glacier.-2012-06-01/StatusCode :portkey.aws.glacier.-2012-06-01.glacier-job-description/ArchiveId :portkey.aws.glacier.-2012-06-01.glacier-job-description/StatusMessage :portkey.aws.glacier.-2012-06-01.glacier-job-description/ArchiveSizeInBytes :portkey.aws.glacier.-2012-06-01.glacier-job-description/SNSTopic :portkey.aws.glacier.-2012-06-01.glacier-job-description/VaultARN :portkey.aws.glacier.-2012-06-01.glacier-job-description/InventoryRetrievalParameters :portkey.aws.glacier.-2012-06-01.glacier-job-description/ArchiveSHA256TreeHash :portkey.aws.glacier.-2012-06-01.glacier-job-description/SHA256TreeHash :portkey.aws.glacier.-2012-06-01.glacier-job-description/CreationDate :portkey.aws.glacier.-2012-06-01.glacier-job-description/InventorySizeInBytes :portkey.aws.glacier.-2012-06-01.glacier-job-description/Completed :portkey.aws.glacier.-2012-06-01.glacier-job-description/Action :portkey.aws.glacier.-2012-06-01.glacier-job-description/JobDescription :portkey.aws.glacier.-2012-06-01.glacier-job-description/RetrievalByteRange :portkey.aws.glacier.-2012-06-01.glacier-job-description/JobId]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.missing-parameter-value-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.missing-parameter-value-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.missing-parameter-value-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.missing-parameter-value-exception/type :portkey.aws.glacier.-2012-06-01.missing-parameter-value-exception/code :portkey.aws.glacier.-2012-06-01.missing-parameter-value-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-output/location (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-output/upload-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/initiate-multipart-upload-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-output/location :portkey.aws.glacier.-2012-06-01.initiate-multipart-upload-output/uploadId]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-input/upload-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-input/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-parts-input/limit (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-parts-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.list-parts-input/accountId :portkey.aws.glacier.-2012-06-01.list-parts-input/vaultName :portkey.aws.glacier.-2012-06-01.list-parts-input/uploadId] :opt-un [:portkey.aws.glacier.-2012-06-01.list-parts-input/marker :portkey.aws.glacier.-2012-06-01.list-parts-input/limit]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.get-vault-access-policy-output/policy (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/vault-access-policy))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/get-vault-access-policy-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.get-vault-access-policy-output/policy]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.archive-creation-output/location (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.archive-creation-output/checksum (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.archive-creation-output/archive-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/archive-creation-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.archive-creation-output/location :portkey.aws.glacier.-2012-06-01.archive-creation-output/checksum :portkey.aws.glacier.-2012-06-01.archive-creation-output/archiveId]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-provisioned-capacity-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01/ProvisionedCapacityList]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/start-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/end-date (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/limit (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/inventory-retrieval-job-input (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/StartDate :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/EndDate :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/Limit :portkey.aws.glacier.-2012-06-01.inventory-retrieval-job-input/Marker]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-multipart-part-output/checksum (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/upload-multipart-part-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.upload-multipart-part-output/checksum]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-archive-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-archive-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-archive-input/archive-description (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-archive-input/checksum (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.upload-archive-input/body (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/stream))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/upload-archive-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.upload-archive-input/vaultName :portkey.aws.glacier.-2012-06-01.upload-archive-input/accountId] :opt-un [:portkey.aws.glacier.-2012-06-01.upload-archive-input/archiveDescription :portkey.aws.glacier.-2012-06-01.upload-archive-input/checksum :portkey.aws.glacier.-2012-06-01.upload-archive-input/body]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/data-retrieval-rules-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/data-retrieval-rule :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.invalid-parameter-value-exception/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.invalid-parameter-value-exception/code (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.invalid-parameter-value-exception/message (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.invalid-parameter-value-exception/type :portkey.aws.glacier.-2012-06-01.invalid-parameter-value-exception/code :portkey.aws.glacier.-2012-06-01.invalid-parameter-value-exception/message]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.abort-vault-lock-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.abort-vault-lock-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/abort-vault-lock-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.abort-vault-lock-input/accountId :portkey.aws.glacier.-2012-06-01.abort-vault-lock-input/vaultName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.list-vaults-output/marker (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/list-vaults-output (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01/VaultList :portkey.aws.glacier.-2012-06-01.list-vaults-output/Marker]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/format (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/type (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/archive-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/description (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/snstopic (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/retrieval-byte-range (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/tier (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.job-parameters/inventory-retrieval-parameters (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/inventory-retrieval-job-input))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/job-parameters (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.glacier.-2012-06-01.job-parameters/Format :portkey.aws.glacier.-2012-06-01.job-parameters/Type :portkey.aws.glacier.-2012-06-01.job-parameters/ArchiveId :portkey.aws.glacier.-2012-06-01.job-parameters/Description :portkey.aws.glacier.-2012-06-01.job-parameters/SNSTopic :portkey.aws.glacier.-2012-06-01.job-parameters/RetrievalByteRange :portkey.aws.glacier.-2012-06-01.job-parameters/Tier :portkey.aws.glacier.-2012-06-01.job-parameters/InventoryRetrievalParameters]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-vault-notifications-input/account-id (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-vault-notifications-input/vault-name (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/string))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01.set-vault-notifications-input/vault-notification-config (clojure.spec.alpha/and :portkey.aws.glacier.-2012-06-01/vault-notification-config))
(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/set-vault-notifications-input (portkey.awsgen/json-keys :req-un [:portkey.aws.glacier.-2012-06-01.set-vault-notifications-input/accountId :portkey.aws.glacier.-2012-06-01.set-vault-notifications-input/vaultName] :opt-un [:portkey.aws.glacier.-2012-06-01.set-vault-notifications-input/vaultNotificationConfig]))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/notification-event-list (clojure.spec.alpha/coll-of :portkey.aws.glacier.-2012-06-01/string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/httpstatus (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.glacier.-2012-06-01/date-time (clojure.spec.alpha/and clojure.core/string?))

(clojure.core/defn initiate-multipart-upload ([input__33752__auto__] (initiate-multipart-upload input__33752__auto__ portkey.aws/*http-client*)) ([input34382 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/multipart-uploads", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/InitiateMultipartUploadInput input34382)} (portkey.awsgen/params-to-header ["archiveDescription" ["x-amz-archive-description" nil]] ["partSize" ["x-amz-part-size" nil]]) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/multipart-uploads", :body body__33756__auto__} (clojure.core/fn [response34381] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 201 (:status response34381)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/initiate-multipart-upload-output (:body response34381)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34381 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34381)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34381}))))))))))

(clojure.core/defn describe-vault ([input__33752__auto__] (describe-vault input__33752__auto__ portkey.aws/*http-client*)) ([input34384 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/DescribeVaultInput input34384)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}", :body body__33756__auto__} (clojure.core/fn [response34383] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response34383)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/describe-vault-output (:body response34383)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34383 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34383)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34383}))))))))))

(clojure.core/defn initiate-job ([input__33752__auto__] (initiate-job input__33752__auto__ portkey.aws/*http-client*)) ([input34386 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/jobs", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/InitiateJobInput input34386)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "jobParameters") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/jobs", :body body__33756__auto__} (clojure.core/fn [response34385] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "PolicyEnforcedException" :portkey.aws.glacier.-2012-06-01/policy-enforced-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "InsufficientCapacityException" :portkey.aws.glacier.-2012-06-01/insufficient-capacity-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 202 (:status response34385)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/initiate-job-output (:body response34385)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34385 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34385)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34385}))))))))))

(clojure.core/defn delete-vault-notifications ([input__33752__auto__] (delete-vault-notifications input__33752__auto__ portkey.aws/*http-client*)) ([input34388 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/notification-configuration", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/DeleteVaultNotificationsInput input34388)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/notification-configuration", :body body__33756__auto__} (clojure.core/fn [response34387] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response34387)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34387 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34387)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34387}))))))))))

(clojure.core/defn get-vault-notifications ([input__33752__auto__] (get-vault-notifications input__33752__auto__ portkey.aws/*http-client*)) ([input34390 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/notification-configuration", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/GetVaultNotificationsInput input34390)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/notification-configuration", :body body__33756__auto__} (clojure.core/fn [response34389] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response34389)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/get-vault-notifications-output (:body response34389)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34389 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34389)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34389}))))))))))

(clojure.core/defn set-vault-notifications ([input__33752__auto__] (set-vault-notifications input__33752__auto__ portkey.aws/*http-client*)) ([input34392 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/notification-configuration", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/SetVaultNotificationsInput input34392)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "vaultNotificationConfig") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/notification-configuration", :body body__33756__auto__} (clojure.core/fn [response34391] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response34391)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34391 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34391)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34391}))))))))))

(clojure.core/defn list-tags-for-vault ([input__33752__auto__] (list-tags-for-vault input__33752__auto__ portkey.aws/*http-client*)) ([input34394 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/tags", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/ListTagsForVaultInput input34394)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/tags", :body body__33756__auto__} (clojure.core/fn [response34393] (clojure.core/let [errors__33757__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response34393)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/list-tags-for-vault-output (:body response34393)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34393 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34393)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34393}))))))))))

(clojure.core/defn list-multipart-uploads ([input__33752__auto__] (list-multipart-uploads input__33752__auto__ portkey.aws/*http-client*)) ([input34396 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/multipart-uploads", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/ListMultipartUploadsInput input34396)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring ["marker" "marker"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/multipart-uploads", :body body__33756__auto__} (clojure.core/fn [response34395] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response34395)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/list-multipart-uploads-output (:body response34395)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34395 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34395)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34395}))))))))))

(clojure.core/defn delete-vault-access-policy ([input__33752__auto__] (delete-vault-access-policy input__33752__auto__ portkey.aws/*http-client*)) ([input34398 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/access-policy", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/DeleteVaultAccessPolicyInput input34398)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/access-policy", :body body__33756__auto__} (clojure.core/fn [response34397] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response34397)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34397 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34397)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34397}))))))))))

(clojure.core/defn get-data-retrieval-policy ([input__33752__auto__] (get-data-retrieval-policy input__33752__auto__ portkey.aws/*http-client*)) ([input34400 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/policies/data-retrieval", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/GetDataRetrievalPolicyInput input34400)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/policies/data-retrieval", :body body__33756__auto__} (clojure.core/fn [response34399] (clojure.core/let [errors__33757__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response34399)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/get-data-retrieval-policy-output (:body response34399)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34399 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34399)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34399}))))))))))

(clojure.core/defn purchase-provisioned-capacity ([input__33752__auto__] (purchase-provisioned-capacity input__33752__auto__ portkey.aws/*http-client*)) ([input34402 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/provisioned-capacity", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/PurchaseProvisionedCapacityInput input34402)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/provisioned-capacity", :body body__33756__auto__} (clojure.core/fn [response34401] (clojure.core/let [errors__33757__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "LimitExceededException" :portkey.aws.glacier.-2012-06-01/limit-exceeded-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 201 (:status response34401)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/purchase-provisioned-capacity-output (:body response34401)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34401 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34401)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34401}))))))))))

(clojure.core/defn delete-archive ([input__33752__auto__] (delete-archive input__33752__auto__ portkey.aws/*http-client*)) ([input34404 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/archives/{archiveId}", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/DeleteArchiveInput input34404)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"] ["archiveId" "archiveId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/archives/{archiveId}", :body body__33756__auto__} (clojure.core/fn [response34403] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response34403)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34403 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34403)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34403}))))))))))

(clojure.core/defn describe-job ([input__33752__auto__] (describe-job input__33752__auto__ portkey.aws/*http-client*)) ([input34406 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/jobs/{jobId}", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/DescribeJobInput input34406)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"] ["jobId" "jobId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/jobs/{jobId}", :body body__33756__auto__} (clojure.core/fn [response34405] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response34405)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/glacier-job-description (:body response34405)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34405 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34405)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34405}))))))))))

(clojure.core/defn complete-multipart-upload ([input__33752__auto__] (complete-multipart-upload input__33752__auto__ portkey.aws/*http-client*)) ([input34408 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/CompleteMultipartUploadInput input34408)} (portkey.awsgen/params-to-header ["archiveSize" ["x-amz-archive-size" nil]] ["checksum" ["x-amz-sha256-tree-hash" nil]]) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"] ["uploadId" "uploadId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}", :body body__33756__auto__} (clojure.core/fn [response34407] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 201 (:status response34407)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/archive-creation-output (:body response34407)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34407 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34407)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34407}))))))))))

(clojure.core/defn abort-multipart-upload ([input__33752__auto__] (abort-multipart-upload input__33752__auto__ portkey.aws/*http-client*)) ([input34410 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/AbortMultipartUploadInput input34410)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"] ["uploadId" "uploadId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}", :body body__33756__auto__} (clojure.core/fn [response34409] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response34409)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34409 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34409)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34409}))))))))))

(clojure.core/defn add-tags-to-vault ([input__33752__auto__] (add-tags-to-vault input__33752__auto__ portkey.aws/*http-client*)) ([input34412 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/tags?operation=add", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/AddTagsToVaultInput input34412)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/tags?operation=add", :body body__33756__auto__} (clojure.core/fn [response34411] (clojure.core/let [errors__33757__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "LimitExceededException" :portkey.aws.glacier.-2012-06-01/limit-exceeded-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response34411)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34411 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34411)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34411}))))))))))

(clojure.core/defn initiate-vault-lock ([input__33752__auto__] (initiate-vault-lock input__33752__auto__ portkey.aws/*http-client*)) ([input34414 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/lock-policy", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/InitiateVaultLockInput input34414)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "policy") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/lock-policy", :body body__33756__auto__} (clojure.core/fn [response34413] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 201 (:status response34413)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/initiate-vault-lock-output (:body response34413)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34413 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34413)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34413}))))))))))

(clojure.core/defn delete-vault ([input__33752__auto__] (delete-vault input__33752__auto__ portkey.aws/*http-client*)) ([input34416 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/DeleteVaultInput input34416)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}", :body body__33756__auto__} (clojure.core/fn [response34415] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response34415)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34415 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34415)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34415}))))))))))

(clojure.core/defn list-provisioned-capacity ([input__33752__auto__] (list-provisioned-capacity input__33752__auto__ portkey.aws/*http-client*)) ([input34418 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/provisioned-capacity", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/ListProvisionedCapacityInput input34418)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/provisioned-capacity", :body body__33756__auto__} (clojure.core/fn [response34417] (clojure.core/let [errors__33757__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response34417)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/list-provisioned-capacity-output (:body response34417)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34417 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34417)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34417}))))))))))

(clojure.core/defn get-vault-lock ([input__33752__auto__] (get-vault-lock input__33752__auto__ portkey.aws/*http-client*)) ([input34420 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/lock-policy", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/GetVaultLockInput input34420)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/lock-policy", :body body__33756__auto__} (clojure.core/fn [response34419] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response34419)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/get-vault-lock-output (:body response34419)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34419 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34419)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34419}))))))))))

(clojure.core/defn list-vaults ([input__33752__auto__] (list-vaults input__33752__auto__ portkey.aws/*http-client*)) ([input34422 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/ListVaultsInput input34422)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"]) (portkey.awsgen/params-to-querystring ["marker" "marker"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults", :body body__33756__auto__} (clojure.core/fn [response34421] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response34421)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/list-vaults-output (:body response34421)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34421 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34421)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34421}))))))))))

(clojure.core/defn set-data-retrieval-policy ([input__33752__auto__] (set-data-retrieval-policy input__33752__auto__ portkey.aws/*http-client*)) ([input34424 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/policies/data-retrieval", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/SetDataRetrievalPolicyInput input34424)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/policies/data-retrieval", :body body__33756__auto__} (clojure.core/fn [response34423] (clojure.core/let [errors__33757__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response34423)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34423 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34423)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34423}))))))))))

(clojure.core/defn get-job-output ([input__33752__auto__] (get-job-output input__33752__auto__ portkey.aws/*http-client*)) ([input34426 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/jobs/{jobId}/output", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/GetJobOutputInput input34426)} (portkey.awsgen/params-to-header ["range" ["Range" nil]]) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"] ["jobId" "jobId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/jobs/{jobId}/output", :body body__33756__auto__} (clojure.core/fn [response34425] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response34425)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/get-job-output-output (:body response34425)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34425 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34425)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34425}))))))))))

(clojure.core/defn remove-tags-from-vault ([input__33752__auto__] (remove-tags-from-vault input__33752__auto__ portkey.aws/*http-client*)) ([input34428 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/tags?operation=remove", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/RemoveTagsFromVaultInput input34428)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/tags?operation=remove", :body body__33756__auto__} (clojure.core/fn [response34427] (clojure.core/let [errors__33757__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response34427)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34427 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34427)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34427}))))))))))

(clojure.core/defn abort-vault-lock ([input__33752__auto__] (abort-vault-lock input__33752__auto__ portkey.aws/*http-client*)) ([input34430 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/lock-policy", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/AbortVaultLockInput input34430)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/lock-policy", :body body__33756__auto__} (clojure.core/fn [response34429] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response34429)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34429 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34429)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34429}))))))))))

(clojure.core/defn list-parts ([input__33752__auto__] (list-parts input__33752__auto__ portkey.aws/*http-client*)) ([input34432 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/ListPartsInput input34432)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"] ["uploadId" "uploadId"]) (portkey.awsgen/params-to-querystring ["marker" "marker"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}", :body body__33756__auto__} (clojure.core/fn [response34431] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response34431)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/list-parts-output (:body response34431)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34431 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34431)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34431}))))))))))

(clojure.core/defn set-vault-access-policy ([input__33752__auto__] (set-vault-access-policy input__33752__auto__ portkey.aws/*http-client*)) ([input34434 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/access-policy", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/SetVaultAccessPolicyInput input34434)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "policy") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/access-policy", :body body__33756__auto__} (clojure.core/fn [response34433] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response34433)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34433 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34433)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34433}))))))))))

(clojure.core/defn create-vault ([input__33752__auto__] (create-vault input__33752__auto__ portkey.aws/*http-client*)) ([input34436 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/CreateVaultInput input34436)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}", :body body__33756__auto__} (clojure.core/fn [response34435] (clojure.core/let [errors__33757__auto__ {"InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception, "LimitExceededException" :portkey.aws.glacier.-2012-06-01/limit-exceeded-exception}] (if (clojure.core/= 201 (:status response34435)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/create-vault-output (:body response34435)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34435 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34435)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34435}))))))))))

(clojure.core/defn complete-vault-lock ([input__33752__auto__] (complete-vault-lock input__33752__auto__ portkey.aws/*http-client*)) ([input34438 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/lock-policy/{lockId}", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/CompleteVaultLockInput input34438)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"] ["lockId" "lockId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/lock-policy/{lockId}", :body body__33756__auto__} (clojure.core/fn [response34437] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response34437)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34437 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34437)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34437}))))))))))

(clojure.core/defn upload-multipart-part ([input__33752__auto__] (upload-multipart-part input__33752__auto__ portkey.aws/*http-client*)) ([input34440 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/UploadMultipartPartInput input34440)} (portkey.awsgen/params-to-header ["checksum" ["x-amz-sha256-tree-hash" nil]] ["range" ["Content-Range" nil]]) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"] ["uploadId" "uploadId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/multipart-uploads/{uploadId}", :body body__33756__auto__} (clojure.core/fn [response34439] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "RequestTimeoutException" :portkey.aws.glacier.-2012-06-01/request-timeout-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 204 (:status response34439)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/upload-multipart-part-output (:body response34439)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34439 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34439)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34439}))))))))))

(clojure.core/defn upload-archive ([input__33752__auto__] (upload-archive input__33752__auto__ portkey.aws/*http-client*)) ([input34442 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/archives", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/UploadArchiveInput input34442)} (portkey.awsgen/params-to-header ["archiveDescription" ["x-amz-archive-description" nil]] ["checksum" ["x-amz-sha256-tree-hash" nil]]) (portkey.awsgen/params-to-uri ["vaultName" "vaultName"] ["accountId" "accountId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/archives", :body body__33756__auto__} (clojure.core/fn [response34441] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "RequestTimeoutException" :portkey.aws.glacier.-2012-06-01/request-timeout-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= 201 (:status response34441)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/archive-creation-output (:body response34441)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34441 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34441)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34441}))))))))))

(clojure.core/defn get-vault-access-policy ([input__33752__auto__] (get-vault-access-policy input__33752__auto__ portkey.aws/*http-client*)) ([input34444 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/access-policy", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/GetVaultAccessPolicyInput input34444)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/access-policy", :body body__33756__auto__} (clojure.core/fn [response34443] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response34443)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/get-vault-access-policy-output (:body response34443)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34443 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34443)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34443}))))))))))

(clojure.core/defn list-jobs ([input__33752__auto__] (list-jobs input__33752__auto__ portkey.aws/*http-client*)) ([input34446 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/jobs", :body (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/ListJobsInput input34446)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["accountId" "accountId"] ["vaultName" "vaultName"]) (portkey.awsgen/params-to-querystring ["limit" "limit"] ["marker" "marker"] ["statuscode" "statuscode"] ["completed" "completed"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/{accountId}/vaults/{vaultName}/jobs", :body body__33756__auto__} (clojure.core/fn [response34445] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.glacier.-2012-06-01/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.glacier.-2012-06-01/invalid-parameter-value-exception, "MissingParameterValueException" :portkey.aws.glacier.-2012-06-01/missing-parameter-value-exception, "ServiceUnavailableException" :portkey.aws.glacier.-2012-06-01/service-unavailable-exception}] (if (clojure.core/= nil (:status response34445)) (clojure.spec.alpha/unform :portkey.aws.glacier.-2012-06-01/list-jobs-output (:body response34445)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34445 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34445)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34445}))))))))))
