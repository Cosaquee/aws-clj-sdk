(ns portkey.aws.workdocs (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.workdocs.create-comment-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-comment-request/document-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-comment-request/version-id (clojure.spec.alpha/and :portkey.aws.workdocs/document-version-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-comment-request/parent-id (clojure.spec.alpha/and :portkey.aws.workdocs/comment-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-comment-request/thread-id (clojure.spec.alpha/and :portkey.aws.workdocs/comment-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-comment-request/text (clojure.spec.alpha/and :portkey.aws.workdocs/comment-text-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-comment-request/visibility (clojure.spec.alpha/and :portkey.aws.workdocs/comment-visibility-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-comment-request/notify-collaborators (clojure.spec.alpha/and :portkey.aws.workdocs/boolean-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/create-comment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.create-comment-request/DocumentId :portkey.aws.workdocs.create-comment-request/VersionId :portkey.aws.workdocs.create-comment-request/Text] :opt-un [:portkey.aws.workdocs.create-comment-request/AuthenticationToken :portkey.aws.workdocs.create-comment-request/ParentId :portkey.aws.workdocs.create-comment-request/ThreadId :portkey.aws.workdocs.create-comment-request/Visibility :portkey.aws.workdocs.create-comment-request/NotifyCollaborators]))

(clojure.spec.alpha/def :portkey.aws.workdocs.deactivate-user-request/user-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.deactivate-user-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/deactivate-user-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.deactivate-user-request/UserId] :opt-un [:portkey.aws.workdocs.deactivate-user-request/AuthenticationToken]))

(clojure.spec.alpha/def :portkey.aws.workdocs/create-user-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs/User]))

(clojure.spec.alpha/def :portkey.aws.workdocs/document-source-url-map (clojure.spec.alpha/map-of :portkey.aws.workdocs/document-source-type :portkey.aws.workdocs/url-type))

(clojure.spec.alpha/def :portkey.aws.workdocs/resource-id-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\w+-.@]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs/principal-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"USER" "USER", "ORGANIZATION" "ORGANIZATION", :group "GROUP", :organization "ORGANIZATION", "INVITE" "INVITE", :anonymous "ANONYMOUS", :invite "INVITE", "ANONYMOUS" "ANONYMOUS", :user "USER", "GROUP" "GROUP"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs.folder-metadata/created-timestamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.folder-metadata/parent-folder-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.folder-metadata/modified-timestamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.folder-metadata/latest-version-size (clojure.spec.alpha/and :portkey.aws.workdocs/size-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.folder-metadata/signature (clojure.spec.alpha/and :portkey.aws.workdocs/hash-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.folder-metadata/size (clojure.spec.alpha/and :portkey.aws.workdocs/size-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.folder-metadata/creator-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.folder-metadata/name (clojure.spec.alpha/and :portkey.aws.workdocs/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.folder-metadata/resource-state (clojure.spec.alpha/and :portkey.aws.workdocs/resource-state-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.folder-metadata/id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/folder-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.folder-metadata/CreatedTimestamp :portkey.aws.workdocs.folder-metadata/ParentFolderId :portkey.aws.workdocs.folder-metadata/ModifiedTimestamp :portkey.aws.workdocs.folder-metadata/LatestVersionSize :portkey.aws.workdocs.folder-metadata/Signature :portkey.aws.workdocs/Labels :portkey.aws.workdocs.folder-metadata/Size :portkey.aws.workdocs.folder-metadata/CreatorId :portkey.aws.workdocs.folder-metadata/Name :portkey.aws.workdocs.folder-metadata/ResourceState :portkey.aws.workdocs.folder-metadata/Id]))

(clojure.spec.alpha/def :portkey.aws.workdocs.resource-path-component/id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.resource-path-component/name (clojure.spec.alpha/and :portkey.aws.workdocs/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/resource-path-component (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.resource-path-component/Id :portkey.aws.workdocs.resource-path-component/Name]))

(clojure.spec.alpha/def :portkey.aws.workdocs/role-permission-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"DIRECT" "DIRECT", :direct "DIRECT", "INHERITED" "INHERITED", :inherited "INHERITED"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs/group-metadata-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/group-metadata :max-count nil))

(clojure.spec.alpha/def :portkey.aws.workdocs/deactivating-last-system-user-exception (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.workdocs.update-user-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-user-request/user-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-user-request/given-name (clojure.spec.alpha/and :portkey.aws.workdocs/user-attribute-value-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-user-request/surname (clojure.spec.alpha/and :portkey.aws.workdocs/user-attribute-value-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-user-request/type (clojure.spec.alpha/and :portkey.aws.workdocs/user-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-user-request/storage-rule (clojure.spec.alpha/and :portkey.aws.workdocs/storage-rule-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-user-request/time-zone-id (clojure.spec.alpha/and :portkey.aws.workdocs/time-zone-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-user-request/locale (clojure.spec.alpha/and :portkey.aws.workdocs/locale-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/update-user-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.update-user-request/UserId] :opt-un [:portkey.aws.workdocs.update-user-request/AuthenticationToken :portkey.aws.workdocs.update-user-request/GivenName :portkey.aws.workdocs.update-user-request/Surname :portkey.aws.workdocs.update-user-request/Type :portkey.aws.workdocs.update-user-request/StorageRule :portkey.aws.workdocs.update-user-request/TimeZoneId :portkey.aws.workdocs.update-user-request/Locale]))

(clojure.spec.alpha/def :portkey.aws.workdocs/document-status-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"INITIALIZED" "INITIALIZED", :initialized "INITIALIZED", "ACTIVE" "ACTIVE", :active "ACTIVE"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs.document-metadata/id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-metadata/creator-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-metadata/parent-folder-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-metadata/created-timestamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-metadata/modified-timestamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-metadata/latest-version-metadata (clojure.spec.alpha/and :portkey.aws.workdocs/document-version-metadata))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-metadata/resource-state (clojure.spec.alpha/and :portkey.aws.workdocs/resource-state-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/document-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.document-metadata/Id :portkey.aws.workdocs.document-metadata/CreatorId :portkey.aws.workdocs.document-metadata/ParentFolderId :portkey.aws.workdocs.document-metadata/CreatedTimestamp :portkey.aws.workdocs.document-metadata/ModifiedTimestamp :portkey.aws.workdocs.document-metadata/LatestVersionMetadata :portkey.aws.workdocs.document-metadata/ResourceState :portkey.aws.workdocs/Labels]))

(clojure.spec.alpha/def :portkey.aws.workdocs.get-folder-path-response/path (clojure.spec.alpha/and :portkey.aws.workdocs/resource-path))
(clojure.spec.alpha/def :portkey.aws.workdocs/get-folder-path-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.get-folder-path-response/Path]))

(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-version-response/metadata (clojure.spec.alpha/and :portkey.aws.workdocs/document-version-metadata))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-version-response/custom-metadata (clojure.spec.alpha/and :portkey.aws.workdocs/custom-metadata-map))
(clojure.spec.alpha/def :portkey.aws.workdocs/get-document-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.get-document-version-response/Metadata :portkey.aws.workdocs.get-document-version-response/CustomMetadata]))

(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-request/document-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-request/include-custom-metadata (clojure.spec.alpha/and :portkey.aws.workdocs/boolean-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/get-document-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.get-document-request/DocumentId] :opt-un [:portkey.aws.workdocs.get-document-request/AuthenticationToken :portkey.aws.workdocs.get-document-request/IncludeCustomMetadata]))

(clojure.spec.alpha/def :portkey.aws.workdocs.create-folder-response/metadata (clojure.spec.alpha/and :portkey.aws.workdocs/folder-metadata))
(clojure.spec.alpha/def :portkey.aws.workdocs/create-folder-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.create-folder-response/Metadata]))

(clojure.spec.alpha/def :portkey.aws.workdocs/search-query-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 512)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\u0020-\uFFFF]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs.get-folder-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-folder-request/folder-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-folder-request/include-custom-metadata (clojure.spec.alpha/and :portkey.aws.workdocs/boolean-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/get-folder-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.get-folder-request/FolderId] :opt-un [:portkey.aws.workdocs.get-folder-request/AuthenticationToken :portkey.aws.workdocs.get-folder-request/IncludeCustomMetadata]))

(clojure.spec.alpha/def :portkey.aws.workdocs.add-resource-permissions-response/share-results (clojure.spec.alpha/and :portkey.aws.workdocs/share-results-list))
(clojure.spec.alpha/def :portkey.aws.workdocs/add-resource-permissions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.add-resource-permissions-response/ShareResults]))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-document-versions-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-document-versions-request/document-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-document-versions-request/marker (clojure.spec.alpha/and :portkey.aws.workdocs/page-marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-document-versions-request/limit (clojure.spec.alpha/and :portkey.aws.workdocs/limit-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-document-versions-request/include (clojure.spec.alpha/and :portkey.aws.workdocs/field-names-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-document-versions-request/fields (clojure.spec.alpha/and :portkey.aws.workdocs/field-names-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-document-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.describe-document-versions-request/DocumentId] :opt-un [:portkey.aws.workdocs.describe-document-versions-request/AuthenticationToken :portkey.aws.workdocs.describe-document-versions-request/Marker :portkey.aws.workdocs.describe-document-versions-request/Limit :portkey.aws.workdocs.describe-document-versions-request/Include :portkey.aws.workdocs.describe-document-versions-request/Fields]))

(clojure.spec.alpha/def :portkey.aws.workdocs.comment/recipient-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.comment/created-timestamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.comment/visibility (clojure.spec.alpha/and :portkey.aws.workdocs/comment-visibility-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.comment/parent-id (clojure.spec.alpha/and :portkey.aws.workdocs/comment-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.comment/status (clojure.spec.alpha/and :portkey.aws.workdocs/comment-status-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.comment/comment-id (clojure.spec.alpha/and :portkey.aws.workdocs/comment-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.comment/thread-id (clojure.spec.alpha/and :portkey.aws.workdocs/comment-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.comment/text (clojure.spec.alpha/and :portkey.aws.workdocs/comment-text-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.comment/contributor (clojure.spec.alpha/and :portkey.aws.workdocs/user))
(clojure.spec.alpha/def :portkey.aws.workdocs/comment (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.comment/CommentId] :opt-un [:portkey.aws.workdocs.comment/RecipientId :portkey.aws.workdocs.comment/CreatedTimestamp :portkey.aws.workdocs.comment/Visibility :portkey.aws.workdocs.comment/ParentId :portkey.aws.workdocs.comment/Status :portkey.aws.workdocs.comment/ThreadId :portkey.aws.workdocs.comment/Text :portkey.aws.workdocs.comment/Contributor]))

(clojure.spec.alpha/def :portkey.aws.workdocs/marker-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 2048)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\u0000-\u00FF]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs/create-custom-metadata-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.workdocs.group-metadata/id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.group-metadata/name (clojure.spec.alpha/and :portkey.aws.workdocs/group-name-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/group-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.group-metadata/Id :portkey.aws.workdocs.group-metadata/Name]))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-activities-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-activities-request/start-time (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-activities-request/end-time (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-activities-request/organization-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-activities-request/user-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-activities-request/limit (clojure.spec.alpha/and :portkey.aws.workdocs/limit-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-activities-request/marker (clojure.spec.alpha/and :portkey.aws.workdocs/marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-activities-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.describe-activities-request/AuthenticationToken :portkey.aws.workdocs.describe-activities-request/StartTime :portkey.aws.workdocs.describe-activities-request/EndTime :portkey.aws.workdocs.describe-activities-request/OrganizationId :portkey.aws.workdocs.describe-activities-request/UserId :portkey.aws.workdocs.describe-activities-request/Limit :portkey.aws.workdocs.describe-activities-request/Marker]))

(clojure.spec.alpha/def :portkey.aws.workdocs/resource-path-component-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/resource-path-component :max-count nil))

(clojure.spec.alpha/def :portkey.aws.workdocs/positive-size-type clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.workdocs.activate-user-request/user-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.activate-user-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/activate-user-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.activate-user-request/UserId] :opt-un [:portkey.aws.workdocs.activate-user-request/AuthenticationToken]))

(clojure.spec.alpha/def :portkey.aws.workdocs.remove-all-resource-permissions-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.remove-all-resource-permissions-request/resource-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/remove-all-resource-permissions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.remove-all-resource-permissions-request/ResourceId] :opt-un [:portkey.aws.workdocs.remove-all-resource-permissions-request/AuthenticationToken]))

(clojure.spec.alpha/def :portkey.aws.workdocs/document-content-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128))))

(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-path-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-path-request/document-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-path-request/limit (clojure.spec.alpha/and :portkey.aws.workdocs/limit-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-path-request/fields (clojure.spec.alpha/and :portkey.aws.workdocs/field-names-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-path-request/marker (clojure.spec.alpha/and :portkey.aws.workdocs/page-marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/get-document-path-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.get-document-path-request/DocumentId] :opt-un [:portkey.aws.workdocs.get-document-path-request/AuthenticationToken :portkey.aws.workdocs.get-document-path-request/Limit :portkey.aws.workdocs.get-document-path-request/Fields :portkey.aws.workdocs.get-document-path-request/Marker]))

(clojure.spec.alpha/def :portkey.aws.workdocs.delete-comment-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.delete-comment-request/document-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.delete-comment-request/version-id (clojure.spec.alpha/and :portkey.aws.workdocs/document-version-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.delete-comment-request/comment-id (clojure.spec.alpha/and :portkey.aws.workdocs/comment-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/delete-comment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.delete-comment-request/DocumentId :portkey.aws.workdocs.delete-comment-request/VersionId :portkey.aws.workdocs.delete-comment-request/CommentId] :opt-un [:portkey.aws.workdocs.delete-comment-request/AuthenticationToken]))

(clojure.spec.alpha/def :portkey.aws.workdocs/locale-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {:fr "fr", :ja "ja", "en" "en", :es "es", "zh_CN" "zh_CN", :default "default", "zh_TW" "zh_TW", :ko "ko", :zh-tw "zh_TW", "fr" "fr", :pt-br "pt_BR", "de" "de", :en "en", "ru" "ru", "es" "es", :de "de", "ja" "ja", :ru "ru", :zh-cn "zh_CN", "ko" "ko", "default" "default", "pt_BR" "pt_BR"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs.delete-custom-metadata-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.delete-custom-metadata-request/resource-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.delete-custom-metadata-request/version-id (clojure.spec.alpha/and :portkey.aws.workdocs/document-version-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.delete-custom-metadata-request/keys (clojure.spec.alpha/and :portkey.aws.workdocs/custom-metadata-key-list))
(clojure.spec.alpha/def :portkey.aws.workdocs.delete-custom-metadata-request/delete-all (clojure.spec.alpha/and :portkey.aws.workdocs/boolean-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/delete-custom-metadata-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.delete-custom-metadata-request/ResourceId] :opt-un [:portkey.aws.workdocs.delete-custom-metadata-request/AuthenticationToken :portkey.aws.workdocs.delete-custom-metadata-request/VersionId :portkey.aws.workdocs.delete-custom-metadata-request/Keys :portkey.aws.workdocs.delete-custom-metadata-request/DeleteAll]))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-comments-response/comments (clojure.spec.alpha/and :portkey.aws.workdocs/comment-list))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-comments-response/marker (clojure.spec.alpha/and :portkey.aws.workdocs/marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-comments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.describe-comments-response/Comments :portkey.aws.workdocs.describe-comments-response/Marker]))

(clojure.spec.alpha/def :portkey.aws.workdocs/user-metadata-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/user-metadata :max-count nil))

(clojure.spec.alpha/def :portkey.aws.workdocs/custom-metadata-value-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 256)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs.add-resource-permissions-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.add-resource-permissions-request/resource-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.add-resource-permissions-request/principals (clojure.spec.alpha/and :portkey.aws.workdocs/share-principal-list))
(clojure.spec.alpha/def :portkey.aws.workdocs/add-resource-permissions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.add-resource-permissions-request/ResourceId :portkey.aws.workdocs.add-resource-permissions-request/Principals] :opt-un [:portkey.aws.workdocs.add-resource-permissions-request/AuthenticationToken]))

(clojure.spec.alpha/def :portkey.aws.workdocs.resource-metadata/type (clojure.spec.alpha/and :portkey.aws.workdocs/resource-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.resource-metadata/name (clojure.spec.alpha/and :portkey.aws.workdocs/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.resource-metadata/original-name (clojure.spec.alpha/and :portkey.aws.workdocs/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.resource-metadata/id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.resource-metadata/version-id (clojure.spec.alpha/and :portkey.aws.workdocs/document-version-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.resource-metadata/owner (clojure.spec.alpha/and :portkey.aws.workdocs/user-metadata))
(clojure.spec.alpha/def :portkey.aws.workdocs.resource-metadata/parent-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/resource-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.resource-metadata/Type :portkey.aws.workdocs.resource-metadata/Name :portkey.aws.workdocs.resource-metadata/OriginalName :portkey.aws.workdocs.resource-metadata/Id :portkey.aws.workdocs.resource-metadata/VersionId :portkey.aws.workdocs.resource-metadata/Owner :portkey.aws.workdocs.resource-metadata/ParentId]))

(clojure.spec.alpha/def :portkey.aws.workdocs/user-activities (clojure.spec.alpha/coll-of :portkey.aws.workdocs/activity :max-count nil))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-comments-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-comments-request/document-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-comments-request/version-id (clojure.spec.alpha/and :portkey.aws.workdocs/document-version-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-comments-request/limit (clojure.spec.alpha/and :portkey.aws.workdocs/limit-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-comments-request/marker (clojure.spec.alpha/and :portkey.aws.workdocs/marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-comments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.describe-comments-request/DocumentId :portkey.aws.workdocs.describe-comments-request/VersionId] :opt-un [:portkey.aws.workdocs.describe-comments-request/AuthenticationToken :portkey.aws.workdocs.describe-comments-request/Limit :portkey.aws.workdocs.describe-comments-request/Marker]))

(clojure.spec.alpha/def :portkey.aws.workdocs/email-address-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 256)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs/signed-header-map (clojure.spec.alpha/map-of :portkey.aws.workdocs/header-name-type :portkey.aws.workdocs/header-value-type))

(clojure.spec.alpha/def :portkey.aws.workdocs/user-ids-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 2000)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[&\w+-.@, ]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs.entity-not-exists-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.entity-not-exists-exception/entity-ids (clojure.spec.alpha/and :portkey.aws.workdocs/entity-id-list))
(clojure.spec.alpha/def :portkey.aws.workdocs/entity-not-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.entity-not-exists-exception/Message :portkey.aws.workdocs.entity-not-exists-exception/EntityIds]))

(clojure.spec.alpha/def :portkey.aws.workdocs/share-principal-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/share-principal :max-count nil))

(clojure.spec.alpha/def :portkey.aws.workdocs.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.limit-exceeded-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs.failed-dependency-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/failed-dependency-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.failed-dependency-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs/user-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"USER" "USER", :user "USER", "ADMIN" "ADMIN", :admin "ADMIN"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs.too-many-labels-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/too-many-labels-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.too-many-labels-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs/comment-status-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"DRAFT" "DRAFT", :draft "DRAFT", "PUBLISHED" "PUBLISHED", :published "PUBLISHED", "DELETED" "DELETED", :deleted "DELETED"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs.activity/type (clojure.spec.alpha/and :portkey.aws.workdocs/activity-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.activity/time-stamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.activity/organization-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.activity/initiator (clojure.spec.alpha/and :portkey.aws.workdocs/user-metadata))
(clojure.spec.alpha/def :portkey.aws.workdocs.activity/original-parent (clojure.spec.alpha/and :portkey.aws.workdocs/resource-metadata))
(clojure.spec.alpha/def :portkey.aws.workdocs/activity (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.activity/Type :portkey.aws.workdocs.activity/TimeStamp :portkey.aws.workdocs.activity/OrganizationId :portkey.aws.workdocs.activity/Initiator :portkey.aws.workdocs/Participants :portkey.aws.workdocs/ResourceMetadata :portkey.aws.workdocs.activity/OriginalParent :portkey.aws.workdocs/CommentMetadata]))

(clojure.spec.alpha/def :portkey.aws.workdocs.user/username (clojure.spec.alpha/and :portkey.aws.workdocs/username-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user/storage (clojure.spec.alpha/and :portkey.aws.workdocs/user-storage-metadata))
(clojure.spec.alpha/def :portkey.aws.workdocs.user/created-timestamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user/time-zone-id (clojure.spec.alpha/and :portkey.aws.workdocs/time-zone-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user/type (clojure.spec.alpha/and :portkey.aws.workdocs/user-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user/locale (clojure.spec.alpha/and :portkey.aws.workdocs/locale-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user/surname (clojure.spec.alpha/and :portkey.aws.workdocs/user-attribute-value-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user/recycle-bin-folder-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user/organization-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user/status (clojure.spec.alpha/and :portkey.aws.workdocs/user-status-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user/modified-timestamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user/given-name (clojure.spec.alpha/and :portkey.aws.workdocs/user-attribute-value-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user/root-folder-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user/email-address (clojure.spec.alpha/and :portkey.aws.workdocs/email-address-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user/id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/user (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.user/Username :portkey.aws.workdocs.user/Storage :portkey.aws.workdocs.user/CreatedTimestamp :portkey.aws.workdocs.user/TimeZoneId :portkey.aws.workdocs.user/Type :portkey.aws.workdocs.user/Locale :portkey.aws.workdocs.user/Surname :portkey.aws.workdocs.user/RecycleBinFolderId :portkey.aws.workdocs.user/OrganizationId :portkey.aws.workdocs.user/Status :portkey.aws.workdocs.user/ModifiedTimestamp :portkey.aws.workdocs.user/GivenName :portkey.aws.workdocs.user/RootFolderId :portkey.aws.workdocs.user/EmailAddress :portkey.aws.workdocs.user/Id]))

(clojure.spec.alpha/def :portkey.aws.workdocs.create-notification-subscription-request/organization-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-notification-subscription-request/endpoint (clojure.spec.alpha/and :portkey.aws.workdocs/subscription-end-point-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-notification-subscription-request/protocol (clojure.spec.alpha/and :portkey.aws.workdocs/subscription-protocol-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/create-notification-subscription-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.create-notification-subscription-request/OrganizationId :portkey.aws.workdocs.create-notification-subscription-request/Endpoint :portkey.aws.workdocs.create-notification-subscription-request/Protocol :portkey.aws.workdocs/SubscriptionType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.workdocs/comment-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/comment :max-count nil))

(clojure.spec.alpha/def :portkey.aws.workdocs/document-source-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ORIGINAL" "ORIGINAL", :original "ORIGINAL", "WITH_COMMENTS" "WITH_COMMENTS", :with-comments "WITH_COMMENTS"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs.service-unavailable-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/service-unavailable-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.service-unavailable-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs/username-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 256)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\w\-+.]+(@[a-zA-Z0-9.\-]+\.[a-zA-Z]+)?" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs/folder-metadata-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/folder-metadata :max-count nil))

(clojure.spec.alpha/def :portkey.aws.workdocs/subscription-protocol-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"HTTPS" "HTTPS", :https "HTTPS"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs.document-version-metadata/created-timestamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-version-metadata/source (clojure.spec.alpha/and :portkey.aws.workdocs/document-source-url-map))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-version-metadata/content-modified-timestamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-version-metadata/status (clojure.spec.alpha/and :portkey.aws.workdocs/document-status-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-version-metadata/modified-timestamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-version-metadata/content-type (clojure.spec.alpha/and :portkey.aws.workdocs/document-content-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-version-metadata/signature (clojure.spec.alpha/and :portkey.aws.workdocs/hash-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-version-metadata/content-created-timestamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-version-metadata/thumbnail (clojure.spec.alpha/and :portkey.aws.workdocs/document-thumbnail-url-map))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-version-metadata/size (clojure.spec.alpha/and :portkey.aws.workdocs/size-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-version-metadata/creator-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-version-metadata/name (clojure.spec.alpha/and :portkey.aws.workdocs/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.document-version-metadata/id (clojure.spec.alpha/and :portkey.aws.workdocs/document-version-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/document-version-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.document-version-metadata/CreatedTimestamp :portkey.aws.workdocs.document-version-metadata/Source :portkey.aws.workdocs.document-version-metadata/ContentModifiedTimestamp :portkey.aws.workdocs.document-version-metadata/Status :portkey.aws.workdocs.document-version-metadata/ModifiedTimestamp :portkey.aws.workdocs.document-version-metadata/ContentType :portkey.aws.workdocs.document-version-metadata/Signature :portkey.aws.workdocs.document-version-metadata/ContentCreatedTimestamp :portkey.aws.workdocs.document-version-metadata/Thumbnail :portkey.aws.workdocs.document-version-metadata/Size :portkey.aws.workdocs.document-version-metadata/CreatorId :portkey.aws.workdocs.document-version-metadata/Name :portkey.aws.workdocs.document-version-metadata/Id]))

(clojure.spec.alpha/def :portkey.aws.workdocs/share-status-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"SUCCESS" "SUCCESS", :success "SUCCESS", "FAILURE" "FAILURE", :failure "FAILURE"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs/size-type clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.workdocs/group-name-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-resource-permissions-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-resource-permissions-request/resource-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-resource-permissions-request/limit (clojure.spec.alpha/and :portkey.aws.workdocs/limit-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-resource-permissions-request/marker (clojure.spec.alpha/and :portkey.aws.workdocs/page-marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-resource-permissions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.describe-resource-permissions-request/ResourceId] :opt-un [:portkey.aws.workdocs.describe-resource-permissions-request/AuthenticationToken :portkey.aws.workdocs.describe-resource-permissions-request/Limit :portkey.aws.workdocs.describe-resource-permissions-request/Marker]))

(clojure.spec.alpha/def :portkey.aws.workdocs/error-message-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.workdocs.custom-metadata-limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/custom-metadata-limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.custom-metadata-limit-exceeded-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs/comment-visibility-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"PUBLIC" "PUBLIC", :public "PUBLIC", "PRIVATE" "PRIVATE", :private "PRIVATE"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-notification-subscriptions-response/subscriptions (clojure.spec.alpha/and :portkey.aws.workdocs/subscription-list))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-notification-subscriptions-response/marker (clojure.spec.alpha/and :portkey.aws.workdocs/page-marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-notification-subscriptions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.describe-notification-subscriptions-response/Subscriptions :portkey.aws.workdocs.describe-notification-subscriptions-response/Marker]))

(clojure.spec.alpha/def :portkey.aws.workdocs.create-folder-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-folder-request/name (clojure.spec.alpha/and :portkey.aws.workdocs/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-folder-request/parent-folder-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/create-folder-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.create-folder-request/ParentFolderId] :opt-un [:portkey.aws.workdocs.create-folder-request/AuthenticationToken :portkey.aws.workdocs.create-folder-request/Name]))

(clojure.spec.alpha/def :portkey.aws.workdocs.user-metadata/id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user-metadata/username (clojure.spec.alpha/and :portkey.aws.workdocs/username-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user-metadata/given-name (clojure.spec.alpha/and :portkey.aws.workdocs/user-attribute-value-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user-metadata/surname (clojure.spec.alpha/and :portkey.aws.workdocs/user-attribute-value-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user-metadata/email-address (clojure.spec.alpha/and :portkey.aws.workdocs/email-address-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/user-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.user-metadata/Id :portkey.aws.workdocs.user-metadata/Username :portkey.aws.workdocs.user-metadata/GivenName :portkey.aws.workdocs.user-metadata/Surname :portkey.aws.workdocs.user-metadata/EmailAddress]))

(clojure.spec.alpha/def :portkey.aws.workdocs/update-user-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs/User]))

(clojure.spec.alpha/def :portkey.aws.workdocs.entity-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/entity-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.entity-already-exists-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs/principal-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/principal :max-count nil))

(clojure.spec.alpha/def :portkey.aws.workdocs/url-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 1024))))

(clojure.spec.alpha/def :portkey.aws.workdocs.invalid-operation-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/invalid-operation-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.invalid-operation-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs.too-many-subscriptions-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/too-many-subscriptions-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.too-many-subscriptions-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs/organization-user-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/user :max-count nil))

(clojure.spec.alpha/def :portkey.aws.workdocs.unauthorized-resource-access-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/unauthorized-resource-access-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.unauthorized-resource-access-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs/activate-user-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs/User]))

(clojure.spec.alpha/def :portkey.aws.workdocs/password-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 4 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 32)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\u0020-\u00FF]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-activities-response/marker (clojure.spec.alpha/and :portkey.aws.workdocs/marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-activities-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs/UserActivities :portkey.aws.workdocs.describe-activities-response/Marker]))

(clojure.spec.alpha/def :portkey.aws.workdocs/user-sort-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"STORAGE_LIMIT" "STORAGE_LIMIT", :user-status "USER_STATUS", :storage-limit "STORAGE_LIMIT", :user-name "USER_NAME", "USER_STATUS" "USER_STATUS", :storage-used "STORAGE_USED", :full-name "FULL_NAME", "FULL_NAME" "FULL_NAME", "STORAGE_USED" "STORAGE_USED", "USER_NAME" "USER_NAME"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs.upload-metadata/upload-url (clojure.spec.alpha/and :portkey.aws.workdocs/url-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.upload-metadata/signed-headers (clojure.spec.alpha/and :portkey.aws.workdocs/signed-header-map))
(clojure.spec.alpha/def :portkey.aws.workdocs/upload-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.upload-metadata/UploadUrl :portkey.aws.workdocs.upload-metadata/SignedHeaders]))

(clojure.spec.alpha/def :portkey.aws.workdocs.prohibited-state-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/prohibited-state-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.prohibited-state-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs/activity-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"DOCUMENT_REVERTED" "DOCUMENT_REVERTED", :document-comment-added "DOCUMENT_COMMENT_ADDED", :folder-share-permission-changed "FOLDER_SHARE_PERMISSION_CHANGED", "FOLDER_SHAREABLE_LINK_CREATED" "FOLDER_SHAREABLE_LINK_CREATED", "DOCUMENT_SHARE_PERMISSION_CHANGED" "DOCUMENT_SHARE_PERMISSION_CHANGED", :folder-shareable-link-permission-changed "FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED", :folder-recycled "FOLDER_RECYCLED", "DOCUMENT_SHAREABLE_LINK_REMOVED" "DOCUMENT_SHAREABLE_LINK_REMOVED", "FOLDER_RESTORED" "FOLDER_RESTORED", "FOLDER_SHAREABLE_LINK_REMOVED" "FOLDER_SHAREABLE_LINK_REMOVED", "DOCUMENT_COMMENT_DELETED" "DOCUMENT_COMMENT_DELETED", "FOLDER_RECYCLED" "FOLDER_RECYCLED", :document-annotation-deleted "DOCUMENT_ANNOTATION_DELETED", :document-unshared "DOCUMENT_UNSHARED", :document-share-permission-changed "DOCUMENT_SHARE_PERMISSION_CHANGED", "DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED" "DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED", :folder-moved "FOLDER_MOVED", :folder-shared "FOLDER_SHARED", :folder-renamed "FOLDER_RENAMED", "DOCUMENT_RESTORED" "DOCUMENT_RESTORED", "DOCUMENT_UNSHARED" "DOCUMENT_UNSHARED", :document-comment-deleted "DOCUMENT_COMMENT_DELETED", :document-annotation-added "DOCUMENT_ANNOTATION_ADDED", :folder-deleted "FOLDER_DELETED", :folder-unshared "FOLDER_UNSHARED", "DOCUMENT_ANNOTATION_DELETED" "DOCUMENT_ANNOTATION_DELETED", "DOCUMENT_RENAMED" "DOCUMENT_RENAMED", :document-shared "DOCUMENT_SHARED", "FOLDER_CREATED" "FOLDER_CREATED", "FOLDER_MOVED" "FOLDER_MOVED", :document-version-uploaded "DOCUMENT_VERSION_UPLOADED", "FOLDER_DELETED" "FOLDER_DELETED", :folder-shareable-link-removed "FOLDER_SHAREABLE_LINK_REMOVED", "FOLDER_RENAMED" "FOLDER_RENAMED", "DOCUMENT_SHARED" "DOCUMENT_SHARED", :document-version-deleted "DOCUMENT_VERSION_DELETED", "FOLDER_SHARE_PERMISSION_CHANGED" "FOLDER_SHARE_PERMISSION_CHANGED", :document-restored "DOCUMENT_RESTORED", :document-shareable-link-permission-changed "DOCUMENT_SHAREABLE_LINK_PERMISSION_CHANGED", :folder-shareable-link-created "FOLDER_SHAREABLE_LINK_CREATED", :document-reverted "DOCUMENT_REVERTED", "DOCUMENT_ANNOTATION_ADDED" "DOCUMENT_ANNOTATION_ADDED", "DOCUMENT_VERSION_UPLOADED" "DOCUMENT_VERSION_UPLOADED", "DOCUMENT_COMMENT_ADDED" "DOCUMENT_COMMENT_ADDED", "DOCUMENT_SHAREABLE_LINK_CREATED" "DOCUMENT_SHAREABLE_LINK_CREATED", :document-moved "DOCUMENT_MOVED", "FOLDER_SHARED" "FOLDER_SHARED", :document-shareable-link-created "DOCUMENT_SHAREABLE_LINK_CREATED", "DOCUMENT_VERSION_DELETED" "DOCUMENT_VERSION_DELETED", "FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED" "FOLDER_SHAREABLE_LINK_PERMISSION_CHANGED", :document-renamed "DOCUMENT_RENAMED", :folder-created "FOLDER_CREATED", "DOCUMENT_CHECKED_IN" "DOCUMENT_CHECKED_IN", :document-checked-in "DOCUMENT_CHECKED_IN", "FOLDER_UNSHARED" "FOLDER_UNSHARED", "DOCUMENT_RECYCLED" "DOCUMENT_RECYCLED", "DOCUMENT_MOVED" "DOCUMENT_MOVED", "DOCUMENT_CHECKED_OUT" "DOCUMENT_CHECKED_OUT", :folder-restored "FOLDER_RESTORED", :document-shareable-link-removed "DOCUMENT_SHAREABLE_LINK_REMOVED", :document-recycled "DOCUMENT_RECYCLED", :document-checked-out "DOCUMENT_CHECKED_OUT"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs/user-status-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ACTIVE" "ACTIVE", :active "ACTIVE", "INACTIVE" "INACTIVE", :inactive "INACTIVE", "PENDING" "PENDING", :pending "PENDING"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs/page-marker-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 2048))))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-resource-permissions-response/principals (clojure.spec.alpha/and :portkey.aws.workdocs/principal-list))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-resource-permissions-response/marker (clojure.spec.alpha/and :portkey.aws.workdocs/page-marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-resource-permissions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.describe-resource-permissions-response/Principals :portkey.aws.workdocs.describe-resource-permissions-response/Marker]))

(clojure.spec.alpha/def :portkey.aws.workdocs/timestamp-type clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.workdocs.update-document-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-document-request/document-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-document-request/name (clojure.spec.alpha/and :portkey.aws.workdocs/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-document-request/parent-folder-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-document-request/resource-state (clojure.spec.alpha/and :portkey.aws.workdocs/resource-state-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/update-document-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.update-document-request/DocumentId] :opt-un [:portkey.aws.workdocs.update-document-request/AuthenticationToken :portkey.aws.workdocs.update-document-request/Name :portkey.aws.workdocs.update-document-request/ParentFolderId :portkey.aws.workdocs.update-document-request/ResourceState]))

(clojure.spec.alpha/def :portkey.aws.workdocs/subscription-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/subscription :max-count 256))

(clojure.spec.alpha/def :portkey.aws.workdocs/create-notification-subscription-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs/Subscription]))

(clojure.spec.alpha/def :portkey.aws.workdocs.remove-resource-permission-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.remove-resource-permission-request/resource-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.remove-resource-permission-request/principal-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/remove-resource-permission-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.remove-resource-permission-request/ResourceId :portkey.aws.workdocs.remove-resource-permission-request/PrincipalId] :opt-un [:portkey.aws.workdocs.remove-resource-permission-request/AuthenticationToken :portkey.aws.workdocs/PrincipalType]))

(clojure.spec.alpha/def :portkey.aws.workdocs.resource-already-checked-out-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/resource-already-checked-out-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.resource-already-checked-out-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs.get-folder-response/metadata (clojure.spec.alpha/and :portkey.aws.workdocs/folder-metadata))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-folder-response/custom-metadata (clojure.spec.alpha/and :portkey.aws.workdocs/custom-metadata-map))
(clojure.spec.alpha/def :portkey.aws.workdocs/get-folder-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.get-folder-response/Metadata :portkey.aws.workdocs.get-folder-response/CustomMetadata]))

(clojure.spec.alpha/def :portkey.aws.workdocs/unauthorized-operation-exception (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.workdocs/subscription-end-point-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 256))))

(clojure.spec.alpha/def :portkey.aws.workdocs/authentication-header-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 8199))))

(clojure.spec.alpha/def :portkey.aws.workdocs/labels (clojure.spec.alpha/coll-of :portkey.aws.workdocs/label :max-count 20))

(clojure.spec.alpha/def :portkey.aws.workdocs.get-folder-path-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-folder-path-request/folder-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-folder-path-request/limit (clojure.spec.alpha/and :portkey.aws.workdocs/limit-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-folder-path-request/fields (clojure.spec.alpha/and :portkey.aws.workdocs/field-names-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-folder-path-request/marker (clojure.spec.alpha/and :portkey.aws.workdocs/page-marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/get-folder-path-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.get-folder-path-request/FolderId] :opt-un [:portkey.aws.workdocs.get-folder-path-request/AuthenticationToken :portkey.aws.workdocs.get-folder-path-request/Limit :portkey.aws.workdocs.get-folder-path-request/Fields :portkey.aws.workdocs.get-folder-path-request/Marker]))

(clojure.spec.alpha/def :portkey.aws.workdocs/document-thumbnail-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"SMALL" "SMALL", :small "SMALL", "SMALL_HQ" "SMALL_HQ", :small-hq "SMALL_HQ", "LARGE" "LARGE", :large "LARGE"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs.participants/users (clojure.spec.alpha/and :portkey.aws.workdocs/user-metadata-list))
(clojure.spec.alpha/def :portkey.aws.workdocs.participants/groups (clojure.spec.alpha/and :portkey.aws.workdocs/group-metadata-list))
(clojure.spec.alpha/def :portkey.aws.workdocs/participants (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.participants/Users :portkey.aws.workdocs.participants/Groups]))

(clojure.spec.alpha/def :portkey.aws.workdocs/custom-metadata-key-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 56)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs/resource-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 255)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\u0020-\u202D\u202F-\uFFFF]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs/resource-sort-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"DATE" "DATE", :date "DATE", "NAME" "NAME", :name "NAME"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs/create-labels-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.workdocs/time-zone-id-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 256))))

(clojure.spec.alpha/def :portkey.aws.workdocs/user-filter-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ALL" "ALL", :all "ALL", "ACTIVE_PENDING" "ACTIVE_PENDING", :active-pending "ACTIVE_PENDING"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs/id-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 256)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[&\w+-.@]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs/subscription-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ALL" "ALL", :all "ALL"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs/create-comment-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs/Comment]))

(clojure.spec.alpha/def :portkey.aws.workdocs/delete-labels-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-users-response/users (clojure.spec.alpha/and :portkey.aws.workdocs/organization-user-list))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-users-response/total-number-of-users (clojure.spec.alpha/and :portkey.aws.workdocs/size-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-users-response/marker (clojure.spec.alpha/and :portkey.aws.workdocs/page-marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-users-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.describe-users-response/Users :portkey.aws.workdocs.describe-users-response/TotalNumberOfUsers :portkey.aws.workdocs.describe-users-response/Marker]))

(clojure.spec.alpha/def :portkey.aws.workdocs.storage-rule-type/storage-allocated-in-bytes (clojure.spec.alpha/and :portkey.aws.workdocs/positive-size-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/storage-rule-type (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.storage-rule-type/StorageAllocatedInBytes :portkey.aws.workdocs/StorageType]))

(clojure.spec.alpha/def :portkey.aws.workdocs/resource-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"FOLDER" "FOLDER", :folder "FOLDER", "DOCUMENT" "DOCUMENT", :document "DOCUMENT"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs.invalid-argument-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/invalid-argument-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.invalid-argument-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs.delete-folder-contents-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.delete-folder-contents-request/folder-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/delete-folder-contents-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.delete-folder-contents-request/FolderId] :opt-un [:portkey.aws.workdocs.delete-folder-contents-request/AuthenticationToken]))

(clojure.spec.alpha/def :portkey.aws.workdocs/comment-id-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\w+-.@]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs.get-current-user-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/get-current-user-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.get-current-user-request/AuthenticationToken] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.workdocs/resource-state-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ACTIVE" "ACTIVE", :active "ACTIVE", "RESTORING" "RESTORING", :restoring "RESTORING", "RECYCLING" "RECYCLING", :recycling "RECYCLING", "RECYCLED" "RECYCLED", :recycled "RECYCLED"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs.delete-document-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.delete-document-request/document-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/delete-document-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.delete-document-request/DocumentId] :opt-un [:portkey.aws.workdocs.delete-document-request/AuthenticationToken]))

(clojure.spec.alpha/def :portkey.aws.workdocs/label (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 32)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[a-zA-Z0-9._+-/=][a-zA-Z0-9 ._+-/=]*" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs.resource-path/components (clojure.spec.alpha/and :portkey.aws.workdocs/resource-path-component-list))
(clojure.spec.alpha/def :portkey.aws.workdocs/resource-path (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.resource-path/Components]))

(clojure.spec.alpha/def :portkey.aws.workdocs/storage-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"UNLIMITED" "UNLIMITED", :unlimited "UNLIMITED", "QUOTA" "QUOTA", :quota "QUOTA"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs.update-document-version-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-document-version-request/document-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-document-version-request/version-id (clojure.spec.alpha/and :portkey.aws.workdocs/document-version-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-document-version-request/version-status (clojure.spec.alpha/and :portkey.aws.workdocs/document-version-status))
(clojure.spec.alpha/def :portkey.aws.workdocs/update-document-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.update-document-version-request/DocumentId :portkey.aws.workdocs.update-document-version-request/VersionId] :opt-un [:portkey.aws.workdocs.update-document-version-request/AuthenticationToken :portkey.aws.workdocs.update-document-version-request/VersionStatus]))

(clojure.spec.alpha/def :portkey.aws.workdocs/get-current-user-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs/User]))

(clojure.spec.alpha/def :portkey.aws.workdocs.delete-folder-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.delete-folder-request/folder-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/delete-folder-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.delete-folder-request/FolderId] :opt-un [:portkey.aws.workdocs.delete-folder-request/AuthenticationToken]))

(clojure.spec.alpha/def :portkey.aws.workdocs/document-version-metadata-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/document-version-metadata :max-count nil))

(clojure.spec.alpha/def :portkey.aws.workdocs/message-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 0 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 2048))))

(clojure.spec.alpha/def :portkey.aws.workdocs.create-user-request/username (clojure.spec.alpha/and :portkey.aws.workdocs/username-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-user-request/time-zone-id (clojure.spec.alpha/and :portkey.aws.workdocs/time-zone-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-user-request/password (clojure.spec.alpha/and :portkey.aws.workdocs/password-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-user-request/surname (clojure.spec.alpha/and :portkey.aws.workdocs/user-attribute-value-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-user-request/organization-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-user-request/given-name (clojure.spec.alpha/and :portkey.aws.workdocs/user-attribute-value-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-user-request/storage-rule (clojure.spec.alpha/and :portkey.aws.workdocs/storage-rule-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-user-request/email-address (clojure.spec.alpha/and :portkey.aws.workdocs/email-address-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-user-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/create-user-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.create-user-request/Username :portkey.aws.workdocs.create-user-request/GivenName :portkey.aws.workdocs.create-user-request/Surname :portkey.aws.workdocs.create-user-request/Password] :opt-un [:portkey.aws.workdocs.create-user-request/TimeZoneId :portkey.aws.workdocs.create-user-request/OrganizationId :portkey.aws.workdocs.create-user-request/StorageRule :portkey.aws.workdocs.create-user-request/EmailAddress :portkey.aws.workdocs.create-user-request/AuthenticationToken]))

(clojure.spec.alpha/def :portkey.aws.workdocs/document-metadata-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/document-metadata :max-count nil))

(clojure.spec.alpha/def :portkey.aws.workdocs/document-version-id-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\w+-.@]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-root-folders-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-root-folders-request/limit (clojure.spec.alpha/and :portkey.aws.workdocs/limit-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-root-folders-request/marker (clojure.spec.alpha/and :portkey.aws.workdocs/page-marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-root-folders-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.describe-root-folders-request/AuthenticationToken] :opt-un [:portkey.aws.workdocs.describe-root-folders-request/Limit :portkey.aws.workdocs.describe-root-folders-request/Marker]))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-folder-contents-response/folders (clojure.spec.alpha/and :portkey.aws.workdocs/folder-metadata-list))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-folder-contents-response/documents (clojure.spec.alpha/and :portkey.aws.workdocs/document-metadata-list))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-folder-contents-response/marker (clojure.spec.alpha/and :portkey.aws.workdocs/page-marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-folder-contents-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.describe-folder-contents-response/Folders :portkey.aws.workdocs.describe-folder-contents-response/Documents :portkey.aws.workdocs.describe-folder-contents-response/Marker]))

(clojure.spec.alpha/def :portkey.aws.workdocs.storage-limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/storage-limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.storage-limit-exceeded-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs.create-labels-request/resource-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-labels-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/create-labels-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.create-labels-request/ResourceId :portkey.aws.workdocs/Labels] :opt-un [:portkey.aws.workdocs.create-labels-request/AuthenticationToken]))

(clojure.spec.alpha/def :portkey.aws.workdocs.subscription/subscription-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.subscription/end-point (clojure.spec.alpha/and :portkey.aws.workdocs/subscription-end-point-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.subscription/protocol (clojure.spec.alpha/and :portkey.aws.workdocs/subscription-protocol-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/subscription (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.subscription/SubscriptionId :portkey.aws.workdocs.subscription/EndPoint :portkey.aws.workdocs.subscription/Protocol]))

(clojure.spec.alpha/def :portkey.aws.workdocs/hash-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 0 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[&\w+-.@]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs.delete-user-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.delete-user-request/user-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/delete-user-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.delete-user-request/UserId] :opt-un [:portkey.aws.workdocs.delete-user-request/AuthenticationToken]))

(clojure.spec.alpha/def :portkey.aws.workdocs.permission-info/role (clojure.spec.alpha/and :portkey.aws.workdocs/role-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.permission-info/type (clojure.spec.alpha/and :portkey.aws.workdocs/role-permission-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/permission-info (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.permission-info/Role :portkey.aws.workdocs.permission-info/Type]))

(clojure.spec.alpha/def :portkey.aws.workdocs/folder-content-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ALL" "ALL", :all "ALL", "DOCUMENT" "DOCUMENT", :document "DOCUMENT", "FOLDER" "FOLDER", :folder "FOLDER"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs/document-thumbnail-url-map (clojure.spec.alpha/map-of :portkey.aws.workdocs/document-thumbnail-type :portkey.aws.workdocs/url-type))

(clojure.spec.alpha/def :portkey.aws.workdocs/permission-info-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/permission-info :max-count nil))

(clojure.spec.alpha/def :portkey.aws.workdocs/limit-type (clojure.spec.alpha/and clojure.core/int? (fn* [p1__36568__36569__auto__] (clojure.core/<= 1 p1__36568__36569__auto__)) (fn* [p1__36570__36571__auto__] (clojure.core/<= p1__36570__36571__auto__ 999))))

(clojure.spec.alpha/def :portkey.aws.workdocs/field-names-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 256)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\w,]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs/header-name-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 256)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\w-]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.workdocs.initiate-document-version-upload-response/metadata (clojure.spec.alpha/and :portkey.aws.workdocs/document-metadata))
(clojure.spec.alpha/def :portkey.aws.workdocs/initiate-document-version-upload-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.initiate-document-version-upload-response/Metadata :portkey.aws.workdocs/UploadMetadata]))

(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-response/metadata (clojure.spec.alpha/and :portkey.aws.workdocs/document-metadata))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-response/custom-metadata (clojure.spec.alpha/and :portkey.aws.workdocs/custom-metadata-map))
(clojure.spec.alpha/def :portkey.aws.workdocs/get-document-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.get-document-response/Metadata :portkey.aws.workdocs.get-document-response/CustomMetadata]))

(clojure.spec.alpha/def :portkey.aws.workdocs/document-version-status (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ACTIVE" "ACTIVE", :active "ACTIVE"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs/order-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ASCENDING" "ASCENDING", :ascending "ASCENDING", "DESCENDING" "DESCENDING", :descending "DESCENDING"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs/entity-id-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/id-type :max-count nil))

(clojure.spec.alpha/def :portkey.aws.workdocs.share-principal/id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.share-principal/type (clojure.spec.alpha/and :portkey.aws.workdocs/principal-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.share-principal/role (clojure.spec.alpha/and :portkey.aws.workdocs/role-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/share-principal (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.share-principal/Id :portkey.aws.workdocs.share-principal/Type :portkey.aws.workdocs.share-principal/Role] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.workdocs.concurrent-modification-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/concurrent-modification-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.concurrent-modification-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs.document-locked-for-comments-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/document-locked-for-comments-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.document-locked-for-comments-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-path-response/path (clojure.spec.alpha/and :portkey.aws.workdocs/resource-path))
(clojure.spec.alpha/def :portkey.aws.workdocs/get-document-path-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.get-document-path-response/Path]))

(clojure.spec.alpha/def :portkey.aws.workdocs.initiate-document-version-upload-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.initiate-document-version-upload-request/id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.initiate-document-version-upload-request/name (clojure.spec.alpha/and :portkey.aws.workdocs/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.initiate-document-version-upload-request/content-created-timestamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.initiate-document-version-upload-request/content-modified-timestamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.initiate-document-version-upload-request/content-type (clojure.spec.alpha/and :portkey.aws.workdocs/document-content-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.initiate-document-version-upload-request/document-size-in-bytes (clojure.spec.alpha/and :portkey.aws.workdocs/size-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.initiate-document-version-upload-request/parent-folder-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/initiate-document-version-upload-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.initiate-document-version-upload-request/ParentFolderId] :opt-un [:portkey.aws.workdocs.initiate-document-version-upload-request/AuthenticationToken :portkey.aws.workdocs.initiate-document-version-upload-request/Id :portkey.aws.workdocs.initiate-document-version-upload-request/Name :portkey.aws.workdocs.initiate-document-version-upload-request/ContentCreatedTimestamp :portkey.aws.workdocs.initiate-document-version-upload-request/ContentModifiedTimestamp :portkey.aws.workdocs.initiate-document-version-upload-request/ContentType :portkey.aws.workdocs.initiate-document-version-upload-request/DocumentSizeInBytes]))

(clojure.spec.alpha/def :portkey.aws.workdocs.share-result/principal-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.share-result/role (clojure.spec.alpha/and :portkey.aws.workdocs/role-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.share-result/status (clojure.spec.alpha/and :portkey.aws.workdocs/share-status-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.share-result/share-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.share-result/status-message (clojure.spec.alpha/and :portkey.aws.workdocs/message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/share-result (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.share-result/PrincipalId :portkey.aws.workdocs.share-result/Role :portkey.aws.workdocs.share-result/Status :portkey.aws.workdocs.share-result/ShareId :portkey.aws.workdocs.share-result/StatusMessage]))

(clojure.spec.alpha/def :portkey.aws.workdocs.principal/id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.principal/type (clojure.spec.alpha/and :portkey.aws.workdocs/principal-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.principal/roles (clojure.spec.alpha/and :portkey.aws.workdocs/permission-info-list))
(clojure.spec.alpha/def :portkey.aws.workdocs/principal (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.principal/Id :portkey.aws.workdocs.principal/Type :portkey.aws.workdocs.principal/Roles]))

(clojure.spec.alpha/def :portkey.aws.workdocs/comment-text-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 2048))))

(clojure.spec.alpha/def :portkey.aws.workdocs/user-attribute-value-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 64))))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-root-folders-response/folders (clojure.spec.alpha/and :portkey.aws.workdocs/folder-metadata-list))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-root-folders-response/marker (clojure.spec.alpha/and :portkey.aws.workdocs/page-marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-root-folders-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.describe-root-folders-response/Folders :portkey.aws.workdocs.describe-root-folders-response/Marker]))

(clojure.spec.alpha/def :portkey.aws.workdocs/custom-metadata-key-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/custom-metadata-key-type :max-count 8))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-document-versions-response/document-versions (clojure.spec.alpha/and :portkey.aws.workdocs/document-version-metadata-list))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-document-versions-response/marker (clojure.spec.alpha/and :portkey.aws.workdocs/page-marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-document-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.describe-document-versions-response/DocumentVersions :portkey.aws.workdocs.describe-document-versions-response/Marker]))

(clojure.spec.alpha/def :portkey.aws.workdocs.delete-notification-subscription-request/subscription-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.delete-notification-subscription-request/organization-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/delete-notification-subscription-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.delete-notification-subscription-request/SubscriptionId :portkey.aws.workdocs.delete-notification-subscription-request/OrganizationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.workdocs/share-results-list (clojure.spec.alpha/coll-of :portkey.aws.workdocs/share-result :max-count nil))

(clojure.spec.alpha/def :portkey.aws.workdocs.user-storage-metadata/storage-utilized-in-bytes (clojure.spec.alpha/and :portkey.aws.workdocs/size-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.user-storage-metadata/storage-rule (clojure.spec.alpha/and :portkey.aws.workdocs/storage-rule-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/user-storage-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.user-storage-metadata/StorageUtilizedInBytes :portkey.aws.workdocs.user-storage-metadata/StorageRule]))

(clojure.spec.alpha/def :portkey.aws.workdocs.draft-upload-out-of-sync-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/draft-upload-out-of-sync-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.draft-upload-out-of-sync-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs.create-custom-metadata-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-custom-metadata-request/resource-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-custom-metadata-request/version-id (clojure.spec.alpha/and :portkey.aws.workdocs/document-version-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.create-custom-metadata-request/custom-metadata (clojure.spec.alpha/and :portkey.aws.workdocs/custom-metadata-map))
(clojure.spec.alpha/def :portkey.aws.workdocs/create-custom-metadata-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.create-custom-metadata-request/ResourceId :portkey.aws.workdocs.create-custom-metadata-request/CustomMetadata] :opt-un [:portkey.aws.workdocs.create-custom-metadata-request/AuthenticationToken :portkey.aws.workdocs.create-custom-metadata-request/VersionId]))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-folder-contents-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-folder-contents-request/folder-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-folder-contents-request/sort (clojure.spec.alpha/and :portkey.aws.workdocs/resource-sort-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-folder-contents-request/order (clojure.spec.alpha/and :portkey.aws.workdocs/order-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-folder-contents-request/limit (clojure.spec.alpha/and :portkey.aws.workdocs/limit-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-folder-contents-request/marker (clojure.spec.alpha/and :portkey.aws.workdocs/page-marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-folder-contents-request/type (clojure.spec.alpha/and :portkey.aws.workdocs/folder-content-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-folder-contents-request/include (clojure.spec.alpha/and :portkey.aws.workdocs/field-names-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-folder-contents-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.describe-folder-contents-request/FolderId] :opt-un [:portkey.aws.workdocs.describe-folder-contents-request/AuthenticationToken :portkey.aws.workdocs.describe-folder-contents-request/Sort :portkey.aws.workdocs.describe-folder-contents-request/Order :portkey.aws.workdocs.describe-folder-contents-request/Limit :portkey.aws.workdocs.describe-folder-contents-request/Marker :portkey.aws.workdocs.describe-folder-contents-request/Type :portkey.aws.workdocs.describe-folder-contents-request/Include]))

(clojure.spec.alpha/def :portkey.aws.workdocs.update-folder-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-folder-request/folder-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-folder-request/name (clojure.spec.alpha/and :portkey.aws.workdocs/resource-name-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-folder-request/parent-folder-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.update-folder-request/resource-state (clojure.spec.alpha/and :portkey.aws.workdocs/resource-state-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/update-folder-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.update-folder-request/FolderId] :opt-un [:portkey.aws.workdocs.update-folder-request/AuthenticationToken :portkey.aws.workdocs.update-folder-request/Name :portkey.aws.workdocs.update-folder-request/ParentFolderId :portkey.aws.workdocs.update-folder-request/ResourceState]))

(clojure.spec.alpha/def :portkey.aws.workdocs.storage-limit-will-exceed-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/storage-limit-will-exceed-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.storage-limit-will-exceed-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs.delete-labels-request/resource-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.delete-labels-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.delete-labels-request/delete-all (clojure.spec.alpha/and :portkey.aws.workdocs/boolean-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/delete-labels-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.delete-labels-request/ResourceId] :opt-un [:portkey.aws.workdocs.delete-labels-request/AuthenticationToken :portkey.aws.workdocs/Labels :portkey.aws.workdocs.delete-labels-request/DeleteAll]))

(clojure.spec.alpha/def :portkey.aws.workdocs/delete-custom-metadata-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-users-request/user-ids (clojure.spec.alpha/and :portkey.aws.workdocs/user-ids-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-users-request/sort (clojure.spec.alpha/and :portkey.aws.workdocs/user-sort-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-users-request/order (clojure.spec.alpha/and :portkey.aws.workdocs/order-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-users-request/fields (clojure.spec.alpha/and :portkey.aws.workdocs/field-names-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-users-request/marker (clojure.spec.alpha/and :portkey.aws.workdocs/page-marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-users-request/organization-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-users-request/limit (clojure.spec.alpha/and :portkey.aws.workdocs/limit-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-users-request/query (clojure.spec.alpha/and :portkey.aws.workdocs/search-query-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-users-request/include (clojure.spec.alpha/and :portkey.aws.workdocs/user-filter-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-users-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-users-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.describe-users-request/UserIds :portkey.aws.workdocs.describe-users-request/Sort :portkey.aws.workdocs.describe-users-request/Order :portkey.aws.workdocs.describe-users-request/Fields :portkey.aws.workdocs.describe-users-request/Marker :portkey.aws.workdocs.describe-users-request/OrganizationId :portkey.aws.workdocs.describe-users-request/Limit :portkey.aws.workdocs.describe-users-request/Query :portkey.aws.workdocs.describe-users-request/Include :portkey.aws.workdocs.describe-users-request/AuthenticationToken]))

(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-version-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-version-request/document-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-version-request/version-id (clojure.spec.alpha/and :portkey.aws.workdocs/document-version-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-version-request/fields (clojure.spec.alpha/and :portkey.aws.workdocs/field-names-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.get-document-version-request/include-custom-metadata (clojure.spec.alpha/and :portkey.aws.workdocs/boolean-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/get-document-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.get-document-version-request/DocumentId :portkey.aws.workdocs.get-document-version-request/VersionId] :opt-un [:portkey.aws.workdocs.get-document-version-request/AuthenticationToken :portkey.aws.workdocs.get-document-version-request/Fields :portkey.aws.workdocs.get-document-version-request/IncludeCustomMetadata]))

(clojure.spec.alpha/def :portkey.aws.workdocs/custom-metadata-map (clojure.spec.alpha/map-of :portkey.aws.workdocs/custom-metadata-key-type :portkey.aws.workdocs/custom-metadata-value-type))

(clojure.spec.alpha/def :portkey.aws.workdocs.comment-metadata/comment-id (clojure.spec.alpha/and :portkey.aws.workdocs/comment-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.comment-metadata/contributor (clojure.spec.alpha/and :portkey.aws.workdocs/user))
(clojure.spec.alpha/def :portkey.aws.workdocs.comment-metadata/created-timestamp (clojure.spec.alpha/and :portkey.aws.workdocs/timestamp-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.comment-metadata/comment-status (clojure.spec.alpha/and :portkey.aws.workdocs/comment-status-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.comment-metadata/recipient-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/comment-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.comment-metadata/CommentId :portkey.aws.workdocs.comment-metadata/Contributor :portkey.aws.workdocs.comment-metadata/CreatedTimestamp :portkey.aws.workdocs.comment-metadata/CommentStatus :portkey.aws.workdocs.comment-metadata/RecipientId]))

(clojure.spec.alpha/def :portkey.aws.workdocs/role-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"VIEWER" "VIEWER", :viewer "VIEWER", "CONTRIBUTOR" "CONTRIBUTOR", :contributor "CONTRIBUTOR", "OWNER" "OWNER", :owner "OWNER", "COOWNER" "COOWNER", :coowner "COOWNER"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.workdocs.abort-document-version-upload-request/authentication-token (clojure.spec.alpha/and :portkey.aws.workdocs/authentication-header-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.abort-document-version-upload-request/document-id (clojure.spec.alpha/and :portkey.aws.workdocs/resource-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.abort-document-version-upload-request/version-id (clojure.spec.alpha/and :portkey.aws.workdocs/document-version-id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/abort-document-version-upload-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.abort-document-version-upload-request/DocumentId :portkey.aws.workdocs.abort-document-version-upload-request/VersionId] :opt-un [:portkey.aws.workdocs.abort-document-version-upload-request/AuthenticationToken]))

(clojure.spec.alpha/def :portkey.aws.workdocs/header-value-type (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 1024))))

(clojure.spec.alpha/def :portkey.aws.workdocs.illegal-user-state-exception/message (clojure.spec.alpha/and :portkey.aws.workdocs/error-message-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/illegal-user-state-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.workdocs.illegal-user-state-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.workdocs/boolean-type clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.workdocs.describe-notification-subscriptions-request/organization-id (clojure.spec.alpha/and :portkey.aws.workdocs/id-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-notification-subscriptions-request/marker (clojure.spec.alpha/and :portkey.aws.workdocs/page-marker-type))
(clojure.spec.alpha/def :portkey.aws.workdocs.describe-notification-subscriptions-request/limit (clojure.spec.alpha/and :portkey.aws.workdocs/limit-type))
(clojure.spec.alpha/def :portkey.aws.workdocs/describe-notification-subscriptions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.workdocs.describe-notification-subscriptions-request/OrganizationId] :opt-un [:portkey.aws.workdocs.describe-notification-subscriptions-request/Marker :portkey.aws.workdocs.describe-notification-subscriptions-request/Limit]))

(clojure.core/defn create-folder ([input__36693__auto__] (create-folder input__36693__auto__ portkey.aws/*http-client*)) ([input37563 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/folders", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/CreateFolderRequest input37563)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/folders", :body body__36697__auto__} (clojure.core/fn [response37562] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "EntityAlreadyExistsException" :portkey.aws.workdocs/entity-already-exists-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception, "LimitExceededException" :portkey.aws.workdocs/limit-exceeded-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 201 (:status response37562)) (clojure.spec.alpha/unform :portkey.aws.workdocs/create-folder-response (:body response37562)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37562 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37562)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37562}))))))))))

(clojure.core/defn get-folder-path ([input__36693__auto__] (get-folder-path input__36693__auto__ portkey.aws/*http-client*)) ([input37565 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/folders/{FolderId}/path", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/GetFolderPathRequest input37565)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"FolderId" "FolderId"}) (portkey.awsgen/params-to-querystring {"limit" "Limit", "fields" "Fields", "marker" "Marker"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/folders/{FolderId}/path", :body body__36697__auto__} (clojure.core/fn [response37564] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37564)) (clojure.spec.alpha/unform :portkey.aws.workdocs/get-folder-path-response (:body response37564)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37564 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37564)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37564}))))))))))

(clojure.core/defn remove-all-resource-permissions ([input__36693__auto__] (remove-all-resource-permissions input__36693__auto__ portkey.aws/*http-client*)) ([input37567 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/permissions", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/RemoveAllResourcePermissionsRequest input37567)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"ResourceId" "ResourceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/permissions", :body body__36697__auto__} (clojure.core/fn [response37566] (clojure.core/let [errors__36698__auto__ {"UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 204 (:status response37566)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37566 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37566)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37566}))))))))))

(clojure.core/defn get-document-version ([input__36693__auto__] (get-document-version input__36693__auto__ portkey.aws/*http-client*)) ([input37569 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/versions/{VersionId}", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/GetDocumentVersionRequest input37569)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"DocumentId" "DocumentId", "VersionId" "VersionId"}) (portkey.awsgen/params-to-querystring {"fields" "Fields", "includeCustomMetadata" "IncludeCustomMetadata"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/versions/{VersionId}", :body body__36697__auto__} (clojure.core/fn [response37568] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception}] (if (clojure.core/= 200 (:status response37568)) (clojure.spec.alpha/unform :portkey.aws.workdocs/get-document-version-response (:body response37568)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37568 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37568)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37568}))))))))))

(clojure.core/defn get-document ([input__36693__auto__] (get-document input__36693__auto__ portkey.aws/*http-client*)) ([input37571 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/GetDocumentRequest input37571)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"DocumentId" "DocumentId"}) (portkey.awsgen/params-to-querystring {"includeCustomMetadata" "IncludeCustomMetadata"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}", :body body__36697__auto__} (clojure.core/fn [response37570] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "InvalidArgumentException" :portkey.aws.workdocs/invalid-argument-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37570)) (clojure.spec.alpha/unform :portkey.aws.workdocs/get-document-response (:body response37570)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37570 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37570)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37570}))))))))))

(clojure.core/defn describe-folder-contents ([input__36693__auto__] (describe-folder-contents input__36693__auto__ portkey.aws/*http-client*)) ([input37573 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/folders/{FolderId}/contents", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DescribeFolderContentsRequest input37573)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"FolderId" "FolderId"}) (portkey.awsgen/params-to-querystring {"sort" "Sort", "order" "Order", "limit" "Limit", "marker" "Marker", "type" "Type", "include" "Include"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/folders/{FolderId}/contents", :body body__36697__auto__} (clojure.core/fn [response37572] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "InvalidArgumentException" :portkey.aws.workdocs/invalid-argument-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception}] (if (clojure.core/= 200 (:status response37572)) (clojure.spec.alpha/unform :portkey.aws.workdocs/describe-folder-contents-response (:body response37572)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37572 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37572)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37572}))))))))))

(clojure.core/defn delete-labels ([input__36693__auto__] (delete-labels input__36693__auto__ portkey.aws/*http-client*)) ([input37575 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/labels", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DeleteLabelsRequest input37575)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"ResourceId" "ResourceId"}) (portkey.awsgen/params-to-querystring {"labels" "Labels", "deleteAll" "DeleteAll"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/labels", :body body__36697__auto__} (clojure.core/fn [response37574] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37574)) (clojure.spec.alpha/unform :portkey.aws.workdocs/delete-labels-response (:body response37574)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37574 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37574)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37574}))))))))))

(clojure.core/defn describe-notification-subscriptions ([input__36693__auto__] (describe-notification-subscriptions input__36693__auto__ portkey.aws/*http-client*)) ([input37577 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/organizations/{OrganizationId}/subscriptions", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DescribeNotificationSubscriptionsRequest input37577)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"OrganizationId" "OrganizationId"}) (portkey.awsgen/params-to-querystring {"marker" "Marker", "limit" "Limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/organizations/{OrganizationId}/subscriptions", :body body__36697__auto__} (clojure.core/fn [response37576] (clojure.core/let [errors__36698__auto__ {"UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37576)) (clojure.spec.alpha/unform :portkey.aws.workdocs/describe-notification-subscriptions-response (:body response37576)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37576 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37576)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37576}))))))))))

(clojure.core/defn describe-root-folders ([input__36693__auto__] (describe-root-folders input__36693__auto__ portkey.aws/*http-client*)) ([input37579 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/me/root", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DescribeRootFoldersRequest input37579)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"limit" "Limit", "marker" "Marker"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/me/root", :body body__36697__auto__} (clojure.core/fn [response37578] (clojure.core/let [errors__36698__auto__ {"UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "InvalidArgumentException" :portkey.aws.workdocs/invalid-argument-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37578)) (clojure.spec.alpha/unform :portkey.aws.workdocs/describe-root-folders-response (:body response37578)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37578 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37578)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37578}))))))))))

(clojure.core/defn add-resource-permissions ([input__36693__auto__] (add-resource-permissions input__36693__auto__ portkey.aws/*http-client*)) ([input37581 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/permissions", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/AddResourcePermissionsRequest input37581)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"ResourceId" "ResourceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/permissions", :body body__36697__auto__} (clojure.core/fn [response37580] (clojure.core/let [errors__36698__auto__ {"UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 201 (:status response37580)) (clojure.spec.alpha/unform :portkey.aws.workdocs/add-resource-permissions-response (:body response37580)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37580 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37580)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37580}))))))))))

(clojure.core/defn describe-document-versions ([input__36693__auto__] (describe-document-versions input__36693__auto__ portkey.aws/*http-client*)) ([input37583 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/versions", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DescribeDocumentVersionsRequest input37583)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"DocumentId" "DocumentId"}) (portkey.awsgen/params-to-querystring {"marker" "Marker", "limit" "Limit", "include" "Include", "fields" "Fields"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/versions", :body body__36697__auto__} (clojure.core/fn [response37582] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "InvalidArgumentException" :portkey.aws.workdocs/invalid-argument-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception}] (if (clojure.core/= 200 (:status response37582)) (clojure.spec.alpha/unform :portkey.aws.workdocs/describe-document-versions-response (:body response37582)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37582 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37582)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37582}))))))))))

(clojure.core/defn delete-user ([input__36693__auto__] (delete-user input__36693__auto__ portkey.aws/*http-client*)) ([input37585 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/users/{UserId}", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DeleteUserRequest input37585)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"UserId" "UserId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/users/{UserId}", :body body__36697__auto__} (clojure.core/fn [response37584] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 204 (:status response37584)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37584 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37584)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37584}))))))))))

(clojure.core/defn create-user ([input__36693__auto__] (create-user input__36693__auto__ portkey.aws/*http-client*)) ([input37587 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/users", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/CreateUserRequest input37587)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/users", :body body__36697__auto__} (clojure.core/fn [response37586] (clojure.core/let [errors__36698__auto__ {"EntityAlreadyExistsException" :portkey.aws.workdocs/entity-already-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 201 (:status response37586)) (clojure.spec.alpha/unform :portkey.aws.workdocs/create-user-response (:body response37586)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37586 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37586)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37586}))))))))))

(clojure.core/defn describe-resource-permissions ([input__36693__auto__] (describe-resource-permissions input__36693__auto__ portkey.aws/*http-client*)) ([input37589 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/permissions", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DescribeResourcePermissionsRequest input37589)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"ResourceId" "ResourceId"}) (portkey.awsgen/params-to-querystring {"limit" "Limit", "marker" "Marker"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/permissions", :body body__36697__auto__} (clojure.core/fn [response37588] (clojure.core/let [errors__36698__auto__ {"UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37588)) (clojure.spec.alpha/unform :portkey.aws.workdocs/describe-resource-permissions-response (:body response37588)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37588 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37588)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37588}))))))))))

(clojure.core/defn describe-users ([input__36693__auto__] (describe-users input__36693__auto__ portkey.aws/*http-client*)) ([input37591 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/users", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DescribeUsersRequest input37591)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"userIds" "UserIds", "query" "Query", "sort" "Sort", "limit" "Limit", "include" "Include", "order" "Order", "organizationId" "OrganizationId", "fields" "Fields", "marker" "Marker"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/users", :body body__36697__auto__} (clojure.core/fn [response37590] (clojure.core/let [errors__36698__auto__ {"UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception, "InvalidArgumentException" :portkey.aws.workdocs/invalid-argument-exception}] (if (clojure.core/= 200 (:status response37590)) (clojure.spec.alpha/unform :portkey.aws.workdocs/describe-users-response (:body response37590)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37590 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37590)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37590}))))))))))

(clojure.core/defn get-document-path ([input__36693__auto__] (get-document-path input__36693__auto__ portkey.aws/*http-client*)) ([input37593 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/path", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/GetDocumentPathRequest input37593)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"DocumentId" "DocumentId"}) (portkey.awsgen/params-to-querystring {"limit" "Limit", "fields" "Fields", "marker" "Marker"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/path", :body body__36697__auto__} (clojure.core/fn [response37592] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37592)) (clojure.spec.alpha/unform :portkey.aws.workdocs/get-document-path-response (:body response37592)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37592 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37592)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37592}))))))))))

(clojure.core/defn remove-resource-permission ([input__36693__auto__] (remove-resource-permission input__36693__auto__ portkey.aws/*http-client*)) ([input37595 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/permissions/{PrincipalId}", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/RemoveResourcePermissionRequest input37595)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"ResourceId" "ResourceId", "PrincipalId" "PrincipalId"}) (portkey.awsgen/params-to-querystring {"type" "PrincipalType"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/permissions/{PrincipalId}", :body body__36697__auto__} (clojure.core/fn [response37594] (clojure.core/let [errors__36698__auto__ {"UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 204 (:status response37594)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37594 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37594)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37594}))))))))))

(clojure.core/defn update-document-version ([input__36693__auto__] (update-document-version input__36693__auto__ portkey.aws/*http-client*)) ([input37597 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/versions/{VersionId}", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/UpdateDocumentVersionRequest input37597)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"DocumentId" "DocumentId", "VersionId" "VersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/versions/{VersionId}", :body body__36697__auto__} (clojure.core/fn [response37596] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception, "ConcurrentModificationException" :portkey.aws.workdocs/concurrent-modification-exception, "InvalidOperationException" :portkey.aws.workdocs/invalid-operation-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37596)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37596 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37596)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37596}))))))))))

(clojure.core/defn get-folder ([input__36693__auto__] (get-folder input__36693__auto__ portkey.aws/*http-client*)) ([input37599 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/folders/{FolderId}", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/GetFolderRequest input37599)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"FolderId" "FolderId"}) (portkey.awsgen/params-to-querystring {"includeCustomMetadata" "IncludeCustomMetadata"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/folders/{FolderId}", :body body__36697__auto__} (clojure.core/fn [response37598] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "InvalidArgumentException" :portkey.aws.workdocs/invalid-argument-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception}] (if (clojure.core/= 200 (:status response37598)) (clojure.spec.alpha/unform :portkey.aws.workdocs/get-folder-response (:body response37598)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37598 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37598)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37598}))))))))))

(clojure.core/defn abort-document-version-upload ([input__36693__auto__] (abort-document-version-upload input__36693__auto__ portkey.aws/*http-client*)) ([input37601 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/versions/{VersionId}", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/AbortDocumentVersionUploadRequest input37601)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"DocumentId" "DocumentId", "VersionId" "VersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/versions/{VersionId}", :body body__36697__auto__} (clojure.core/fn [response37600] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 204 (:status response37600)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37600 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37600)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37600}))))))))))

(clojure.core/defn describe-comments ([input__36693__auto__] (describe-comments input__36693__auto__ portkey.aws/*http-client*)) ([input37603 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/versions/{VersionId}/comments", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DescribeCommentsRequest input37603)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"DocumentId" "DocumentId", "VersionId" "VersionId"}) (portkey.awsgen/params-to-querystring {"limit" "Limit", "marker" "Marker"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/versions/{VersionId}/comments", :body body__36697__auto__} (clojure.core/fn [response37602] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37602)) (clojure.spec.alpha/unform :portkey.aws.workdocs/describe-comments-response (:body response37602)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37602 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37602)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37602}))))))))))

(clojure.core/defn create-comment ([input__36693__auto__] (create-comment input__36693__auto__ portkey.aws/*http-client*)) ([input37605 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/versions/{VersionId}/comment", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/CreateCommentRequest input37605)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"DocumentId" "DocumentId", "VersionId" "VersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/versions/{VersionId}/comment", :body body__36697__auto__} (clojure.core/fn [response37604] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception, "DocumentLockedForCommentsException" :portkey.aws.workdocs/document-locked-for-comments-exception}] (if (clojure.core/= 201 (:status response37604)) (clojure.spec.alpha/unform :portkey.aws.workdocs/create-comment-response (:body response37604)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37604 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37604)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37604}))))))))))

(clojure.core/defn delete-notification-subscription ([input__36693__auto__] (delete-notification-subscription input__36693__auto__ portkey.aws/*http-client*)) ([input37607 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/organizations/{OrganizationId}/subscriptions/{SubscriptionId}", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DeleteNotificationSubscriptionRequest input37607)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionId" "SubscriptionId", "OrganizationId" "OrganizationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/organizations/{OrganizationId}/subscriptions/{SubscriptionId}", :body body__36697__auto__} (clojure.core/fn [response37606] (clojure.core/let [errors__36698__auto__ {"UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception}] (if (clojure.core/= 200 (:status response37606)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37606 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37606)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37606}))))))))))

(clojure.core/defn initiate-document-version-upload ([input__36693__auto__] (initiate-document-version-upload input__36693__auto__ portkey.aws/*http-client*)) ([input37609 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/InitiateDocumentVersionUploadRequest input37609)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents", :body body__36697__auto__} (clojure.core/fn [response37608] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception, "EntityAlreadyExistsException" :portkey.aws.workdocs/entity-already-exists-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception, "ResourceAlreadyCheckedOutException" :portkey.aws.workdocs/resource-already-checked-out-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "StorageLimitExceededException" :portkey.aws.workdocs/storage-limit-exceeded-exception, "DraftUploadOutOfSyncException" :portkey.aws.workdocs/draft-upload-out-of-sync-exception, "StorageLimitWillExceedException" :portkey.aws.workdocs/storage-limit-will-exceed-exception}] (if (clojure.core/= 201 (:status response37608)) (clojure.spec.alpha/unform :portkey.aws.workdocs/initiate-document-version-upload-response (:body response37608)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37608 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37608)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37608}))))))))))

(clojure.core/defn create-notification-subscription ([input__36693__auto__] (create-notification-subscription input__36693__auto__ portkey.aws/*http-client*)) ([input37611 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/organizations/{OrganizationId}/subscriptions", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/CreateNotificationSubscriptionRequest input37611)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"OrganizationId" "OrganizationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/organizations/{OrganizationId}/subscriptions", :body body__36697__auto__} (clojure.core/fn [response37610] (clojure.core/let [errors__36698__auto__ {"UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "TooManySubscriptionsException" :portkey.aws.workdocs/too-many-subscriptions-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37610)) (clojure.spec.alpha/unform :portkey.aws.workdocs/create-notification-subscription-response (:body response37610)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37610 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37610)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37610}))))))))))

(clojure.core/defn get-current-user ([input__36693__auto__] (get-current-user input__36693__auto__ portkey.aws/*http-client*)) ([input37613 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/me", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/GetCurrentUserRequest input37613)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/me", :body body__36697__auto__} (clojure.core/fn [response37612] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37612)) (clojure.spec.alpha/unform :portkey.aws.workdocs/get-current-user-response (:body response37612)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37612 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37612)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37612}))))))))))

(clojure.core/defn create-labels ([input__36693__auto__] (create-labels input__36693__auto__ portkey.aws/*http-client*)) ([input37615 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/labels", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/CreateLabelsRequest input37615)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"ResourceId" "ResourceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/labels", :body body__36697__auto__} (clojure.core/fn [response37614] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception, "TooManyLabelsException" :portkey.aws.workdocs/too-many-labels-exception}] (if (clojure.core/= 200 (:status response37614)) (clojure.spec.alpha/unform :portkey.aws.workdocs/create-labels-response (:body response37614)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37614 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37614)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37614}))))))))))

(clojure.core/defn create-custom-metadata ([input__36693__auto__] (create-custom-metadata input__36693__auto__ portkey.aws/*http-client*)) ([input37617 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/customMetadata", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/CreateCustomMetadataRequest input37617)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"ResourceId" "ResourceId"}) (portkey.awsgen/params-to-querystring {"versionid" "VersionId"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/customMetadata", :body body__36697__auto__} (clojure.core/fn [response37616] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception, "CustomMetadataLimitExceededException" :portkey.aws.workdocs/custom-metadata-limit-exceeded-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37616)) (clojure.spec.alpha/unform :portkey.aws.workdocs/create-custom-metadata-response (:body response37616)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37616 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37616)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37616}))))))))))

(clojure.core/defn delete-folder-contents ([input__36693__auto__] (delete-folder-contents input__36693__auto__ portkey.aws/*http-client*)) ([input37619 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/folders/{FolderId}/contents", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DeleteFolderContentsRequest input37619)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"FolderId" "FolderId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/folders/{FolderId}/contents", :body body__36697__auto__} (clojure.core/fn [response37618] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 204 (:status response37618)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37618 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37618)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37618}))))))))))

(clojure.core/defn activate-user ([input__36693__auto__] (activate-user input__36693__auto__ portkey.aws/*http-client*)) ([input37621 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/users/{UserId}/activation", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/ActivateUserRequest input37621)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"UserId" "UserId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/users/{UserId}/activation", :body body__36697__auto__} (clojure.core/fn [response37620] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37620)) (clojure.spec.alpha/unform :portkey.aws.workdocs/activate-user-response (:body response37620)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37620 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37620)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37620}))))))))))

(clojure.core/defn deactivate-user ([input__36693__auto__] (deactivate-user input__36693__auto__ portkey.aws/*http-client*)) ([input37623 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/users/{UserId}/activation", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DeactivateUserRequest input37623)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"UserId" "UserId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/users/{UserId}/activation", :body body__36697__auto__} (clojure.core/fn [response37622] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 204 (:status response37622)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37622 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37622)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37622}))))))))))

(clojure.core/defn update-document ([input__36693__auto__] (update-document input__36693__auto__ portkey.aws/*http-client*)) ([input37625 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/UpdateDocumentRequest input37625)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"DocumentId" "DocumentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}", :body body__36697__auto__} (clojure.core/fn [response37624] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "LimitExceededException" :portkey.aws.workdocs/limit-exceeded-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception, "EntityAlreadyExistsException" :portkey.aws.workdocs/entity-already-exists-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "ConcurrentModificationException" :portkey.aws.workdocs/concurrent-modification-exception}] (if (clojure.core/= 200 (:status response37624)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37624 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37624)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37624}))))))))))

(clojure.core/defn delete-folder ([input__36693__auto__] (delete-folder input__36693__auto__ portkey.aws/*http-client*)) ([input37627 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/folders/{FolderId}", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DeleteFolderRequest input37627)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"FolderId" "FolderId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/folders/{FolderId}", :body body__36697__auto__} (clojure.core/fn [response37626] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception, "ConcurrentModificationException" :portkey.aws.workdocs/concurrent-modification-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 204 (:status response37626)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37626 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37626)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37626}))))))))))

(clojure.core/defn delete-document ([input__36693__auto__] (delete-document input__36693__auto__ portkey.aws/*http-client*)) ([input37629 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DeleteDocumentRequest input37629)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"DocumentId" "DocumentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}", :body body__36697__auto__} (clojure.core/fn [response37628] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception, "ConcurrentModificationException" :portkey.aws.workdocs/concurrent-modification-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 204 (:status response37628)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37628 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37628)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37628}))))))))))

(clojure.core/defn delete-custom-metadata ([input__36693__auto__] (delete-custom-metadata input__36693__auto__ portkey.aws/*http-client*)) ([input37631 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/customMetadata", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DeleteCustomMetadataRequest input37631)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"ResourceId" "ResourceId"}) (portkey.awsgen/params-to-querystring {"versionId" "VersionId", "keys" "Keys", "deleteAll" "DeleteAll"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/resources/{ResourceId}/customMetadata", :body body__36697__auto__} (clojure.core/fn [response37630] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37630)) (clojure.spec.alpha/unform :portkey.aws.workdocs/delete-custom-metadata-response (:body response37630)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37630 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37630)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37630}))))))))))

(clojure.core/defn delete-comment ([input__36693__auto__] (delete-comment input__36693__auto__ portkey.aws/*http-client*)) ([input37633 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/versions/{VersionId}/comment/{CommentId}", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DeleteCommentRequest input37633)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"DocumentId" "DocumentId", "VersionId" "VersionId", "CommentId" "CommentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/documents/{DocumentId}/versions/{VersionId}/comment/{CommentId}", :body body__36697__auto__} (clojure.core/fn [response37632] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception, "DocumentLockedForCommentsException" :portkey.aws.workdocs/document-locked-for-comments-exception}] (if (clojure.core/= 204 (:status response37632)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37632 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37632)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37632}))))))))))

(clojure.core/defn update-user ([input__36693__auto__] (update-user input__36693__auto__ portkey.aws/*http-client*)) ([input37635 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/users/{UserId}", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/UpdateUserRequest input37635)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"UserId" "UserId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/users/{UserId}", :body body__36697__auto__} (clojure.core/fn [response37634] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "IllegalUserStateException" :portkey.aws.workdocs/illegal-user-state-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception, "DeactivatingLastSystemUserException" :portkey.aws.workdocs/deactivating-last-system-user-exception}] (if (clojure.core/= 200 (:status response37634)) (clojure.spec.alpha/unform :portkey.aws.workdocs/update-user-response (:body response37634)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37634 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37634)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37634}))))))))))

(clojure.core/defn update-folder ([input__36693__auto__] (update-folder input__36693__auto__ portkey.aws/*http-client*)) ([input37637 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/folders/{FolderId}", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/UpdateFolderRequest input37637)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {"FolderId" "FolderId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/folders/{FolderId}", :body body__36697__auto__} (clojure.core/fn [response37636] (clojure.core/let [errors__36698__auto__ {"EntityNotExistsException" :portkey.aws.workdocs/entity-not-exists-exception, "LimitExceededException" :portkey.aws.workdocs/limit-exceeded-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception, "EntityAlreadyExistsException" :portkey.aws.workdocs/entity-already-exists-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "ProhibitedStateException" :portkey.aws.workdocs/prohibited-state-exception, "UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "ConcurrentModificationException" :portkey.aws.workdocs/concurrent-modification-exception}] (if (clojure.core/= 200 (:status response37636)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37636 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37636)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37636}))))))))))

(clojure.core/defn describe-activities ([input__36693__auto__] (describe-activities input__36693__auto__ portkey.aws/*http-client*)) ([input37639 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/activities", :body (clojure.spec.alpha/unform :portkey.aws.workdocs/DescribeActivitiesRequest input37639)} (portkey.awsgen/params-to-header {"AuthenticationToken" ["Authentication" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"startTime" "StartTime", "endTime" "EndTime", "organizationId" "OrganizationId", "userId" "UserId", "limit" "Limit", "marker" "Marker"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/api/v1/activities", :body body__36697__auto__} (clojure.core/fn [response37638] (clojure.core/let [errors__36698__auto__ {"UnauthorizedOperationException" :portkey.aws.workdocs/unauthorized-operation-exception, "UnauthorizedResourceAccessException" :portkey.aws.workdocs/unauthorized-resource-access-exception, "InvalidArgumentException" :portkey.aws.workdocs/invalid-argument-exception, "FailedDependencyException" :portkey.aws.workdocs/failed-dependency-exception, "ServiceUnavailableException" :portkey.aws.workdocs/service-unavailable-exception}] (if (clojure.core/= 200 (:status response37638)) (clojure.spec.alpha/unform :portkey.aws.workdocs/describe-activities-response (:body response37638)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37638 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37638)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37638}))))))))))
