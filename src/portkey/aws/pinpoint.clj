(ns portkey.aws.pinpoint (:require [portkey.aws]))

(def
 endpoints
 '{"us-east-1"
   {:credential-scope
    {:service "mobiletargeting", :region "us-east-1"},
    :ssl-common-name "pinpoint.us-east-1.amazonaws.com",
    :endpoint "https://pinpoint.us-east-1.amazonaws.com"}})

(clojure.spec.alpha/def :portkey.aws.pinpoint.treatment-resource/id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.treatment-resource/size-percent (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.treatment-resource/state (clojure.spec.alpha/and :portkey.aws.pinpoint/campaign-state))
(clojure.spec.alpha/def :portkey.aws.pinpoint.treatment-resource/treatment-description (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.treatment-resource/treatment-name (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/treatment-resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.treatment-resource/Id :portkey.aws.pinpoint/MessageConfiguration :portkey.aws.pinpoint/Schedule :portkey.aws.pinpoint.treatment-resource/SizePercent :portkey.aws.pinpoint.treatment-resource/State :portkey.aws.pinpoint.treatment-resource/TreatmentDescription :portkey.aws.pinpoint.treatment-resource/TreatmentName]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/attribute-type (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"INCLUSIVE" "INCLUSIVE", :inclusive "INCLUSIVE", "EXCLUSIVE" "EXCLUSIVE", :exclusive "EXCLUSIVE"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-request/define-segment (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-request/external-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-request/register-endpoints (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-request/role-arn (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-request/s3-url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-request/segment-name (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/import-job-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.import-job-request/DefineSegment :portkey.aws.pinpoint.import-job-request/ExternalId :portkey.aws.pinpoint/Format :portkey.aws.pinpoint.import-job-request/RegisterEndpoints :portkey.aws.pinpoint.import-job-request/RoleArn :portkey.aws.pinpoint.import-job-request/S3Url :portkey.aws.pinpoint.import-job-request/SegmentId :portkey.aws.pinpoint.import-job-request/SegmentName]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.internal-server-error-exception/message (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.internal-server-error-exception/requestid (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/internal-server-error-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.internal-server-error-exception/Message :portkey.aws.pinpoint.internal-server-error-exception/RequestID]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.method-not-allowed-exception/message (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.method-not-allowed-exception/requestid (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/method-not-allowed-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.method-not-allowed-exception/Message :portkey.aws.pinpoint.method-not-allowed-exception/RequestID]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.write-campaign-request/additional-treatments (clojure.spec.alpha/and :portkey.aws.pinpoint/list-of-write-treatment-resource))
(clojure.spec.alpha/def :portkey.aws.pinpoint.write-campaign-request/treatment-description (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.write-campaign-request/treatment-name (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.write-campaign-request/limits (clojure.spec.alpha/and :portkey.aws.pinpoint/campaign-limits))
(clojure.spec.alpha/def :portkey.aws.pinpoint.write-campaign-request/segment-version (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.write-campaign-request/description (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.write-campaign-request/is-paused (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.write-campaign-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.write-campaign-request/name (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.write-campaign-request/holdout-percent (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint/write-campaign-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.write-campaign-request/AdditionalTreatments :portkey.aws.pinpoint.write-campaign-request/TreatmentDescription :portkey.aws.pinpoint.write-campaign-request/TreatmentName :portkey.aws.pinpoint.write-campaign-request/Limits :portkey.aws.pinpoint.write-campaign-request/SegmentVersion :portkey.aws.pinpoint.write-campaign-request/Description :portkey.aws.pinpoint.write-campaign-request/IsPaused :portkey.aws.pinpoint/MessageConfiguration :portkey.aws.pinpoint.write-campaign-request/SegmentId :portkey.aws.pinpoint/Schedule :portkey.aws.pinpoint.write-campaign-request/Name :portkey.aws.pinpoint.write-campaign-request/HoldoutPercent]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmmessage/collapse-key (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmmessage/restricted-package-name (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmmessage/body (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmmessage/image-url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmmessage/title (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmmessage/silent-push (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmmessage/sound (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmmessage/raw-content (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmmessage/url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmmessage/substitutions (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmmessage/small-image-icon-url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmmessage/icon-reference (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmmessage/data (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmmessage/image-icon-url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/gcmmessage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.gcmmessage/CollapseKey :portkey.aws.pinpoint.gcmmessage/RestrictedPackageName :portkey.aws.pinpoint.gcmmessage/Body :portkey.aws.pinpoint.gcmmessage/ImageUrl :portkey.aws.pinpoint.gcmmessage/Title :portkey.aws.pinpoint.gcmmessage/SilentPush :portkey.aws.pinpoint.gcmmessage/Sound :portkey.aws.pinpoint.gcmmessage/RawContent :portkey.aws.pinpoint.gcmmessage/Url :portkey.aws.pinpoint.gcmmessage/Substitutions :portkey.aws.pinpoint.gcmmessage/SmallImageIconUrl :portkey.aws.pinpoint.gcmmessage/IconReference :portkey.aws.pinpoint.gcmmessage/Data :portkey.aws.pinpoint.gcmmessage/ImageIconUrl :portkey.aws.pinpoint/Action]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/update-application-settings-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/ApplicationSettingsResource] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/send-messages-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/MessageResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.message-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message-response/request-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message-response/result (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of-message-result))
(clojure.spec.alpha/def :portkey.aws.pinpoint/message-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.message-response/ApplicationId :portkey.aws.pinpoint.message-response/RequestId :portkey.aws.pinpoint.message-response/Result]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.delete-gcm-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-gcm-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.delete-gcm-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-apns-sandbox-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/APNSSandboxChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-response/failures (clojure.spec.alpha/and :portkey.aws.pinpoint/list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-response/completion-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-response/type (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-response/total-pieces (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-response/total-failures (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-response/definition (clojure.spec.alpha/and :portkey.aws.pinpoint/import-job-resource))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-response/failed-pieces (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-response/completed-pieces (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-response/total-processed (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint/import-job-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint/JobStatus :portkey.aws.pinpoint.import-job-response/Failures :portkey.aws.pinpoint.import-job-response/CompletionDate :portkey.aws.pinpoint.import-job-response/Type :portkey.aws.pinpoint.import-job-response/TotalPieces :portkey.aws.pinpoint.import-job-response/TotalFailures :portkey.aws.pinpoint.import-job-response/ApplicationId :portkey.aws.pinpoint.import-job-response/Definition :portkey.aws.pinpoint.import-job-response/FailedPieces :portkey.aws.pinpoint.import-job-response/CompletedPieces :portkey.aws.pinpoint.import-job-response/CreationDate :portkey.aws.pinpoint.import-job-response/Id :portkey.aws.pinpoint.import-job-response/TotalProcessed]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/--timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.pinpoint/create-app-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/ApplicationResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/list-of-segment-response (clojure.spec.alpha/coll-of :portkey.aws.pinpoint/segment-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.message-request/addresses (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of-address-configuration))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message-request/context (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message-request/message-configuration (clojure.spec.alpha/and :portkey.aws.pinpoint/direct-message-configuration))
(clojure.spec.alpha/def :portkey.aws.pinpoint/message-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.message-request/Addresses :portkey.aws.pinpoint.message-request/Context :portkey.aws.pinpoint.message-request/MessageConfiguration]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segment-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segment-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-segment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-segment-request/SegmentId :portkey.aws.pinpoint.get-segment-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/campaign-state (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint/CampaignStatus]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-endpoint-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/EndpointResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaign-version-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaign-version-request/campaign-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaign-version-request/version (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-campaign-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-campaign-version-request/Version :portkey.aws.pinpoint.get-campaign-version-request/ApplicationId :portkey.aws.pinpoint.get-campaign-version-request/CampaignId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-limits/daily (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-limits/total (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint/campaign-limits (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.campaign-limits/Daily :portkey.aws.pinpoint.campaign-limits/Total]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-apps-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/ApplicationsResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.create-campaign-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/create-campaign-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.create-campaign-request/ApplicationId :portkey.aws.pinpoint/WriteCampaignRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmchannel-response/platform (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmchannel-response/credential (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmchannel-response/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmchannel-response/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmchannel-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmchannel-response/is-archived (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmchannel-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmchannel-response/version (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmchannel-response/last-modified-by (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmchannel-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/gcmchannel-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.gcmchannel-response/Platform :portkey.aws.pinpoint.gcmchannel-response/Credential :portkey.aws.pinpoint.gcmchannel-response/LastModifiedDate :portkey.aws.pinpoint.gcmchannel-response/Enabled :portkey.aws.pinpoint.gcmchannel-response/ApplicationId :portkey.aws.pinpoint.gcmchannel-response/IsArchived :portkey.aws.pinpoint.gcmchannel-response/CreationDate :portkey.aws.pinpoint.gcmchannel-response/Version :portkey.aws.pinpoint.gcmchannel-response/LastModifiedBy :portkey.aws.pinpoint.gcmchannel-response/Id]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.quiet-time/end (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.quiet-time/start (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/quiet-time (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.quiet-time/End :portkey.aws.pinpoint.quiet-time/Start]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-application-settings-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/ApplicationSettingsResource] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-app-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/ApplicationResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.bad-request-exception/requestid (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/bad-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.bad-request-exception/Message :portkey.aws.pinpoint.bad-request-exception/RequestID]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-campaigns-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/CampaignsResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.activity-response/total-endpoint-count (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.activity-response/timezones-completed-count (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.activity-response/start (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.activity-response/end (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.activity-response/result (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.activity-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.activity-response/successful-endpoint-count (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.activity-response/state (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.activity-response/scheduled-start (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.activity-response/timezones-total-count (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.activity-response/campaign-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.activity-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.activity-response/treatment-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/activity-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.activity-response/TotalEndpointCount :portkey.aws.pinpoint.activity-response/TimezonesCompletedCount :portkey.aws.pinpoint.activity-response/Start :portkey.aws.pinpoint.activity-response/End :portkey.aws.pinpoint.activity-response/Result :portkey.aws.pinpoint.activity-response/ApplicationId :portkey.aws.pinpoint.activity-response/SuccessfulEndpointCount :portkey.aws.pinpoint.activity-response/State :portkey.aws.pinpoint.activity-response/ScheduledStart :portkey.aws.pinpoint.activity-response/TimezonesTotalCount :portkey.aws.pinpoint.activity-response/CampaignId :portkey.aws.pinpoint.activity-response/Id :portkey.aws.pinpoint.activity-response/TreatmentId]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/job-status (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"COMPLETED" "COMPLETED", :initializing "INITIALIZING", "FAILING" "FAILING", :processing "PROCESSING", :completed "COMPLETED", :created "CREATED", "COMPLETING" "COMPLETING", :failing "FAILING", "FAILED" "FAILED", :completing "COMPLETING", "INITIALIZING" "INITIALIZING", "PROCESSING" "PROCESSING", :failed "FAILED", "CREATED" "CREATED"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint/create-app-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/CreateApplicationRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-gcm-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-gcm-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-gcm-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/default-state (clojure.spec.alpha/and :portkey.aws.pinpoint/campaign-state))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/additional-treatments (clojure.spec.alpha/and :portkey.aws.pinpoint/list-of-treatment-resource))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/treatment-description (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/treatment-name (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/limits (clojure.spec.alpha/and :portkey.aws.pinpoint/campaign-limits))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/segment-version (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/description (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/is-paused (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/state (clojure.spec.alpha/and :portkey.aws.pinpoint/campaign-state))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/version (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/name (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-response/holdout-percent (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint/campaign-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.campaign-response/DefaultState :portkey.aws.pinpoint.campaign-response/LastModifiedDate :portkey.aws.pinpoint.campaign-response/AdditionalTreatments :portkey.aws.pinpoint.campaign-response/TreatmentDescription :portkey.aws.pinpoint.campaign-response/TreatmentName :portkey.aws.pinpoint.campaign-response/Limits :portkey.aws.pinpoint.campaign-response/ApplicationId :portkey.aws.pinpoint.campaign-response/SegmentVersion :portkey.aws.pinpoint.campaign-response/Description :portkey.aws.pinpoint.campaign-response/IsPaused :portkey.aws.pinpoint/MessageConfiguration :portkey.aws.pinpoint.campaign-response/SegmentId :portkey.aws.pinpoint.campaign-response/CreationDate :portkey.aws.pinpoint.campaign-response/State :portkey.aws.pinpoint.campaign-response/Version :portkey.aws.pinpoint/Schedule :portkey.aws.pinpoint.campaign-response/Name :portkey.aws.pinpoint.campaign-response/Id :portkey.aws.pinpoint.campaign-response/HoldoutPercent]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.create-application-request/name (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/create-application-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.create-application-request/Name]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/segment-type (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"DIMENSIONAL" "DIMENSIONAL", :dimensional "DIMENSIONAL", "IMPORT" "IMPORT", :import "IMPORT"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.delete-apns-sandbox-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-apns-sandbox-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.delete-apns-sandbox-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.attribute-dimension/values (clojure.spec.alpha/and :portkey.aws.pinpoint/list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/attribute-dimension (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint/AttributeType :portkey.aws.pinpoint.attribute-dimension/Values]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/recency-type (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"ACTIVE" "ACTIVE", :active "ACTIVE", "INACTIVE" "INACTIVE", :inactive "INACTIVE"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.application-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.application-response/name (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/application-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.application-response/Id :portkey.aws.pinpoint.application-response/Name]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-campaign-versions-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/CampaignsResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.write-application-settings-request/limits (clojure.spec.alpha/and :portkey.aws.pinpoint/campaign-limits))
(clojure.spec.alpha/def :portkey.aws.pinpoint/write-application-settings-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.write-application-settings-request/Limits :portkey.aws.pinpoint/QuietTime]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/list-of-treatment-resource (clojure.spec.alpha/coll-of :portkey.aws.pinpoint/treatment-resource :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-apns-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/APNSChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segment-import-jobs-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segment-import-jobs-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segment-import-jobs-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segment-import-jobs-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-segment-import-jobs-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-segment-import-jobs-request/SegmentId :portkey.aws.pinpoint.get-segment-import-jobs-request/ApplicationId] :opt-un [:portkey.aws.pinpoint.get-segment-import-jobs-request/PageSize :portkey.aws.pinpoint.get-segment-import-jobs-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.forbidden-exception/message (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.forbidden-exception/requestid (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/forbidden-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.forbidden-exception/Message :portkey.aws.pinpoint.forbidden-exception/RequestID]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/map-of-message-result (clojure.spec.alpha/map-of :portkey.aws.pinpoint/--string :portkey.aws.pinpoint/message-result))

(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-user/user-attributes (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-user/user-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/endpoint-user (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.endpoint-user/UserAttributes :portkey.aws.pinpoint.endpoint-user/UserId]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/--string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-import-job-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-import-job-request/job-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-import-job-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-import-job-request/ApplicationId :portkey.aws.pinpoint.get-import-job-request/JobId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.activities-response/item (clojure.spec.alpha/and :portkey.aws.pinpoint/list-of-activity-response))
(clojure.spec.alpha/def :portkey.aws.pinpoint/activities-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.activities-response/Item]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.campaigns-response/item (clojure.spec.alpha/and :portkey.aws.pinpoint/list-of-campaign-response))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaigns-response/next-token (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/campaigns-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.campaigns-response/Item :portkey.aws.pinpoint.campaigns-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-campaign-activities-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/ActivitiesResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/delivery-status (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"SUCCESSFUL" "SUCCESSFUL", :successful "SUCCESSFUL", "THROTTLED" "THROTTLED", :throttled "THROTTLED", "TEMPORARY_FAILURE" "TEMPORARY_FAILURE", :temporary-failure "TEMPORARY_FAILURE", "PERMANENT_FAILURE" "PERMANENT_FAILURE", :permanent-failure "PERMANENT_FAILURE"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint/update-segment-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/SegmentResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-sms-message/body (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-sms-message/sender-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/campaign-sms-message (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.campaign-sms-message/Body :portkey.aws.pinpoint/MessageType :portkey.aws.pinpoint.campaign-sms-message/SenderId]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.update-apns-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/update-apns-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.update-apns-channel-request/ApplicationId :portkey.aws.pinpoint/APNSChannelRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-apns-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/APNSChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-campaign-version-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/CampaignResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-event-stream-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-event-stream-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-event-stream-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/map-of-list-of--string (clojure.spec.alpha/map-of :portkey.aws.pinpoint/--string :portkey.aws.pinpoint/list-of--string))

(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-campaign-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/CampaignResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-demographic/app-version (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-demographic/locale (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-demographic/make (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-demographic/model (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-demographic/model-version (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-demographic/platform (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-demographic/platform-version (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-demographic/timezone (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/endpoint-demographic (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.endpoint-demographic/AppVersion :portkey.aws.pinpoint.endpoint-demographic/Locale :portkey.aws.pinpoint.endpoint-demographic/Make :portkey.aws.pinpoint.endpoint-demographic/Model :portkey.aws.pinpoint.endpoint-demographic/ModelVersion :portkey.aws.pinpoint.endpoint-demographic/Platform :portkey.aws.pinpoint.endpoint-demographic/PlatformVersion :portkey.aws.pinpoint.endpoint-demographic/Timezone]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/create-segment-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/SegmentResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.update-email-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/update-email-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.update-email-channel-request/ApplicationId :portkey.aws.pinpoint/EmailChannelRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.delete-apns-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-apns-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.delete-apns-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/format (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"CSV" "CSV", :csv "CSV", "JSON" "JSON", :json "JSON"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.import-jobs-response/item (clojure.spec.alpha/and :portkey.aws.pinpoint/list-of-import-job-response))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-jobs-response/next-token (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/import-jobs-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.import-jobs-response/Item :portkey.aws.pinpoint.import-jobs-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/update-sms-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/SMSChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-segments-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/SegmentsResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-sms-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/SMSChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.update-gcm-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/update-gcm-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.update-gcm-channel-request/ApplicationId :portkey.aws.pinpoint/GCMChannelRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-resource/define-segment (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-resource/external-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-resource/register-endpoints (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-resource/role-arn (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-resource/s3-url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-resource/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.import-job-resource/segment-name (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/import-job-resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.import-job-resource/DefineSegment :portkey.aws.pinpoint.import-job-resource/ExternalId :portkey.aws.pinpoint/Format :portkey.aws.pinpoint.import-job-resource/RegisterEndpoints :portkey.aws.pinpoint.import-job-resource/RoleArn :portkey.aws.pinpoint.import-job-resource/S3Url :portkey.aws.pinpoint.import-job-resource/SegmentId :portkey.aws.pinpoint.import-job-resource/SegmentName]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/list-of--string (clojure.spec.alpha/coll-of :portkey.aws.pinpoint/--string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.smschannel-response/platform (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.smschannel-response/short-code (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.smschannel-response/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.smschannel-response/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.smschannel-response/sender-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.smschannel-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.smschannel-response/is-archived (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.smschannel-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.smschannel-response/version (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.smschannel-response/last-modified-by (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.smschannel-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/smschannel-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.smschannel-response/Platform :portkey.aws.pinpoint.smschannel-response/ShortCode :portkey.aws.pinpoint.smschannel-response/LastModifiedDate :portkey.aws.pinpoint.smschannel-response/Enabled :portkey.aws.pinpoint.smschannel-response/SenderId :portkey.aws.pinpoint.smschannel-response/ApplicationId :portkey.aws.pinpoint.smschannel-response/IsArchived :portkey.aws.pinpoint.smschannel-response/CreationDate :portkey.aws.pinpoint.smschannel-response/Version :portkey.aws.pinpoint.smschannel-response/LastModifiedBy :portkey.aws.pinpoint.smschannel-response/Id]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/update-endpoint-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/MessageBody] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/list-of-endpoint-batch-item (clojure.spec.alpha/coll-of :portkey.aws.pinpoint/endpoint-batch-item :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-segment-versions-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/SegmentsResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-app-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/ApplicationResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.too-many-requests-exception/requestid (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/too-many-requests-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.too-many-requests-exception/Message :portkey.aws.pinpoint.too-many-requests-exception/RequestID]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-gcm-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/GCMChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.update-apns-sandbox-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/update-apns-sandbox-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.update-apns-sandbox-channel-request/ApplicationId :portkey.aws.pinpoint/APNSSandboxChannelRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-event-stream-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/EventStream] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.message-body/message (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message-body/requestid (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/message-body (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.message-body/Message :portkey.aws.pinpoint.message-body/RequestID]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-apns-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-apns-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-apns-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-endpoint-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-endpoint-request/endpoint-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-endpoint-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-endpoint-request/ApplicationId :portkey.aws.pinpoint.get-endpoint-request/EndpointId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.write-event-stream/destination-stream-arn (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.write-event-stream/role-arn (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/write-event-stream (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.write-event-stream/DestinationStreamArn :portkey.aws.pinpoint.write-event-stream/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.apnssandbox-channel-response/platform (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnssandbox-channel-response/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnssandbox-channel-response/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnssandbox-channel-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnssandbox-channel-response/is-archived (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnssandbox-channel-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnssandbox-channel-response/version (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnssandbox-channel-response/last-modified-by (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnssandbox-channel-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/apnssandbox-channel-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.apnssandbox-channel-response/Platform :portkey.aws.pinpoint.apnssandbox-channel-response/LastModifiedDate :portkey.aws.pinpoint.apnssandbox-channel-response/Enabled :portkey.aws.pinpoint.apnssandbox-channel-response/ApplicationId :portkey.aws.pinpoint.apnssandbox-channel-response/IsArchived :portkey.aws.pinpoint.apnssandbox-channel-response/CreationDate :portkey.aws.pinpoint.apnssandbox-channel-response/Version :portkey.aws.pinpoint.apnssandbox-channel-response/LastModifiedBy :portkey.aws.pinpoint.apnssandbox-channel-response/Id]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segments-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segments-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segments-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-segments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-segments-request/ApplicationId] :opt-un [:portkey.aws.pinpoint.get-segments-request/PageSize :portkey.aws.pinpoint.get-segments-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-apns-sandbox-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-apns-sandbox-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-apns-sandbox-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.send-messages-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/send-messages-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.send-messages-request/ApplicationId :portkey.aws.pinpoint/MessageRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-import-job-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/ImportJobResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/--boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.pinpoint.update-sms-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/update-sms-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.update-sms-channel-request/ApplicationId :portkey.aws.pinpoint/SMSChannelRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/map-of--double (clojure.spec.alpha/map-of :portkey.aws.pinpoint/--string :portkey.aws.pinpoint/--double))

(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-request/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-request/from-address (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-request/identity (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-request/role-arn (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/email-channel-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.email-channel-request/Enabled :portkey.aws.pinpoint.email-channel-request/FromAddress :portkey.aws.pinpoint.email-channel-request/Identity :portkey.aws.pinpoint.email-channel-request/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.set-dimension/values (clojure.spec.alpha/and :portkey.aws.pinpoint/list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/set-dimension (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint/DimensionType :portkey.aws.pinpoint.set-dimension/Values]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-behaviors/recency (clojure.spec.alpha/and :portkey.aws.pinpoint/recency-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint/segment-behaviors (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.segment-behaviors/Recency]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-dimensions/attributes (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of-attribute-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-dimensions/behavior (clojure.spec.alpha/and :portkey.aws.pinpoint/segment-behaviors))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-dimensions/demographic (clojure.spec.alpha/and :portkey.aws.pinpoint/segment-demographics))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-dimensions/location (clojure.spec.alpha/and :portkey.aws.pinpoint/segment-location))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-dimensions/user-attributes (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of-attribute-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint/segment-dimensions (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.segment-dimensions/Attributes :portkey.aws.pinpoint.segment-dimensions/Behavior :portkey.aws.pinpoint.segment-dimensions/Demographic :portkey.aws.pinpoint.segment-dimensions/Location :portkey.aws.pinpoint.segment-dimensions/UserAttributes]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-email-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-email-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-email-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.default-message/body (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.default-message/substitutions (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/default-message (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.default-message/Body :portkey.aws.pinpoint.default-message/Substitutions]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.message/body (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message/image-url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message/title (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message/silent-push (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message/raw-content (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message/url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message/json-body (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message/image-small-icon-url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message/media-url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message/image-icon-url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/message (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.message/Body :portkey.aws.pinpoint.message/ImageUrl :portkey.aws.pinpoint.message/Title :portkey.aws.pinpoint.message/SilentPush :portkey.aws.pinpoint.message/RawContent :portkey.aws.pinpoint.message/Url :portkey.aws.pinpoint.message/JsonBody :portkey.aws.pinpoint.message/ImageSmallIconUrl :portkey.aws.pinpoint.message/MediaUrl :portkey.aws.pinpoint.message/ImageIconUrl :portkey.aws.pinpoint/Action]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/map-of-address-configuration (clojure.spec.alpha/map-of :portkey.aws.pinpoint/--string :portkey.aws.pinpoint/address-configuration))

(clojure.spec.alpha/def :portkey.aws.pinpoint.update-endpoints-batch-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/update-endpoints-batch-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.update-endpoints-batch-request/ApplicationId :portkey.aws.pinpoint/EndpointBatchRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.apnschannel-request/certificate (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnschannel-request/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnschannel-request/private-key (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/apnschannel-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.apnschannel-request/Certificate :portkey.aws.pinpoint.apnschannel-request/Enabled :portkey.aws.pinpoint.apnschannel-request/PrivateKey]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/dimension-type (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"INCLUSIVE" "INCLUSIVE", :inclusive "INCLUSIVE", "EXCLUSIVE" "EXCLUSIVE", :exclusive "EXCLUSIVE"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.application-settings-resource/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.application-settings-resource/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.application-settings-resource/limits (clojure.spec.alpha/and :portkey.aws.pinpoint/campaign-limits))
(clojure.spec.alpha/def :portkey.aws.pinpoint/application-settings-resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.application-settings-resource/ApplicationId :portkey.aws.pinpoint.application-settings-resource/LastModifiedDate :portkey.aws.pinpoint.application-settings-resource/Limits :portkey.aws.pinpoint/QuietTime]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.delete-app-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-app-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.delete-app-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.put-event-stream-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/put-event-stream-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.put-event-stream-request/ApplicationId :portkey.aws.pinpoint/WriteEventStream] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.not-found-exception/message (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.not-found-exception/requestid (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.not-found-exception/Message :portkey.aws.pinpoint.not-found-exception/RequestID]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaign-versions-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaign-versions-request/campaign-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaign-versions-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaign-versions-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-campaign-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-campaign-versions-request/ApplicationId :portkey.aws.pinpoint.get-campaign-versions-request/CampaignId] :opt-un [:portkey.aws.pinpoint.get-campaign-versions-request/PageSize :portkey.aws.pinpoint.get-campaign-versions-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/duration (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"HR_24" "HR_24", :hr-24 "HR_24", "DAY_7" "DAY_7", :day-7 "DAY_7", "DAY_14" "DAY_14", :day-14 "DAY_14", "DAY_30" "DAY_30", :day-30 "DAY_30"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint/update-gcm-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/GCMChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.delete-email-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-email-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.delete-email-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segment-version-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segment-version-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segment-version-request/version (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-segment-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-segment-version-request/SegmentId :portkey.aws.pinpoint.get-segment-version-request/Version :portkey.aws.pinpoint.get-segment-version-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.write-segment-request/dimensions (clojure.spec.alpha/and :portkey.aws.pinpoint/segment-dimensions))
(clojure.spec.alpha/def :portkey.aws.pinpoint.write-segment-request/name (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/write-segment-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.write-segment-request/Dimensions :portkey.aws.pinpoint.write-segment-request/Name]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-campaign-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/CampaignResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.update-application-settings-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/update-application-settings-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.update-application-settings-request/ApplicationId :portkey.aws.pinpoint/WriteApplicationSettingsRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-gcm-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/GCMChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/map-of-attribute-dimension (clojure.spec.alpha/map-of :portkey.aws.pinpoint/--string :portkey.aws.pinpoint/attribute-dimension))

(clojure.spec.alpha/def :portkey.aws.pinpoint.delete-segment-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.delete-segment-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-segment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.delete-segment-request/SegmentId :portkey.aws.pinpoint.delete-segment-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-app-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-app-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-app-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-request/address (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-request/endpoint-status (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-request/request-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-request/location (clojure.spec.alpha/and :portkey.aws.pinpoint/endpoint-location))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-request/demographic (clojure.spec.alpha/and :portkey.aws.pinpoint/endpoint-demographic))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-request/user (clojure.spec.alpha/and :portkey.aws.pinpoint/endpoint-user))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-request/attributes (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-request/effective-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-request/opt-out (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-request/metrics (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of--double))
(clojure.spec.alpha/def :portkey.aws.pinpoint/endpoint-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.endpoint-request/Address :portkey.aws.pinpoint.endpoint-request/EndpointStatus :portkey.aws.pinpoint.endpoint-request/RequestId :portkey.aws.pinpoint.endpoint-request/Location :portkey.aws.pinpoint.endpoint-request/Demographic :portkey.aws.pinpoint.endpoint-request/User :portkey.aws.pinpoint.endpoint-request/Attributes :portkey.aws.pinpoint.endpoint-request/EffectiveDate :portkey.aws.pinpoint.endpoint-request/OptOut :portkey.aws.pinpoint/ChannelType :portkey.aws.pinpoint.endpoint-request/Metrics]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-batch-request/item (clojure.spec.alpha/and :portkey.aws.pinpoint/list-of-endpoint-batch-item))
(clojure.spec.alpha/def :portkey.aws.pinpoint/endpoint-batch-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.endpoint-batch-request/Item]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.smschannel-request/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.smschannel-request/sender-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/smschannel-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.smschannel-request/Enabled :portkey.aws.pinpoint.smschannel-request/SenderId]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-segment-version-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/SegmentResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/recency-dimension (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint/Duration :portkey.aws.pinpoint/RecencyType]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.address-configuration/body-override (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.address-configuration/context (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.address-configuration/raw-content (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.address-configuration/substitutions (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.address-configuration/title-override (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/address-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.address-configuration/BodyOverride :portkey.aws.pinpoint/ChannelType :portkey.aws.pinpoint.address-configuration/Context :portkey.aws.pinpoint.address-configuration/RawContent :portkey.aws.pinpoint.address-configuration/Substitutions :portkey.aws.pinpoint.address-configuration/TitleOverride]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/put-event-stream-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/EventStream] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/update-apns-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/APNSChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-batch-item/address (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-batch-item/endpoint-status (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-batch-item/request-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-batch-item/location (clojure.spec.alpha/and :portkey.aws.pinpoint/endpoint-location))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-batch-item/demographic (clojure.spec.alpha/and :portkey.aws.pinpoint/endpoint-demographic))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-batch-item/user (clojure.spec.alpha/and :portkey.aws.pinpoint/endpoint-user))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-batch-item/attributes (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-batch-item/effective-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-batch-item/opt-out (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-batch-item/id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-batch-item/metrics (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of--double))
(clojure.spec.alpha/def :portkey.aws.pinpoint/endpoint-batch-item (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.endpoint-batch-item/Address :portkey.aws.pinpoint.endpoint-batch-item/EndpointStatus :portkey.aws.pinpoint.endpoint-batch-item/RequestId :portkey.aws.pinpoint.endpoint-batch-item/Location :portkey.aws.pinpoint.endpoint-batch-item/Demographic :portkey.aws.pinpoint.endpoint-batch-item/User :portkey.aws.pinpoint.endpoint-batch-item/Attributes :portkey.aws.pinpoint.endpoint-batch-item/EffectiveDate :portkey.aws.pinpoint.endpoint-batch-item/OptOut :portkey.aws.pinpoint.endpoint-batch-item/Id :portkey.aws.pinpoint/ChannelType :portkey.aws.pinpoint.endpoint-batch-item/Metrics]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-application-settings-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-application-settings-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-application-settings-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/create-import-job-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/ImportJobResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/list-of-write-treatment-resource (clojure.spec.alpha/coll-of :portkey.aws.pinpoint/write-treatment-resource :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.write-treatment-resource/size-percent (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.write-treatment-resource/treatment-description (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.write-treatment-resource/treatment-name (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/write-treatment-resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint/MessageConfiguration :portkey.aws.pinpoint/Schedule :portkey.aws.pinpoint.write-treatment-resource/SizePercent :portkey.aws.pinpoint.write-treatment-resource/TreatmentDescription :portkey.aws.pinpoint.write-treatment-resource/TreatmentName]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.event-stream/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.event-stream/destination-stream-arn (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.event-stream/external-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.event-stream/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.event-stream/last-updated-by (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.event-stream/role-arn (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/event-stream (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.event-stream/ApplicationId :portkey.aws.pinpoint.event-stream/DestinationStreamArn :portkey.aws.pinpoint.event-stream/ExternalId :portkey.aws.pinpoint.event-stream/LastModifiedDate :portkey.aws.pinpoint.event-stream/LastUpdatedBy :portkey.aws.pinpoint.event-stream/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segment-versions-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segment-versions-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segment-versions-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-segment-versions-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-segment-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-segment-versions-request/SegmentId :portkey.aws.pinpoint.get-segment-versions-request/ApplicationId] :opt-un [:portkey.aws.pinpoint.get-segment-versions-request/PageSize :portkey.aws.pinpoint.get-segment-versions-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-email-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/EmailChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.smsmessage/body (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.smsmessage/sender-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.smsmessage/substitutions (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/smsmessage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.smsmessage/Body :portkey.aws.pinpoint/MessageType :portkey.aws.pinpoint.smsmessage/SenderId :portkey.aws.pinpoint.smsmessage/Substitutions]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-apps-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-apps-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-apps-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.get-apps-request/PageSize :portkey.aws.pinpoint.get-apps-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaigns-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaigns-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaigns-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-campaigns-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-campaigns-request/ApplicationId] :opt-un [:portkey.aws.pinpoint.get-campaigns-request/PageSize :portkey.aws.pinpoint.get-campaigns-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-email-message/body (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-email-message/from-address (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-email-message/html-body (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.campaign-email-message/title (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/campaign-email-message (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.campaign-email-message/Body :portkey.aws.pinpoint.campaign-email-message/FromAddress :portkey.aws.pinpoint.campaign-email-message/HtmlBody :portkey.aws.pinpoint.campaign-email-message/Title]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/list-of-import-job-response (clojure.spec.alpha/coll-of :portkey.aws.pinpoint/import-job-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.message-configuration/apnsmessage (clojure.spec.alpha/and :portkey.aws.pinpoint/message))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message-configuration/default-message (clojure.spec.alpha/and :portkey.aws.pinpoint/message))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message-configuration/email-message (clojure.spec.alpha/and :portkey.aws.pinpoint/campaign-email-message))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message-configuration/gcmmessage (clojure.spec.alpha/and :portkey.aws.pinpoint/message))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message-configuration/smsmessage (clojure.spec.alpha/and :portkey.aws.pinpoint/campaign-sms-message))
(clojure.spec.alpha/def :portkey.aws.pinpoint/message-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.message-configuration/APNSMessage :portkey.aws.pinpoint.message-configuration/DefaultMessage :portkey.aws.pinpoint.message-configuration/EmailMessage :portkey.aws.pinpoint.message-configuration/GCMMessage :portkey.aws.pinpoint.message-configuration/SMSMessage]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaign-activities-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaign-activities-request/campaign-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaign-activities-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaign-activities-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-campaign-activities-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-campaign-activities-request/ApplicationId :portkey.aws.pinpoint.get-campaign-activities-request/CampaignId] :opt-un [:portkey.aws.pinpoint.get-campaign-activities-request/PageSize :portkey.aws.pinpoint.get-campaign-activities-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.create-import-job-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/create-import-job-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.create-import-job-request/ApplicationId :portkey.aws.pinpoint/ImportJobRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-segment-import-jobs-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/ImportJobsResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/message-type (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"TRANSACTIONAL" "TRANSACTIONAL", :transactional "TRANSACTIONAL", "PROMOTIONAL" "PROMOTIONAL", :promotional "PROMOTIONAL"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint/update-campaign-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/CampaignResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/frequency (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {:daily "DAILY", "ONCE" "ONCE", :monthly "MONTHLY", "MONTHLY" "MONTHLY", "WEEKLY" "WEEKLY", :hourly "HOURLY", :once "ONCE", "DAILY" "DAILY", :weekly "WEEKLY", "HOURLY" "HOURLY"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-response/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-response/dimensions (clojure.spec.alpha/and :portkey.aws.pinpoint/segment-dimensions))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-response/import-definition (clojure.spec.alpha/and :portkey.aws.pinpoint/segment-import-resource))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-response/version (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-response/name (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/segment-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint/SegmentType :portkey.aws.pinpoint.segment-response/LastModifiedDate :portkey.aws.pinpoint.segment-response/ApplicationId :portkey.aws.pinpoint.segment-response/Dimensions :portkey.aws.pinpoint.segment-response/ImportDefinition :portkey.aws.pinpoint.segment-response/CreationDate :portkey.aws.pinpoint.segment-response/Version :portkey.aws.pinpoint.segment-response/Name :portkey.aws.pinpoint.segment-response/Id]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/--double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.pinpoint/update-endpoints-batch-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/MessageBody] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-segment-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/SegmentResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/list-of-campaign-response (clojure.spec.alpha/coll-of :portkey.aws.pinpoint/campaign-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/address (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/cohort-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/endpoint-status (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/request-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/shard-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/location (clojure.spec.alpha/and :portkey.aws.pinpoint/endpoint-location))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/demographic (clojure.spec.alpha/and :portkey.aws.pinpoint/endpoint-demographic))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/user (clojure.spec.alpha/and :portkey.aws.pinpoint/endpoint-user))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/attributes (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/effective-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/opt-out (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-response/metrics (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of--double))
(clojure.spec.alpha/def :portkey.aws.pinpoint/endpoint-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.endpoint-response/Address :portkey.aws.pinpoint.endpoint-response/CohortId :portkey.aws.pinpoint.endpoint-response/EndpointStatus :portkey.aws.pinpoint.endpoint-response/RequestId :portkey.aws.pinpoint.endpoint-response/ShardId :portkey.aws.pinpoint.endpoint-response/Location :portkey.aws.pinpoint.endpoint-response/Demographic :portkey.aws.pinpoint.endpoint-response/User :portkey.aws.pinpoint.endpoint-response/Attributes :portkey.aws.pinpoint.endpoint-response/ApplicationId :portkey.aws.pinpoint.endpoint-response/CreationDate :portkey.aws.pinpoint.endpoint-response/EffectiveDate :portkey.aws.pinpoint.endpoint-response/OptOut :portkey.aws.pinpoint.endpoint-response/Id :portkey.aws.pinpoint/ChannelType :portkey.aws.pinpoint.endpoint-response/Metrics]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/campaign-status (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"COMPLETED" "COMPLETED", :paused "PAUSED", :completed "COMPLETED", "EXECUTING" "EXECUTING", "SCHEDULED" "SCHEDULED", :executing "EXECUTING", :pending-next-run "PENDING_NEXT_RUN", :scheduled "SCHEDULED", "PAUSED" "PAUSED", "PENDING_NEXT_RUN" "PENDING_NEXT_RUN"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.update-segment-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.update-segment-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/update-segment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.update-segment-request/SegmentId :portkey.aws.pinpoint.update-segment-request/ApplicationId :portkey.aws.pinpoint/WriteSegmentRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.applications-response/item (clojure.spec.alpha/and :portkey.aws.pinpoint/list-of-application-response))
(clojure.spec.alpha/def :portkey.aws.pinpoint.applications-response/next-token (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/applications-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.applications-response/Item :portkey.aws.pinpoint.applications-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/create-campaign-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/CampaignResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.delete-sms-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-sms-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.delete-sms-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/--integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-segment-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/SegmentResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.update-endpoint-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.update-endpoint-request/endpoint-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/update-endpoint-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.update-endpoint-request/ApplicationId :portkey.aws.pinpoint.update-endpoint-request/EndpointId :portkey.aws.pinpoint/EndpointRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.schedule/end-time (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.schedule/is-local-time (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.schedule/start-time (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.schedule/timezone (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/schedule (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.schedule/EndTime :portkey.aws.pinpoint/Frequency :portkey.aws.pinpoint.schedule/IsLocalTime :portkey.aws.pinpoint/QuietTime :portkey.aws.pinpoint.schedule/StartTime :portkey.aws.pinpoint.schedule/Timezone]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-import-resource/channel-counts (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-import-resource/external-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-import-resource/role-arn (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-import-resource/s3-url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-import-resource/size (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint/segment-import-resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.segment-import-resource/ChannelCounts :portkey.aws.pinpoint.segment-import-resource/ExternalId :portkey.aws.pinpoint/Format :portkey.aws.pinpoint.segment-import-resource/RoleArn :portkey.aws.pinpoint.segment-import-resource/S3Url :portkey.aws.pinpoint.segment-import-resource/Size]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.create-segment-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/create-segment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.create-segment-request/ApplicationId :portkey.aws.pinpoint/WriteSegmentRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.default-push-notification-message/body (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.default-push-notification-message/data (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.default-push-notification-message/silent-push (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.default-push-notification-message/substitutions (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.default-push-notification-message/title (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.default-push-notification-message/url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/default-push-notification-message (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint/Action :portkey.aws.pinpoint.default-push-notification-message/Body :portkey.aws.pinpoint.default-push-notification-message/Data :portkey.aws.pinpoint.default-push-notification-message/SilentPush :portkey.aws.pinpoint.default-push-notification-message/Substitutions :portkey.aws.pinpoint.default-push-notification-message/Title :portkey.aws.pinpoint.default-push-notification-message/Url]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.apnsmessage/category (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnsmessage/body (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnsmessage/title (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnsmessage/silent-push (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnsmessage/sound (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnsmessage/raw-content (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnsmessage/thread-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnsmessage/url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnsmessage/badge (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnsmessage/substitutions (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnsmessage/data (clojure.spec.alpha/and :portkey.aws.pinpoint/map-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnsmessage/media-url (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/apnsmessage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.apnsmessage/Category :portkey.aws.pinpoint.apnsmessage/Body :portkey.aws.pinpoint.apnsmessage/Title :portkey.aws.pinpoint.apnsmessage/SilentPush :portkey.aws.pinpoint.apnsmessage/Sound :portkey.aws.pinpoint.apnsmessage/RawContent :portkey.aws.pinpoint.apnsmessage/ThreadId :portkey.aws.pinpoint.apnsmessage/Url :portkey.aws.pinpoint.apnsmessage/Badge :portkey.aws.pinpoint.apnsmessage/Substitutions :portkey.aws.pinpoint.apnsmessage/Data :portkey.aws.pinpoint.apnsmessage/MediaUrl :portkey.aws.pinpoint/Action]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/map-of--integer (clojure.spec.alpha/map-of :portkey.aws.pinpoint/--string :portkey.aws.pinpoint/--integer))

(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-response/platform (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-response/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-response/role-arn (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-response/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-response/is-archived (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-response/identity (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-response/from-address (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-response/version (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-response/last-modified-by (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.email-channel-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/email-channel-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.email-channel-response/Platform :portkey.aws.pinpoint.email-channel-response/LastModifiedDate :portkey.aws.pinpoint.email-channel-response/RoleArn :portkey.aws.pinpoint.email-channel-response/Enabled :portkey.aws.pinpoint.email-channel-response/ApplicationId :portkey.aws.pinpoint.email-channel-response/IsArchived :portkey.aws.pinpoint.email-channel-response/Identity :portkey.aws.pinpoint.email-channel-response/CreationDate :portkey.aws.pinpoint.email-channel-response/FromAddress :portkey.aws.pinpoint.email-channel-response/Version :portkey.aws.pinpoint.email-channel-response/LastModifiedBy :portkey.aws.pinpoint.email-channel-response/Id]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-import-jobs-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/ImportJobsResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/direct-message-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint/APNSMessage :portkey.aws.pinpoint/DefaultMessage :portkey.aws.pinpoint/DefaultPushNotificationMessage :portkey.aws.pinpoint/GCMMessage :portkey.aws.pinpoint/SMSMessage]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/list-of-application-response (clojure.spec.alpha/coll-of :portkey.aws.pinpoint/application-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.apnssandbox-channel-request/certificate (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnssandbox-channel-request/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnssandbox-channel-request/private-key (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/apnssandbox-channel-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.apnssandbox-channel-request/Certificate :portkey.aws.pinpoint.apnssandbox-channel-request/Enabled :portkey.aws.pinpoint.apnssandbox-channel-request/PrivateKey]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-event-stream-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/EventStream] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.delete-campaign-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.delete-campaign-request/campaign-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-campaign-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.delete-campaign-request/CampaignId :portkey.aws.pinpoint.delete-campaign-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-location/country (clojure.spec.alpha/and :portkey.aws.pinpoint/set-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint/segment-location (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.segment-location/Country]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaign-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-campaign-request/campaign-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-campaign-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-campaign-request/CampaignId :portkey.aws.pinpoint.get-campaign-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-location/city (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-location/country (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-location/latitude (clojure.spec.alpha/and :portkey.aws.pinpoint/--double))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-location/longitude (clojure.spec.alpha/and :portkey.aws.pinpoint/--double))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-location/postal-code (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.endpoint-location/region (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/endpoint-location (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.endpoint-location/City :portkey.aws.pinpoint.endpoint-location/Country :portkey.aws.pinpoint.endpoint-location/Latitude :portkey.aws.pinpoint.endpoint-location/Longitude :portkey.aws.pinpoint.endpoint-location/PostalCode :portkey.aws.pinpoint.endpoint-location/Region]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-sms-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-sms-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-sms-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/update-apns-sandbox-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/APNSSandboxChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/action (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"OPEN_APP" "OPEN_APP", :open-app "OPEN_APP", "DEEP_LINK" "DEEP_LINK", :deep-link "DEEP_LINK", "URL" "URL", :url "URL"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint/list-of-activity-response (clojure.spec.alpha/coll-of :portkey.aws.pinpoint/activity-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-sms-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/SMSChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmchannel-request/api-key (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.gcmchannel-request/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint/gcmchannel-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.gcmchannel-request/ApiKey :portkey.aws.pinpoint.gcmchannel-request/Enabled]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-apns-sandbox-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/APNSSandboxChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.message-result/status-code (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message-result/status-message (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.message-result/updated-token (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/message-result (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint/DeliveryStatus :portkey.aws.pinpoint.message-result/StatusCode :portkey.aws.pinpoint.message-result/StatusMessage :portkey.aws.pinpoint.message-result/UpdatedToken]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.apnschannel-response/platform (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnschannel-response/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnschannel-response/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnschannel-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnschannel-response/is-archived (clojure.spec.alpha/and :portkey.aws.pinpoint/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnschannel-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnschannel-response/version (clojure.spec.alpha/and :portkey.aws.pinpoint/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnschannel-response/last-modified-by (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.apnschannel-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/apnschannel-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.apnschannel-response/Platform :portkey.aws.pinpoint.apnschannel-response/LastModifiedDate :portkey.aws.pinpoint.apnschannel-response/Enabled :portkey.aws.pinpoint.apnschannel-response/ApplicationId :portkey.aws.pinpoint.apnschannel-response/IsArchived :portkey.aws.pinpoint.apnschannel-response/CreationDate :portkey.aws.pinpoint.apnschannel-response/Version :portkey.aws.pinpoint.apnschannel-response/LastModifiedBy :portkey.aws.pinpoint.apnschannel-response/Id]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/map-of--string (clojure.spec.alpha/map-of :portkey.aws.pinpoint/--string :portkey.aws.pinpoint/--string))

(clojure.spec.alpha/def :portkey.aws.pinpoint.segments-response/item (clojure.spec.alpha/and :portkey.aws.pinpoint/list-of-segment-response))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segments-response/next-token (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/segments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.segments-response/Item :portkey.aws.pinpoint.segments-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.delete-event-stream-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/delete-event-stream-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.delete-event-stream-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/get-email-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/EmailChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint/channel-type (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {:email "EMAIL", "SMS" "SMS", "ADM" "ADM", "GCM" "GCM", "APNS" "APNS", :apns-sandbox "APNS_SANDBOX", :gcm "GCM", :sms "SMS", :adm "ADM", "APNS_SANDBOX" "APNS_SANDBOX", "EMAIL" "EMAIL", :apns "APNS"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.get-import-jobs-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-import-jobs-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.get-import-jobs-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/get-import-jobs-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.get-import-jobs-request/ApplicationId] :opt-un [:portkey.aws.pinpoint.get-import-jobs-request/PageSize :portkey.aws.pinpoint.get-import-jobs-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.update-campaign-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.update-campaign-request/campaign-id (clojure.spec.alpha/and :portkey.aws.pinpoint/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint/update-campaign-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.update-campaign-request/CampaignId :portkey.aws.pinpoint.update-campaign-request/ApplicationId :portkey.aws.pinpoint/WriteCampaignRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-demographics/app-version (clojure.spec.alpha/and :portkey.aws.pinpoint/set-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-demographics/channel (clojure.spec.alpha/and :portkey.aws.pinpoint/set-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-demographics/device-type (clojure.spec.alpha/and :portkey.aws.pinpoint/set-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-demographics/make (clojure.spec.alpha/and :portkey.aws.pinpoint/set-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-demographics/model (clojure.spec.alpha/and :portkey.aws.pinpoint/set-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.segment-demographics/platform (clojure.spec.alpha/and :portkey.aws.pinpoint/set-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint/segment-demographics (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.segment-demographics/AppVersion :portkey.aws.pinpoint.segment-demographics/Channel :portkey.aws.pinpoint.segment-demographics/DeviceType :portkey.aws.pinpoint.segment-demographics/Make :portkey.aws.pinpoint.segment-demographics/Model :portkey.aws.pinpoint.segment-demographics/Platform]))

(clojure.spec.alpha/def :portkey.aws.pinpoint/update-email-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint/EmailChannelResponse] :opt-un []))

(clojure.core/defn update-apns-channel ([input__56767__auto__] (update-apns-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58728 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/apns"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/UpdateApnsChannelRequest input58728)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "APNSChannelRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58727] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58727)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/update-apns-channel-response (:body response58727)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58727 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58727)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58727})))))))))))

(clojure.core/defn get-apns-channel ([input__56767__auto__] (get-apns-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58730 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/apns"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetApnsChannelRequest input58730)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58729] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58729)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-apns-channel-response (:body response58729)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58729 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58729)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58729})))))))))))

(clojure.core/defn update-endpoints-batch ([input__56767__auto__] (update-endpoints-batch input__56767__auto__ portkey.aws/*http-client*)) ([input58732 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/endpoints"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/UpdateEndpointsBatchRequest input58732)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "EndpointBatchRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58731] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 202 (:status response58731)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/update-endpoints-batch-response (:body response58731)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58731 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58731)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58731})))))))))))

(clojure.core/defn get-import-jobs ([input__56767__auto__] (get-import-jobs input__56767__auto__ portkey.aws/*http-client*)) ([input58734 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/jobs/import"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetImportJobsRequest input58734)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {"page-size" "PageSize", "token" "Token"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58733] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58733)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-import-jobs-response (:body response58733)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58733 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58733)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58733})))))))))))

(clojure.core/defn get-sms-channel ([input__56767__auto__] (get-sms-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58736 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/sms"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetSmsChannelRequest input58736)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58735] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58735)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-sms-channel-response (:body response58735)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58735 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58735)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58735})))))))))))

(clojure.core/defn get-segment-version ([input__56767__auto__] (get-segment-version input__56767__auto__ portkey.aws/*http-client*)) ([input58738 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/segments/{segment-id}/versions/{version}"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetSegmentVersionRequest input58738)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "segment-id" "SegmentId", "version" "Version"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58737] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58737)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-segment-version-response (:body response58737)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58737 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58737)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58737})))))))))))

(clojure.core/defn get-apns-sandbox-channel ([input__56767__auto__] (get-apns-sandbox-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58740 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/apns_sandbox"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetApnsSandboxChannelRequest input58740)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58739] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58739)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-apns-sandbox-channel-response (:body response58739)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58739 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58739)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58739})))))))))))

(clojure.core/defn get-segment-import-jobs ([input__56767__auto__] (get-segment-import-jobs input__56767__auto__ portkey.aws/*http-client*)) ([input58742 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/segments/{segment-id}/jobs/import"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetSegmentImportJobsRequest input58742)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "segment-id" "SegmentId"}) (portkey.awsgen/params-to-querystring {"page-size" "PageSize", "token" "Token"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58741] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58741)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-segment-import-jobs-response (:body response58741)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58741 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58741)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58741})))))))))))

(clojure.core/defn get-campaign-activities ([input__56767__auto__] (get-campaign-activities input__56767__auto__ portkey.aws/*http-client*)) ([input58744 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/campaigns/{campaign-id}/activities"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetCampaignActivitiesRequest input58744)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "campaign-id" "CampaignId"}) (portkey.awsgen/params-to-querystring {"page-size" "PageSize", "token" "Token"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58743] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58743)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-campaign-activities-response (:body response58743)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58743 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58743)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58743})))))))))))

(clojure.core/defn delete-email-channel ([input__56767__auto__] (delete-email-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58746 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/email"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/DeleteEmailChannelRequest input58746)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58745] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58745)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/delete-email-channel-response (:body response58745)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58745 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58745)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58745})))))))))))

(clojure.core/defn get-segment ([input__56767__auto__] (get-segment input__56767__auto__ portkey.aws/*http-client*)) ([input58748 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/segments/{segment-id}"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetSegmentRequest input58748)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "segment-id" "SegmentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58747] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58747)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-segment-response (:body response58747)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58747 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58747)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58747})))))))))))

(clojure.core/defn get-event-stream ([input__56767__auto__] (get-event-stream input__56767__auto__ portkey.aws/*http-client*)) ([input58750 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/eventstream"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetEventStreamRequest input58750)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58749] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58749)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-event-stream-response (:body response58749)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58749 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58749)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58749})))))))))))

(clojure.core/defn get-campaign-version ([input__56767__auto__] (get-campaign-version input__56767__auto__ portkey.aws/*http-client*)) ([input58752 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/campaigns/{campaign-id}/versions/{version}"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetCampaignVersionRequest input58752)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "campaign-id" "CampaignId", "version" "Version"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58751] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58751)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-campaign-version-response (:body response58751)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58751 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58751)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58751})))))))))))

(clojure.core/defn get-campaign-versions ([input__56767__auto__] (get-campaign-versions input__56767__auto__ portkey.aws/*http-client*)) ([input58754 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/campaigns/{campaign-id}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetCampaignVersionsRequest input58754)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "campaign-id" "CampaignId"}) (portkey.awsgen/params-to-querystring {"page-size" "PageSize", "token" "Token"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58753] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58753)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-campaign-versions-response (:body response58753)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58753 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58753)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58753})))))))))))

(clojure.core/defn get-gcm-channel ([input__56767__auto__] (get-gcm-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58756 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/gcm"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetGcmChannelRequest input58756)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58755] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58755)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-gcm-channel-response (:body response58755)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58755 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58755)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58755})))))))))))

(clojure.core/defn update-campaign ([input__56767__auto__] (update-campaign input__56767__auto__ portkey.aws/*http-client*)) ([input58758 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/campaigns/{campaign-id}"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/UpdateCampaignRequest input58758)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "campaign-id" "CampaignId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "WriteCampaignRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58757] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58757)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/update-campaign-response (:body response58757)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58757 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58757)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58757})))))))))))

(clojure.core/defn get-segments ([input__56767__auto__] (get-segments input__56767__auto__ portkey.aws/*http-client*)) ([input58760 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/segments"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetSegmentsRequest input58760)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {"page-size" "PageSize", "token" "Token"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58759] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58759)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-segments-response (:body response58759)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58759 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58759)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58759})))))))))))

(clojure.core/defn create-import-job ([input__56767__auto__] (create-import-job input__56767__auto__ portkey.aws/*http-client*)) ([input58762 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/jobs/import"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/CreateImportJobRequest input58762)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "ImportJobRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58761] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 201 (:status response58761)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/create-import-job-response (:body response58761)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58761 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58761)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58761})))))))))))

(clojure.core/defn update-application-settings ([input__56767__auto__] (update-application-settings input__56767__auto__ portkey.aws/*http-client*)) ([input58764 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/settings"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/UpdateApplicationSettingsRequest input58764)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "WriteApplicationSettingsRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58763] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58763)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/update-application-settings-response (:body response58763)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58763 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58763)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58763})))))))))))

(clojure.core/defn get-campaign ([input__56767__auto__] (get-campaign input__56767__auto__ portkey.aws/*http-client*)) ([input58766 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/campaigns/{campaign-id}"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetCampaignRequest input58766)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "campaign-id" "CampaignId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58765] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58765)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-campaign-response (:body response58765)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58765 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58765)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58765})))))))))))

(clojure.core/defn get-import-job ([input__56767__auto__] (get-import-job input__56767__auto__ portkey.aws/*http-client*)) ([input58768 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/jobs/import/{job-id}"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetImportJobRequest input58768)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "job-id" "JobId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58767] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58767)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-import-job-response (:body response58767)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58767 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58767)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58767})))))))))))

(clojure.core/defn update-endpoint ([input__56767__auto__] (update-endpoint input__56767__auto__ portkey.aws/*http-client*)) ([input58770 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/endpoints/{endpoint-id}"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/UpdateEndpointRequest input58770)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "endpoint-id" "EndpointId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "EndpointRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58769] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 202 (:status response58769)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/update-endpoint-response (:body response58769)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58769 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58769)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58769})))))))))))

(clojure.core/defn get-application-settings ([input__56767__auto__] (get-application-settings input__56767__auto__ portkey.aws/*http-client*)) ([input58772 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/settings"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetApplicationSettingsRequest input58772)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58771] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58771)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-application-settings-response (:body response58771)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58771 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58771)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58771})))))))))))

(clojure.core/defn get-campaigns ([input__56767__auto__] (get-campaigns input__56767__auto__ portkey.aws/*http-client*)) ([input58774 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/campaigns"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetCampaignsRequest input58774)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {"page-size" "PageSize", "token" "Token"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58773] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58773)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-campaigns-response (:body response58773)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58773 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58773)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58773})))))))))))

(clojure.core/defn update-email-channel ([input__56767__auto__] (update-email-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58776 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/email"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/UpdateEmailChannelRequest input58776)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "EmailChannelRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58775] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58775)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/update-email-channel-response (:body response58775)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58775 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58775)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58775})))))))))))

(clojure.core/defn create-campaign ([input__56767__auto__] (create-campaign input__56767__auto__ portkey.aws/*http-client*)) ([input58778 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/campaigns"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/CreateCampaignRequest input58778)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "WriteCampaignRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58777] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 201 (:status response58777)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/create-campaign-response (:body response58777)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58777 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58777)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58777})))))))))))

(clojure.core/defn send-messages ([input__56767__auto__] (send-messages input__56767__auto__ portkey.aws/*http-client*)) ([input58780 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/messages"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/SendMessagesRequest input58780)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "MessageRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58779] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58779)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/send-messages-response (:body response58779)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58779 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58779)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58779})))))))))))

(clojure.core/defn update-gcm-channel ([input__56767__auto__] (update-gcm-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58782 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/gcm"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/UpdateGcmChannelRequest input58782)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "GCMChannelRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58781] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58781)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/update-gcm-channel-response (:body response58781)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58781 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58781)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58781})))))))))))

(clojure.core/defn get-segment-versions ([input__56767__auto__] (get-segment-versions input__56767__auto__ portkey.aws/*http-client*)) ([input58784 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/segments/{segment-id}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetSegmentVersionsRequest input58784)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "segment-id" "SegmentId"}) (portkey.awsgen/params-to-querystring {"page-size" "PageSize", "token" "Token"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58783] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58783)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-segment-versions-response (:body response58783)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58783 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58783)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58783})))))))))))

(clojure.core/defn delete-app ([input__56767__auto__] (delete-app input__56767__auto__ portkey.aws/*http-client*)) ([input58786 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/DeleteAppRequest input58786)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58785] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58785)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/delete-app-response (:body response58785)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58785 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58785)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58785})))))))))))

(clojure.core/defn create-app ([input__56767__auto__] (create-app input__56767__auto__ portkey.aws/*http-client*)) ([input58788 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/CreateAppRequest input58788)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "CreateApplicationRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58787] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 201 (:status response58787)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/create-app-response (:body response58787)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58787 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58787)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58787})))))))))))

(clojure.core/defn delete-apns-sandbox-channel ([input__56767__auto__] (delete-apns-sandbox-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58790 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/apns_sandbox"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/DeleteApnsSandboxChannelRequest input58790)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58789] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58789)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/delete-apns-sandbox-channel-response (:body response58789)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58789 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58789)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58789})))))))))))

(clojure.core/defn delete-gcm-channel ([input__56767__auto__] (delete-gcm-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58792 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/gcm"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/DeleteGcmChannelRequest input58792)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58791] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58791)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/delete-gcm-channel-response (:body response58791)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58791 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58791)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58791})))))))))))

(clojure.core/defn delete-campaign ([input__56767__auto__] (delete-campaign input__56767__auto__ portkey.aws/*http-client*)) ([input58794 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/campaigns/{campaign-id}"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/DeleteCampaignRequest input58794)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "campaign-id" "CampaignId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58793] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58793)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/delete-campaign-response (:body response58793)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58793 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58793)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58793})))))))))))

(clojure.core/defn get-app ([input__56767__auto__] (get-app input__56767__auto__ portkey.aws/*http-client*)) ([input58796 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetAppRequest input58796)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58795] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58795)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-app-response (:body response58795)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58795 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58795)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58795})))))))))))

(clojure.core/defn delete-segment ([input__56767__auto__] (delete-segment input__56767__auto__ portkey.aws/*http-client*)) ([input58798 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/segments/{segment-id}"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/DeleteSegmentRequest input58798)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "segment-id" "SegmentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58797] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58797)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/delete-segment-response (:body response58797)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58797 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58797)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58797})))))))))))

(clojure.core/defn delete-apns-channel ([input__56767__auto__] (delete-apns-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58800 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/apns"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/DeleteApnsChannelRequest input58800)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58799] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58799)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/delete-apns-channel-response (:body response58799)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58799 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58799)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58799})))))))))))

(clojure.core/defn update-segment ([input__56767__auto__] (update-segment input__56767__auto__ portkey.aws/*http-client*)) ([input58802 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/segments/{segment-id}"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/UpdateSegmentRequest input58802)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "segment-id" "SegmentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "WriteSegmentRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58801] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58801)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/update-segment-response (:body response58801)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58801 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58801)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58801})))))))))))

(clojure.core/defn delete-event-stream ([input__56767__auto__] (delete-event-stream input__56767__auto__ portkey.aws/*http-client*)) ([input58804 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/eventstream"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/DeleteEventStreamRequest input58804)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58803] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58803)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/delete-event-stream-response (:body response58803)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58803 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58803)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58803})))))))))))

(clojure.core/defn get-apps ([input__56767__auto__] (get-apps input__56767__auto__ portkey.aws/*http-client*)) ([input58806 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetAppsRequest input58806)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"page-size" "PageSize", "token" "Token"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58805] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58805)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-apps-response (:body response58805)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58805 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58805)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58805})))))))))))

(clojure.core/defn get-endpoint ([input__56767__auto__] (get-endpoint input__56767__auto__ portkey.aws/*http-client*)) ([input58808 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/endpoints/{endpoint-id}"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetEndpointRequest input58808)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId", "endpoint-id" "EndpointId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58807] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58807)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-endpoint-response (:body response58807)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58807 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58807)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58807})))))))))))

(clojure.core/defn update-apns-sandbox-channel ([input__56767__auto__] (update-apns-sandbox-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58810 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/apns_sandbox"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/UpdateApnsSandboxChannelRequest input58810)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "APNSSandboxChannelRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58809] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58809)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/update-apns-sandbox-channel-response (:body response58809)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58809 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58809)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58809})))))))))))

(clojure.core/defn get-email-channel ([input__56767__auto__] (get-email-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58812 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/email"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/GetEmailChannelRequest input58812)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58811] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58811)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/get-email-channel-response (:body response58811)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58811 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58811)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58811})))))))))))

(clojure.core/defn update-sms-channel ([input__56767__auto__] (update-sms-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58814 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/sms"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/UpdateSmsChannelRequest input58814)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "SMSChannelRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58813] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58813)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/update-sms-channel-response (:body response58813)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58813 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58813)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58813})))))))))))

(clojure.core/defn create-segment ([input__56767__auto__] (create-segment input__56767__auto__ portkey.aws/*http-client*)) ([input58816 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/segments"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/CreateSegmentRequest input58816)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "WriteSegmentRequest") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58815] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 201 (:status response58815)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/create-segment-response (:body response58815)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58815 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58815)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58815})))))))))))

(clojure.core/defn delete-sms-channel ([input__56767__auto__] (delete-sms-channel input__56767__auto__ portkey.aws/*http-client*)) ([input58818 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/channels/sms"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/DeleteSmsChannelRequest input58818)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58817] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58817)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/delete-sms-channel-response (:body response58817)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58817 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58817)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58817})))))))))))

(clojure.core/defn put-event-stream ([input__56767__auto__] (put-event-stream input__56767__auto__ portkey.aws/*http-client*)) ([input58820 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.pinpoint/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/v1/apps/{application-id}/eventstream"), :body (clojure.spec.alpha/unform :portkey.aws.pinpoint/PutEventStreamRequest input58820)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"application-id" "ApplicationId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "WriteEventStream") (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response58819] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.pinpoint/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint/too-many-requests-exception}] (if (clojure.core/= 200 (:status response58819)) (clojure.spec.alpha/unform :portkey.aws.pinpoint/put-event-stream-response (:body response58819)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response58819 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response58819)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response58819})))))))))))
