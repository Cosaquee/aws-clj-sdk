(ns portkey.aws.apigateway.-2015-07-09 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope
    {:service "apigateway", :region "ap-northeast-1"},
    :ssl-common-name "apigateway.ap-northeast-1.amazonaws.com",
    :endpoint "https://apigateway.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "apigateway", :region "eu-west-1"},
    :ssl-common-name "apigateway.eu-west-1.amazonaws.com",
    :endpoint "https://apigateway.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "apigateway", :region "us-east-2"},
    :ssl-common-name "apigateway.us-east-2.amazonaws.com",
    :endpoint "https://apigateway.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "apigateway", :region "ap-southeast-2"},
    :ssl-common-name "apigateway.ap-southeast-2.amazonaws.com",
    :endpoint "https://apigateway.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "sa-east-1"
   {:credential-scope {:service "apigateway", :region "sa-east-1"},
    :ssl-common-name "apigateway.sa-east-1.amazonaws.com",
    :endpoint "https://apigateway.sa-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope
    {:service "apigateway", :region "ap-southeast-1"},
    :ssl-common-name "apigateway.ap-southeast-1.amazonaws.com",
    :endpoint "https://apigateway.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope
    {:service "apigateway", :region "ap-northeast-2"},
    :ssl-common-name "apigateway.ap-northeast-2.amazonaws.com",
    :endpoint "https://apigateway.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "ca-central-1"
   {:credential-scope {:service "apigateway", :region "ca-central-1"},
    :ssl-common-name "apigateway.ca-central-1.amazonaws.com",
    :endpoint "https://apigateway.ca-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "apigateway", :region "eu-central-1"},
    :ssl-common-name "apigateway.eu-central-1.amazonaws.com",
    :endpoint "https://apigateway.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "apigateway", :region "eu-west-2"},
    :ssl-common-name "apigateway.eu-west-2.amazonaws.com",
    :endpoint "https://apigateway.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-gov-west-1"
   {:credential-scope {:service "apigateway", :region "us-gov-west-1"},
    :ssl-common-name "apigateway.us-gov-west-1.amazonaws.com",
    :endpoint "https://apigateway.us-gov-west-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "apigateway", :region "us-west-2"},
    :ssl-common-name "apigateway.us-west-2.amazonaws.com",
    :endpoint "https://apigateway.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "apigateway", :region "us-east-1"},
    :ssl-common-name "apigateway.us-east-1.amazonaws.com",
    :endpoint "https://apigateway.us-east-1.amazonaws.com",
    :signature-version :v4},
   "us-west-1"
   {:credential-scope {:service "apigateway", :region "us-west-1"},
    :ssl-common-name "apigateway.us-west-1.amazonaws.com",
    :endpoint "https://apigateway.us-west-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "apigateway", :region "ap-south-1"},
    :ssl-common-name "apigateway.ap-south-1.amazonaws.com",
    :endpoint "https://apigateway.ap-south-1.amazonaws.com",
    :signature-version :v4}})

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-resource-request/parent-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-resource-request/path-part (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-resource-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-resource-request/parentId :portkey.aws.apigateway.-2015-07-09.create-resource-request/pathPart] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part-location-status-code (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^([1-5]\d\d|\*|\s*)$" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/mode (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/put-mode))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-rest-api-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/body] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-rest-api-request/mode :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/failOnWarnings :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-stages-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-stages-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-stages-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-stages-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-stages-request/deploymentId]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/binary-media-types (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/rest-api (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.rest-api/id :portkey.aws.apigateway.-2015-07-09.rest-api/name :portkey.aws.apigateway.-2015-07-09.rest-api/description :portkey.aws.apigateway.-2015-07-09.rest-api/createdDate :portkey.aws.apigateway.-2015-07-09.rest-api/version :portkey.aws.apigateway.-2015-07-09.rest-api/warnings :portkey.aws.apigateway.-2015-07-09.rest-api/binaryMediaTypes]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-domain-name-request/domainName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-resource-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-resource-request/resourceId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-usage-plan-request/usagePlanId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.unauthorized-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/unauthorized-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.unauthorized-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-documentation-part (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/documentation-part :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resources-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resources-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resources-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resources-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-resources-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-resources-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-resources-request/position :portkey.aws.apigateway.-2015-07-09.get-resources-request/limit :portkey.aws.apigateway.-2015-07-09.get-resources-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key-ids/ids (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key-ids/warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-key-ids (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.api-key-ids/ids :portkey.aws.apigateway.-2015-07-09.api-key-ids/warnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/headers (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/path-with-query-string (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/stage-variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/additional-context (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/test-invoke-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/authorizerId] :opt-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/headers :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/pathWithQueryString :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/body :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/stageVariables :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/additionalContext]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/path-with-query-string (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/headers (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/stage-variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/test-invoke-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/httpMethod] :opt-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/pathWithQueryString :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/body :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/headers :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/clientCertificateId :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/stageVariables]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-method-snapshot (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/method-snapshot))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-type-request/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-sdk-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-sdk-type-request/id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployment/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployment/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployment/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployment/api-summary (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/path-to-map-of-method-snapshot))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/deployment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.deployment/id :portkey.aws.apigateway.-2015-07-09.deployment/description :portkey.aws.apigateway.-2015-07-09.deployment/createdDate :portkey.aws.apigateway.-2015-07-09.deployment/apiSummary]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/gateway-response-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {:integration-timeout "INTEGRATION_TIMEOUT", :default-4xx "DEFAULT_4XX", "REQUEST_TOO_LARGE" "REQUEST_TOO_LARGE", :unauthorized "UNAUTHORIZED", "INTEGRATION_TIMEOUT" "INTEGRATION_TIMEOUT", "RESOURCE_NOT_FOUND" "RESOURCE_NOT_FOUND", :invalid-api-key "INVALID_API_KEY", :integration-failure "INTEGRATION_FAILURE", "AUTHORIZER_CONFIGURATION_ERROR" "AUTHORIZER_CONFIGURATION_ERROR", "INTEGRATION_FAILURE" "INTEGRATION_FAILURE", "DEFAULT_5XX" "DEFAULT_5XX", "UNAUTHORIZED" "UNAUTHORIZED", :quota-exceeded "QUOTA_EXCEEDED", :invalid-signature "INVALID_SIGNATURE", :expired-token "EXPIRED_TOKEN", :bad-request-parameters "BAD_REQUEST_PARAMETERS", "AUTHORIZER_FAILURE" "AUTHORIZER_FAILURE", :unsupported-media-type "UNSUPPORTED_MEDIA_TYPE", "INVALID_API_KEY" "INVALID_API_KEY", "ACCESS_DENIED" "ACCESS_DENIED", "API_CONFIGURATION_ERROR" "API_CONFIGURATION_ERROR", "DEFAULT_4XX" "DEFAULT_4XX", "INVALID_SIGNATURE" "INVALID_SIGNATURE", :bad-request-body "BAD_REQUEST_BODY", :api-configuration-error "API_CONFIGURATION_ERROR", "EXPIRED_TOKEN" "EXPIRED_TOKEN", "UNSUPPORTED_MEDIA_TYPE" "UNSUPPORTED_MEDIA_TYPE", :authorizer-configuration-error "AUTHORIZER_CONFIGURATION_ERROR", :default-5xx "DEFAULT_5XX", :request-too-large "REQUEST_TOO_LARGE", :authorizer-failure "AUTHORIZER_FAILURE", :throttled "THROTTLED", "QUOTA_EXCEEDED" "QUOTA_EXCEEDED", "BAD_REQUEST_PARAMETERS" "BAD_REQUEST_PARAMETERS", "MISSING_AUTHENTICATION_TOKEN" "MISSING_AUTHENTICATION_TOKEN", :missing-authentication-token "MISSING_AUTHENTICATION_TOKEN", "BAD_REQUEST_BODY" "BAD_REQUEST_BODY", :resource-not-found "RESOURCE_NOT_FOUND", :access-denied "ACCESS_DENIED", "THROTTLED" "THROTTLED"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-client-certificate (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/client-certificate :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-request/sdk-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-sdk-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-sdk-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-sdk-request/stageName :portkey.aws.apigateway.-2015-07-09.get-sdk-request/sdkType] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-sdk-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/bad-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.bad-request-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-stage-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-stage-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-stage-request/stageName] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-stage-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-method-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-method-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.get-method-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.get-method-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/client-status (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/log (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/latency (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/long))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/principal-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/policy (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/authorization (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-list))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/claims (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/test-invoke-authorizer-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/clientStatus :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/log :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/latency :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/principalId :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/policy :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/authorization :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/claims]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-stage-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-stage-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/logging-level (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/metrics-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/caching-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/throttling-rate-limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/double))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/cache-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/unauthorized-cache-control-header-strategy (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/unauthorized-cache-control-header-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/cache-data-encrypted (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/throttling-burst-limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/require-authorization-for-cache-control (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/data-trace-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/method-setting (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.method-setting/loggingLevel :portkey.aws.apigateway.-2015-07-09.method-setting/metricsEnabled :portkey.aws.apigateway.-2015-07-09.method-setting/cachingEnabled :portkey.aws.apigateway.-2015-07-09.method-setting/throttlingRateLimit :portkey.aws.apigateway.-2015-07-09.method-setting/cacheTtlInSeconds :portkey.aws.apigateway.-2015-07-09.method-setting/unauthorizedCacheControlHeaderStrategy :portkey.aws.apigateway.-2015-07-09.method-setting/cacheDataEncrypted :portkey.aws.apigateway.-2015-07-09.method-setting/throttlingBurstLimit :portkey.aws.apigateway.-2015-07-09.method-setting/requireAuthorizationForCacheControl :portkey.aws.apigateway.-2015-07-09.method-setting/dataTraceEnabled]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-documentation-part-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-documentation-part-request/documentationPartId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/status-code (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"[1-5]\d\d" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-stage/api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-stage/stage (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-stage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.api-stage/apiId :portkey.aws.apigateway.-2015-07-09.api-stage/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-integration-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-method (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/method))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-header-values (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/string))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part/location (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-location))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part/properties (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-part/id :portkey.aws.apigateway.-2015-07-09.documentation-part/location :portkey.aws.apigateway.-2015-07-09.documentation-part/properties]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-string-to-list (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/list-of-string))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resource-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-resource-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-resource-request/resourceId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-resource-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/start-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/end-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-usage-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.get-usage-request/startDate :portkey.aws.apigateway.-2015-07-09.get-usage-request/endDate] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-usage-request/keyId :portkey.aws.apigateway.-2015-07-09.get-usage-request/position :portkey.aws.apigateway.-2015-07-09.get-usage-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-snapshot/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-snapshot/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/method-snapshot (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.method-snapshot/authorizationType :portkey.aws.apigateway.-2015-07-09.method-snapshot/apiKeyRequired]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/domainName :portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/basePath] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-model (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/model :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-types-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-types-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-sdk-types-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-sdk-types-request/position :portkey.aws.apigateway.-2015-07-09.get-sdk-types-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/mode (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/put-mode))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/import-documentation-parts-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/restApiId :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/body] :opt-un [:portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/mode :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/failOnWarnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.generate-client-certificate-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/generate-client-certificate-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.generate-client-certificate-request/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-apis/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-apis/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-rest-api))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/rest-apis (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.rest-apis/position :portkey.aws.apigateway.-2015-07-09.rest-apis/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-sdk-configuration-property (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/sdk-configuration-property :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-client-certificate-request/clientCertificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mappings/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mappings/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-base-path-mapping))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/base-path-mappings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.base-path-mappings/position :portkey.aws.apigateway.-2015-07-09.base-path-mappings/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-deployment-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-deployment-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-deployment-request/deploymentId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-deployment-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-versions/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-versions/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-documentation-version))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-versions (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-versions/position :portkey.aws.apigateway.-2015-07-09.documentation-versions/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-string (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/uri (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/integration-http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/request-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/cache-namespace (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/passthrough-behavior (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/cache-key-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/credentials (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-integration-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-integration-request/resourceId :portkey.aws.apigateway.-2015-07-09.put-integration-request/httpMethod :portkey.aws.apigateway.-2015-07-09.put-integration-request/type] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-integration-request/uri :portkey.aws.apigateway.-2015-07-09.put-integration-request/integrationHttpMethod :portkey.aws.apigateway.-2015-07-09.put-integration-request/requestTemplates :portkey.aws.apigateway.-2015-07-09.put-integration-request/requestParameters :portkey.aws.apigateway.-2015-07-09.put-integration-request/cacheNamespace :portkey.aws.apigateway.-2015-07-09.put-integration-request/passthroughBehavior :portkey.aws.apigateway.-2015-07-09.put-integration-request/contentHandling :portkey.aws.apigateway.-2015-07-09.put-integration-request/cacheKeyParameters :portkey.aws.apigateway.-2015-07-09.put-integration-request/credentials]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {:response "RESPONSE", "PATH_PARAMETER" "PATH_PARAMETER", :api "API", :response-header "RESPONSE_HEADER", :method "METHOD", "API" "API", "REQUEST_HEADER" "REQUEST_HEADER", :path-parameter "PATH_PARAMETER", "METHOD" "METHOD", :request-body "REQUEST_BODY", :resource "RESOURCE", :request-header "REQUEST_HEADER", "RESOURCE" "RESOURCE", :response-body "RESPONSE_BODY", :query-parameter "QUERY_PARAMETER", "RESPONSE_HEADER" "RESPONSE_HEADER", :authorizer "AUTHORIZER", "REQUEST_BODY" "REQUEST_BODY", "QUERY_PARAMETER" "QUERY_PARAMETER", "AUTHORIZER" "AUTHORIZER", "MODEL" "MODEL", "RESPONSE" "RESPONSE", "RESPONSE_BODY" "RESPONSE_BODY", :model "MODEL"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-usage-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.update-usage-request/keyId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-usage-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-api-key-request/apiKey] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-part-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-documentation-part-request/documentationPartId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.patch-operation/op (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/op))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.patch-operation/path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.patch-operation/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.patch-operation/from (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/patch-operation (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.patch-operation/op :portkey.aws.apigateway.-2015-07-09.patch-operation/path :portkey.aws.apigateway.-2015-07-09.patch-operation/value :portkey.aws.apigateway.-2015-07-09.patch-operation/from]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-base-path-mappings-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/domainName] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/position :portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/clone-from (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/binary-media-types (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-rest-api-request/name] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-rest-api-request/description :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/version :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/cloneFrom :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/binaryMediaTypes]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/selection-pattern (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-integration-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/statusCode] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-integration-response-request/selectionPattern :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/responseParameters :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/responseTemplates :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/contentHandling]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stages/item (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/stages (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.stages/item]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-request-validator (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/request-validator :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/responseType] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-authorizer-request/authorizerId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-rest-api (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/rest-api :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-usage-plan-key (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/usage-plan-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.template/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/template (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.template/value]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.limit-exceeded-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.limit-exceeded-exception/retryAfterSeconds :portkey.aws.apigateway.-2015-07-09.limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/export-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/accepts (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-export-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-export-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-export-request/stageName :portkey.aws.apigateway.-2015-07-09.get-export-request/exportType] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-export-request/parameters :portkey.aws.apigateway.-2015-07-09.get-export-request/accepts]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/nullable-boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-client-certificate-request/clientCertificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-response/response-models (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/method-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.method-response/statusCode :portkey.aws.apigateway.-2015-07-09.method-response/responseParameters :portkey.aws.apigateway.-2015-07-09.method-response/responseModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-deployment (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/deployment :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-request/flatten (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-model-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-model-request/modelName] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-model-request/flatten]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validator/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validator/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validator/validate-request-body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validator/validate-request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/request-validator (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.request-validator/id :portkey.aws.apigateway.-2015-07-09.request-validator/name :portkey.aws.apigateway.-2015-07-09.request-validator/validateRequestBody :portkey.aws.apigateway.-2015-07-09.request-validator/validateRequestParameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/documentationVersion] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/stageName :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validators-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validators-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validators-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-request-validators-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-request-validators-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-request-validators-request/position :portkey.aws.apigateway.-2015-07-09.get-request-validators-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/api-stages (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-api-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/throttle (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/quota (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/quota-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/name] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/description :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/apiStages :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/throttle :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/quota]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-type/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-type/friendly-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-type/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-type/configuration-properties (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-sdk-configuration-property))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/sdk-type (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.sdk-type/id :portkey.aws.apigateway.-2015-07-09.sdk-type/friendlyName :portkey.aws.apigateway.-2015-07-09.sdk-type/description :portkey.aws.apigateway.-2015-07-09.sdk-type/configurationProperties]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.get-usage-plan-key-request/keyId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/cache-cluster-status (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"DELETE_IN_PROGRESS" "DELETE_IN_PROGRESS", "AVAILABLE" "AVAILABLE", :flush-in-progress "FLUSH_IN_PROGRESS", "CREATE_IN_PROGRESS" "CREATE_IN_PROGRESS", :delete-in-progress "DELETE_IN_PROGRESS", :create-in-progress "CREATE_IN_PROGRESS", "NOT_AVAILABLE" "NOT_AVAILABLE", "FLUSH_IN_PROGRESS" "FLUSH_IN_PROGRESS", :not-available "NOT_AVAILABLE", :available "AVAILABLE"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.service-unavailable-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.service-unavailable-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.service-unavailable-exception/retryAfterSeconds :portkey.aws.apigateway.-2015-07-09.service-unavailable-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificates/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificates/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-client-certificate))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/client-certificates (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.client-certificates/position :portkey.aws.apigateway.-2015-07-09.client-certificates/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/responseType] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/statusCode :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/responseParameters :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/responseTemplates]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.flush-stage-cache-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.flush-stage-cache-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/flush-stage-cache-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.flush-stage-cache-request/restApiId :portkey.aws.apigateway.-2015-07-09.flush-stage-cache-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-resource-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-resource-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-resource-request/resourceId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-resource-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-gateway-response (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/gateway-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/nullable-boolean))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-method-settings (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/method-setting))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/quota-period-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"DAY" "DAY", :day "DAY", "WEEK" "WEEK", :week "WEEK", "MONTH" "MONTH", :month "MONTH"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-mode (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"merge" "merge", :merge "merge", "overwrite" "overwrite", :overwrite "overwrite"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validators/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validators/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-request-validator))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/request-validators (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.request-validators/position :portkey.aws.apigateway.-2015-07-09.request-validators/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-method-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.get-method-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-keys/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-keys/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-usage-plan-key))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage-plan-keys (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage-plan-keys/position :portkey.aws.apigateway.-2015-07-09.usage-plan-keys/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/api-stages (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-api-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/throttle (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/quota (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/quota-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/product-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage-plan (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage-plan/id :portkey.aws.apigateway.-2015-07-09.usage-plan/name :portkey.aws.apigateway.-2015-07-09.usage-plan/description :portkey.aws.apigateway.-2015-07-09.usage-plan/apiStages :portkey.aws.apigateway.-2015-07-09.usage-plan/throttle :portkey.aws.apigateway.-2015-07-09.usage-plan/quota :portkey.aws.apigateway.-2015-07-09.usage-plan/productCode]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-long (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/long :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/schema (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/content-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-model-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-model-request/name :portkey.aws.apigateway.-2015-07-09.create-model-request/contentType] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-model-request/description :portkey.aws.apigateway.-2015-07-09.create-model-request/schema]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.too-many-requests-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.too-many-requests-exception/retryAfterSeconds :portkey.aws.apigateway.-2015-07-09.too-many-requests-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-rest-api-request/restApiId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-account-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-account-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-account-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-rest-apis-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-rest-apis-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-rest-apis-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-rest-apis-request/position :portkey.aws.apigateway.-2015-07-09.get-rest-apis-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-model-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-model-request/modelName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.throttle-settings/burst-limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.throttle-settings/rate-limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/double))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/throttle-settings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.throttle-settings/burstLimit :portkey.aws.apigateway.-2015-07-09.throttle-settings/rateLimit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-sdk-type (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/sdk-type :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/cache-cluster-size (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"118" "118", "237" "237", "1.6" "1.6", :118 "118", "0.5" "0.5", :28.4 "28.4", :13.5 "13.5", "28.4" "28.4", "58.2" "58.2", :1.6 "1.6", "6.1" "6.1", :58.2 "58.2", :6.1 "6.1", :237 "237", :0.5 "0.5", "13.5" "13.5"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/default-response (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/gateway-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.gateway-response/responseType :portkey.aws.apigateway.-2015-07-09.gateway-response/statusCode :portkey.aws.apigateway.-2015-07-09.gateway-response/responseParameters :portkey.aws.apigateway.-2015-07-09.gateway-response/responseTemplates :portkey.aws.apigateway.-2015-07-09.gateway-response/defaultResponse]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-template-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-template-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-model-template-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-model-template-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-model-template-request/modelName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/integration-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {:aws "AWS", "AWS" "AWS", :aws-proxy "AWS_PROXY", "MOCK" "MOCK", "AWS_PROXY" "AWS_PROXY", "HTTP_PROXY" "HTTP_PROXY", :http "HTTP", :http-proxy "HTTP_PROXY", "HTTP" "HTTP", :mock "MOCK"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mapping/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mapping/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mapping/stage (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/base-path-mapping (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.base-path-mapping/basePath :portkey.aws.apigateway.-2015-07-09.base-path-mapping/restApiId :portkey.aws.apigateway.-2015-07-09.base-path-mapping/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-request-validator-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-request-validator-request/requestValidatorId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-resource (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/resource :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/op (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {:remove "remove", :copy "copy", "copy" "copy", :replace "replace", :move "move", "replace" "replace", "remove" "remove", "move" "move", "add" "add", :add "add", :test "test", "test" "test"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-ids/ids (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-ids/warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part-ids (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-part-ids/ids :portkey.aws.apigateway.-2015-07-09.documentation-part-ids/warnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizers-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizers-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizers-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-authorizers-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-authorizers-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-authorizers-request/position :portkey.aws.apigateway.-2015-07-09.get-authorizers-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/schema (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/content-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/model (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.model/id :portkey.aws.apigateway.-2015-07-09.model/name :portkey.aws.apigateway.-2015-07-09.model/description :portkey.aws.apigateway.-2015-07-09.model/schema :portkey.aws.apigateway.-2015-07-09.model/contentType]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-domain-name-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-domain-name-request/domainName] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-domain-name-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.delete-usage-plan-key-request/keyId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-base-path-mapping-request/domainName :portkey.aws.apigateway.-2015-07-09.get-base-path-mapping-request/basePath] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/authorizer-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"TOKEN" "TOKEN", :token "TOKEN", "COGNITO_USER_POOLS" "COGNITO_USER_POOLS", :cognito-user-pools "COGNITO_USER_POOLS"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-method-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-method-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.update-method-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.update-method-response-request/statusCode] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-method-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-ofarns (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/providerarn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-api-stage (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/api-stage :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-names/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-names/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-domain-name))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/domain-names (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.domain-names/position :portkey.aws.apigateway.-2015-07-09.domain-names/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-integration-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/statusCode] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-integration-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.conflict-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/response-models (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-method-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-method-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.put-method-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.put-method-response-request/statusCode] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-method-response-request/responseParameters :portkey.aws.apigateway.-2015-07-09.put-method-response-request/responseModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-domain-name-request/domainName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.account/cloudwatch-role-arn (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.account/throttle-settings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.account/features (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.account/api-key-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/account (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.account/cloudwatchRoleArn :portkey.aws.apigateway.-2015-07-09.account/throttleSettings :portkey.aws.apigateway.-2015-07-09.account/features :portkey.aws.apigateway.-2015-07-09.account/apiKeyVersion]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/status (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/headers (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/log (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/latency (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/long))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/test-invoke-method-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/status :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/body :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/headers :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/log :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/latency]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-plan-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-usage-plan-request/usagePlanId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-usage-plan-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-gateway-responses-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/position :portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/operation-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/request-models (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/method-integration (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/method-responses (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-method-response))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/method (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.method/authorizerId :portkey.aws.apigateway.-2015-07-09.method/requestValidatorId :portkey.aws.apigateway.-2015-07-09.method/authorizationType :portkey.aws.apigateway.-2015-07-09.method/httpMethod :portkey.aws.apigateway.-2015-07-09.method/operationName :portkey.aws.apigateway.-2015-07-09.method/requestParameters :portkey.aws.apigateway.-2015-07-09.method/apiKeyRequired :portkey.aws.apigateway.-2015-07-09.method/requestModels :portkey.aws.apigateway.-2015-07-09.method/methodIntegration :portkey.aws.apigateway.-2015-07-09.method/methodResponses]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-stage (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/stage :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/stage-description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-deployment-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-deployment-request/stageName :portkey.aws.apigateway.-2015-07-09.create-deployment-request/stageDescription :portkey.aws.apigateway.-2015-07-09.create-deployment-request/description :portkey.aws.apigateway.-2015-07-09.create-deployment-request/cacheClusterEnabled :portkey.aws.apigateway.-2015-07-09.create-deployment-request/cacheClusterSize :portkey.aws.apigateway.-2015-07-09.create-deployment-request/variables]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-method-response (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/method-response))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resources/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resources/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-resource))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/resources (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.resources/position :portkey.aws.apigateway.-2015-07-09.resources/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-usage (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/list-of-long :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/validate-request-body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/validate-request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-request-validator-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-request-validator-request/name :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/validateRequestBody :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/validateRequestParameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-version-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-documentation-version-request/documentationVersion] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage-key/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage-key/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/stage-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.stage-key/restApiId :portkey.aws.apigateway.-2015-07-09.stage-key/stageName]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/include-values (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-api-keys-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-api-keys-request/position :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/limit :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/nameQuery :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/customerId :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/includeValues]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-plan-keys-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/usagePlanId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/position :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/limit :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/nameQuery]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.not-found-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-client-certificate-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-client-certificate-request/clientCertificateId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-client-certificate-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/generate-distinct-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/stage-keys (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-stage-keys))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-api-key-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-api-key-request/name :portkey.aws.apigateway.-2015-07-09.create-api-key-request/description :portkey.aws.apigateway.-2015-07-09.create-api-key-request/enabled :portkey.aws.apigateway.-2015-07-09.create-api-key-request/generateDistinctId :portkey.aws.apigateway.-2015-07-09.create-api-key-request/value :portkey.aws.apigateway.-2015-07-09.create-api-key-request/stageKeys :portkey.aws.apigateway.-2015-07-09.create-api-key-request/customerId]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployment-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-deployment-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-deployment-request/deploymentId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-deployment-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-types/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-types/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-sdk-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/sdk-types (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.sdk-types/position :portkey.aws.apigateway.-2015-07-09.sdk-types/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-documentation-version-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-documentation-version-request/documentationVersion] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-client-certificates-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-client-certificates-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-client-certificates-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-client-certificates-request/position :portkey.aws.apigateway.-2015-07-09.get-client-certificates-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-base-path-mapping-request/domainName :portkey.aws.apigateway.-2015-07-09.delete-base-path-mapping-request/basePath] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-documentation-version (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/documentation-version :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-model-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-model-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-model-request/modelName] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-model-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.quota-settings/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.quota-settings/offset (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.quota-settings/period (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/quota-period-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/quota-settings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.quota-settings/limit :portkey.aws.apigateway.-2015-07-09.quota-settings/offset :portkey.aws.apigateway.-2015-07-09.quota-settings/period]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/documentationVersion] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-stage-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-stage-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/providerarn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/path-to-map-of-method-snapshot (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/map-of-method-snapshot))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-key/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-key/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-key/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-key/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage-plan-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage-plan-key/id :portkey.aws.apigateway.-2015-07-09.usage-plan-key/type :portkey.aws.apigateway.-2015-07-09.usage-plan-key/value :portkey.aws.apigateway.-2015-07-09.usage-plan-key/name]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/string))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizer-credentials (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/authorizer-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/auth-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/identity-source (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/providerarns (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-ofarns))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/name :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/type :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/identitySource] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizerCredentials :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/identityValidationExpression :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizerResultTtlInSeconds :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizerUri :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authType :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/providerARNs]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-gateway-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-gateway-response-request/responseType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-gateway-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-gateway-response-request/responseType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-domain-names-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-domain-names-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-domain-names-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-domain-names-request/position :portkey.aws.apigateway.-2015-07-09.get-domain-names-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-location-status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part-location (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.documentation-part-location/type] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-part-location/path :portkey.aws.apigateway.-2015-07-09.documentation-part-location/method :portkey.aws.apigateway.-2015-07-09.documentation-part-location/statusCode :portkey.aws.apigateway.-2015-07-09.documentation-part-location/name]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/stage (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/domainName :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/basePath :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/pem-encoded-certificate (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/expiration-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/client-certificate (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.client-certificate/clientCertificateId :portkey.aws.apigateway.-2015-07-09.client-certificate/description :portkey.aws.apigateway.-2015-07-09.client-certificate/pemEncodedCertificate :portkey.aws.apigateway.-2015-07-09.client-certificate/createdDate :portkey.aws.apigateway.-2015-07-09.client-certificate/expirationDate]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-keys/warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-keys/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-keys/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-api-key))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-keys (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.api-keys/warnings :portkey.aws.apigateway.-2015-07-09.api-keys/position :portkey.aws.apigateway.-2015-07-09.api-keys/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plans/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plans/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-usage-plan))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage-plans (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage-plans/position :portkey.aws.apigateway.-2015-07-09.usage-plans/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-key-usages (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/list-of-usage))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-authorizer (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/authorizer :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-stage-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-stage-request/stageName :portkey.aws.apigateway.-2015-07-09.create-stage-request/deploymentId] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-stage-request/description :portkey.aws.apigateway.-2015-07-09.create-stage-request/cacheClusterEnabled :portkey.aws.apigateway.-2015-07-09.create-stage-request/cacheClusterSize :portkey.aws.apigateway.-2015-07-09.create-stage-request/variables :portkey.aws.apigateway.-2015-07-09.create-stage-request/documentationVersion]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizers/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizers/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-authorizer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/authorizers (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.authorizers/position :portkey.aws.apigateway.-2015-07-09.authorizers/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-models-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-models-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-models-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-models-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-models-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-models-request/position :portkey.aws.apigateway.-2015-07-09.get-models-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-api-key-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-api-key-request/apiKey] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-api-key-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/start-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/end-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-key-usages))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage/usagePlanId :portkey.aws.apigateway.-2015-07-09.usage/startDate :portkey.aws.apigateway.-2015-07-09.usage/endDate :portkey.aws.apigateway.-2015-07-09.usage/position :portkey.aws.apigateway.-2015-07-09.usage/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-rest-api-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-rest-api-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-rest-api-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-keys-format (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"csv" "csv", :csv "csv"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-documentation-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/position :portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployments-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployments-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployments-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-deployments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-deployments-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-deployments-request/position :portkey.aws.apigateway.-2015-07-09.get-deployments-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-usage-plan (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/usage-plan :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-api-keys-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-api-keys-request/format (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/api-keys-format))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-api-keys-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/import-api-keys-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.import-api-keys-request/body :portkey.aws.apigateway.-2015-07-09.import-api-keys-request/format] :opt-un [:portkey.aws.apigateway.-2015-07-09.import-api-keys-request/failOnWarnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/parent-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/path-part (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/resource-methods (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-method))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.resource/id :portkey.aws.apigateway.-2015-07-09.resource/parentId :portkey.aws.apigateway.-2015-07-09.resource/pathPart :portkey.aws.apigateway.-2015-07-09.resource/path :portkey.aws.apigateway.-2015-07-09.resource/resourceMethods]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/key-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/keyId :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/keyType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/patch-operation :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/friendly-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/required (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/default-value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/sdk-configuration-property (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/name :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/friendlyName :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/description :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/required :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/defaultValue]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-integration-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-integration-request/resourceId :portkey.aws.apigateway.-2015-07-09.delete-integration-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-response/content-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-response/content-disposition (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-response/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/sdk-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.sdk-response/contentType :portkey.aws.apigateway.-2015-07-09.sdk-response/contentDisposition :portkey.aws.apigateway.-2015-07-09.sdk-response/body]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-rest-api-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-rest-api-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-rest-api-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/import-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.import-rest-api-request/body] :opt-un [:portkey.aws.apigateway.-2015-07-09.import-rest-api-request/failOnWarnings :portkey.aws.apigateway.-2015-07-09.import-rest-api-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-documentation-parts-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/type :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/nameQuery :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/path :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/position :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/stage-keys (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/last-updated-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.api-key/createdDate :portkey.aws.apigateway.-2015-07-09.api-key/enabled :portkey.aws.apigateway.-2015-07-09.api-key/id :portkey.aws.apigateway.-2015-07-09.api-key/stageKeys :portkey.aws.apigateway.-2015-07-09.api-key/customerId :portkey.aws.apigateway.-2015-07-09.api-key/name :portkey.aws.apigateway.-2015-07-09.api-key/value :portkey.aws.apigateway.-2015-07-09.api-key/lastUpdatedDate :portkey.aws.apigateway.-2015-07-09.api-key/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/nullable-integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.update-method-request/httpMethod] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-method-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/certificate-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/certificate-arn (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/certificate-upload-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/distribution-domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/domain-name (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.domain-name/domainName :portkey.aws.apigateway.-2015-07-09.domain-name/certificateName :portkey.aws.apigateway.-2015-07-09.domain-name/certificateArn :portkey.aws.apigateway.-2015-07-09.domain-name/certificateUploadDate :portkey.aws.apigateway.-2015-07-09.domain-name/distributionDomainName]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-base-path-mapping (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/base-path-mapping :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/blob (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.awsgen/base64-encode portkey.awsgen/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-integration-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-integration-request/resourceId :portkey.aws.apigateway.-2015-07-09.get-integration-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-parts/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-parts/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-documentation-part))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-parts (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-parts/position :portkey.aws.apigateway.-2015-07-09.documentation-parts/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.export-response/content-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.export-response/content-disposition (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.export-response/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/export-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.export-response/contentType :portkey.aws.apigateway.-2015-07-09.export-response/contentDisposition :portkey.aws.apigateway.-2015-07-09.export-response/body]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.delete-method-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-key-request/include-value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-api-key-request/apiKey] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-api-key-request/includeValue]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-responses/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-responses/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-gateway-response))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/gateway-responses (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.gateway-responses/position :portkey.aws.apigateway.-2015-07-09.gateway-responses/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-private-key (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-chain (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-arn (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-domain-name-request/domainName] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificateName :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificateBody :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificatePrivateKey :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificateChain :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificateArn]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/integration-responses (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-integration-response))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/uri (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/request-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/cache-namespace (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/passthrough-behavior (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/cache-key-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/credentials (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/integration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.integration/integrationResponses :portkey.aws.apigateway.-2015-07-09.integration/uri :portkey.aws.apigateway.-2015-07-09.integration/httpMethod :portkey.aws.apigateway.-2015-07-09.integration/requestTemplates :portkey.aws.apigateway.-2015-07-09.integration/requestParameters :portkey.aws.apigateway.-2015-07-09.integration/cacheNamespace :portkey.aws.apigateway.-2015-07-09.integration/passthroughBehavior :portkey.aws.apigateway.-2015-07-09.integration/type :portkey.aws.apigateway.-2015-07-09.integration/contentHandling :portkey.aws.apigateway.-2015-07-09.integration/cacheKeyParameters :portkey.aws.apigateway.-2015-07-09.integration/credentials]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.flush-stage-authorizers-cache-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.flush-stage-authorizers-cache-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/flush-stage-authorizers-cache-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.flush-stage-authorizers-cache-request/restApiId :portkey.aws.apigateway.-2015-07-09.flush-stage-authorizers-cache-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-version/version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-version/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-version/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-version/version :portkey.aws.apigateway.-2015-07-09.documentation-version/createdDate :portkey.aws.apigateway.-2015-07-09.documentation-version/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plan-request/usagePlanId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/unauthorized-cache-control-header-strategy (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"FAIL_WITH_403" "FAIL_WITH_403", :fail-with-403 "FAIL_WITH_403", "SUCCEED_WITH_RESPONSE_HEADER" "SUCCEED_WITH_RESPONSE_HEADER", :succeed-with-response-header "SUCCEED_WITH_RESPONSE_HEADER", "SUCCEED_WITHOUT_RESPONSE_HEADER" "SUCCEED_WITHOUT_RESPONSE_HEADER", :succeed-without-response-header "SUCCEED_WITHOUT_RESPONSE_HEADER"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-deployment-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-deployment-request/deploymentId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-api-key (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/api-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/selection-pattern (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/integration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.integration-response/statusCode :portkey.aws.apigateway.-2015-07-09.integration-response/selectionPattern :portkey.aws.apigateway.-2015-07-09.integration-response/responseParameters :portkey.aws.apigateway.-2015-07-09.integration-response/responseTemplates :portkey.aws.apigateway.-2015-07-09.integration-response/contentHandling]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-domain-name (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/domain-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-rest-api-request/restApiId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-integration-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-integration-request/resourceId :portkey.aws.apigateway.-2015-07-09.update-integration-request/httpMethod] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-integration-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/operation-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/request-models (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.put-method-request/httpMethod :portkey.aws.apigateway.-2015-07-09.put-method-request/authorizationType] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-method-request/authorizerId :portkey.aws.apigateway.-2015-07-09.put-method-request/requestValidatorId :portkey.aws.apigateway.-2015-07-09.put-method-request/operationName :portkey.aws.apigateway.-2015-07-09.put-method-request/requestParameters :portkey.aws.apigateway.-2015-07-09.put-method-request/apiKeyRequired :portkey.aws.apigateway.-2015-07-09.put-method-request/requestModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.models/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.models/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-model))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/models (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.models/position :portkey.aws.apigateway.-2015-07-09.models/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-authorizer-request/authorizerId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/cache-cluster-status (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/cache-cluster-status))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/method-settings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-method-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/last-updated-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/stage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.stage/cacheClusterStatus :portkey.aws.apigateway.-2015-07-09.stage/createdDate :portkey.aws.apigateway.-2015-07-09.stage/documentationVersion :portkey.aws.apigateway.-2015-07-09.stage/methodSettings :portkey.aws.apigateway.-2015-07-09.stage/deploymentId :portkey.aws.apigateway.-2015-07-09.stage/clientCertificateId :portkey.aws.apigateway.-2015-07-09.stage/lastUpdatedDate :portkey.aws.apigateway.-2015-07-09.stage/variables :portkey.aws.apigateway.-2015-07-09.stage/cacheClusterEnabled :portkey.aws.apigateway.-2015-07-09.stage/stageName :portkey.aws.apigateway.-2015-07-09.stage/description :portkey.aws.apigateway.-2015-07-09.stage/cacheClusterSize]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-authorizer-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-authorizer-request/authorizerId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-authorizer-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-stage-keys (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/stage-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/content-handling-strategy (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"CONVERT_TO_BINARY" "CONVERT_TO_BINARY", :convert-to-binary "CONVERT_TO_BINARY", "CONVERT_TO_TEXT" "CONVERT_TO_TEXT", :convert-to-text "CONVERT_TO_TEXT"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-request-validator-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-request-validator-request/requestValidatorId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/location (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-location))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/properties (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/location :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/properties] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-request-validator-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-request-validator-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-request-validator-request/requestValidatorId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-request-validator-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-integration-response (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/integration-response))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-plans-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/position :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/keyId :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/authorizer-credentials (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/authorizer-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/auth-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/identity-source (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/providerarns (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-ofarns))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/authorizer (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.authorizer/authorizerCredentials :portkey.aws.apigateway.-2015-07-09.authorizer/identityValidationExpression :portkey.aws.apigateway.-2015-07-09.authorizer/id :portkey.aws.apigateway.-2015-07-09.authorizer/name :portkey.aws.apigateway.-2015-07-09.authorizer/type :portkey.aws.apigateway.-2015-07-09.authorizer/authorizerResultTtlInSeconds :portkey.aws.apigateway.-2015-07-09.authorizer/authorizerUri :portkey.aws.apigateway.-2015-07-09.authorizer/authType :portkey.aws.apigateway.-2015-07-09.authorizer/identitySource :portkey.aws.apigateway.-2015-07-09.authorizer/providerARNs]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/documentationPartId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployments/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployments/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-deployment))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/deployments (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.deployments/position :portkey.aws.apigateway.-2015-07-09.deployments/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/boolean clojure.core/boolean?)

(clojure.core/defn flush-stage-cache [input114833] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}/cache/data"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/flush-stage-cache-request input114833)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114832] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response114832)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114832 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114832)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114832}))])))))))
(clojure.spec.alpha/fdef flush-stage-cache :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/flush-stage-cache-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/flush-stage-cache-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn get-usage-plan [input114835] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-usage-plan-request input114835)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114834] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114834)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan (:body response114834))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114834 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114834)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114834}))])))))))
(clojure.spec.alpha/fdef get-usage-plan :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-usage-plan-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-usage-plan-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/usage-plan))

(clojure.core/defn update-rest-api [input114837] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-rest-api-request input114837)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114836] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114836)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response114836))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114836 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114836)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114836}))])))))))
(clojure.spec.alpha/fdef update-rest-api :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-rest-api-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-rest-api-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/rest-api))

(clojure.core/defn update-account [input114839] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/account"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-account-request input114839)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114838] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114838)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/account (:body response114838))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114838 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114838)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114838}))])))))))
(clojure.spec.alpha/fdef update-account :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-account-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-account-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/account))

(clojure.core/defn delete-rest-api [input114841] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-rest-api-request input114841)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114840] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception}] (if (clojure.core/= 202 (:status response114840)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114840 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114840)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114840}))])))))))
(clojure.spec.alpha/fdef delete-rest-api :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-rest-api-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-rest-api-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn delete-method [input114843] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-method-request input114843)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114842] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 204 (:status response114842)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114842 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114842)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114842}))])))))))
(clojure.spec.alpha/fdef delete-method :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-method-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-method-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn update-authorizer [input114845] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers/{authorizer_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-authorizer-request input114845)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "authorizer_id" "authorizerId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114844] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114844)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/authorizer (:body response114844))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114844 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114844)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114844}))])))))))
(clojure.spec.alpha/fdef update-authorizer :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-authorizer-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-authorizer-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/authorizer))

(clojure.core/defn get-sdk-type [input114847] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/sdktypes/{sdktype_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-sdk-type-request input114847)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"sdktype_id" "id"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114846] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114846)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/sdk-type (:body response114846))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114846 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114846)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114846}))])))))))
(clojure.spec.alpha/fdef get-sdk-type :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-sdk-type-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-sdk-type-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/sdk-type))

(clojure.core/defn update-domain-name [input114849] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-domain-name-request input114849)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114848] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114848)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/domain-name (:body response114848))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114848 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114848)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114848}))])))))))
(clojure.spec.alpha/fdef update-domain-name :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-domain-name-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-domain-name-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/domain-name))

(clojure.core/defn update-gateway-response [input114851] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses/{response_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-gateway-response-request input114851)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "response_type" "responseType"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114850] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114850)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/gateway-response (:body response114850))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114850 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114850)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114850}))])))))))
(clojure.spec.alpha/fdef update-gateway-response :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-gateway-response-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-gateway-response-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response))

(clojure.core/defn get-rest-apis [input114853] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-rest-apis-request input114853)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114852] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114852)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-apis (:body response114852))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114852 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114852)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114852}))])))))))
(clojure.spec.alpha/fdef get-rest-apis :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-rest-apis-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-rest-apis-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/rest-apis))

(clojure.core/defn get-documentation-parts [input114855] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-documentation-parts-request input114855)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"type" "type", "name" "nameQuery", "path" "path", "position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114854] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114854)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-parts (:body response114854))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114854 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114854)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114854}))])))))))
(clojure.spec.alpha/fdef get-documentation-parts :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-documentation-parts-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-documentation-parts-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-parts))

(clojure.core/defn get-deployment [input114857] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments/{deployment_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-deployment-request input114857)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "deployment_id" "deploymentId"}) (portkey.awsgen/params-to-querystring {"embed" "embed"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114856] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception}] (if (clojure.core/= nil (:status response114856)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/deployment (:body response114856))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114856 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114856)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114856}))])))))))
(clojure.spec.alpha/fdef get-deployment :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-deployment-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-deployment-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/deployment))

(clojure.core/defn create-resource [input114859] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{parent_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/create-resource-request input114859)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "parent_id" "parentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114858] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response114858)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/resource (:body response114858))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114858 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114858)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114858}))])))))))
(clojure.spec.alpha/fdef create-resource :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-resource-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-resource-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/resource))

(clojure.core/defn delete-documentation-version [input114861] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions/{doc_version}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-documentation-version-request input114861)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "doc_version" "documentationVersion"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114860] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response114860)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114860 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114860)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114860}))])))))))
(clojure.spec.alpha/fdef delete-documentation-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-documentation-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-documentation-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn delete-usage-plan [input114863] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-usage-plan-request input114863)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114862] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= 202 (:status response114862)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114862 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114862)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114862}))])))))))
(clojure.spec.alpha/fdef delete-usage-plan :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-usage-plan-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-usage-plan-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn get-stages [input114865] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-stages-request input114865)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"deploymentId" "deploymentId"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114864] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114864)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/stages (:body response114864))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114864 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114864)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114864}))])))))))
(clojure.spec.alpha/fdef get-stages :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-stages-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-stages-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/stages))

(clojure.core/defn get-resource [input114867] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-resource-request input114867)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId"}) (portkey.awsgen/params-to-querystring {"embed" "embed"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114866] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114866)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/resource (:body response114866))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114866 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114866)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114866}))])))))))
(clojure.spec.alpha/fdef get-resource :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-resource-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-resource-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/resource))

(clojure.core/defn update-documentation-part [input114869] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts/{part_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-documentation-part-request input114869)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "part_id" "documentationPartId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114868] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114868)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-part (:body response114868))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114868 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114868)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114868}))])))))))
(clojure.spec.alpha/fdef update-documentation-part :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-documentation-part-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-documentation-part-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part))

(clojure.core/defn import-api-keys [input114871] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys?mode=import"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/import-api-keys-request input114871)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"format" "format", "failonwarnings" "failOnWarnings"}) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114870] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 201 (:status response114870)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-key-ids (:body response114870))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114870 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114870)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114870}))])))))))
(clojure.spec.alpha/fdef import-api-keys :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/import-api-keys-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/import-api-keys-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/api-key-ids))

(clojure.core/defn get-client-certificate [input114873] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates/{clientcertificate_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-client-certificate-request input114873)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"clientcertificate_id" "clientCertificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114872] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114872)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/client-certificate (:body response114872))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114872 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114872)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114872}))])))))))
(clojure.spec.alpha/fdef get-client-certificate :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-client-certificate-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-client-certificate-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/client-certificate))

(clojure.core/defn create-authorizer [input114875] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/create-authorizer-request input114875)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114874] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response114874)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/authorizer (:body response114874))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114874 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114874)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114874}))])))))))
(clojure.spec.alpha/fdef create-authorizer :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-authorizer-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-authorizer-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/authorizer))

(clojure.core/defn get-usage-plan-keys [input114877] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-usage-plan-keys-request input114877)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit", "name" "nameQuery"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114876] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114876)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan-keys (:body response114876))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114876 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114876)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114876}))])))))))
(clojure.spec.alpha/fdef get-usage-plan-keys :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-usage-plan-keys-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-usage-plan-keys-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/usage-plan-keys))

(clojure.core/defn get-gateway-response [input114879] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses/{response_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-gateway-response-request input114879)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "response_type" "responseType"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114878] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114878)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/gateway-response (:body response114878))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114878 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114878)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114878}))])))))))
(clojure.spec.alpha/fdef get-gateway-response :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-gateway-response-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-gateway-response-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response))

(clojure.core/defn get-deployments [input114881] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-deployments-request input114881)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114880] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception}] (if (clojure.core/= nil (:status response114880)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/deployments (:body response114880))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114880 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114880)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114880}))])))))))
(clojure.spec.alpha/fdef get-deployments :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-deployments-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-deployments-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/deployments))

(clojure.core/defn update-resource [input114883] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-resource-request input114883)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114882] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114882)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/resource (:body response114882))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114882 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114882)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114882}))])))))))
(clojure.spec.alpha/fdef update-resource :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-resource-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-resource-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/resource))

(clojure.core/defn get-authorizers [input114885] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-authorizers-request input114885)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114884] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114884)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/authorizers (:body response114884))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114884 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114884)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114884}))])))))))
(clojure.spec.alpha/fdef get-authorizers :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-authorizers-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-authorizers-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/authorizers))

(clojure.core/defn get-base-path-mapping [input114887] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings/{base_path}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-base-path-mapping-request input114887)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName", "base_path" "basePath"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114886] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114886)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/base-path-mapping (:body response114886))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114886 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114886)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114886}))])))))))
(clojure.spec.alpha/fdef get-base-path-mapping :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-base-path-mapping-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-base-path-mapping-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/base-path-mapping))

(clojure.core/defn delete-integration [input114889] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-integration-request input114889)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114888] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 204 (:status response114888)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114888 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114888)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114888}))])))))))
(clojure.spec.alpha/fdef delete-integration :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-integration-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-integration-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn get-request-validators [input114891] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-request-validators-request input114891)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114890] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114890)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/request-validators (:body response114890))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114890 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114890)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114890}))])))))))
(clojure.spec.alpha/fdef get-request-validators :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-request-validators-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-request-validators-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/request-validators))

(clojure.core/defn create-domain-name [input114893] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/create-domain-name-request input114893)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114892] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response114892)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/domain-name (:body response114892))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114892 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114892)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114892}))])))))))
(clojure.spec.alpha/fdef create-domain-name :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-domain-name-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-domain-name-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/domain-name))

(clojure.core/defn put-integration-response [input114895] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/put-integration-response-request input114895)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114894] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 201 (:status response114894)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration-response (:body response114894))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114894 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114894)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114894}))])))))))
(clojure.spec.alpha/fdef put-integration-response :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/put-integration-response-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/put-integration-response-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration-response))

(clojure.core/defn create-usage-plan [input114897] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/create-usage-plan-request input114897)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114896] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= 201 (:status response114896)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan (:body response114896))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114896 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114896)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114896}))])))))))
(clojure.spec.alpha/fdef create-usage-plan :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-usage-plan-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-usage-plan-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/usage-plan))

(clojure.core/defn create-api-key [input114899] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/create-api-key-request input114899)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114898] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 201 (:status response114898)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-key (:body response114898))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114898 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114898)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114898}))])))))))
(clojure.spec.alpha/fdef create-api-key :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-api-key-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-api-key-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/api-key))

(clojure.core/defn import-rest-api [input114901] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis?mode=import"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/import-rest-api-request input114901)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"failonwarnings" "failOnWarnings", nil "parameters"}) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114900] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 201 (:status response114900)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response114900))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114900 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114900)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114900}))])))))))
(clojure.spec.alpha/fdef import-rest-api :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/import-rest-api-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/import-rest-api-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/rest-api))

(clojure.core/defn delete-api-key [input114903] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys/{api_Key}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-api-key-request input114903)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"api_Key" "apiKey"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114902] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response114902)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114902 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114902)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114902}))])))))))
(clojure.spec.alpha/fdef delete-api-key :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-api-key-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-api-key-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn get-integration [input114905] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-integration-request input114905)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114904] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114904)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration (:body response114904))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114904 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114904)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114904}))])))))))
(clojure.spec.alpha/fdef get-integration :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-integration-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-integration-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration))

(clojure.core/defn get-export [input114907] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-export-request input114907)} (portkey.awsgen/params-to-header {"accepts" ["Accept" nil]}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName", "export_type" "exportType"}) (portkey.awsgen/params-to-querystring {nil "parameters"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114906] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 200 (:status response114906)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/export-response (:body response114906))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114906 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114906)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114906}))])))))))
(clojure.spec.alpha/fdef get-export :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-export-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-export-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/export-response))

(clojure.core/defn delete-stage [input114909] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-stage-request input114909)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114908] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception}] (if (clojure.core/= 202 (:status response114908)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114908 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114908)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114908}))])))))))
(clojure.spec.alpha/fdef delete-stage :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-stage-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-stage-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn delete-request-validator [input114911] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-request-validator-request input114911)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "requestvalidator_id" "requestValidatorId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114910] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 202 (:status response114910)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114910 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114910)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114910}))])))))))
(clojure.spec.alpha/fdef delete-request-validator :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-request-validator-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-request-validator-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn get-gateway-responses [input114913] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-gateway-responses-request input114913)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114912] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114912)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/gateway-responses (:body response114912))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114912 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114912)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114912}))])))))))
(clojure.spec.alpha/fdef get-gateway-responses :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-gateway-responses-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-gateway-responses-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-responses))

(clojure.core/defn put-method-response [input114915] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/put-method-response-request input114915)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114914] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response114914)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method-response (:body response114914))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114914 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114914)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114914}))])))))))
(clojure.spec.alpha/fdef put-method-response :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/put-method-response-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/put-method-response-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/method-response))

(clojure.core/defn get-model [input114917] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models/{model_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-model-request input114917)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "model_name" "modelName"}) (portkey.awsgen/params-to-querystring {"flatten" "flatten"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114916] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114916)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/model (:body response114916))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114916 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114916)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114916}))])))))))
(clojure.spec.alpha/fdef get-model :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-model-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-model-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/model))

(clojure.core/defn create-model [input114919] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/create-model-request input114919)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114918] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response114918)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/model (:body response114918))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114918 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114918)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114918}))])))))))
(clojure.spec.alpha/fdef create-model :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-model-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-model-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/model))

(clojure.core/defn update-api-key [input114921] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys/{api_Key}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-api-key-request input114921)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"api_Key" "apiKey"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114920] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= nil (:status response114920)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-key (:body response114920))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114920 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114920)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114920}))])))))))
(clojure.spec.alpha/fdef update-api-key :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-api-key-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-api-key-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/api-key))

(clojure.core/defn create-deployment [input114923] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/create-deployment-request input114923)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114922] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception}] (if (clojure.core/= 201 (:status response114922)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/deployment (:body response114922))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114922 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114922)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114922}))])))))))
(clojure.spec.alpha/fdef create-deployment :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-deployment-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-deployment-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/deployment))

(clojure.core/defn update-method [input114925] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-method-request input114925)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114924] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114924)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method (:body response114924))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114924 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114924)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114924}))])))))))
(clojure.spec.alpha/fdef update-method :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-method-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-method-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/method))

(clojure.core/defn test-invoke-authorizer [input114927] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers/{authorizer_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/test-invoke-authorizer-request input114927)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "authorizer_id" "authorizerId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114926] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114926)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/test-invoke-authorizer-response (:body response114926))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114926 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114926)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114926}))])))))))
(clojure.spec.alpha/fdef test-invoke-authorizer :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/test-invoke-authorizer-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/test-invoke-authorizer-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/test-invoke-authorizer-response))

(clojure.core/defn create-documentation-part [input114929] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/create-documentation-part-request input114929)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114928] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response114928)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-part (:body response114928))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114928 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114928)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114928}))])))))))
(clojure.spec.alpha/fdef create-documentation-part :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-documentation-part-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-documentation-part-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part))

(clojure.core/defn update-stage [input114931] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-stage-request input114931)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114930] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114930)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/stage (:body response114930))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114930 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114930)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114930}))])))))))
(clojure.spec.alpha/fdef update-stage :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-stage-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-stage-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/stage))

(clojure.core/defn update-request-validator [input114933] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-request-validator-request input114933)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "requestvalidator_id" "requestValidatorId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114932] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114932)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/request-validator (:body response114932))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114932 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114932)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114932}))])))))))
(clojure.spec.alpha/fdef update-request-validator :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-request-validator-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-request-validator-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/request-validator))

(clojure.core/defn get-sdk-types [input114935] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/sdktypes"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-sdk-types-request input114935)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114934] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114934)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/sdk-types (:body response114934))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114934 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114934)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114934}))])))))))
(clojure.spec.alpha/fdef get-sdk-types :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-sdk-types-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-sdk-types-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/sdk-types))

(clojure.core/defn update-client-certificate [input114937] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates/{clientcertificate_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-client-certificate-request input114937)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"clientcertificate_id" "clientCertificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114936] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= nil (:status response114936)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/client-certificate (:body response114936))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114936 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114936)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114936}))])))))))
(clojure.spec.alpha/fdef update-client-certificate :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-client-certificate-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-client-certificate-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/client-certificate))

(clojure.core/defn update-model [input114939] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models/{model_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-model-request input114939)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "model_name" "modelName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114938] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114938)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/model (:body response114938))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114938 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114938)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114938}))])))))))
(clojure.spec.alpha/fdef update-model :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-model-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-model-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/model))

(clojure.core/defn get-documentation-versions [input114941] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-documentation-versions-request input114941)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114940] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114940)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-versions (:body response114940))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114940 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114940)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114940}))])))))))
(clojure.spec.alpha/fdef get-documentation-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-documentation-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-documentation-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-versions))

(clojure.core/defn update-usage [input114943] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys/{keyId}/usage"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-usage-request input114943)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId", "keyId" "keyId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114942] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= nil (:status response114942)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage (:body response114942))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114942 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114942)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114942}))])))))))
(clojure.spec.alpha/fdef update-usage :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-usage-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-usage-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/usage))

(clojure.core/defn create-usage-plan-key [input114945] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/create-usage-plan-key-request input114945)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114944] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response114944)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan-key (:body response114944))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114944 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114944)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114944}))])))))))
(clojure.spec.alpha/fdef create-usage-plan-key :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-usage-plan-key-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-usage-plan-key-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/usage-plan-key))

(clojure.core/defn put-integration [input114947] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/put-integration-request input114947)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"resource_id" "resourceId", "http_method" "httpMethod", "restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114946] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response114946)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration (:body response114946))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114946 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114946)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114946}))])))))))
(clojure.spec.alpha/fdef put-integration :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/put-integration-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/put-integration-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration))

(clojure.core/defn get-usage [input114949] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/usage"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-usage-request input114949)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {"keyId" "keyId", "startDate" "startDate", "endDate" "endDate", "position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114948] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114948)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage (:body response114948))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114948 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114948)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114948}))])))))))
(clojure.spec.alpha/fdef get-usage :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-usage-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-usage-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/usage))

(clojure.core/defn update-documentation-version [input114951] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions/{doc_version}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-documentation-version-request input114951)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "doc_version" "documentationVersion"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114950] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114950)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-version (:body response114950))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114950 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114950)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114950}))])))))))
(clojure.spec.alpha/fdef update-documentation-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-documentation-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-documentation-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-version))

(clojure.core/defn get-stage [input114953] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-stage-request input114953)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114952] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114952)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/stage (:body response114952))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114952 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114952)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114952}))])))))))
(clojure.spec.alpha/fdef get-stage :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-stage-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-stage-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/stage))

(clojure.core/defn update-method-response [input114955] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-method-response-request input114955)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114954] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response114954)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method-response (:body response114954))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114954 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114954)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114954}))])))))))
(clojure.spec.alpha/fdef update-method-response :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-method-response-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-method-response-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/method-response))

(clojure.core/defn create-base-path-mapping [input114957] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/create-base-path-mapping-request input114957)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114956] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response114956)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/base-path-mapping (:body response114956))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114956 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114956)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114956}))])))))))
(clojure.spec.alpha/fdef create-base-path-mapping :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-base-path-mapping-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-base-path-mapping-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/base-path-mapping))

(clojure.core/defn get-documentation-part [input114959] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts/{part_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-documentation-part-request input114959)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "part_id" "documentationPartId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114958] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114958)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-part (:body response114958))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114958 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114958)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114958}))])))))))
(clojure.spec.alpha/fdef get-documentation-part :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-documentation-part-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-documentation-part-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part))

(clojure.core/defn delete-model [input114961] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models/{model_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-model-request input114961)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "model_name" "modelName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114960] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 202 (:status response114960)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114960 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114960)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114960}))])))))))
(clojure.spec.alpha/fdef delete-model :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-model-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-model-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn import-documentation-parts [input114963] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/import-documentation-parts-request input114963)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"mode" "mode", "failonwarnings" "failOnWarnings"}) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114962] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114962)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-part-ids (:body response114962))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114962 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114962)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114962}))])))))))
(clojure.spec.alpha/fdef import-documentation-parts :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/import-documentation-parts-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/import-documentation-parts-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-ids))

(clojure.core/defn delete-method-response [input114965] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-method-response-request input114965)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114964] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 204 (:status response114964)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114964 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114964)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114964}))])))))))
(clojure.spec.alpha/fdef delete-method-response :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-method-response-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-method-response-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn get-client-certificates [input114967] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-client-certificates-request input114967)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114966] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114966)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/client-certificates (:body response114966))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114966 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114966)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114966}))])))))))
(clojure.spec.alpha/fdef get-client-certificates :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-client-certificates-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-client-certificates-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/client-certificates))

(clojure.core/defn get-api-keys [input114969] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-api-keys-request input114969)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit", "name" "nameQuery", "customerId" "customerId", "includeValues" "includeValues"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114968] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114968)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-keys (:body response114968))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114968 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114968)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114968}))])))))))
(clojure.spec.alpha/fdef get-api-keys :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-api-keys-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-api-keys-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/api-keys))

(clojure.core/defn update-deployment [input114971] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments/{deployment_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-deployment-request input114971)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "deployment_id" "deploymentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114970] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception}] (if (clojure.core/= nil (:status response114970)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/deployment (:body response114970))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114970 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114970)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114970}))])))))))
(clojure.spec.alpha/fdef update-deployment :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-deployment-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-deployment-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/deployment))

(clojure.core/defn delete-domain-name [input114973] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-domain-name-request input114973)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114972] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response114972)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114972 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114972)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114972}))])))))))
(clojure.spec.alpha/fdef delete-domain-name :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-domain-name-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-domain-name-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn create-rest-api [input114975] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/create-rest-api-request input114975)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114974] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response114974)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response114974))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114974 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114974)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114974}))])))))))
(clojure.spec.alpha/fdef create-rest-api :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-rest-api-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-rest-api-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/rest-api))

(clojure.core/defn delete-authorizer [input114977] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers/{authorizer_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-authorizer-request input114977)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "authorizer_id" "authorizerId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114976] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 202 (:status response114976)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114976 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114976)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114976}))])))))))
(clojure.spec.alpha/fdef delete-authorizer :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-authorizer-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-authorizer-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn get-usage-plan-key [input114979] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys/{keyId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-usage-plan-key-request input114979)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId", "keyId" "keyId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114978] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 200 (:status response114978)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan-key (:body response114978))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114978 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114978)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114978}))])))))))
(clojure.spec.alpha/fdef get-usage-plan-key :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-usage-plan-key-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-usage-plan-key-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/usage-plan-key))

(clojure.core/defn delete-resource [input114981] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-resource-request input114981)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114980] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response114980)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114980 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114980)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114980}))])))))))
(clojure.spec.alpha/fdef delete-resource :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-resource-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-resource-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn test-invoke-method [input114983] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/test-invoke-method-request input114983)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114982] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114982)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/test-invoke-method-response (:body response114982))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114982 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114982)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114982}))])))))))
(clojure.spec.alpha/fdef test-invoke-method :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/test-invoke-method-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/test-invoke-method-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/test-invoke-method-response))

(clojure.core/defn get-method-response [input114985] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-method-response-request input114985)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114984] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114984)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method-response (:body response114984))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114984 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114984)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114984}))])))))))
(clojure.spec.alpha/fdef get-method-response :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-method-response-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-method-response-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/method-response))

(clojure.core/defn get-request-validator [input114987] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-request-validator-request input114987)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "requestvalidator_id" "requestValidatorId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114986] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114986)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/request-validator (:body response114986))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114986 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114986)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114986}))])))))))
(clojure.spec.alpha/fdef get-request-validator :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-request-validator-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-request-validator-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/request-validator))

(clojure.core/defn get-authorizer [input114989] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers/{authorizer_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-authorizer-request input114989)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "authorizer_id" "authorizerId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114988] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114988)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/authorizer (:body response114988))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114988 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114988)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114988}))])))))))
(clojure.spec.alpha/fdef get-authorizer :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-authorizer-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-authorizer-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/authorizer))

(clojure.core/defn get-base-path-mappings [input114991] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-base-path-mappings-request input114991)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114990] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114990)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/base-path-mappings (:body response114990))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114990 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114990)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114990}))])))))))
(clojure.spec.alpha/fdef get-base-path-mappings :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-base-path-mappings-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-base-path-mappings-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/base-path-mappings))

(clojure.core/defn delete-base-path-mapping [input114993] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings/{base_path}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-base-path-mapping-request input114993)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName", "base_path" "basePath"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114992] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response114992)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114992 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114992)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114992}))])))))))
(clojure.spec.alpha/fdef delete-base-path-mapping :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-base-path-mapping-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-base-path-mapping-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn get-account [input114995] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/account"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-account-request input114995)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114994] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114994)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/account (:body response114994))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114994 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114994)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114994}))])))))))
(clojure.spec.alpha/fdef get-account :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-account-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-account-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/account))

(clojure.core/defn get-integration-response [input114997] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-integration-response-request input114997)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114996] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114996)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration-response (:body response114996))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114996 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114996)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114996}))])))))))
(clojure.spec.alpha/fdef get-integration-response :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-integration-response-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-integration-response-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration-response))

(clojure.core/defn get-model-template [input114999] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models/{model_name}/default_template"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-model-template-request input114999)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "model_name" "modelName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114998] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response114998)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/template (:body response114998))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114998 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114998)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114998}))])))))))
(clojure.spec.alpha/fdef get-model-template :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-model-template-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-model-template-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/template))

(clojure.core/defn get-rest-api [input115001] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-rest-api-request input115001)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115000] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response115000)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response115000))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115000 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115000)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115000}))])))))))
(clojure.spec.alpha/fdef get-rest-api :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-rest-api-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-rest-api-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/rest-api))

(clojure.core/defn delete-integration-response [input115003] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-integration-response-request input115003)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115002] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 204 (:status response115002)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115002 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115002)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115002}))])))))))
(clojure.spec.alpha/fdef delete-integration-response :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-integration-response-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-integration-response-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn delete-usage-plan-key [input115005] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys/{keyId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-usage-plan-key-request input115005)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId", "keyId" "keyId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115004] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response115004)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115004 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115004)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115004}))])))))))
(clojure.spec.alpha/fdef delete-usage-plan-key :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-usage-plan-key-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-usage-plan-key-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn delete-documentation-part [input115007] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts/{part_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-documentation-part-request input115007)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "part_id" "documentationPartId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115006] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception}] (if (clojure.core/= 202 (:status response115006)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115006 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115006)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115006}))])))))))
(clojure.spec.alpha/fdef delete-documentation-part :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-documentation-part-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-documentation-part-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn generate-client-certificate [input115009] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/generate-client-certificate-request input115009)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115008] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception}] (if (clojure.core/= 201 (:status response115008)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/client-certificate (:body response115008))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115008 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115008)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115008}))])))))))
(clojure.spec.alpha/fdef generate-client-certificate :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/generate-client-certificate-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/generate-client-certificate-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/client-certificate))

(clojure.core/defn get-method [input115011] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-method-request input115011)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115010] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response115010)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method (:body response115010))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115010 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115010)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115010}))])))))))
(clojure.spec.alpha/fdef get-method :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-method-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-method-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/method))

(clojure.core/defn get-models [input115013] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-models-request input115013)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115012] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response115012)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/models (:body response115012))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115012 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115012)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115012}))])))))))
(clojure.spec.alpha/fdef get-models :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-models-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-models-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/models))

(clojure.core/defn get-documentation-version [input115015] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions/{doc_version}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-documentation-version-request input115015)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "doc_version" "documentationVersion"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115014] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response115014)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-version (:body response115014))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115014 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115014)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115014}))])))))))
(clojure.spec.alpha/fdef get-documentation-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-documentation-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-documentation-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-version))

(clojure.core/defn create-documentation-version [input115017] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/create-documentation-version-request input115017)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115016] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response115016)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-version (:body response115016))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115016 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115016)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115016}))])))))))
(clojure.spec.alpha/fdef create-documentation-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-documentation-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-documentation-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-version))

(clojure.core/defn get-resources [input115019] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-resources-request input115019)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit", "embed" "embed"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115018] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response115018)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/resources (:body response115018))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115018 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115018)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115018}))])))))))
(clojure.spec.alpha/fdef get-resources :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-resources-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-resources-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/resources))

(clojure.core/defn get-api-key [input115021] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys/{api_Key}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-api-key-request input115021)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"api_Key" "apiKey"}) (portkey.awsgen/params-to-querystring {"includeValue" "includeValue"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115020] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response115020)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-key (:body response115020))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115020 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115020)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115020}))])))))))
(clojure.spec.alpha/fdef get-api-key :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-api-key-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-api-key-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/api-key))

(clojure.core/defn create-stage [input115023] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/create-stage-request input115023)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115022] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response115022)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/stage (:body response115022))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115022 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115022)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115022}))])))))))
(clojure.spec.alpha/fdef create-stage :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-stage-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-stage-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/stage))

(clojure.core/defn delete-gateway-response [input115025] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses/{response_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-gateway-response-request input115025)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "response_type" "responseType"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115024] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 202 (:status response115024)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115024 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115024)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115024}))])))))))
(clojure.spec.alpha/fdef delete-gateway-response :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-gateway-response-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-gateway-response-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn update-integration [input115027] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-integration-request input115027)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115026] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= nil (:status response115026)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration (:body response115026))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115026 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115026)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115026}))])))))))
(clojure.spec.alpha/fdef update-integration :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-integration-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-integration-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration))

(clojure.core/defn flush-stage-authorizers-cache [input115029] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/flush-stage-authorizers-cache-request input115029)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115028] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response115028)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115028 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115028)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115028}))])))))))
(clojure.spec.alpha/fdef flush-stage-authorizers-cache :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/flush-stage-authorizers-cache-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/flush-stage-authorizers-cache-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn delete-client-certificate [input115031] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates/{clientcertificate_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-client-certificate-request input115031)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"clientcertificate_id" "clientCertificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115030] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= 202 (:status response115030)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115030 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115030)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115030}))])))))))
(clojure.spec.alpha/fdef delete-client-certificate :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-client-certificate-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-client-certificate-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn put-gateway-response [input115033] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses/{response_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/put-gateway-response-request input115033)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "response_type" "responseType"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115032] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response115032)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/gateway-response (:body response115032))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115032 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115032)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115032}))])))))))
(clojure.spec.alpha/fdef put-gateway-response :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/put-gateway-response-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/put-gateway-response-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response))

(clojure.core/defn get-domain-name [input115035] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-domain-name-request input115035)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115034] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response115034)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/domain-name (:body response115034))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115034 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115034)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115034}))])))))))
(clojure.spec.alpha/fdef get-domain-name :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-domain-name-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-domain-name-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/domain-name))

(clojure.core/defn update-base-path-mapping [input115037] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings/{base_path}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-base-path-mapping-request input115037)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName", "base_path" "basePath"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115036] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response115036)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/base-path-mapping (:body response115036))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115036 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115036)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115036}))])))))))
(clojure.spec.alpha/fdef update-base-path-mapping :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-base-path-mapping-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-base-path-mapping-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/base-path-mapping))

(clojure.core/defn get-usage-plans [input115039] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-usage-plans-request input115039)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "keyId" "keyId", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115038] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= nil (:status response115038)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plans (:body response115038))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115038 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115038)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115038}))])))))))
(clojure.spec.alpha/fdef get-usage-plans :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-usage-plans-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-usage-plans-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/usage-plans))

(clojure.core/defn update-usage-plan [input115041] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-usage-plan-request input115041)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115040] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= nil (:status response115040)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan (:body response115040))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115040 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115040)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115040}))])))))))
(clojure.spec.alpha/fdef update-usage-plan :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-usage-plan-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-usage-plan-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/usage-plan))

(clojure.core/defn get-sdk [input115043] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-sdk-request input115043)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName", "sdk_type" "sdkType"}) (portkey.awsgen/params-to-querystring {nil "parameters"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115042] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 200 (:status response115042)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/sdk-response (:body response115042))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115042 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115042)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115042}))])))))))
(clojure.spec.alpha/fdef get-sdk :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-sdk-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-sdk-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/sdk-response))

(clojure.core/defn put-method [input115045] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/put-method-request input115045)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"resource_id" "resourceId", "http_method" "httpMethod", "restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115044] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response115044)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method (:body response115044))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115044 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115044)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115044}))])))))))
(clojure.spec.alpha/fdef put-method :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/put-method-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/put-method-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/method))

(clojure.core/defn update-integration-response [input115047] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PATCH", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/update-integration-response-request input115047)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115046] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response115046)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration-response (:body response115046))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115046 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115046)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115046}))])))))))
(clojure.spec.alpha/fdef update-integration-response :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-integration-response-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/update-integration-response-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration-response))

(clojure.core/defn get-domain-names [input115049] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/get-domain-names-request input115049)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115048] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response115048)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/domain-names (:body response115048))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115048 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115048)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115048}))])))))))
(clojure.spec.alpha/fdef get-domain-names :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-domain-names-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/get-domain-names-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/domain-names))

(clojure.core/defn put-rest-api [input115051] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/put-rest-api-request input115051)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"mode" "mode", "failonwarnings" "failOnWarnings", nil "parameters"}) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115050] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= nil (:status response115050)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response115050))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115050 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115050)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115050}))])))))))
(clojure.spec.alpha/fdef put-rest-api :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/put-rest-api-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/put-rest-api-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/rest-api))

(clojure.core/defn create-request-validator [input115053] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/create-request-validator-request input115053)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115052] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response115052)) [:result (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/request-validator (:body response115052))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115052 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115052)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115052}))])))))))
(clojure.spec.alpha/fdef create-request-validator :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-request-validator-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/create-request-validator-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/request-validator))

(clojure.core/defn delete-deployment [input115055] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.apigateway.-2015-07-09/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments/{deployment_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/delete-deployment-request input115055)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "deployment_id" "deploymentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115054] (clojure.core/let [errors__109313__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response115054)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115054 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115054)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115054}))])))))))
(clojure.spec.alpha/fdef delete-deployment :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-deployment-request) :async (clojure.spec.alpha/tuple :portkey.aws.apigateway.-2015-07-09/delete-deployment-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))
