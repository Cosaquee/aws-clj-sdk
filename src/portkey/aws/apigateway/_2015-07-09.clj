(ns portkey.aws.apigateway.-2015-07-09 (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-resource-request/parent-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-resource-request/path-part (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-resource-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-resource-request/parentId :portkey.aws.apigateway.-2015-07-09.create-resource-request/pathPart] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part-location-status-code (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"^([1-5]\d\d|\*|\s*)$" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/mode (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/put-mode))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-rest-api-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/body] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-rest-api-request/mode :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/failOnWarnings :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-stages-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-stages-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-stages-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-stages-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-stages-request/deploymentId]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/binary-media-types (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/rest-api (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.rest-api/id :portkey.aws.apigateway.-2015-07-09.rest-api/name :portkey.aws.apigateway.-2015-07-09.rest-api/description :portkey.aws.apigateway.-2015-07-09.rest-api/createdDate :portkey.aws.apigateway.-2015-07-09.rest-api/version :portkey.aws.apigateway.-2015-07-09.rest-api/warnings :portkey.aws.apigateway.-2015-07-09.rest-api/binaryMediaTypes]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-domain-name-request/domainName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-resource-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-resource-request/resourceId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-usage-plan-request/usagePlanId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.unauthorized-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/unauthorized-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.unauthorized-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-documentation-part (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/documentation-part :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resources-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resources-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resources-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resources-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-resources-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-resources-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-resources-request/position :portkey.aws.apigateway.-2015-07-09.get-resources-request/limit :portkey.aws.apigateway.-2015-07-09.get-resources-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key-ids/ids (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key-ids/warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-key-ids (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.api-key-ids/ids :portkey.aws.apigateway.-2015-07-09.api-key-ids/warnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/headers (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/path-with-query-string (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/stage-variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/additional-context (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/test-invoke-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/authorizerId] :opt-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/headers :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/pathWithQueryString :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/body :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/stageVariables :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/additionalContext]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/path-with-query-string (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/headers (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/stage-variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/test-invoke-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/httpMethod] :opt-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/pathWithQueryString :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/body :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/headers :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/clientCertificateId :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/stageVariables]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-method-snapshot (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/method-snapshot))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-type-request/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-sdk-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-sdk-type-request/id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployment/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployment/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployment/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployment/api-summary (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/path-to-map-of-method-snapshot))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/deployment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.deployment/id :portkey.aws.apigateway.-2015-07-09.deployment/description :portkey.aws.apigateway.-2015-07-09.deployment/createdDate :portkey.aws.apigateway.-2015-07-09.deployment/apiSummary]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/gateway-response-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:integration-timeout "INTEGRATION_TIMEOUT", :default-4xx "DEFAULT_4XX", "REQUEST_TOO_LARGE" "REQUEST_TOO_LARGE", :unauthorized "UNAUTHORIZED", "INTEGRATION_TIMEOUT" "INTEGRATION_TIMEOUT", "RESOURCE_NOT_FOUND" "RESOURCE_NOT_FOUND", :invalid-api-key "INVALID_API_KEY", :integration-failure "INTEGRATION_FAILURE", "AUTHORIZER_CONFIGURATION_ERROR" "AUTHORIZER_CONFIGURATION_ERROR", "INTEGRATION_FAILURE" "INTEGRATION_FAILURE", "DEFAULT_5XX" "DEFAULT_5XX", "UNAUTHORIZED" "UNAUTHORIZED", :quota-exceeded "QUOTA_EXCEEDED", :invalid-signature "INVALID_SIGNATURE", :expired-token "EXPIRED_TOKEN", :bad-request-parameters "BAD_REQUEST_PARAMETERS", "AUTHORIZER_FAILURE" "AUTHORIZER_FAILURE", :unsupported-media-type "UNSUPPORTED_MEDIA_TYPE", "INVALID_API_KEY" "INVALID_API_KEY", "ACCESS_DENIED" "ACCESS_DENIED", "API_CONFIGURATION_ERROR" "API_CONFIGURATION_ERROR", "DEFAULT_4XX" "DEFAULT_4XX", "INVALID_SIGNATURE" "INVALID_SIGNATURE", :bad-request-body "BAD_REQUEST_BODY", :api-configuration-error "API_CONFIGURATION_ERROR", "EXPIRED_TOKEN" "EXPIRED_TOKEN", "UNSUPPORTED_MEDIA_TYPE" "UNSUPPORTED_MEDIA_TYPE", :authorizer-configuration-error "AUTHORIZER_CONFIGURATION_ERROR", :default-5xx "DEFAULT_5XX", :request-too-large "REQUEST_TOO_LARGE", :authorizer-failure "AUTHORIZER_FAILURE", :throttled "THROTTLED", "QUOTA_EXCEEDED" "QUOTA_EXCEEDED", "BAD_REQUEST_PARAMETERS" "BAD_REQUEST_PARAMETERS", "MISSING_AUTHENTICATION_TOKEN" "MISSING_AUTHENTICATION_TOKEN", :missing-authentication-token "MISSING_AUTHENTICATION_TOKEN", "BAD_REQUEST_BODY" "BAD_REQUEST_BODY", :resource-not-found "RESOURCE_NOT_FOUND", :access-denied "ACCESS_DENIED", "THROTTLED" "THROTTLED"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-client-certificate (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/client-certificate :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-request/sdk-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-sdk-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-sdk-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-sdk-request/stageName :portkey.aws.apigateway.-2015-07-09.get-sdk-request/sdkType] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-sdk-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/bad-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.bad-request-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-stage-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-stage-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-stage-request/stageName] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-stage-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-method-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-method-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.get-method-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.get-method-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/client-status (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/log (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/latency (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/long))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/principal-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/policy (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/authorization (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-list))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/claims (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/test-invoke-authorizer-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/clientStatus :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/log :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/latency :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/principalId :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/policy :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/authorization :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/claims]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-stage-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-stage-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/logging-level (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/metrics-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/caching-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/throttling-rate-limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/double))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/cache-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/unauthorized-cache-control-header-strategy (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/unauthorized-cache-control-header-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/cache-data-encrypted (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/throttling-burst-limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/require-authorization-for-cache-control (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/data-trace-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/method-setting (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.method-setting/loggingLevel :portkey.aws.apigateway.-2015-07-09.method-setting/metricsEnabled :portkey.aws.apigateway.-2015-07-09.method-setting/cachingEnabled :portkey.aws.apigateway.-2015-07-09.method-setting/throttlingRateLimit :portkey.aws.apigateway.-2015-07-09.method-setting/cacheTtlInSeconds :portkey.aws.apigateway.-2015-07-09.method-setting/unauthorizedCacheControlHeaderStrategy :portkey.aws.apigateway.-2015-07-09.method-setting/cacheDataEncrypted :portkey.aws.apigateway.-2015-07-09.method-setting/throttlingBurstLimit :portkey.aws.apigateway.-2015-07-09.method-setting/requireAuthorizationForCacheControl :portkey.aws.apigateway.-2015-07-09.method-setting/dataTraceEnabled]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-documentation-part-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-documentation-part-request/documentationPartId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/status-code (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"[1-5]\d\d" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-stage/api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-stage/stage (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-stage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.api-stage/apiId :portkey.aws.apigateway.-2015-07-09.api-stage/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-integration-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-method (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/method))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-header-values (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/string))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part/location (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-location))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part/properties (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-part/id :portkey.aws.apigateway.-2015-07-09.documentation-part/location :portkey.aws.apigateway.-2015-07-09.documentation-part/properties]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-string-to-list (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/list-of-string))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resource-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-resource-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-resource-request/resourceId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-resource-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/start-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/end-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-usage-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.get-usage-request/startDate :portkey.aws.apigateway.-2015-07-09.get-usage-request/endDate] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-usage-request/keyId :portkey.aws.apigateway.-2015-07-09.get-usage-request/position :portkey.aws.apigateway.-2015-07-09.get-usage-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-snapshot/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-snapshot/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/method-snapshot (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.method-snapshot/authorizationType :portkey.aws.apigateway.-2015-07-09.method-snapshot/apiKeyRequired]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/domainName :portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/basePath] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-model (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/model :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-types-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-types-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-sdk-types-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-sdk-types-request/position :portkey.aws.apigateway.-2015-07-09.get-sdk-types-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/mode (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/put-mode))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/import-documentation-parts-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/restApiId :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/body] :opt-un [:portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/mode :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/failOnWarnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.generate-client-certificate-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/generate-client-certificate-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.generate-client-certificate-request/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-apis/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-apis/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-rest-api))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/rest-apis (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.rest-apis/position :portkey.aws.apigateway.-2015-07-09.rest-apis/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-sdk-configuration-property (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/sdk-configuration-property :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-client-certificate-request/clientCertificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mappings/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mappings/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-base-path-mapping))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/base-path-mappings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.base-path-mappings/position :portkey.aws.apigateway.-2015-07-09.base-path-mappings/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-deployment-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-deployment-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-deployment-request/deploymentId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-deployment-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-versions/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-versions/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-documentation-version))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-versions (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-versions/position :portkey.aws.apigateway.-2015-07-09.documentation-versions/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-string (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/uri (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/integration-http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/request-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/cache-namespace (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/passthrough-behavior (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/cache-key-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/credentials (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-integration-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-integration-request/resourceId :portkey.aws.apigateway.-2015-07-09.put-integration-request/httpMethod :portkey.aws.apigateway.-2015-07-09.put-integration-request/type] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-integration-request/uri :portkey.aws.apigateway.-2015-07-09.put-integration-request/integrationHttpMethod :portkey.aws.apigateway.-2015-07-09.put-integration-request/requestTemplates :portkey.aws.apigateway.-2015-07-09.put-integration-request/requestParameters :portkey.aws.apigateway.-2015-07-09.put-integration-request/cacheNamespace :portkey.aws.apigateway.-2015-07-09.put-integration-request/passthroughBehavior :portkey.aws.apigateway.-2015-07-09.put-integration-request/contentHandling :portkey.aws.apigateway.-2015-07-09.put-integration-request/cacheKeyParameters :portkey.aws.apigateway.-2015-07-09.put-integration-request/credentials]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:response "RESPONSE", "PATH_PARAMETER" "PATH_PARAMETER", :api "API", :response-header "RESPONSE_HEADER", :method "METHOD", "API" "API", "REQUEST_HEADER" "REQUEST_HEADER", :path-parameter "PATH_PARAMETER", "METHOD" "METHOD", :request-body "REQUEST_BODY", :resource "RESOURCE", :request-header "REQUEST_HEADER", "RESOURCE" "RESOURCE", :response-body "RESPONSE_BODY", :query-parameter "QUERY_PARAMETER", "RESPONSE_HEADER" "RESPONSE_HEADER", :authorizer "AUTHORIZER", "REQUEST_BODY" "REQUEST_BODY", "QUERY_PARAMETER" "QUERY_PARAMETER", "AUTHORIZER" "AUTHORIZER", "MODEL" "MODEL", "RESPONSE" "RESPONSE", "RESPONSE_BODY" "RESPONSE_BODY", :model "MODEL"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-usage-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.update-usage-request/keyId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-usage-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-api-key-request/apiKey] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-part-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-documentation-part-request/documentationPartId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.patch-operation/op (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/op))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.patch-operation/path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.patch-operation/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.patch-operation/from (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/patch-operation (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.patch-operation/op :portkey.aws.apigateway.-2015-07-09.patch-operation/path :portkey.aws.apigateway.-2015-07-09.patch-operation/value :portkey.aws.apigateway.-2015-07-09.patch-operation/from]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-base-path-mappings-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/domainName] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/position :portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/clone-from (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/binary-media-types (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-rest-api-request/name] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-rest-api-request/description :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/version :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/cloneFrom :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/binaryMediaTypes]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/selection-pattern (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-integration-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/statusCode] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-integration-response-request/selectionPattern :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/responseParameters :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/responseTemplates :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/contentHandling]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stages/item (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/stages (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.stages/item]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-request-validator (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/request-validator :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/responseType] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-authorizer-request/authorizerId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-rest-api (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/rest-api :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-usage-plan-key (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/usage-plan-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.template/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/template (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.template/value]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.limit-exceeded-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.limit-exceeded-exception/retryAfterSeconds :portkey.aws.apigateway.-2015-07-09.limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/export-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/accepts (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-export-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-export-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-export-request/stageName :portkey.aws.apigateway.-2015-07-09.get-export-request/exportType] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-export-request/parameters :portkey.aws.apigateway.-2015-07-09.get-export-request/accepts]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/nullable-boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-client-certificate-request/clientCertificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-response/response-models (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/method-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.method-response/statusCode :portkey.aws.apigateway.-2015-07-09.method-response/responseParameters :portkey.aws.apigateway.-2015-07-09.method-response/responseModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-deployment (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/deployment :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-request/flatten (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-model-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-model-request/modelName] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-model-request/flatten]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validator/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validator/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validator/validate-request-body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validator/validate-request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/request-validator (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.request-validator/id :portkey.aws.apigateway.-2015-07-09.request-validator/name :portkey.aws.apigateway.-2015-07-09.request-validator/validateRequestBody :portkey.aws.apigateway.-2015-07-09.request-validator/validateRequestParameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/documentationVersion] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/stageName :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validators-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validators-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validators-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-request-validators-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-request-validators-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-request-validators-request/position :portkey.aws.apigateway.-2015-07-09.get-request-validators-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/api-stages (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-api-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/throttle (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/quota (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/quota-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/name] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/description :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/apiStages :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/throttle :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/quota]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-type/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-type/friendly-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-type/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-type/configuration-properties (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-sdk-configuration-property))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/sdk-type (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.sdk-type/id :portkey.aws.apigateway.-2015-07-09.sdk-type/friendlyName :portkey.aws.apigateway.-2015-07-09.sdk-type/description :portkey.aws.apigateway.-2015-07-09.sdk-type/configurationProperties]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.get-usage-plan-key-request/keyId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/cache-cluster-status (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"DELETE_IN_PROGRESS" "DELETE_IN_PROGRESS", "AVAILABLE" "AVAILABLE", :flush-in-progress "FLUSH_IN_PROGRESS", "CREATE_IN_PROGRESS" "CREATE_IN_PROGRESS", :delete-in-progress "DELETE_IN_PROGRESS", :create-in-progress "CREATE_IN_PROGRESS", "NOT_AVAILABLE" "NOT_AVAILABLE", "FLUSH_IN_PROGRESS" "FLUSH_IN_PROGRESS", :not-available "NOT_AVAILABLE", :available "AVAILABLE"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.service-unavailable-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.service-unavailable-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.service-unavailable-exception/retryAfterSeconds :portkey.aws.apigateway.-2015-07-09.service-unavailable-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificates/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificates/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-client-certificate))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/client-certificates (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.client-certificates/position :portkey.aws.apigateway.-2015-07-09.client-certificates/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/responseType] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/statusCode :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/responseParameters :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/responseTemplates]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.flush-stage-cache-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.flush-stage-cache-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/flush-stage-cache-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.flush-stage-cache-request/restApiId :portkey.aws.apigateway.-2015-07-09.flush-stage-cache-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-resource-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-resource-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-resource-request/resourceId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-resource-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-gateway-response (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/gateway-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/nullable-boolean))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-method-settings (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/method-setting))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/quota-period-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"DAY" "DAY", :day "DAY", "WEEK" "WEEK", :week "WEEK", "MONTH" "MONTH", :month "MONTH"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-mode (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"merge" "merge", :merge "merge", "overwrite" "overwrite", :overwrite "overwrite"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validators/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validators/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-request-validator))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/request-validators (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.request-validators/position :portkey.aws.apigateway.-2015-07-09.request-validators/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-method-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.get-method-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-keys/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-keys/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-usage-plan-key))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage-plan-keys (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage-plan-keys/position :portkey.aws.apigateway.-2015-07-09.usage-plan-keys/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/api-stages (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-api-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/throttle (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/quota (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/quota-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/product-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage-plan (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage-plan/id :portkey.aws.apigateway.-2015-07-09.usage-plan/name :portkey.aws.apigateway.-2015-07-09.usage-plan/description :portkey.aws.apigateway.-2015-07-09.usage-plan/apiStages :portkey.aws.apigateway.-2015-07-09.usage-plan/throttle :portkey.aws.apigateway.-2015-07-09.usage-plan/quota :portkey.aws.apigateway.-2015-07-09.usage-plan/productCode]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-long (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/long :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/schema (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/content-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-model-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-model-request/name :portkey.aws.apigateway.-2015-07-09.create-model-request/contentType] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-model-request/description :portkey.aws.apigateway.-2015-07-09.create-model-request/schema]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.too-many-requests-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.too-many-requests-exception/retryAfterSeconds :portkey.aws.apigateway.-2015-07-09.too-many-requests-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-rest-api-request/restApiId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-account-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-account-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-account-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-rest-apis-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-rest-apis-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-rest-apis-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-rest-apis-request/position :portkey.aws.apigateway.-2015-07-09.get-rest-apis-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-model-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-model-request/modelName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.throttle-settings/burst-limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.throttle-settings/rate-limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/double))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/throttle-settings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.throttle-settings/burstLimit :portkey.aws.apigateway.-2015-07-09.throttle-settings/rateLimit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-sdk-type (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/sdk-type :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/cache-cluster-size (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"118" "118", "237" "237", "1.6" "1.6", :118 "118", "0.5" "0.5", :28.4 "28.4", :13.5 "13.5", "28.4" "28.4", "58.2" "58.2", :1.6 "1.6", "6.1" "6.1", :58.2 "58.2", :6.1 "6.1", :237 "237", :0.5 "0.5", "13.5" "13.5"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/default-response (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/gateway-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.gateway-response/responseType :portkey.aws.apigateway.-2015-07-09.gateway-response/statusCode :portkey.aws.apigateway.-2015-07-09.gateway-response/responseParameters :portkey.aws.apigateway.-2015-07-09.gateway-response/responseTemplates :portkey.aws.apigateway.-2015-07-09.gateway-response/defaultResponse]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-template-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-template-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-model-template-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-model-template-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-model-template-request/modelName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/integration-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:aws "AWS", "AWS" "AWS", :aws-proxy "AWS_PROXY", "MOCK" "MOCK", "AWS_PROXY" "AWS_PROXY", "HTTP_PROXY" "HTTP_PROXY", :http "HTTP", :http-proxy "HTTP_PROXY", "HTTP" "HTTP", :mock "MOCK"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mapping/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mapping/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mapping/stage (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/base-path-mapping (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.base-path-mapping/basePath :portkey.aws.apigateway.-2015-07-09.base-path-mapping/restApiId :portkey.aws.apigateway.-2015-07-09.base-path-mapping/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-request-validator-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-request-validator-request/requestValidatorId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-resource (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/resource :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/op (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:remove "remove", :copy "copy", "copy" "copy", :replace "replace", :move "move", "replace" "replace", "remove" "remove", "move" "move", "add" "add", :add "add", :test "test", "test" "test"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-ids/ids (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-ids/warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part-ids (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-part-ids/ids :portkey.aws.apigateway.-2015-07-09.documentation-part-ids/warnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizers-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizers-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizers-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-authorizers-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-authorizers-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-authorizers-request/position :portkey.aws.apigateway.-2015-07-09.get-authorizers-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/schema (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/content-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/model (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.model/id :portkey.aws.apigateway.-2015-07-09.model/name :portkey.aws.apigateway.-2015-07-09.model/description :portkey.aws.apigateway.-2015-07-09.model/schema :portkey.aws.apigateway.-2015-07-09.model/contentType]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-domain-name-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-domain-name-request/domainName] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-domain-name-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.delete-usage-plan-key-request/keyId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-base-path-mapping-request/domainName :portkey.aws.apigateway.-2015-07-09.get-base-path-mapping-request/basePath] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/authorizer-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"TOKEN" "TOKEN", :token "TOKEN", "COGNITO_USER_POOLS" "COGNITO_USER_POOLS", :cognito-user-pools "COGNITO_USER_POOLS"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-method-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-method-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.update-method-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.update-method-response-request/statusCode] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-method-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-ofarns (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/providerarn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-api-stage (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/api-stage :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-names/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-names/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-domain-name))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/domain-names (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.domain-names/position :portkey.aws.apigateway.-2015-07-09.domain-names/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-integration-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/statusCode] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-integration-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.conflict-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/response-models (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-method-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-method-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.put-method-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.put-method-response-request/statusCode] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-method-response-request/responseParameters :portkey.aws.apigateway.-2015-07-09.put-method-response-request/responseModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-domain-name-request/domainName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.account/cloudwatch-role-arn (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.account/throttle-settings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.account/features (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.account/api-key-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/account (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.account/cloudwatchRoleArn :portkey.aws.apigateway.-2015-07-09.account/throttleSettings :portkey.aws.apigateway.-2015-07-09.account/features :portkey.aws.apigateway.-2015-07-09.account/apiKeyVersion]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/status (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/headers (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/log (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/latency (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/long))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/test-invoke-method-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/status :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/body :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/headers :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/log :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/latency]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-plan-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-usage-plan-request/usagePlanId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-usage-plan-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-gateway-responses-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/position :portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/operation-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/request-models (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/method-integration (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/method-responses (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-method-response))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/method (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.method/authorizerId :portkey.aws.apigateway.-2015-07-09.method/requestValidatorId :portkey.aws.apigateway.-2015-07-09.method/authorizationType :portkey.aws.apigateway.-2015-07-09.method/httpMethod :portkey.aws.apigateway.-2015-07-09.method/operationName :portkey.aws.apigateway.-2015-07-09.method/requestParameters :portkey.aws.apigateway.-2015-07-09.method/apiKeyRequired :portkey.aws.apigateway.-2015-07-09.method/requestModels :portkey.aws.apigateway.-2015-07-09.method/methodIntegration :portkey.aws.apigateway.-2015-07-09.method/methodResponses]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-stage (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/stage :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/stage-description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-deployment-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-deployment-request/stageName :portkey.aws.apigateway.-2015-07-09.create-deployment-request/stageDescription :portkey.aws.apigateway.-2015-07-09.create-deployment-request/description :portkey.aws.apigateway.-2015-07-09.create-deployment-request/cacheClusterEnabled :portkey.aws.apigateway.-2015-07-09.create-deployment-request/cacheClusterSize :portkey.aws.apigateway.-2015-07-09.create-deployment-request/variables]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-method-response (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/method-response))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resources/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resources/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-resource))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/resources (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.resources/position :portkey.aws.apigateway.-2015-07-09.resources/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-usage (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/list-of-long :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/validate-request-body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/validate-request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-request-validator-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-request-validator-request/name :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/validateRequestBody :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/validateRequestParameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-version-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-documentation-version-request/documentationVersion] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage-key/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage-key/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/stage-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.stage-key/restApiId :portkey.aws.apigateway.-2015-07-09.stage-key/stageName]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/include-values (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-api-keys-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-api-keys-request/position :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/limit :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/nameQuery :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/customerId :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/includeValues]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-plan-keys-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/usagePlanId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/position :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/limit :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/nameQuery]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.not-found-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-client-certificate-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-client-certificate-request/clientCertificateId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-client-certificate-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/generate-distinct-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/stage-keys (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-stage-keys))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-api-key-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-api-key-request/name :portkey.aws.apigateway.-2015-07-09.create-api-key-request/description :portkey.aws.apigateway.-2015-07-09.create-api-key-request/enabled :portkey.aws.apigateway.-2015-07-09.create-api-key-request/generateDistinctId :portkey.aws.apigateway.-2015-07-09.create-api-key-request/value :portkey.aws.apigateway.-2015-07-09.create-api-key-request/stageKeys :portkey.aws.apigateway.-2015-07-09.create-api-key-request/customerId]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployment-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-deployment-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-deployment-request/deploymentId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-deployment-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-types/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-types/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-sdk-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/sdk-types (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.sdk-types/position :portkey.aws.apigateway.-2015-07-09.sdk-types/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-documentation-version-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-documentation-version-request/documentationVersion] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-client-certificates-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-client-certificates-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-client-certificates-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-client-certificates-request/position :portkey.aws.apigateway.-2015-07-09.get-client-certificates-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-base-path-mapping-request/domainName :portkey.aws.apigateway.-2015-07-09.delete-base-path-mapping-request/basePath] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-documentation-version (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/documentation-version :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-model-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-model-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-model-request/modelName] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-model-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.quota-settings/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.quota-settings/offset (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.quota-settings/period (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/quota-period-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/quota-settings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.quota-settings/limit :portkey.aws.apigateway.-2015-07-09.quota-settings/offset :portkey.aws.apigateway.-2015-07-09.quota-settings/period]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/documentationVersion] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-stage-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-stage-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/providerarn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/path-to-map-of-method-snapshot (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/map-of-method-snapshot))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-key/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-key/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-key/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-key/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage-plan-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage-plan-key/id :portkey.aws.apigateway.-2015-07-09.usage-plan-key/type :portkey.aws.apigateway.-2015-07-09.usage-plan-key/value :portkey.aws.apigateway.-2015-07-09.usage-plan-key/name]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/string))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizer-credentials (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/authorizer-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/auth-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/identity-source (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/providerarns (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-ofarns))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/name :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/type :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/identitySource] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizerCredentials :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/identityValidationExpression :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizerResultTtlInSeconds :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizerUri :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authType :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/providerARNs]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-gateway-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-gateway-response-request/responseType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-gateway-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-gateway-response-request/responseType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-domain-names-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-domain-names-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-domain-names-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-domain-names-request/position :portkey.aws.apigateway.-2015-07-09.get-domain-names-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-location-status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part-location (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.documentation-part-location/type] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-part-location/path :portkey.aws.apigateway.-2015-07-09.documentation-part-location/method :portkey.aws.apigateway.-2015-07-09.documentation-part-location/statusCode :portkey.aws.apigateway.-2015-07-09.documentation-part-location/name]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/stage (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/domainName :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/basePath :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/pem-encoded-certificate (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/expiration-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/client-certificate (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.client-certificate/clientCertificateId :portkey.aws.apigateway.-2015-07-09.client-certificate/description :portkey.aws.apigateway.-2015-07-09.client-certificate/pemEncodedCertificate :portkey.aws.apigateway.-2015-07-09.client-certificate/createdDate :portkey.aws.apigateway.-2015-07-09.client-certificate/expirationDate]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-keys/warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-keys/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-keys/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-api-key))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-keys (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.api-keys/warnings :portkey.aws.apigateway.-2015-07-09.api-keys/position :portkey.aws.apigateway.-2015-07-09.api-keys/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plans/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plans/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-usage-plan))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage-plans (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage-plans/position :portkey.aws.apigateway.-2015-07-09.usage-plans/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-key-usages (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/list-of-usage))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-authorizer (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/authorizer :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-stage-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-stage-request/stageName :portkey.aws.apigateway.-2015-07-09.create-stage-request/deploymentId] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-stage-request/description :portkey.aws.apigateway.-2015-07-09.create-stage-request/cacheClusterEnabled :portkey.aws.apigateway.-2015-07-09.create-stage-request/cacheClusterSize :portkey.aws.apigateway.-2015-07-09.create-stage-request/variables :portkey.aws.apigateway.-2015-07-09.create-stage-request/documentationVersion]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizers/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizers/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-authorizer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/authorizers (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.authorizers/position :portkey.aws.apigateway.-2015-07-09.authorizers/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-models-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-models-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-models-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-models-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-models-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-models-request/position :portkey.aws.apigateway.-2015-07-09.get-models-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-api-key-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-api-key-request/apiKey] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-api-key-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/start-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/end-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-key-usages))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage/usagePlanId :portkey.aws.apigateway.-2015-07-09.usage/startDate :portkey.aws.apigateway.-2015-07-09.usage/endDate :portkey.aws.apigateway.-2015-07-09.usage/position :portkey.aws.apigateway.-2015-07-09.usage/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-rest-api-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-rest-api-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-rest-api-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-keys-format (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"csv" "csv", :csv "csv"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-documentation-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/position :portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployments-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployments-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployments-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-deployments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-deployments-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-deployments-request/position :portkey.aws.apigateway.-2015-07-09.get-deployments-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-usage-plan (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/usage-plan :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-api-keys-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-api-keys-request/format (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/api-keys-format))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-api-keys-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/import-api-keys-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.import-api-keys-request/body :portkey.aws.apigateway.-2015-07-09.import-api-keys-request/format] :opt-un [:portkey.aws.apigateway.-2015-07-09.import-api-keys-request/failOnWarnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/parent-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/path-part (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/resource-methods (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-method))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.resource/id :portkey.aws.apigateway.-2015-07-09.resource/parentId :portkey.aws.apigateway.-2015-07-09.resource/pathPart :portkey.aws.apigateway.-2015-07-09.resource/path :portkey.aws.apigateway.-2015-07-09.resource/resourceMethods]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/key-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/keyId :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/keyType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/patch-operation :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/friendly-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/required (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/default-value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/sdk-configuration-property (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/name :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/friendlyName :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/description :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/required :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/defaultValue]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-integration-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-integration-request/resourceId :portkey.aws.apigateway.-2015-07-09.delete-integration-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-response/content-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-response/content-disposition (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-response/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/sdk-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.sdk-response/contentType :portkey.aws.apigateway.-2015-07-09.sdk-response/contentDisposition :portkey.aws.apigateway.-2015-07-09.sdk-response/body]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-rest-api-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-rest-api-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-rest-api-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/import-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.import-rest-api-request/body] :opt-un [:portkey.aws.apigateway.-2015-07-09.import-rest-api-request/failOnWarnings :portkey.aws.apigateway.-2015-07-09.import-rest-api-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-documentation-parts-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/type :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/nameQuery :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/path :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/position :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/stage-keys (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/last-updated-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.api-key/createdDate :portkey.aws.apigateway.-2015-07-09.api-key/enabled :portkey.aws.apigateway.-2015-07-09.api-key/id :portkey.aws.apigateway.-2015-07-09.api-key/stageKeys :portkey.aws.apigateway.-2015-07-09.api-key/customerId :portkey.aws.apigateway.-2015-07-09.api-key/name :portkey.aws.apigateway.-2015-07-09.api-key/value :portkey.aws.apigateway.-2015-07-09.api-key/lastUpdatedDate :portkey.aws.apigateway.-2015-07-09.api-key/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/nullable-integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.update-method-request/httpMethod] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-method-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/certificate-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/certificate-arn (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/certificate-upload-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/distribution-domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/domain-name (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.domain-name/domainName :portkey.aws.apigateway.-2015-07-09.domain-name/certificateName :portkey.aws.apigateway.-2015-07-09.domain-name/certificateArn :portkey.aws.apigateway.-2015-07-09.domain-name/certificateUploadDate :portkey.aws.apigateway.-2015-07-09.domain-name/distributionDomainName]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-base-path-mapping (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/base-path-mapping :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/blob (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.awsgen/base64-encode portkey.awsgen/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-integration-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-integration-request/resourceId :portkey.aws.apigateway.-2015-07-09.get-integration-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-parts/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-parts/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-documentation-part))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-parts (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-parts/position :portkey.aws.apigateway.-2015-07-09.documentation-parts/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.export-response/content-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.export-response/content-disposition (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.export-response/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/export-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.export-response/contentType :portkey.aws.apigateway.-2015-07-09.export-response/contentDisposition :portkey.aws.apigateway.-2015-07-09.export-response/body]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.delete-method-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-key-request/include-value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-api-key-request/apiKey] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-api-key-request/includeValue]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-responses/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-responses/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-gateway-response))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/gateway-responses (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.gateway-responses/position :portkey.aws.apigateway.-2015-07-09.gateway-responses/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-private-key (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-chain (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-arn (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-domain-name-request/domainName] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificateName :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificateBody :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificatePrivateKey :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificateChain :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificateArn]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/integration-responses (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-integration-response))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/uri (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/request-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/cache-namespace (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/passthrough-behavior (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/cache-key-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/credentials (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/integration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.integration/integrationResponses :portkey.aws.apigateway.-2015-07-09.integration/uri :portkey.aws.apigateway.-2015-07-09.integration/httpMethod :portkey.aws.apigateway.-2015-07-09.integration/requestTemplates :portkey.aws.apigateway.-2015-07-09.integration/requestParameters :portkey.aws.apigateway.-2015-07-09.integration/cacheNamespace :portkey.aws.apigateway.-2015-07-09.integration/passthroughBehavior :portkey.aws.apigateway.-2015-07-09.integration/type :portkey.aws.apigateway.-2015-07-09.integration/contentHandling :portkey.aws.apigateway.-2015-07-09.integration/cacheKeyParameters :portkey.aws.apigateway.-2015-07-09.integration/credentials]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.flush-stage-authorizers-cache-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.flush-stage-authorizers-cache-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/flush-stage-authorizers-cache-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.flush-stage-authorizers-cache-request/restApiId :portkey.aws.apigateway.-2015-07-09.flush-stage-authorizers-cache-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-version/version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-version/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-version/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-version/version :portkey.aws.apigateway.-2015-07-09.documentation-version/createdDate :portkey.aws.apigateway.-2015-07-09.documentation-version/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plan-request/usagePlanId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/unauthorized-cache-control-header-strategy (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"FAIL_WITH_403" "FAIL_WITH_403", :fail-with-403 "FAIL_WITH_403", "SUCCEED_WITH_RESPONSE_HEADER" "SUCCEED_WITH_RESPONSE_HEADER", :succeed-with-response-header "SUCCEED_WITH_RESPONSE_HEADER", "SUCCEED_WITHOUT_RESPONSE_HEADER" "SUCCEED_WITHOUT_RESPONSE_HEADER", :succeed-without-response-header "SUCCEED_WITHOUT_RESPONSE_HEADER"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-deployment-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-deployment-request/deploymentId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-api-key (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/api-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/selection-pattern (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/integration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.integration-response/statusCode :portkey.aws.apigateway.-2015-07-09.integration-response/selectionPattern :portkey.aws.apigateway.-2015-07-09.integration-response/responseParameters :portkey.aws.apigateway.-2015-07-09.integration-response/responseTemplates :portkey.aws.apigateway.-2015-07-09.integration-response/contentHandling]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-domain-name (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/domain-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-rest-api-request/restApiId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-integration-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-integration-request/resourceId :portkey.aws.apigateway.-2015-07-09.update-integration-request/httpMethod] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-integration-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/operation-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/request-models (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.put-method-request/httpMethod :portkey.aws.apigateway.-2015-07-09.put-method-request/authorizationType] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-method-request/authorizerId :portkey.aws.apigateway.-2015-07-09.put-method-request/requestValidatorId :portkey.aws.apigateway.-2015-07-09.put-method-request/operationName :portkey.aws.apigateway.-2015-07-09.put-method-request/requestParameters :portkey.aws.apigateway.-2015-07-09.put-method-request/apiKeyRequired :portkey.aws.apigateway.-2015-07-09.put-method-request/requestModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.models/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.models/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-model))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/models (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.models/position :portkey.aws.apigateway.-2015-07-09.models/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-authorizer-request/authorizerId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/cache-cluster-status (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/cache-cluster-status))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/method-settings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-method-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/last-updated-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/stage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.stage/cacheClusterStatus :portkey.aws.apigateway.-2015-07-09.stage/createdDate :portkey.aws.apigateway.-2015-07-09.stage/documentationVersion :portkey.aws.apigateway.-2015-07-09.stage/methodSettings :portkey.aws.apigateway.-2015-07-09.stage/deploymentId :portkey.aws.apigateway.-2015-07-09.stage/clientCertificateId :portkey.aws.apigateway.-2015-07-09.stage/lastUpdatedDate :portkey.aws.apigateway.-2015-07-09.stage/variables :portkey.aws.apigateway.-2015-07-09.stage/cacheClusterEnabled :portkey.aws.apigateway.-2015-07-09.stage/stageName :portkey.aws.apigateway.-2015-07-09.stage/description :portkey.aws.apigateway.-2015-07-09.stage/cacheClusterSize]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-authorizer-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-authorizer-request/authorizerId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-authorizer-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-stage-keys (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/stage-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/content-handling-strategy (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"CONVERT_TO_BINARY" "CONVERT_TO_BINARY", :convert-to-binary "CONVERT_TO_BINARY", "CONVERT_TO_TEXT" "CONVERT_TO_TEXT", :convert-to-text "CONVERT_TO_TEXT"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-request-validator-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-request-validator-request/requestValidatorId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/location (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-location))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/properties (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/location :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/properties] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-request-validator-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-request-validator-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-request-validator-request/requestValidatorId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-request-validator-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-integration-response (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/integration-response))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-plans-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/position :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/keyId :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/authorizer-credentials (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/authorizer-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/auth-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/identity-source (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/providerarns (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-ofarns))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/authorizer (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.authorizer/authorizerCredentials :portkey.aws.apigateway.-2015-07-09.authorizer/identityValidationExpression :portkey.aws.apigateway.-2015-07-09.authorizer/id :portkey.aws.apigateway.-2015-07-09.authorizer/name :portkey.aws.apigateway.-2015-07-09.authorizer/type :portkey.aws.apigateway.-2015-07-09.authorizer/authorizerResultTtlInSeconds :portkey.aws.apigateway.-2015-07-09.authorizer/authorizerUri :portkey.aws.apigateway.-2015-07-09.authorizer/authType :portkey.aws.apigateway.-2015-07-09.authorizer/identitySource :portkey.aws.apigateway.-2015-07-09.authorizer/providerARNs]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/documentationPartId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployments/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployments/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-deployment))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/deployments (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.deployments/position :portkey.aws.apigateway.-2015-07-09.deployments/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/boolean clojure.core/boolean?)

(clojure.core/defn flush-stage-cache ([input__33752__auto__] (flush-stage-cache input__33752__auto__ portkey.aws/*http-client*)) ([input35862 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/cache/data", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/FlushStageCacheRequest input35862)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["stage_name" "stageName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/cache/data", :body body__33756__auto__} (clojure.core/fn [response35861] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response35861)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35861 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35861)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35861}))))))))))

(clojure.core/defn get-usage-plan ([input__33752__auto__] (get-usage-plan input__33752__auto__ portkey.aws/*http-client*)) ([input35864 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetUsagePlanRequest input35864)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}", :body body__33756__auto__} (clojure.core/fn [response35863] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35863)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan (:body response35863)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35863 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35863)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35863}))))))))))

(clojure.core/defn update-rest-api ([input__33752__auto__] (update-rest-api input__33752__auto__ portkey.aws/*http-client*)) ([input35866 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateRestApiRequest input35866)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body body__33756__auto__} (clojure.core/fn [response35865] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35865)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response35865)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35865 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35865)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35865}))))))))))

(clojure.core/defn update-account ([input__33752__auto__] (update-account input__33752__auto__ portkey.aws/*http-client*)) ([input35868 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/account", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateAccountRequest input35868)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/account", :body body__33756__auto__} (clojure.core/fn [response35867] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35867)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/account (:body response35867)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35867 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35867)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35867}))))))))))

(clojure.core/defn delete-rest-api ([input__33752__auto__] (delete-rest-api input__33752__auto__ portkey.aws/*http-client*)) ([input35870 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteRestApiRequest input35870)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body body__33756__auto__} (clojure.core/fn [response35869] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception}] (if (clojure.core/= 202 (:status response35869)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35869 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35869)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35869}))))))))))

(clojure.core/defn delete-method ([input__33752__auto__] (delete-method input__33752__auto__ portkey.aws/*http-client*)) ([input35872 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteMethodRequest input35872)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body body__33756__auto__} (clojure.core/fn [response35871] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 204 (:status response35871)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35871 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35871)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35871}))))))))))

(clojure.core/defn update-authorizer ([input__33752__auto__] (update-authorizer input__33752__auto__ portkey.aws/*http-client*)) ([input35874 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateAuthorizerRequest input35874)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["authorizer_id" "authorizerId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body body__33756__auto__} (clojure.core/fn [response35873] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35873)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/authorizer (:body response35873)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35873 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35873)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35873}))))))))))

(clojure.core/defn get-sdk-type ([input__33752__auto__] (get-sdk-type input__33752__auto__ portkey.aws/*http-client*)) ([input35876 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/sdktypes/{sdktype_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetSdkTypeRequest input35876)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["sdktype_id" "id"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/sdktypes/{sdktype_id}", :body body__33756__auto__} (clojure.core/fn [response35875] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35875)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/sdk-type (:body response35875)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35875 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35875)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35875}))))))))))

(clojure.core/defn update-domain-name ([input__33752__auto__] (update-domain-name input__33752__auto__ portkey.aws/*http-client*)) ([input35878 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateDomainNameRequest input35878)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}", :body body__33756__auto__} (clojure.core/fn [response35877] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35877)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/domain-name (:body response35877)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35877 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35877)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35877}))))))))))

(clojure.core/defn update-gateway-response ([input__33752__auto__] (update-gateway-response input__33752__auto__ portkey.aws/*http-client*)) ([input35880 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateGatewayResponseRequest input35880)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["response_type" "responseType"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body body__33756__auto__} (clojure.core/fn [response35879] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35879)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/gateway-response (:body response35879)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35879 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35879)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35879}))))))))))

(clojure.core/defn get-rest-apis ([input__33752__auto__] (get-rest-apis input__33752__auto__ portkey.aws/*http-client*)) ([input35882 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetRestApisRequest input35882)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis", :body body__33756__auto__} (clojure.core/fn [response35881] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35881)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-apis (:body response35881)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35881 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35881)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35881}))))))))))

(clojure.core/defn get-documentation-parts ([input__33752__auto__] (get-documentation-parts input__33752__auto__ portkey.aws/*http-client*)) ([input35884 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDocumentationPartsRequest input35884)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["type" "type"] ["name" "nameQuery"] ["path" "path"] ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts", :body body__33756__auto__} (clojure.core/fn [response35883] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35883)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-parts (:body response35883)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35883 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35883)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35883}))))))))))

(clojure.core/defn get-deployment ([input__33752__auto__] (get-deployment input__33752__auto__ portkey.aws/*http-client*)) ([input35886 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments/{deployment_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDeploymentRequest input35886)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["deployment_id" "deploymentId"]) (portkey.awsgen/params-to-querystring ["embed" "embed"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments/{deployment_id}", :body body__33756__auto__} (clojure.core/fn [response35885] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception}] (if (clojure.core/= nil (:status response35885)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/deployment (:body response35885)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35885 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35885)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35885}))))))))))

(clojure.core/defn create-resource ([input__33752__auto__] (create-resource input__33752__auto__ portkey.aws/*http-client*)) ([input35888 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{parent_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateResourceRequest input35888)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["parent_id" "parentId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{parent_id}", :body body__33756__auto__} (clojure.core/fn [response35887] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35887)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/resource (:body response35887)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35887 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35887)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35887}))))))))))

(clojure.core/defn delete-documentation-version ([input__33752__auto__] (delete-documentation-version input__33752__auto__ portkey.aws/*http-client*)) ([input35890 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions/{doc_version}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteDocumentationVersionRequest input35890)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["doc_version" "documentationVersion"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions/{doc_version}", :body body__33756__auto__} (clojure.core/fn [response35889] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response35889)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35889 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35889)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35889}))))))))))

(clojure.core/defn delete-usage-plan ([input__33752__auto__] (delete-usage-plan input__33752__auto__ portkey.aws/*http-client*)) ([input35892 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteUsagePlanRequest input35892)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}", :body body__33756__auto__} (clojure.core/fn [response35891] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= 202 (:status response35891)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35891 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35891)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35891}))))))))))

(clojure.core/defn get-stages ([input__33752__auto__] (get-stages input__33752__auto__ portkey.aws/*http-client*)) ([input35894 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetStagesRequest input35894)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["deploymentId" "deploymentId"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages", :body body__33756__auto__} (clojure.core/fn [response35893] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35893)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/stages (:body response35893)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35893 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35893)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35893}))))))))))

(clojure.core/defn get-resource ([input__33752__auto__] (get-resource input__33752__auto__ portkey.aws/*http-client*)) ([input35896 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetResourceRequest input35896)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"]) (portkey.awsgen/params-to-querystring ["embed" "embed"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}", :body body__33756__auto__} (clojure.core/fn [response35895] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35895)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/resource (:body response35895)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35895 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35895)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35895}))))))))))

(clojure.core/defn update-documentation-part ([input__33752__auto__] (update-documentation-part input__33752__auto__ portkey.aws/*http-client*)) ([input35898 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts/{part_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateDocumentationPartRequest input35898)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["part_id" "documentationPartId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts/{part_id}", :body body__33756__auto__} (clojure.core/fn [response35897] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35897)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-part (:body response35897)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35897 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35897)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35897}))))))))))

(clojure.core/defn import-api-keys ([input__33752__auto__] (import-api-keys input__33752__auto__ portkey.aws/*http-client*)) ([input35900 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys?mode=import", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/ImportApiKeysRequest input35900)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["format" "format"] ["failonwarnings" "failOnWarnings"]) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys?mode=import", :body body__33756__auto__} (clojure.core/fn [response35899] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 201 (:status response35899)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-key-ids (:body response35899)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35899 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35899)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35899}))))))))))

(clojure.core/defn get-client-certificate ([input__33752__auto__] (get-client-certificate input__33752__auto__ portkey.aws/*http-client*)) ([input35902 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates/{clientcertificate_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetClientCertificateRequest input35902)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["clientcertificate_id" "clientCertificateId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates/{clientcertificate_id}", :body body__33756__auto__} (clojure.core/fn [response35901] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35901)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/client-certificate (:body response35901)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35901 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35901)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35901}))))))))))

(clojure.core/defn create-authorizer ([input__33752__auto__] (create-authorizer input__33752__auto__ portkey.aws/*http-client*)) ([input35904 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateAuthorizerRequest input35904)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers", :body body__33756__auto__} (clojure.core/fn [response35903] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35903)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/authorizer (:body response35903)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35903 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35903)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35903}))))))))))

(clojure.core/defn get-usage-plan-keys ([input__33752__auto__] (get-usage-plan-keys input__33752__auto__ portkey.aws/*http-client*)) ([input35906 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetUsagePlanKeysRequest input35906)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"] ["name" "nameQuery"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys", :body body__33756__auto__} (clojure.core/fn [response35905] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35905)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan-keys (:body response35905)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35905 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35905)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35905}))))))))))

(clojure.core/defn get-gateway-response ([input__33752__auto__] (get-gateway-response input__33752__auto__ portkey.aws/*http-client*)) ([input35908 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetGatewayResponseRequest input35908)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["response_type" "responseType"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body body__33756__auto__} (clojure.core/fn [response35907] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35907)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/gateway-response (:body response35907)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35907 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35907)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35907}))))))))))

(clojure.core/defn get-deployments ([input__33752__auto__] (get-deployments input__33752__auto__ portkey.aws/*http-client*)) ([input35910 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDeploymentsRequest input35910)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments", :body body__33756__auto__} (clojure.core/fn [response35909] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception}] (if (clojure.core/= nil (:status response35909)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/deployments (:body response35909)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35909 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35909)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35909}))))))))))

(clojure.core/defn update-resource ([input__33752__auto__] (update-resource input__33752__auto__ portkey.aws/*http-client*)) ([input35912 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateResourceRequest input35912)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}", :body body__33756__auto__} (clojure.core/fn [response35911] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35911)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/resource (:body response35911)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35911 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35911)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35911}))))))))))

(clojure.core/defn get-authorizers ([input__33752__auto__] (get-authorizers input__33752__auto__ portkey.aws/*http-client*)) ([input35914 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetAuthorizersRequest input35914)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers", :body body__33756__auto__} (clojure.core/fn [response35913] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35913)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/authorizers (:body response35913)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35913 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35913)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35913}))))))))))

(clojure.core/defn get-base-path-mapping ([input__33752__auto__] (get-base-path-mapping input__33752__auto__ portkey.aws/*http-client*)) ([input35916 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings/{base_path}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetBasePathMappingRequest input35916)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"] ["base_path" "basePath"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings/{base_path}", :body body__33756__auto__} (clojure.core/fn [response35915] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35915)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/base-path-mapping (:body response35915)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35915 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35915)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35915}))))))))))

(clojure.core/defn delete-integration ([input__33752__auto__] (delete-integration input__33752__auto__ portkey.aws/*http-client*)) ([input35918 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteIntegrationRequest input35918)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body body__33756__auto__} (clojure.core/fn [response35917] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 204 (:status response35917)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35917 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35917)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35917}))))))))))

(clojure.core/defn get-request-validators ([input__33752__auto__] (get-request-validators input__33752__auto__ portkey.aws/*http-client*)) ([input35920 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetRequestValidatorsRequest input35920)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators", :body body__33756__auto__} (clojure.core/fn [response35919] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35919)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/request-validators (:body response35919)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35919 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35919)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35919}))))))))))

(clojure.core/defn create-domain-name ([input__33752__auto__] (create-domain-name input__33752__auto__ portkey.aws/*http-client*)) ([input35922 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateDomainNameRequest input35922)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames", :body body__33756__auto__} (clojure.core/fn [response35921] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35921)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/domain-name (:body response35921)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35921 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35921)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35921}))))))))))

(clojure.core/defn put-integration-response ([input__33752__auto__] (put-integration-response input__33752__auto__ portkey.aws/*http-client*)) ([input35924 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/PutIntegrationResponseRequest input35924)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response35923] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 201 (:status response35923)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration-response (:body response35923)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35923 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35923)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35923}))))))))))

(clojure.core/defn create-usage-plan ([input__33752__auto__] (create-usage-plan input__33752__auto__ portkey.aws/*http-client*)) ([input35926 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateUsagePlanRequest input35926)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans", :body body__33756__auto__} (clojure.core/fn [response35925] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= 201 (:status response35925)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan (:body response35925)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35925 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35925)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35925}))))))))))

(clojure.core/defn create-api-key ([input__33752__auto__] (create-api-key input__33752__auto__ portkey.aws/*http-client*)) ([input35928 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateApiKeyRequest input35928)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys", :body body__33756__auto__} (clojure.core/fn [response35927] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 201 (:status response35927)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-key (:body response35927)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35927 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35927)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35927}))))))))))

(clojure.core/defn import-rest-api ([input__33752__auto__] (import-rest-api input__33752__auto__ portkey.aws/*http-client*)) ([input35930 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis?mode=import", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/ImportRestApiRequest input35930)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["failonwarnings" "failOnWarnings"] [nil "parameters"]) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis?mode=import", :body body__33756__auto__} (clojure.core/fn [response35929] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 201 (:status response35929)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response35929)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35929 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35929)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35929}))))))))))

(clojure.core/defn delete-api-key ([input__33752__auto__] (delete-api-key input__33752__auto__ portkey.aws/*http-client*)) ([input35932 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys/{api_Key}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteApiKeyRequest input35932)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["api_Key" "apiKey"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys/{api_Key}", :body body__33756__auto__} (clojure.core/fn [response35931] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response35931)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35931 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35931)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35931}))))))))))

(clojure.core/defn get-integration ([input__33752__auto__] (get-integration input__33752__auto__ portkey.aws/*http-client*)) ([input35934 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetIntegrationRequest input35934)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body body__33756__auto__} (clojure.core/fn [response35933] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35933)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration (:body response35933)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35933 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35933)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35933}))))))))))

(clojure.core/defn get-export ([input__33752__auto__] (get-export input__33752__auto__ portkey.aws/*http-client*)) ([input35936 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetExportRequest input35936)} (portkey.awsgen/params-to-header ["accepts" ["Accept" nil]]) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["stage_name" "stageName"] ["export_type" "exportType"]) (portkey.awsgen/params-to-querystring [nil "parameters"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}", :body body__33756__auto__} (clojure.core/fn [response35935] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35935)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/export-response (:body response35935)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35935 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35935)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35935}))))))))))

(clojure.core/defn delete-stage ([input__33752__auto__] (delete-stage input__33752__auto__ portkey.aws/*http-client*)) ([input35938 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteStageRequest input35938)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["stage_name" "stageName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}", :body body__33756__auto__} (clojure.core/fn [response35937] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception}] (if (clojure.core/= 202 (:status response35937)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35937 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35937)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35937}))))))))))

(clojure.core/defn delete-request-validator ([input__33752__auto__] (delete-request-validator input__33752__auto__ portkey.aws/*http-client*)) ([input35940 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteRequestValidatorRequest input35940)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["requestvalidator_id" "requestValidatorId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}", :body body__33756__auto__} (clojure.core/fn [response35939] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 202 (:status response35939)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35939 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35939)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35939}))))))))))

(clojure.core/defn get-gateway-responses ([input__33752__auto__] (get-gateway-responses input__33752__auto__ portkey.aws/*http-client*)) ([input35942 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetGatewayResponsesRequest input35942)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses", :body body__33756__auto__} (clojure.core/fn [response35941] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35941)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/gateway-responses (:body response35941)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35941 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35941)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35941}))))))))))

(clojure.core/defn put-method-response ([input__33752__auto__] (put-method-response input__33752__auto__ portkey.aws/*http-client*)) ([input35944 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/PutMethodResponseRequest input35944)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response35943] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35943)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method-response (:body response35943)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35943 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35943)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35943}))))))))))

(clojure.core/defn get-model ([input__33752__auto__] (get-model input__33752__auto__ portkey.aws/*http-client*)) ([input35946 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetModelRequest input35946)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["model_name" "modelName"]) (portkey.awsgen/params-to-querystring ["flatten" "flatten"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}", :body body__33756__auto__} (clojure.core/fn [response35945] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35945)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/model (:body response35945)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35945 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35945)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35945}))))))))))

(clojure.core/defn create-model ([input__33752__auto__] (create-model input__33752__auto__ portkey.aws/*http-client*)) ([input35948 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateModelRequest input35948)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models", :body body__33756__auto__} (clojure.core/fn [response35947] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35947)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/model (:body response35947)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35947 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35947)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35947}))))))))))

(clojure.core/defn update-api-key ([input__33752__auto__] (update-api-key input__33752__auto__ portkey.aws/*http-client*)) ([input35950 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys/{api_Key}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateApiKeyRequest input35950)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["api_Key" "apiKey"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys/{api_Key}", :body body__33756__auto__} (clojure.core/fn [response35949] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= nil (:status response35949)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-key (:body response35949)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35949 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35949)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35949}))))))))))

(clojure.core/defn create-deployment ([input__33752__auto__] (create-deployment input__33752__auto__ portkey.aws/*http-client*)) ([input35952 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateDeploymentRequest input35952)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments", :body body__33756__auto__} (clojure.core/fn [response35951] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception}] (if (clojure.core/= 201 (:status response35951)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/deployment (:body response35951)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35951 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35951)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35951}))))))))))

(clojure.core/defn update-method ([input__33752__auto__] (update-method input__33752__auto__ portkey.aws/*http-client*)) ([input35954 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateMethodRequest input35954)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body body__33756__auto__} (clojure.core/fn [response35953] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35953)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method (:body response35953)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35953 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35953)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35953}))))))))))

(clojure.core/defn test-invoke-authorizer ([input__33752__auto__] (test-invoke-authorizer input__33752__auto__ portkey.aws/*http-client*)) ([input35956 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/TestInvokeAuthorizerRequest input35956)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["authorizer_id" "authorizerId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body body__33756__auto__} (clojure.core/fn [response35955] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35955)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/test-invoke-authorizer-response (:body response35955)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35955 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35955)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35955}))))))))))

(clojure.core/defn create-documentation-part ([input__33752__auto__] (create-documentation-part input__33752__auto__ portkey.aws/*http-client*)) ([input35958 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateDocumentationPartRequest input35958)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts", :body body__33756__auto__} (clojure.core/fn [response35957] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35957)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-part (:body response35957)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35957 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35957)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35957}))))))))))

(clojure.core/defn update-stage ([input__33752__auto__] (update-stage input__33752__auto__ portkey.aws/*http-client*)) ([input35960 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateStageRequest input35960)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["stage_name" "stageName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}", :body body__33756__auto__} (clojure.core/fn [response35959] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35959)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/stage (:body response35959)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35959 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35959)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35959}))))))))))

(clojure.core/defn update-request-validator ([input__33752__auto__] (update-request-validator input__33752__auto__ portkey.aws/*http-client*)) ([input35962 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateRequestValidatorRequest input35962)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["requestvalidator_id" "requestValidatorId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}", :body body__33756__auto__} (clojure.core/fn [response35961] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35961)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/request-validator (:body response35961)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35961 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35961)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35961}))))))))))

(clojure.core/defn get-sdk-types ([input__33752__auto__] (get-sdk-types input__33752__auto__ portkey.aws/*http-client*)) ([input35964 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/sdktypes", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetSdkTypesRequest input35964)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/sdktypes", :body body__33756__auto__} (clojure.core/fn [response35963] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35963)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/sdk-types (:body response35963)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35963 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35963)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35963}))))))))))

(clojure.core/defn update-client-certificate ([input__33752__auto__] (update-client-certificate input__33752__auto__ portkey.aws/*http-client*)) ([input35966 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates/{clientcertificate_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateClientCertificateRequest input35966)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["clientcertificate_id" "clientCertificateId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates/{clientcertificate_id}", :body body__33756__auto__} (clojure.core/fn [response35965] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= nil (:status response35965)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/client-certificate (:body response35965)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35965 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35965)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35965}))))))))))

(clojure.core/defn update-model ([input__33752__auto__] (update-model input__33752__auto__ portkey.aws/*http-client*)) ([input35968 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateModelRequest input35968)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["model_name" "modelName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}", :body body__33756__auto__} (clojure.core/fn [response35967] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35967)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/model (:body response35967)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35967 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35967)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35967}))))))))))

(clojure.core/defn get-documentation-versions ([input__33752__auto__] (get-documentation-versions input__33752__auto__ portkey.aws/*http-client*)) ([input35970 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDocumentationVersionsRequest input35970)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions", :body body__33756__auto__} (clojure.core/fn [response35969] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35969)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-versions (:body response35969)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35969 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35969)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35969}))))))))))

(clojure.core/defn update-usage ([input__33752__auto__] (update-usage input__33752__auto__ portkey.aws/*http-client*)) ([input35972 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys/{keyId}/usage", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateUsageRequest input35972)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"] ["keyId" "keyId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys/{keyId}/usage", :body body__33756__auto__} (clojure.core/fn [response35971] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= nil (:status response35971)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage (:body response35971)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35971 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35971)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35971}))))))))))

(clojure.core/defn create-usage-plan-key ([input__33752__auto__] (create-usage-plan-key input__33752__auto__ portkey.aws/*http-client*)) ([input35974 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateUsagePlanKeyRequest input35974)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys", :body body__33756__auto__} (clojure.core/fn [response35973] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35973)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan-key (:body response35973)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35973 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35973)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35973}))))))))))

(clojure.core/defn put-integration ([input__33752__auto__] (put-integration input__33752__auto__ portkey.aws/*http-client*)) ([input35976 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/PutIntegrationRequest input35976)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body body__33756__auto__} (clojure.core/fn [response35975] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35975)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration (:body response35975)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35975 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35975)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35975}))))))))))

(clojure.core/defn get-usage ([input__33752__auto__] (get-usage input__33752__auto__ portkey.aws/*http-client*)) ([input35978 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/usage", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetUsageRequest input35978)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"]) (portkey.awsgen/params-to-querystring ["keyId" "keyId"] ["startDate" "startDate"] ["endDate" "endDate"] ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/usage", :body body__33756__auto__} (clojure.core/fn [response35977] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35977)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage (:body response35977)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35977 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35977)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35977}))))))))))

(clojure.core/defn update-documentation-version ([input__33752__auto__] (update-documentation-version input__33752__auto__ portkey.aws/*http-client*)) ([input35980 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions/{doc_version}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateDocumentationVersionRequest input35980)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["doc_version" "documentationVersion"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions/{doc_version}", :body body__33756__auto__} (clojure.core/fn [response35979] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35979)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-version (:body response35979)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35979 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35979)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35979}))))))))))

(clojure.core/defn get-stage ([input__33752__auto__] (get-stage input__33752__auto__ portkey.aws/*http-client*)) ([input35982 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetStageRequest input35982)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["stage_name" "stageName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}", :body body__33756__auto__} (clojure.core/fn [response35981] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35981)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/stage (:body response35981)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35981 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35981)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35981}))))))))))

(clojure.core/defn update-method-response ([input__33752__auto__] (update-method-response input__33752__auto__ portkey.aws/*http-client*)) ([input35984 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateMethodResponseRequest input35984)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response35983] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35983)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method-response (:body response35983)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35983 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35983)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35983}))))))))))

(clojure.core/defn create-base-path-mapping ([input__33752__auto__] (create-base-path-mapping input__33752__auto__ portkey.aws/*http-client*)) ([input35986 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateBasePathMappingRequest input35986)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings", :body body__33756__auto__} (clojure.core/fn [response35985] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35985)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/base-path-mapping (:body response35985)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35985 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35985)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35985}))))))))))

(clojure.core/defn get-documentation-part ([input__33752__auto__] (get-documentation-part input__33752__auto__ portkey.aws/*http-client*)) ([input35988 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts/{part_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDocumentationPartRequest input35988)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["part_id" "documentationPartId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts/{part_id}", :body body__33756__auto__} (clojure.core/fn [response35987] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35987)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-part (:body response35987)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35987 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35987)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35987}))))))))))

(clojure.core/defn delete-model ([input__33752__auto__] (delete-model input__33752__auto__ portkey.aws/*http-client*)) ([input35990 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteModelRequest input35990)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["model_name" "modelName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}", :body body__33756__auto__} (clojure.core/fn [response35989] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 202 (:status response35989)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35989 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35989)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35989}))))))))))

(clojure.core/defn import-documentation-parts ([input__33752__auto__] (import-documentation-parts input__33752__auto__ portkey.aws/*http-client*)) ([input35992 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/ImportDocumentationPartsRequest input35992)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["mode" "mode"] ["failonwarnings" "failOnWarnings"]) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts", :body body__33756__auto__} (clojure.core/fn [response35991] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35991)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-part-ids (:body response35991)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35991 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35991)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35991}))))))))))

(clojure.core/defn delete-method-response ([input__33752__auto__] (delete-method-response input__33752__auto__ portkey.aws/*http-client*)) ([input35994 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteMethodResponseRequest input35994)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response35993] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 204 (:status response35993)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35993 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35993)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35993}))))))))))

(clojure.core/defn get-client-certificates ([input__33752__auto__] (get-client-certificates input__33752__auto__ portkey.aws/*http-client*)) ([input35996 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetClientCertificatesRequest input35996)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates", :body body__33756__auto__} (clojure.core/fn [response35995] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35995)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/client-certificates (:body response35995)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35995 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35995)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35995}))))))))))

(clojure.core/defn get-api-keys ([input__33752__auto__] (get-api-keys input__33752__auto__ portkey.aws/*http-client*)) ([input35998 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetApiKeysRequest input35998)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"] ["name" "nameQuery"] ["customerId" "customerId"] ["includeValues" "includeValues"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys", :body body__33756__auto__} (clojure.core/fn [response35997] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response35997)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-keys (:body response35997)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35997 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35997)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35997}))))))))))

(clojure.core/defn update-deployment ([input__33752__auto__] (update-deployment input__33752__auto__ portkey.aws/*http-client*)) ([input36000 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments/{deployment_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateDeploymentRequest input36000)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["deployment_id" "deploymentId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments/{deployment_id}", :body body__33756__auto__} (clojure.core/fn [response35999] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception}] (if (clojure.core/= nil (:status response35999)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/deployment (:body response35999)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35999 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35999)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35999}))))))))))

(clojure.core/defn delete-domain-name ([input__33752__auto__] (delete-domain-name input__33752__auto__ portkey.aws/*http-client*)) ([input36002 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteDomainNameRequest input36002)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}", :body body__33756__auto__} (clojure.core/fn [response36001] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response36001)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36001 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36001)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36001}))))))))))

(clojure.core/defn create-rest-api ([input__33752__auto__] (create-rest-api input__33752__auto__ portkey.aws/*http-client*)) ([input36004 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateRestApiRequest input36004)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis", :body body__33756__auto__} (clojure.core/fn [response36003] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response36003)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response36003)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36003 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36003)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36003}))))))))))

(clojure.core/defn delete-authorizer ([input__33752__auto__] (delete-authorizer input__33752__auto__ portkey.aws/*http-client*)) ([input36006 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteAuthorizerRequest input36006)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["authorizer_id" "authorizerId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body body__33756__auto__} (clojure.core/fn [response36005] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 202 (:status response36005)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36005 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36005)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36005}))))))))))

(clojure.core/defn get-usage-plan-key ([input__33752__auto__] (get-usage-plan-key input__33752__auto__ portkey.aws/*http-client*)) ([input36008 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys/{keyId}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetUsagePlanKeyRequest input36008)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"] ["keyId" "keyId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys/{keyId}", :body body__33756__auto__} (clojure.core/fn [response36007] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 200 (:status response36007)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan-key (:body response36007)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36007 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36007)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36007}))))))))))

(clojure.core/defn delete-resource ([input__33752__auto__] (delete-resource input__33752__auto__ portkey.aws/*http-client*)) ([input36010 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteResourceRequest input36010)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}", :body body__33756__auto__} (clojure.core/fn [response36009] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response36009)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36009 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36009)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36009}))))))))))

(clojure.core/defn test-invoke-method ([input__33752__auto__] (test-invoke-method input__33752__auto__ portkey.aws/*http-client*)) ([input36012 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/TestInvokeMethodRequest input36012)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body body__33756__auto__} (clojure.core/fn [response36011] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36011)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/test-invoke-method-response (:body response36011)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36011 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36011)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36011}))))))))))

(clojure.core/defn get-method-response ([input__33752__auto__] (get-method-response input__33752__auto__ portkey.aws/*http-client*)) ([input36014 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetMethodResponseRequest input36014)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response36013] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36013)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method-response (:body response36013)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36013 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36013)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36013}))))))))))

(clojure.core/defn get-request-validator ([input__33752__auto__] (get-request-validator input__33752__auto__ portkey.aws/*http-client*)) ([input36016 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetRequestValidatorRequest input36016)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["requestvalidator_id" "requestValidatorId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}", :body body__33756__auto__} (clojure.core/fn [response36015] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36015)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/request-validator (:body response36015)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36015 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36015)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36015}))))))))))

(clojure.core/defn get-authorizer ([input__33752__auto__] (get-authorizer input__33752__auto__ portkey.aws/*http-client*)) ([input36018 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetAuthorizerRequest input36018)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["authorizer_id" "authorizerId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body body__33756__auto__} (clojure.core/fn [response36017] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36017)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/authorizer (:body response36017)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36017 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36017)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36017}))))))))))

(clojure.core/defn get-base-path-mappings ([input__33752__auto__] (get-base-path-mappings input__33752__auto__ portkey.aws/*http-client*)) ([input36020 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetBasePathMappingsRequest input36020)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings", :body body__33756__auto__} (clojure.core/fn [response36019] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36019)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/base-path-mappings (:body response36019)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36019 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36019)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36019}))))))))))

(clojure.core/defn delete-base-path-mapping ([input__33752__auto__] (delete-base-path-mapping input__33752__auto__ portkey.aws/*http-client*)) ([input36022 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings/{base_path}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteBasePathMappingRequest input36022)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"] ["base_path" "basePath"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings/{base_path}", :body body__33756__auto__} (clojure.core/fn [response36021] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response36021)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36021 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36021)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36021}))))))))))

(clojure.core/defn get-account ([input__33752__auto__] (get-account input__33752__auto__ portkey.aws/*http-client*)) ([input36024 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/account", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetAccountRequest input36024)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/account", :body body__33756__auto__} (clojure.core/fn [response36023] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36023)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/account (:body response36023)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36023 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36023)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36023}))))))))))

(clojure.core/defn get-integration-response ([input__33752__auto__] (get-integration-response input__33752__auto__ portkey.aws/*http-client*)) ([input36026 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetIntegrationResponseRequest input36026)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response36025] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36025)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration-response (:body response36025)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36025 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36025)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36025}))))))))))

(clojure.core/defn get-model-template ([input__33752__auto__] (get-model-template input__33752__auto__ portkey.aws/*http-client*)) ([input36028 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}/default_template", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetModelTemplateRequest input36028)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["model_name" "modelName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}/default_template", :body body__33756__auto__} (clojure.core/fn [response36027] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36027)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/template (:body response36027)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36027 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36027)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36027}))))))))))

(clojure.core/defn get-rest-api ([input__33752__auto__] (get-rest-api input__33752__auto__ portkey.aws/*http-client*)) ([input36030 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetRestApiRequest input36030)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body body__33756__auto__} (clojure.core/fn [response36029] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36029)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response36029)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36029 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36029)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36029}))))))))))

(clojure.core/defn delete-integration-response ([input__33752__auto__] (delete-integration-response input__33752__auto__ portkey.aws/*http-client*)) ([input36032 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteIntegrationResponseRequest input36032)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response36031] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 204 (:status response36031)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36031 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36031)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36031}))))))))))

(clojure.core/defn delete-usage-plan-key ([input__33752__auto__] (delete-usage-plan-key input__33752__auto__ portkey.aws/*http-client*)) ([input36034 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys/{keyId}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteUsagePlanKeyRequest input36034)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"] ["keyId" "keyId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys/{keyId}", :body body__33756__auto__} (clojure.core/fn [response36033] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response36033)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36033 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36033)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36033}))))))))))

(clojure.core/defn delete-documentation-part ([input__33752__auto__] (delete-documentation-part input__33752__auto__ portkey.aws/*http-client*)) ([input36036 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts/{part_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteDocumentationPartRequest input36036)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["part_id" "documentationPartId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts/{part_id}", :body body__33756__auto__} (clojure.core/fn [response36035] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception}] (if (clojure.core/= 202 (:status response36035)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36035 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36035)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36035}))))))))))

(clojure.core/defn generate-client-certificate ([input__33752__auto__] (generate-client-certificate input__33752__auto__ portkey.aws/*http-client*)) ([input36038 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GenerateClientCertificateRequest input36038)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates", :body body__33756__auto__} (clojure.core/fn [response36037] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception}] (if (clojure.core/= 201 (:status response36037)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/client-certificate (:body response36037)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36037 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36037)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36037}))))))))))

(clojure.core/defn get-method ([input__33752__auto__] (get-method input__33752__auto__ portkey.aws/*http-client*)) ([input36040 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetMethodRequest input36040)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body body__33756__auto__} (clojure.core/fn [response36039] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36039)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method (:body response36039)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36039 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36039)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36039}))))))))))

(clojure.core/defn get-models ([input__33752__auto__] (get-models input__33752__auto__ portkey.aws/*http-client*)) ([input36042 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetModelsRequest input36042)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models", :body body__33756__auto__} (clojure.core/fn [response36041] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36041)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/models (:body response36041)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36041 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36041)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36041}))))))))))

(clojure.core/defn get-documentation-version ([input__33752__auto__] (get-documentation-version input__33752__auto__ portkey.aws/*http-client*)) ([input36044 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions/{doc_version}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDocumentationVersionRequest input36044)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["doc_version" "documentationVersion"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions/{doc_version}", :body body__33756__auto__} (clojure.core/fn [response36043] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36043)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-version (:body response36043)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36043 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36043)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36043}))))))))))

(clojure.core/defn create-documentation-version ([input__33752__auto__] (create-documentation-version input__33752__auto__ portkey.aws/*http-client*)) ([input36046 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateDocumentationVersionRequest input36046)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions", :body body__33756__auto__} (clojure.core/fn [response36045] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response36045)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-version (:body response36045)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36045 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36045)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36045}))))))))))

(clojure.core/defn get-resources ([input__33752__auto__] (get-resources input__33752__auto__ portkey.aws/*http-client*)) ([input36048 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetResourcesRequest input36048)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"] ["embed" "embed"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources", :body body__33756__auto__} (clojure.core/fn [response36047] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36047)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/resources (:body response36047)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36047 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36047)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36047}))))))))))

(clojure.core/defn get-api-key ([input__33752__auto__] (get-api-key input__33752__auto__ portkey.aws/*http-client*)) ([input36050 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys/{api_Key}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetApiKeyRequest input36050)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["api_Key" "apiKey"]) (portkey.awsgen/params-to-querystring ["includeValue" "includeValue"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys/{api_Key}", :body body__33756__auto__} (clojure.core/fn [response36049] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36049)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-key (:body response36049)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36049 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36049)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36049}))))))))))

(clojure.core/defn create-stage ([input__33752__auto__] (create-stage input__33752__auto__ portkey.aws/*http-client*)) ([input36052 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateStageRequest input36052)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages", :body body__33756__auto__} (clojure.core/fn [response36051] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response36051)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/stage (:body response36051)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36051 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36051)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36051}))))))))))

(clojure.core/defn delete-gateway-response ([input__33752__auto__] (delete-gateway-response input__33752__auto__ portkey.aws/*http-client*)) ([input36054 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteGatewayResponseRequest input36054)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["response_type" "responseType"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body body__33756__auto__} (clojure.core/fn [response36053] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 202 (:status response36053)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36053 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36053)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36053}))))))))))

(clojure.core/defn update-integration ([input__33752__auto__] (update-integration input__33752__auto__ portkey.aws/*http-client*)) ([input36056 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateIntegrationRequest input36056)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body body__33756__auto__} (clojure.core/fn [response36055] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= nil (:status response36055)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration (:body response36055)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36055 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36055)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36055}))))))))))

(clojure.core/defn flush-stage-authorizers-cache ([input__33752__auto__] (flush-stage-authorizers-cache input__33752__auto__ portkey.aws/*http-client*)) ([input36058 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/FlushStageAuthorizersCacheRequest input36058)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["stage_name" "stageName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers", :body body__33756__auto__} (clojure.core/fn [response36057] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response36057)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36057 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36057)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36057}))))))))))

(clojure.core/defn delete-client-certificate ([input__33752__auto__] (delete-client-certificate input__33752__auto__ portkey.aws/*http-client*)) ([input36060 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates/{clientcertificate_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteClientCertificateRequest input36060)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["clientcertificate_id" "clientCertificateId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates/{clientcertificate_id}", :body body__33756__auto__} (clojure.core/fn [response36059] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= 202 (:status response36059)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36059 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36059)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36059}))))))))))

(clojure.core/defn put-gateway-response ([input__33752__auto__] (put-gateway-response input__33752__auto__ portkey.aws/*http-client*)) ([input36062 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/PutGatewayResponseRequest input36062)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["response_type" "responseType"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body body__33756__auto__} (clojure.core/fn [response36061] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response36061)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/gateway-response (:body response36061)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36061 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36061)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36061}))))))))))

(clojure.core/defn get-domain-name ([input__33752__auto__] (get-domain-name input__33752__auto__ portkey.aws/*http-client*)) ([input36064 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDomainNameRequest input36064)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}", :body body__33756__auto__} (clojure.core/fn [response36063] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36063)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/domain-name (:body response36063)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36063 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36063)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36063}))))))))))

(clojure.core/defn update-base-path-mapping ([input__33752__auto__] (update-base-path-mapping input__33752__auto__ portkey.aws/*http-client*)) ([input36066 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings/{base_path}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateBasePathMappingRequest input36066)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"] ["base_path" "basePath"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings/{base_path}", :body body__33756__auto__} (clojure.core/fn [response36065] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36065)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/base-path-mapping (:body response36065)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36065 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36065)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36065}))))))))))

(clojure.core/defn get-usage-plans ([input__33752__auto__] (get-usage-plans input__33752__auto__ portkey.aws/*http-client*)) ([input36068 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetUsagePlansRequest input36068)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["position" "position"] ["keyId" "keyId"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans", :body body__33756__auto__} (clojure.core/fn [response36067] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= nil (:status response36067)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plans (:body response36067)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36067 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36067)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36067}))))))))))

(clojure.core/defn update-usage-plan ([input__33752__auto__] (update-usage-plan input__33752__auto__ portkey.aws/*http-client*)) ([input36070 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateUsagePlanRequest input36070)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}", :body body__33756__auto__} (clojure.core/fn [response36069] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= nil (:status response36069)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan (:body response36069)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36069 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36069)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36069}))))))))))

(clojure.core/defn get-sdk ([input__33752__auto__] (get-sdk input__33752__auto__ portkey.aws/*http-client*)) ([input36072 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetSdkRequest input36072)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["stage_name" "stageName"] ["sdk_type" "sdkType"]) (portkey.awsgen/params-to-querystring [nil "parameters"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}", :body body__33756__auto__} (clojure.core/fn [response36071] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 200 (:status response36071)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/sdk-response (:body response36071)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36071 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36071)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36071}))))))))))

(clojure.core/defn put-method ([input__33752__auto__] (put-method input__33752__auto__ portkey.aws/*http-client*)) ([input36074 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/PutMethodRequest input36074)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body body__33756__auto__} (clojure.core/fn [response36073] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response36073)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method (:body response36073)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36073 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36073)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36073}))))))))))

(clojure.core/defn update-integration-response ([input__33752__auto__] (update-integration-response input__33752__auto__ portkey.aws/*http-client*)) ([input36076 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateIntegrationResponseRequest input36076)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response36075] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36075)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration-response (:body response36075)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36075 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36075)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36075}))))))))))

(clojure.core/defn get-domain-names ([input__33752__auto__] (get-domain-names input__33752__auto__ portkey.aws/*http-client*)) ([input36078 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDomainNamesRequest input36078)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames", :body body__33756__auto__} (clojure.core/fn [response36077] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response36077)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/domain-names (:body response36077)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36077 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36077)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36077}))))))))))

(clojure.core/defn put-rest-api ([input__33752__auto__] (put-rest-api input__33752__auto__ portkey.aws/*http-client*)) ([input36080 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/PutRestApiRequest input36080)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["mode" "mode"] ["failonwarnings" "failOnWarnings"] [nil "parameters"]) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body body__33756__auto__} (clojure.core/fn [response36079] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= nil (:status response36079)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response36079)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36079 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36079)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36079}))))))))))

(clojure.core/defn create-request-validator ([input__33752__auto__] (create-request-validator input__33752__auto__ portkey.aws/*http-client*)) ([input36082 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateRequestValidatorRequest input36082)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators", :body body__33756__auto__} (clojure.core/fn [response36081] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response36081)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/request-validator (:body response36081)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36081 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36081)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36081}))))))))))

(clojure.core/defn delete-deployment ([input__33752__auto__] (delete-deployment input__33752__auto__ portkey.aws/*http-client*)) ([input36084 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments/{deployment_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteDeploymentRequest input36084)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["deployment_id" "deploymentId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments/{deployment_id}", :body body__33756__auto__} (clojure.core/fn [response36083] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response36083)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response36083 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response36083)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response36083}))))))))))
