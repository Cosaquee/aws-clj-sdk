(ns portkey.aws.apigateway.-2015-07-09 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credentialScope
    {"service" "apigateway", "region" "ap-northeast-1"},
    :sslCommonName "apigateway.ap-northeast-1.amazonaws.com",
    :endpoint "https://apigateway.ap-northeast-1.amazonaws.com"},
   "eu-west-1"
   {:credentialScope {"service" "apigateway", "region" "eu-west-1"},
    :sslCommonName "apigateway.eu-west-1.amazonaws.com",
    :endpoint "https://apigateway.eu-west-1.amazonaws.com"},
   "us-east-2"
   {:credentialScope {"service" "apigateway", "region" "us-east-2"},
    :sslCommonName "apigateway.us-east-2.amazonaws.com",
    :endpoint "https://apigateway.us-east-2.amazonaws.com"},
   "ap-southeast-2"
   {:credentialScope
    {"service" "apigateway", "region" "ap-southeast-2"},
    :sslCommonName "apigateway.ap-southeast-2.amazonaws.com",
    :endpoint "https://apigateway.ap-southeast-2.amazonaws.com"},
   "sa-east-1"
   {:credentialScope {"service" "apigateway", "region" "sa-east-1"},
    :sslCommonName "apigateway.sa-east-1.amazonaws.com",
    :endpoint "https://apigateway.sa-east-1.amazonaws.com"},
   "ap-southeast-1"
   {:credentialScope
    {"service" "apigateway", "region" "ap-southeast-1"},
    :sslCommonName "apigateway.ap-southeast-1.amazonaws.com",
    :endpoint "https://apigateway.ap-southeast-1.amazonaws.com"},
   "ap-northeast-2"
   {:credentialScope
    {"service" "apigateway", "region" "ap-northeast-2"},
    :sslCommonName "apigateway.ap-northeast-2.amazonaws.com",
    :endpoint "https://apigateway.ap-northeast-2.amazonaws.com"},
   "ca-central-1"
   {:credentialScope {"service" "apigateway", "region" "ca-central-1"},
    :sslCommonName "apigateway.ca-central-1.amazonaws.com",
    :endpoint "https://apigateway.ca-central-1.amazonaws.com"},
   "eu-central-1"
   {:credentialScope {"service" "apigateway", "region" "eu-central-1"},
    :sslCommonName "apigateway.eu-central-1.amazonaws.com",
    :endpoint "https://apigateway.eu-central-1.amazonaws.com"},
   "eu-west-2"
   {:credentialScope {"service" "apigateway", "region" "eu-west-2"},
    :sslCommonName "apigateway.eu-west-2.amazonaws.com",
    :endpoint "https://apigateway.eu-west-2.amazonaws.com"},
   "us-gov-west-1"
   {:credentialScope
    {"service" "apigateway", "region" "us-gov-west-1"},
    :sslCommonName "apigateway.us-gov-west-1.amazonaws.com",
    :endpoint "https://apigateway.us-gov-west-1.amazonaws.com"},
   "us-west-2"
   {:credentialScope {"service" "apigateway", "region" "us-west-2"},
    :sslCommonName "apigateway.us-west-2.amazonaws.com",
    :endpoint "https://apigateway.us-west-2.amazonaws.com"},
   "us-east-1"
   {:credentialScope {"service" "apigateway", "region" "us-east-1"},
    :sslCommonName "apigateway.us-east-1.amazonaws.com",
    :endpoint "https://apigateway.us-east-1.amazonaws.com"},
   "us-west-1"
   {:credentialScope {"service" "apigateway", "region" "us-west-1"},
    :sslCommonName "apigateway.us-west-1.amazonaws.com",
    :endpoint "https://apigateway.us-west-1.amazonaws.com"},
   "ap-south-1"
   {:credentialScope {"service" "apigateway", "region" "ap-south-1"},
    :sslCommonName "apigateway.ap-south-1.amazonaws.com",
    :endpoint "https://apigateway.ap-south-1.amazonaws.com"}})

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-resource-request/parent-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-resource-request/path-part (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-resource-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-resource-request/parentId :portkey.aws.apigateway.-2015-07-09.create-resource-request/pathPart] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part-location-status-code (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44500__auto__] (clojure.core/re-matches #"^([1-5]\d\d|\*|\s*)$" s__44500__auto__))))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/mode (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/put-mode))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-rest-api-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/body] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-rest-api-request/mode :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/failOnWarnings :portkey.aws.apigateway.-2015-07-09.put-rest-api-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-stages-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-stages-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-stages-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-stages-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-stages-request/deploymentId]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-api/binary-media-types (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/rest-api (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.rest-api/id :portkey.aws.apigateway.-2015-07-09.rest-api/name :portkey.aws.apigateway.-2015-07-09.rest-api/description :portkey.aws.apigateway.-2015-07-09.rest-api/createdDate :portkey.aws.apigateway.-2015-07-09.rest-api/version :portkey.aws.apigateway.-2015-07-09.rest-api/warnings :portkey.aws.apigateway.-2015-07-09.rest-api/binaryMediaTypes]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-domain-name-request/domainName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-resource-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-resource-request/resourceId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-usage-plan-request/usagePlanId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.unauthorized-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/unauthorized-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.unauthorized-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-documentation-part (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/documentation-part :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resources-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resources-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resources-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resources-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-resources-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-resources-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-resources-request/position :portkey.aws.apigateway.-2015-07-09.get-resources-request/limit :portkey.aws.apigateway.-2015-07-09.get-resources-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key-ids/ids (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key-ids/warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-key-ids (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.api-key-ids/ids :portkey.aws.apigateway.-2015-07-09.api-key-ids/warnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/headers (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/path-with-query-string (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/stage-variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/additional-context (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/test-invoke-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/authorizerId] :opt-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/headers :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/pathWithQueryString :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/body :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/stageVariables :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-request/additionalContext]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/path-with-query-string (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/headers (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/stage-variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/test-invoke-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/httpMethod] :opt-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/pathWithQueryString :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/body :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/headers :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/clientCertificateId :portkey.aws.apigateway.-2015-07-09.test-invoke-method-request/stageVariables]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-method-snapshot (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/method-snapshot))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-type-request/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-sdk-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-sdk-type-request/id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployment/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployment/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployment/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployment/api-summary (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/path-to-map-of-method-snapshot))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/deployment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.deployment/id :portkey.aws.apigateway.-2015-07-09.deployment/description :portkey.aws.apigateway.-2015-07-09.deployment/createdDate :portkey.aws.apigateway.-2015-07-09.deployment/apiSummary]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/gateway-response-type (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {:integration-timeout "INTEGRATION_TIMEOUT", :default-4xx "DEFAULT_4XX", "REQUEST_TOO_LARGE" "REQUEST_TOO_LARGE", :unauthorized "UNAUTHORIZED", "INTEGRATION_TIMEOUT" "INTEGRATION_TIMEOUT", "RESOURCE_NOT_FOUND" "RESOURCE_NOT_FOUND", :invalid-api-key "INVALID_API_KEY", :integration-failure "INTEGRATION_FAILURE", "AUTHORIZER_CONFIGURATION_ERROR" "AUTHORIZER_CONFIGURATION_ERROR", "INTEGRATION_FAILURE" "INTEGRATION_FAILURE", "DEFAULT_5XX" "DEFAULT_5XX", "UNAUTHORIZED" "UNAUTHORIZED", :quota-exceeded "QUOTA_EXCEEDED", :invalid-signature "INVALID_SIGNATURE", :expired-token "EXPIRED_TOKEN", :bad-request-parameters "BAD_REQUEST_PARAMETERS", "AUTHORIZER_FAILURE" "AUTHORIZER_FAILURE", :unsupported-media-type "UNSUPPORTED_MEDIA_TYPE", "INVALID_API_KEY" "INVALID_API_KEY", "ACCESS_DENIED" "ACCESS_DENIED", "API_CONFIGURATION_ERROR" "API_CONFIGURATION_ERROR", "DEFAULT_4XX" "DEFAULT_4XX", "INVALID_SIGNATURE" "INVALID_SIGNATURE", :bad-request-body "BAD_REQUEST_BODY", :api-configuration-error "API_CONFIGURATION_ERROR", "EXPIRED_TOKEN" "EXPIRED_TOKEN", "UNSUPPORTED_MEDIA_TYPE" "UNSUPPORTED_MEDIA_TYPE", :authorizer-configuration-error "AUTHORIZER_CONFIGURATION_ERROR", :default-5xx "DEFAULT_5XX", :request-too-large "REQUEST_TOO_LARGE", :authorizer-failure "AUTHORIZER_FAILURE", :throttled "THROTTLED", "QUOTA_EXCEEDED" "QUOTA_EXCEEDED", "BAD_REQUEST_PARAMETERS" "BAD_REQUEST_PARAMETERS", "MISSING_AUTHENTICATION_TOKEN" "MISSING_AUTHENTICATION_TOKEN", :missing-authentication-token "MISSING_AUTHENTICATION_TOKEN", "BAD_REQUEST_BODY" "BAD_REQUEST_BODY", :resource-not-found "RESOURCE_NOT_FOUND", :access-denied "ACCESS_DENIED", "THROTTLED" "THROTTLED"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-client-certificate (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/client-certificate :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-request/sdk-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-sdk-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-sdk-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-sdk-request/stageName :portkey.aws.apigateway.-2015-07-09.get-sdk-request/sdkType] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-sdk-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/bad-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.bad-request-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-stage-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-stage-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-stage-request/stageName] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-stage-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-method-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-method-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.get-method-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.get-method-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/client-status (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/log (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/latency (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/long))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/principal-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/policy (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/authorization (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-list))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/claims (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/test-invoke-authorizer-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/clientStatus :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/log :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/latency :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/principalId :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/policy :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/authorization :portkey.aws.apigateway.-2015-07-09.test-invoke-authorizer-response/claims]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-stage-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-stage-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/logging-level (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/metrics-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/caching-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/throttling-rate-limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/double))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/cache-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/unauthorized-cache-control-header-strategy (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/unauthorized-cache-control-header-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/cache-data-encrypted (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/throttling-burst-limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/require-authorization-for-cache-control (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-setting/data-trace-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/method-setting (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.method-setting/loggingLevel :portkey.aws.apigateway.-2015-07-09.method-setting/metricsEnabled :portkey.aws.apigateway.-2015-07-09.method-setting/cachingEnabled :portkey.aws.apigateway.-2015-07-09.method-setting/throttlingRateLimit :portkey.aws.apigateway.-2015-07-09.method-setting/cacheTtlInSeconds :portkey.aws.apigateway.-2015-07-09.method-setting/unauthorizedCacheControlHeaderStrategy :portkey.aws.apigateway.-2015-07-09.method-setting/cacheDataEncrypted :portkey.aws.apigateway.-2015-07-09.method-setting/throttlingBurstLimit :portkey.aws.apigateway.-2015-07-09.method-setting/requireAuthorizationForCacheControl :portkey.aws.apigateway.-2015-07-09.method-setting/dataTraceEnabled]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-documentation-part-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-documentation-part-request/documentationPartId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/status-code (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44500__auto__] (clojure.core/re-matches #"[1-5]\d\d" s__44500__auto__))))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-stage/api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-stage/stage (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-stage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.api-stage/apiId :portkey.aws.apigateway.-2015-07-09.api-stage/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-integration-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.get-integration-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-method (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/method))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-header-values (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/string))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part/location (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-location))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part/properties (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-part/id :portkey.aws.apigateway.-2015-07-09.documentation-part/location :portkey.aws.apigateway.-2015-07-09.documentation-part/properties]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-string-to-list (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/list-of-string))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-resource-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-resource-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-resource-request/resourceId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-resource-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/start-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/end-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-usage-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.get-usage-request/startDate :portkey.aws.apigateway.-2015-07-09.get-usage-request/endDate] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-usage-request/keyId :portkey.aws.apigateway.-2015-07-09.get-usage-request/position :portkey.aws.apigateway.-2015-07-09.get-usage-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-snapshot/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-snapshot/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/method-snapshot (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.method-snapshot/authorizationType :portkey.aws.apigateway.-2015-07-09.method-snapshot/apiKeyRequired]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/domainName :portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/basePath] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-base-path-mapping-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-model (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/model :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-types-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-sdk-types-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-sdk-types-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-sdk-types-request/position :portkey.aws.apigateway.-2015-07-09.get-sdk-types-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/mode (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/put-mode))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/import-documentation-parts-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/restApiId :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/body] :opt-un [:portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/mode :portkey.aws.apigateway.-2015-07-09.import-documentation-parts-request/failOnWarnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.generate-client-certificate-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/generate-client-certificate-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.generate-client-certificate-request/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-apis/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.rest-apis/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-rest-api))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/rest-apis (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.rest-apis/position :portkey.aws.apigateway.-2015-07-09.rest-apis/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-sdk-configuration-property (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/sdk-configuration-property :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-client-certificate-request/clientCertificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mappings/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mappings/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-base-path-mapping))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/base-path-mappings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.base-path-mappings/position :portkey.aws.apigateway.-2015-07-09.base-path-mappings/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-deployment-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-deployment-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-deployment-request/deploymentId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-deployment-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-versions/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-versions/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-documentation-version))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-versions (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-versions/position :portkey.aws.apigateway.-2015-07-09.documentation-versions/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-string (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/uri (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/integration-http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/request-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/cache-namespace (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/passthrough-behavior (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/cache-key-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-request/credentials (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-integration-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-integration-request/resourceId :portkey.aws.apigateway.-2015-07-09.put-integration-request/httpMethod :portkey.aws.apigateway.-2015-07-09.put-integration-request/type] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-integration-request/uri :portkey.aws.apigateway.-2015-07-09.put-integration-request/integrationHttpMethod :portkey.aws.apigateway.-2015-07-09.put-integration-request/requestTemplates :portkey.aws.apigateway.-2015-07-09.put-integration-request/requestParameters :portkey.aws.apigateway.-2015-07-09.put-integration-request/cacheNamespace :portkey.aws.apigateway.-2015-07-09.put-integration-request/passthroughBehavior :portkey.aws.apigateway.-2015-07-09.put-integration-request/contentHandling :portkey.aws.apigateway.-2015-07-09.put-integration-request/cacheKeyParameters :portkey.aws.apigateway.-2015-07-09.put-integration-request/credentials]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part-type (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {:response "RESPONSE", "PATH_PARAMETER" "PATH_PARAMETER", :api "API", :response-header "RESPONSE_HEADER", :method "METHOD", "API" "API", "REQUEST_HEADER" "REQUEST_HEADER", :path-parameter "PATH_PARAMETER", "METHOD" "METHOD", :request-body "REQUEST_BODY", :resource "RESOURCE", :request-header "REQUEST_HEADER", "RESOURCE" "RESOURCE", :response-body "RESPONSE_BODY", :query-parameter "QUERY_PARAMETER", "RESPONSE_HEADER" "RESPONSE_HEADER", :authorizer "AUTHORIZER", "REQUEST_BODY" "REQUEST_BODY", "QUERY_PARAMETER" "QUERY_PARAMETER", "AUTHORIZER" "AUTHORIZER", "MODEL" "MODEL", "RESPONSE" "RESPONSE", "RESPONSE_BODY" "RESPONSE_BODY", :model "MODEL"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-usage-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.update-usage-request/keyId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-usage-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-api-key-request/apiKey] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-part-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-documentation-part-request/documentationPartId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.patch-operation/op (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/op))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.patch-operation/path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.patch-operation/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.patch-operation/from (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/patch-operation (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.patch-operation/op :portkey.aws.apigateway.-2015-07-09.patch-operation/path :portkey.aws.apigateway.-2015-07-09.patch-operation/value :portkey.aws.apigateway.-2015-07-09.patch-operation/from]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-base-path-mappings-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/domainName] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/position :portkey.aws.apigateway.-2015-07-09.get-base-path-mappings-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/clone-from (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/binary-media-types (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-rest-api-request/name] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-rest-api-request/description :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/version :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/cloneFrom :portkey.aws.apigateway.-2015-07-09.create-rest-api-request/binaryMediaTypes]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/selection-pattern (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-integration-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/statusCode] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-integration-response-request/selectionPattern :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/responseParameters :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/responseTemplates :portkey.aws.apigateway.-2015-07-09.put-integration-response-request/contentHandling]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stages/item (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/stages (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.stages/item]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-request-validator (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/request-validator :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/responseType] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-gateway-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-authorizer-request/authorizerId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-rest-api (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/rest-api :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-usage-plan-key (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/usage-plan-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.template/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/template (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.template/value]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.limit-exceeded-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.limit-exceeded-exception/retryAfterSeconds :portkey.aws.apigateway.-2015-07-09.limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/export-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-export-request/accepts (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-export-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-export-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-export-request/stageName :portkey.aws.apigateway.-2015-07-09.get-export-request/exportType] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-export-request/parameters :portkey.aws.apigateway.-2015-07-09.get-export-request/accepts]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/nullable-boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-client-certificate-request/clientCertificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method-response/response-models (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/method-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.method-response/statusCode :portkey.aws.apigateway.-2015-07-09.method-response/responseParameters :portkey.aws.apigateway.-2015-07-09.method-response/responseModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-deployment (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/deployment :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-request/flatten (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-model-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-model-request/modelName] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-model-request/flatten]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validator/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validator/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validator/validate-request-body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validator/validate-request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/request-validator (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.request-validator/id :portkey.aws.apigateway.-2015-07-09.request-validator/name :portkey.aws.apigateway.-2015-07-09.request-validator/validateRequestBody :portkey.aws.apigateway.-2015-07-09.request-validator/validateRequestParameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/documentationVersion] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/stageName :portkey.aws.apigateway.-2015-07-09.create-documentation-version-request/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validators-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validators-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validators-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-request-validators-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-request-validators-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-request-validators-request/position :portkey.aws.apigateway.-2015-07-09.get-request-validators-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/api-stages (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-api-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/throttle (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/quota (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/quota-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/name] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/description :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/apiStages :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/throttle :portkey.aws.apigateway.-2015-07-09.create-usage-plan-request/quota]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-type/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-type/friendly-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-type/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-type/configuration-properties (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-sdk-configuration-property))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/sdk-type (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.sdk-type/id :portkey.aws.apigateway.-2015-07-09.sdk-type/friendlyName :portkey.aws.apigateway.-2015-07-09.sdk-type/description :portkey.aws.apigateway.-2015-07-09.sdk-type/configurationProperties]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.get-usage-plan-key-request/keyId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/cache-cluster-status (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"DELETE_IN_PROGRESS" "DELETE_IN_PROGRESS", "AVAILABLE" "AVAILABLE", :flush-in-progress "FLUSH_IN_PROGRESS", "CREATE_IN_PROGRESS" "CREATE_IN_PROGRESS", :delete-in-progress "DELETE_IN_PROGRESS", :create-in-progress "CREATE_IN_PROGRESS", "NOT_AVAILABLE" "NOT_AVAILABLE", "FLUSH_IN_PROGRESS" "FLUSH_IN_PROGRESS", :not-available "NOT_AVAILABLE", :available "AVAILABLE"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.service-unavailable-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.service-unavailable-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.service-unavailable-exception/retryAfterSeconds :portkey.aws.apigateway.-2015-07-09.service-unavailable-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificates/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificates/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-client-certificate))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/client-certificates (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.client-certificates/position :portkey.aws.apigateway.-2015-07-09.client-certificates/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/responseType] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/statusCode :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/responseParameters :portkey.aws.apigateway.-2015-07-09.put-gateway-response-request/responseTemplates]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.flush-stage-cache-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.flush-stage-cache-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/flush-stage-cache-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.flush-stage-cache-request/restApiId :portkey.aws.apigateway.-2015-07-09.flush-stage-cache-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-resource-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-resource-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-resource-request/resourceId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-resource-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-gateway-response (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/gateway-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/nullable-boolean))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-method-settings (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/method-setting))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/quota-period-type (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"DAY" "DAY", :day "DAY", "WEEK" "WEEK", :week "WEEK", "MONTH" "MONTH", :month "MONTH"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-mode (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"merge" "merge", :merge "merge", "overwrite" "overwrite", :overwrite "overwrite"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validators/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.request-validators/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-request-validator))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/request-validators (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.request-validators/position :portkey.aws.apigateway.-2015-07-09.request-validators/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-method-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.delete-method-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.get-method-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-keys/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-keys/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-usage-plan-key))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage-plan-keys (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage-plan-keys/position :portkey.aws.apigateway.-2015-07-09.usage-plan-keys/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/api-stages (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-api-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/throttle (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/quota (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/quota-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan/product-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage-plan (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage-plan/id :portkey.aws.apigateway.-2015-07-09.usage-plan/name :portkey.aws.apigateway.-2015-07-09.usage-plan/description :portkey.aws.apigateway.-2015-07-09.usage-plan/apiStages :portkey.aws.apigateway.-2015-07-09.usage-plan/throttle :portkey.aws.apigateway.-2015-07-09.usage-plan/quota :portkey.aws.apigateway.-2015-07-09.usage-plan/productCode]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-long (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/long :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/schema (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-model-request/content-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-model-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-model-request/name :portkey.aws.apigateway.-2015-07-09.create-model-request/contentType] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-model-request/description :portkey.aws.apigateway.-2015-07-09.create-model-request/schema]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.too-many-requests-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.too-many-requests-exception/retryAfterSeconds :portkey.aws.apigateway.-2015-07-09.too-many-requests-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-rest-api-request/restApiId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-account-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-account-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-account-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-rest-apis-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-rest-apis-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-rest-apis-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-rest-apis-request/position :portkey.aws.apigateway.-2015-07-09.get-rest-apis-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-model-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-model-request/modelName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.throttle-settings/burst-limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.throttle-settings/rate-limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/double))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/throttle-settings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.throttle-settings/burstLimit :portkey.aws.apigateway.-2015-07-09.throttle-settings/rateLimit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-sdk-type (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/sdk-type :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/cache-cluster-size (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"118" "118", "237" "237", "1.6" "1.6", :118 "118", "0.5" "0.5", :28.4 "28.4", :13.5 "13.5", "28.4" "28.4", "58.2" "58.2", :1.6 "1.6", "6.1" "6.1", :58.2 "58.2", :6.1 "6.1", :237 "237", :0.5 "0.5", "13.5" "13.5"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-response/default-response (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/gateway-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.gateway-response/responseType :portkey.aws.apigateway.-2015-07-09.gateway-response/statusCode :portkey.aws.apigateway.-2015-07-09.gateway-response/responseParameters :portkey.aws.apigateway.-2015-07-09.gateway-response/responseTemplates :portkey.aws.apigateway.-2015-07-09.gateway-response/defaultResponse]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-template-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-model-template-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-model-template-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-model-template-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-model-template-request/modelName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.delete-integration-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/integration-type (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {:aws "AWS", "AWS" "AWS", :aws-proxy "AWS_PROXY", "MOCK" "MOCK", "AWS_PROXY" "AWS_PROXY", "HTTP_PROXY" "HTTP_PROXY", :http "HTTP", :http-proxy "HTTP_PROXY", "HTTP" "HTTP", :mock "MOCK"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mapping/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mapping/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.base-path-mapping/stage (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/base-path-mapping (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.base-path-mapping/basePath :portkey.aws.apigateway.-2015-07-09.base-path-mapping/restApiId :portkey.aws.apigateway.-2015-07-09.base-path-mapping/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-request-validator-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-request-validator-request/requestValidatorId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-resource (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/resource :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/op (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {:remove "remove", :copy "copy", "copy" "copy", :replace "replace", :move "move", "replace" "replace", "remove" "remove", "move" "move", "add" "add", :add "add", :test "test", "test" "test"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-ids/ids (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-ids/warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part-ids (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-part-ids/ids :portkey.aws.apigateway.-2015-07-09.documentation-part-ids/warnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizers-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizers-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-authorizers-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-authorizers-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-authorizers-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-authorizers-request/position :portkey.aws.apigateway.-2015-07-09.get-authorizers-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/schema (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.model/content-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/model (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.model/id :portkey.aws.apigateway.-2015-07-09.model/name :portkey.aws.apigateway.-2015-07-09.model/description :portkey.aws.apigateway.-2015-07-09.model/schema :portkey.aws.apigateway.-2015-07-09.model/contentType]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-domain-name-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-domain-name-request/domainName] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-domain-name-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.delete-usage-plan-key-request/keyId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-base-path-mapping-request/domainName :portkey.aws.apigateway.-2015-07-09.get-base-path-mapping-request/basePath] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/authorizer-type (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"TOKEN" "TOKEN", :token "TOKEN", "COGNITO_USER_POOLS" "COGNITO_USER_POOLS", :cognito-user-pools "COGNITO_USER_POOLS"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-method-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-method-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.update-method-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.update-method-response-request/statusCode] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-method-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-ofarns (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/providerarn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-api-stage (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/api-stage :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-names/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-names/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-domain-name))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/domain-names (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.domain-names/position :portkey.aws.apigateway.-2015-07-09.domain-names/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-integration-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.update-integration-response-request/statusCode] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-integration-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.conflict-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-response-request/response-models (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-method-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-method-response-request/resourceId :portkey.aws.apigateway.-2015-07-09.put-method-response-request/httpMethod :portkey.aws.apigateway.-2015-07-09.put-method-response-request/statusCode] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-method-response-request/responseParameters :portkey.aws.apigateway.-2015-07-09.put-method-response-request/responseModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-domain-name-request/domainName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.account/cloudwatch-role-arn (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.account/throttle-settings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.account/features (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.account/api-key-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/account (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.account/cloudwatchRoleArn :portkey.aws.apigateway.-2015-07-09.account/throttleSettings :portkey.aws.apigateway.-2015-07-09.account/features :portkey.aws.apigateway.-2015-07-09.account/apiKeyVersion]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/status (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/headers (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/log (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/latency (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/long))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/test-invoke-method-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/status :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/body :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/headers :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/log :portkey.aws.apigateway.-2015-07-09.test-invoke-method-response/latency]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-usage-plan-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-usage-plan-request/usagePlanId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-usage-plan-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-gateway-responses-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/position :portkey.aws.apigateway.-2015-07-09.get-gateway-responses-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/operation-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/request-models (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/method-integration (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.method/method-responses (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-method-response))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/method (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.method/authorizerId :portkey.aws.apigateway.-2015-07-09.method/requestValidatorId :portkey.aws.apigateway.-2015-07-09.method/authorizationType :portkey.aws.apigateway.-2015-07-09.method/httpMethod :portkey.aws.apigateway.-2015-07-09.method/operationName :portkey.aws.apigateway.-2015-07-09.method/requestParameters :portkey.aws.apigateway.-2015-07-09.method/apiKeyRequired :portkey.aws.apigateway.-2015-07-09.method/requestModels :portkey.aws.apigateway.-2015-07-09.method/methodIntegration :portkey.aws.apigateway.-2015-07-09.method/methodResponses]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-stage (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/stage :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/stage-description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-deployment-request/variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-deployment-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-deployment-request/stageName :portkey.aws.apigateway.-2015-07-09.create-deployment-request/stageDescription :portkey.aws.apigateway.-2015-07-09.create-deployment-request/description :portkey.aws.apigateway.-2015-07-09.create-deployment-request/cacheClusterEnabled :portkey.aws.apigateway.-2015-07-09.create-deployment-request/cacheClusterSize :portkey.aws.apigateway.-2015-07-09.create-deployment-request/variables]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-method-response (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/method-response))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resources/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resources/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-resource))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/resources (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.resources/position :portkey.aws.apigateway.-2015-07-09.resources/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-usage (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/list-of-long :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/validate-request-body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/validate-request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-request-validator-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-request-validator-request/name :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/validateRequestBody :portkey.aws.apigateway.-2015-07-09.create-request-validator-request/validateRequestParameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-version-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-documentation-version-request/documentationVersion] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage-key/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage-key/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/stage-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.stage-key/restApiId :portkey.aws.apigateway.-2015-07-09.stage-key/stageName]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/include-values (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-api-keys-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-api-keys-request/position :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/limit :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/nameQuery :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/customerId :portkey.aws.apigateway.-2015-07-09.get-api-keys-request/includeValues]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-plan-keys-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/usagePlanId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/position :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/limit :portkey.aws.apigateway.-2015-07-09.get-usage-plan-keys-request/nameQuery]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.not-found-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-client-certificate-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-client-certificate-request/clientCertificateId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-client-certificate-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/generate-distinct-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/stage-keys (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-stage-keys))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-api-key-request/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-api-key-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-api-key-request/name :portkey.aws.apigateway.-2015-07-09.create-api-key-request/description :portkey.aws.apigateway.-2015-07-09.create-api-key-request/enabled :portkey.aws.apigateway.-2015-07-09.create-api-key-request/generateDistinctId :portkey.aws.apigateway.-2015-07-09.create-api-key-request/value :portkey.aws.apigateway.-2015-07-09.create-api-key-request/stageKeys :portkey.aws.apigateway.-2015-07-09.create-api-key-request/customerId]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployment-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-deployment-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-deployment-request/deploymentId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-deployment-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-types/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-types/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-sdk-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/sdk-types (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.sdk-types/position :portkey.aws.apigateway.-2015-07-09.sdk-types/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-documentation-version-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-documentation-version-request/documentationVersion] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-client-certificates-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-client-certificates-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-client-certificates-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-client-certificates-request/position :portkey.aws.apigateway.-2015-07-09.get-client-certificates-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-base-path-mapping-request/domainName :portkey.aws.apigateway.-2015-07-09.delete-base-path-mapping-request/basePath] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-documentation-version (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/documentation-version :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-model-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-model-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-model-request/modelName] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-model-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.quota-settings/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.quota-settings/offset (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.quota-settings/period (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/quota-period-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/quota-settings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.quota-settings/limit :portkey.aws.apigateway.-2015-07-09.quota-settings/offset :portkey.aws.apigateway.-2015-07-09.quota-settings/period]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/documentationVersion] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-documentation-version-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-stage-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-stage-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/providerarn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/path-to-map-of-method-snapshot (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/map-of-method-snapshot))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-key/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-key/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-key/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plan-key/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage-plan-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage-plan-key/id :portkey.aws.apigateway.-2015-07-09.usage-plan-key/type :portkey.aws.apigateway.-2015-07-09.usage-plan-key/value :portkey.aws.apigateway.-2015-07-09.usage-plan-key/name]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/string))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizer-credentials (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/authorizer-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/auth-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/identity-source (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/providerarns (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-ofarns))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/name :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/type :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/identitySource] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizerCredentials :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/identityValidationExpression :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizerResultTtlInSeconds :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authorizerUri :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/authType :portkey.aws.apigateway.-2015-07-09.create-authorizer-request/providerARNs]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-gateway-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-gateway-response-request/responseType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-gateway-response-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-gateway-response-request/responseType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-domain-names-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-domain-names-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-domain-names-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-domain-names-request/position :portkey.aws.apigateway.-2015-07-09.get-domain-names-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-location-status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-part-location/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-part-location (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.documentation-part-location/type] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-part-location/path :portkey.aws.apigateway.-2015-07-09.documentation-part-location/method :portkey.aws.apigateway.-2015-07-09.documentation-part-location/statusCode :portkey.aws.apigateway.-2015-07-09.documentation-part-location/name]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/stage (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/domainName :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/basePath :portkey.aws.apigateway.-2015-07-09.create-base-path-mapping-request/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/pem-encoded-certificate (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.client-certificate/expiration-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/client-certificate (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.client-certificate/clientCertificateId :portkey.aws.apigateway.-2015-07-09.client-certificate/description :portkey.aws.apigateway.-2015-07-09.client-certificate/pemEncodedCertificate :portkey.aws.apigateway.-2015-07-09.client-certificate/createdDate :portkey.aws.apigateway.-2015-07-09.client-certificate/expirationDate]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-keys/warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-keys/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-keys/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-api-key))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-keys (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.api-keys/warnings :portkey.aws.apigateway.-2015-07-09.api-keys/position :portkey.aws.apigateway.-2015-07-09.api-keys/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plans/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage-plans/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-usage-plan))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage-plans (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage-plans/position :portkey.aws.apigateway.-2015-07-09.usage-plans/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-key-usages (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/list-of-usage))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-authorizer (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/authorizer :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-stage-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-stage-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-stage-request/stageName :portkey.aws.apigateway.-2015-07-09.create-stage-request/deploymentId] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-stage-request/description :portkey.aws.apigateway.-2015-07-09.create-stage-request/cacheClusterEnabled :portkey.aws.apigateway.-2015-07-09.create-stage-request/cacheClusterSize :portkey.aws.apigateway.-2015-07-09.create-stage-request/variables :portkey.aws.apigateway.-2015-07-09.create-stage-request/documentationVersion]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizers/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizers/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-authorizer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/authorizers (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.authorizers/position :portkey.aws.apigateway.-2015-07-09.authorizers/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-models-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-models-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-models-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-models-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-models-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-models-request/position :portkey.aws.apigateway.-2015-07-09.get-models-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-api-key-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-api-key-request/apiKey] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-api-key-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/start-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/end-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.usage/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-key-usages))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/usage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.usage/usagePlanId :portkey.aws.apigateway.-2015-07-09.usage/startDate :portkey.aws.apigateway.-2015-07-09.usage/endDate :portkey.aws.apigateway.-2015-07-09.usage/position :portkey.aws.apigateway.-2015-07-09.usage/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-rest-api-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-rest-api-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-rest-api-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-keys-format (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"csv" "csv", :csv "csv"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-documentation-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/position :portkey.aws.apigateway.-2015-07-09.get-documentation-versions-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployments-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployments-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-deployments-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-deployments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-deployments-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-deployments-request/position :portkey.aws.apigateway.-2015-07-09.get-deployments-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-usage-plan (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/usage-plan :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-api-keys-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-api-keys-request/format (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/api-keys-format))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-api-keys-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/import-api-keys-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.import-api-keys-request/body :portkey.aws.apigateway.-2015-07-09.import-api-keys-request/format] :opt-un [:portkey.aws.apigateway.-2015-07-09.import-api-keys-request/failOnWarnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/parent-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/path-part (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.resource/resource-methods (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-method))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.resource/id :portkey.aws.apigateway.-2015-07-09.resource/parentId :portkey.aws.apigateway.-2015-07-09.resource/pathPart :portkey.aws.apigateway.-2015-07-09.resource/path :portkey.aws.apigateway.-2015-07-09.resource/resourceMethods]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/key-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/keyId :portkey.aws.apigateway.-2015-07-09.create-usage-plan-key-request/keyType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/patch-operation :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/friendly-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/required (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/default-value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/sdk-configuration-property (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/name :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/friendlyName :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/description :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/required :portkey.aws.apigateway.-2015-07-09.sdk-configuration-property/defaultValue]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-integration-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-integration-request/resourceId :portkey.aws.apigateway.-2015-07-09.delete-integration-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-response/content-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-response/content-disposition (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.sdk-response/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/sdk-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.sdk-response/contentType :portkey.aws.apigateway.-2015-07-09.sdk-response/contentDisposition :portkey.aws.apigateway.-2015-07-09.sdk-response/body]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-rest-api-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-rest-api-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.import-rest-api-request/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/import-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.import-rest-api-request/body] :opt-un [:portkey.aws.apigateway.-2015-07-09.import-rest-api-request/failOnWarnings :portkey.aws.apigateway.-2015-07-09.import-rest-api-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/path (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-documentation-parts-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/restApiId] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/type :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/nameQuery :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/path :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/position :portkey.aws.apigateway.-2015-07-09.get-documentation-parts-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/stage-keys (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/last-updated-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.api-key/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/api-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.api-key/createdDate :portkey.aws.apigateway.-2015-07-09.api-key/enabled :portkey.aws.apigateway.-2015-07-09.api-key/id :portkey.aws.apigateway.-2015-07-09.api-key/stageKeys :portkey.aws.apigateway.-2015-07-09.api-key/customerId :portkey.aws.apigateway.-2015-07-09.api-key/name :portkey.aws.apigateway.-2015-07-09.api-key/value :portkey.aws.apigateway.-2015-07-09.api-key/lastUpdatedDate :portkey.aws.apigateway.-2015-07-09.api-key/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/nullable-integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-method-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.update-method-request/httpMethod] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-method-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/certificate-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/certificate-arn (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/certificate-upload-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.domain-name/distribution-domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/domain-name (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.domain-name/domainName :portkey.aws.apigateway.-2015-07-09.domain-name/certificateName :portkey.aws.apigateway.-2015-07-09.domain-name/certificateArn :portkey.aws.apigateway.-2015-07-09.domain-name/certificateUploadDate :portkey.aws.apigateway.-2015-07-09.domain-name/distributionDomainName]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-base-path-mapping (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/base-path-mapping :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/blob (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.awsgen/base64-encode portkey.awsgen/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-integration-request/restApiId :portkey.aws.apigateway.-2015-07-09.get-integration-request/resourceId :portkey.aws.apigateway.-2015-07-09.get-integration-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-parts/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-parts/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-documentation-part))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-parts (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-parts/position :portkey.aws.apigateway.-2015-07-09.documentation-parts/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.export-response/content-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.export-response/content-disposition (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.export-response/body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/export-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.export-response/contentType :portkey.aws.apigateway.-2015-07-09.export-response/contentDisposition :portkey.aws.apigateway.-2015-07-09.export-response/body]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.delete-method-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-api-key-request/include-value (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-api-key-request/apiKey] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-api-key-request/includeValue]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-responses/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.gateway-responses/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-gateway-response))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/gateway-responses (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.gateway-responses/position :portkey.aws.apigateway.-2015-07-09.gateway-responses/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-body (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-private-key (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-chain (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificate-arn (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-domain-name-request/domainName] :opt-un [:portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificateName :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificateBody :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificatePrivateKey :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificateChain :portkey.aws.apigateway.-2015-07-09.create-domain-name-request/certificateArn]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/integration-responses (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-integration-response))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/uri (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/request-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/cache-namespace (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/passthrough-behavior (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/integration-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/cache-key-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration/credentials (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/integration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.integration/integrationResponses :portkey.aws.apigateway.-2015-07-09.integration/uri :portkey.aws.apigateway.-2015-07-09.integration/httpMethod :portkey.aws.apigateway.-2015-07-09.integration/requestTemplates :portkey.aws.apigateway.-2015-07-09.integration/requestParameters :portkey.aws.apigateway.-2015-07-09.integration/cacheNamespace :portkey.aws.apigateway.-2015-07-09.integration/passthroughBehavior :portkey.aws.apigateway.-2015-07-09.integration/type :portkey.aws.apigateway.-2015-07-09.integration/contentHandling :portkey.aws.apigateway.-2015-07-09.integration/cacheKeyParameters :portkey.aws.apigateway.-2015-07-09.integration/credentials]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.flush-stage-authorizers-cache-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.flush-stage-authorizers-cache-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/flush-stage-authorizers-cache-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.flush-stage-authorizers-cache-request/restApiId :portkey.aws.apigateway.-2015-07-09.flush-stage-authorizers-cache-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-version/version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-version/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.documentation-version/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/documentation-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.documentation-version/version :portkey.aws.apigateway.-2015-07-09.documentation-version/createdDate :portkey.aws.apigateway.-2015-07-09.documentation-version/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plan-request/usagePlanId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/unauthorized-cache-control-header-strategy (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"FAIL_WITH_403" "FAIL_WITH_403", :fail-with-403 "FAIL_WITH_403", "SUCCEED_WITH_RESPONSE_HEADER" "SUCCEED_WITH_RESPONSE_HEADER", :succeed-with-response-header "SUCCEED_WITH_RESPONSE_HEADER", "SUCCEED_WITHOUT_RESPONSE_HEADER" "SUCCEED_WITHOUT_RESPONSE_HEADER", :succeed-without-response-header "SUCCEED_WITHOUT_RESPONSE_HEADER"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-deployment-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-deployment-request/deploymentId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-api-key (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/api-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/selection-pattern (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.integration-response/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/integration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.integration-response/statusCode :portkey.aws.apigateway.-2015-07-09.integration-response/selectionPattern :portkey.aws.apigateway.-2015-07-09.integration-response/responseParameters :portkey.aws.apigateway.-2015-07-09.integration-response/responseTemplates :portkey.aws.apigateway.-2015-07-09.integration-response/contentHandling]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-domain-name (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/domain-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.get-rest-api-request/restApiId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-integration-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-integration-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-integration-request/resourceId :portkey.aws.apigateway.-2015-07-09.update-integration-request/httpMethod] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-integration-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/operation-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.put-method-request/request-models (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/put-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.put-method-request/restApiId :portkey.aws.apigateway.-2015-07-09.put-method-request/resourceId :portkey.aws.apigateway.-2015-07-09.put-method-request/httpMethod :portkey.aws.apigateway.-2015-07-09.put-method-request/authorizationType] :opt-un [:portkey.aws.apigateway.-2015-07-09.put-method-request/authorizerId :portkey.aws.apigateway.-2015-07-09.put-method-request/requestValidatorId :portkey.aws.apigateway.-2015-07-09.put-method-request/operationName :portkey.aws.apigateway.-2015-07-09.put-method-request/requestParameters :portkey.aws.apigateway.-2015-07-09.put-method-request/apiKeyRequired :portkey.aws.apigateway.-2015-07-09.put-method-request/requestModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.models/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.models/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-model))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/models (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.models/position :portkey.aws.apigateway.-2015-07-09.models/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-authorizer-request/authorizerId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/cache-cluster-status (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/cache-cluster-status))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/created-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/method-settings (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-method-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/last-updated-date (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/variables (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/description (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.stage/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/stage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.stage/cacheClusterStatus :portkey.aws.apigateway.-2015-07-09.stage/createdDate :portkey.aws.apigateway.-2015-07-09.stage/documentationVersion :portkey.aws.apigateway.-2015-07-09.stage/methodSettings :portkey.aws.apigateway.-2015-07-09.stage/deploymentId :portkey.aws.apigateway.-2015-07-09.stage/clientCertificateId :portkey.aws.apigateway.-2015-07-09.stage/lastUpdatedDate :portkey.aws.apigateway.-2015-07-09.stage/variables :portkey.aws.apigateway.-2015-07-09.stage/cacheClusterEnabled :portkey.aws.apigateway.-2015-07-09.stage/stageName :portkey.aws.apigateway.-2015-07-09.stage/description :portkey.aws.apigateway.-2015-07-09.stage/cacheClusterSize]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-authorizer-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-authorizer-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-authorizer-request/authorizerId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-authorizer-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/list-of-stage-keys (clojure.spec.alpha/coll-of :portkey.aws.apigateway.-2015-07-09/stage-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/content-handling-strategy (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"CONVERT_TO_BINARY" "CONVERT_TO_BINARY", :convert-to-binary "CONVERT_TO_BINARY", "CONVERT_TO_TEXT" "CONVERT_TO_TEXT", :convert-to-text "CONVERT_TO_TEXT"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.delete-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/delete-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.delete-request-validator-request/restApiId :portkey.aws.apigateway.-2015-07-09.delete-request-validator-request/requestValidatorId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/location (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/documentation-part-location))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/properties (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/create-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/restApiId :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/location :portkey.aws.apigateway.-2015-07-09.create-documentation-part-request/properties] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-request-validator-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-request-validator-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-request-validator-request/requestValidatorId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-request-validator-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/map-of-integration-response (clojure.spec.alpha/map-of :portkey.aws.apigateway.-2015-07-09/string :portkey.aws.apigateway.-2015-07-09/integration-response))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/get-usage-plans-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/position :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/keyId :portkey.aws.apigateway.-2015-07-09.get-usage-plans-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/authorizer-credentials (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/name (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/authorizer-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/auth-type (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/identity-source (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.authorizer/providerarns (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-ofarns))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/authorizer (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.authorizer/authorizerCredentials :portkey.aws.apigateway.-2015-07-09.authorizer/identityValidationExpression :portkey.aws.apigateway.-2015-07-09.authorizer/id :portkey.aws.apigateway.-2015-07-09.authorizer/name :portkey.aws.apigateway.-2015-07-09.authorizer/type :portkey.aws.apigateway.-2015-07-09.authorizer/authorizerResultTtlInSeconds :portkey.aws.apigateway.-2015-07-09.authorizer/authorizerUri :portkey.aws.apigateway.-2015-07-09.authorizer/authType :portkey.aws.apigateway.-2015-07-09.authorizer/identitySource :portkey.aws.apigateway.-2015-07-09.authorizer/providerARNs]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/update-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/restApiId :portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/documentationPartId] :opt-un [:portkey.aws.apigateway.-2015-07-09.update-documentation-part-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployments/position (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09.deployments/items (clojure.spec.alpha/and :portkey.aws.apigateway.-2015-07-09/list-of-deployment))
(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/deployments (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.-2015-07-09.deployments/position :portkey.aws.apigateway.-2015-07-09.deployments/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.-2015-07-09/boolean clojure.core/boolean?)

(clojure.core/defn flush-stage-cache ([input__47307__auto__] (flush-stage-cache input__47307__auto__ portkey.aws/*http-client*)) ([input49415 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}/cache/data"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/FlushStageCacheRequest input49415)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49414] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49414)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49414 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49414)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49414}))))))))))

(clojure.core/defn get-usage-plan ([input__47307__auto__] (get-usage-plan input__47307__auto__ portkey.aws/*http-client*)) ([input49417 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetUsagePlanRequest input49417)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49416] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49416)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan (:body response49416)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49416 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49416)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49416}))))))))))

(clojure.core/defn update-rest-api ([input__47307__auto__] (update-rest-api input__47307__auto__ portkey.aws/*http-client*)) ([input49419 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateRestApiRequest input49419)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49418] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49418)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response49418)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49418 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49418)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49418}))))))))))

(clojure.core/defn update-account ([input__47307__auto__] (update-account input__47307__auto__ portkey.aws/*http-client*)) ([input49421 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/account"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateAccountRequest input49421)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49420] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49420)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/account (:body response49420)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49420 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49420)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49420}))))))))))

(clojure.core/defn delete-rest-api ([input__47307__auto__] (delete-rest-api input__47307__auto__ portkey.aws/*http-client*)) ([input49423 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteRestApiRequest input49423)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49422] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception}] (if (clojure.core/= 202 (:status response49422)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49422 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49422)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49422}))))))))))

(clojure.core/defn delete-method ([input__47307__auto__] (delete-method input__47307__auto__ portkey.aws/*http-client*)) ([input49425 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteMethodRequest input49425)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49424] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 204 (:status response49424)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49424 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49424)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49424}))))))))))

(clojure.core/defn update-authorizer ([input__47307__auto__] (update-authorizer input__47307__auto__ portkey.aws/*http-client*)) ([input49427 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers/{authorizer_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateAuthorizerRequest input49427)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "authorizer_id" "authorizerId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49426] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49426)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/authorizer (:body response49426)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49426 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49426)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49426}))))))))))

(clojure.core/defn get-sdk-type ([input__47307__auto__] (get-sdk-type input__47307__auto__ portkey.aws/*http-client*)) ([input49429 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/sdktypes/{sdktype_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetSdkTypeRequest input49429)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"sdktype_id" "id"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49428] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49428)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/sdk-type (:body response49428)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49428 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49428)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49428}))))))))))

(clojure.core/defn update-domain-name ([input__47307__auto__] (update-domain-name input__47307__auto__ portkey.aws/*http-client*)) ([input49431 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateDomainNameRequest input49431)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49430] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49430)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/domain-name (:body response49430)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49430 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49430)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49430}))))))))))

(clojure.core/defn update-gateway-response ([input__47307__auto__] (update-gateway-response input__47307__auto__ portkey.aws/*http-client*)) ([input49433 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses/{response_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateGatewayResponseRequest input49433)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "response_type" "responseType"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49432] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49432)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/gateway-response (:body response49432)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49432 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49432)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49432}))))))))))

(clojure.core/defn get-rest-apis ([input__47307__auto__] (get-rest-apis input__47307__auto__ portkey.aws/*http-client*)) ([input49435 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetRestApisRequest input49435)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49434] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49434)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-apis (:body response49434)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49434 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49434)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49434}))))))))))

(clojure.core/defn get-documentation-parts ([input__47307__auto__] (get-documentation-parts input__47307__auto__ portkey.aws/*http-client*)) ([input49437 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDocumentationPartsRequest input49437)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"type" "type", "name" "nameQuery", "path" "path", "position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49436] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49436)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-parts (:body response49436)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49436 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49436)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49436}))))))))))

(clojure.core/defn get-deployment ([input__47307__auto__] (get-deployment input__47307__auto__ portkey.aws/*http-client*)) ([input49439 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments/{deployment_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDeploymentRequest input49439)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "deployment_id" "deploymentId"}) (portkey.awsgen/params-to-querystring {"embed" "embed"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49438] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception}] (if (clojure.core/= nil (:status response49438)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/deployment (:body response49438)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49438 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49438)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49438}))))))))))

(clojure.core/defn create-resource ([input__47307__auto__] (create-resource input__47307__auto__ portkey.aws/*http-client*)) ([input49441 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{parent_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateResourceRequest input49441)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "parent_id" "parentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49440] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49440)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/resource (:body response49440)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49440 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49440)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49440}))))))))))

(clojure.core/defn delete-documentation-version ([input__47307__auto__] (delete-documentation-version input__47307__auto__ portkey.aws/*http-client*)) ([input49443 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions/{doc_version}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteDocumentationVersionRequest input49443)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "doc_version" "documentationVersion"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49442] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49442)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49442 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49442)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49442}))))))))))

(clojure.core/defn delete-usage-plan ([input__47307__auto__] (delete-usage-plan input__47307__auto__ portkey.aws/*http-client*)) ([input49445 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteUsagePlanRequest input49445)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49444] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= 202 (:status response49444)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49444 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49444)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49444}))))))))))

(clojure.core/defn get-stages ([input__47307__auto__] (get-stages input__47307__auto__ portkey.aws/*http-client*)) ([input49447 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetStagesRequest input49447)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"deploymentId" "deploymentId"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49446] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49446)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/stages (:body response49446)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49446 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49446)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49446}))))))))))

(clojure.core/defn get-resource ([input__47307__auto__] (get-resource input__47307__auto__ portkey.aws/*http-client*)) ([input49449 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetResourceRequest input49449)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId"}) (portkey.awsgen/params-to-querystring {"embed" "embed"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49448] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49448)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/resource (:body response49448)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49448 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49448)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49448}))))))))))

(clojure.core/defn update-documentation-part ([input__47307__auto__] (update-documentation-part input__47307__auto__ portkey.aws/*http-client*)) ([input49451 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts/{part_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateDocumentationPartRequest input49451)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "part_id" "documentationPartId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49450] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49450)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-part (:body response49450)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49450 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49450)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49450}))))))))))

(clojure.core/defn import-api-keys ([input__47307__auto__] (import-api-keys input__47307__auto__ portkey.aws/*http-client*)) ([input49453 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys?mode=import"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/ImportApiKeysRequest input49453)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"format" "format", "failonwarnings" "failOnWarnings"}) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49452] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 201 (:status response49452)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-key-ids (:body response49452)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49452 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49452)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49452}))))))))))

(clojure.core/defn get-client-certificate ([input__47307__auto__] (get-client-certificate input__47307__auto__ portkey.aws/*http-client*)) ([input49455 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates/{clientcertificate_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetClientCertificateRequest input49455)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"clientcertificate_id" "clientCertificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49454] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49454)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/client-certificate (:body response49454)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49454 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49454)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49454}))))))))))

(clojure.core/defn create-authorizer ([input__47307__auto__] (create-authorizer input__47307__auto__ portkey.aws/*http-client*)) ([input49457 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateAuthorizerRequest input49457)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49456] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49456)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/authorizer (:body response49456)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49456 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49456)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49456}))))))))))

(clojure.core/defn get-usage-plan-keys ([input__47307__auto__] (get-usage-plan-keys input__47307__auto__ portkey.aws/*http-client*)) ([input49459 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetUsagePlanKeysRequest input49459)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit", "name" "nameQuery"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49458] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49458)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan-keys (:body response49458)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49458 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49458)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49458}))))))))))

(clojure.core/defn get-gateway-response ([input__47307__auto__] (get-gateway-response input__47307__auto__ portkey.aws/*http-client*)) ([input49461 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses/{response_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetGatewayResponseRequest input49461)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "response_type" "responseType"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49460] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49460)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/gateway-response (:body response49460)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49460 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49460)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49460}))))))))))

(clojure.core/defn get-deployments ([input__47307__auto__] (get-deployments input__47307__auto__ portkey.aws/*http-client*)) ([input49463 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDeploymentsRequest input49463)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49462] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception}] (if (clojure.core/= nil (:status response49462)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/deployments (:body response49462)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49462 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49462)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49462}))))))))))

(clojure.core/defn update-resource ([input__47307__auto__] (update-resource input__47307__auto__ portkey.aws/*http-client*)) ([input49465 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateResourceRequest input49465)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49464] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49464)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/resource (:body response49464)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49464 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49464)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49464}))))))))))

(clojure.core/defn get-authorizers ([input__47307__auto__] (get-authorizers input__47307__auto__ portkey.aws/*http-client*)) ([input49467 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetAuthorizersRequest input49467)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49466] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49466)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/authorizers (:body response49466)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49466 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49466)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49466}))))))))))

(clojure.core/defn get-base-path-mapping ([input__47307__auto__] (get-base-path-mapping input__47307__auto__ portkey.aws/*http-client*)) ([input49469 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings/{base_path}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetBasePathMappingRequest input49469)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName", "base_path" "basePath"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49468] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49468)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/base-path-mapping (:body response49468)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49468 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49468)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49468}))))))))))

(clojure.core/defn delete-integration ([input__47307__auto__] (delete-integration input__47307__auto__ portkey.aws/*http-client*)) ([input49471 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteIntegrationRequest input49471)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49470] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 204 (:status response49470)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49470 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49470)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49470}))))))))))

(clojure.core/defn get-request-validators ([input__47307__auto__] (get-request-validators input__47307__auto__ portkey.aws/*http-client*)) ([input49473 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetRequestValidatorsRequest input49473)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49472] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49472)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/request-validators (:body response49472)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49472 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49472)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49472}))))))))))

(clojure.core/defn create-domain-name ([input__47307__auto__] (create-domain-name input__47307__auto__ portkey.aws/*http-client*)) ([input49475 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateDomainNameRequest input49475)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49474] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49474)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/domain-name (:body response49474)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49474 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49474)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49474}))))))))))

(clojure.core/defn put-integration-response ([input__47307__auto__] (put-integration-response input__47307__auto__ portkey.aws/*http-client*)) ([input49477 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/PutIntegrationResponseRequest input49477)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49476] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 201 (:status response49476)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration-response (:body response49476)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49476 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49476)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49476}))))))))))

(clojure.core/defn create-usage-plan ([input__47307__auto__] (create-usage-plan input__47307__auto__ portkey.aws/*http-client*)) ([input49479 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateUsagePlanRequest input49479)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49478] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= 201 (:status response49478)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan (:body response49478)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49478 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49478)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49478}))))))))))

(clojure.core/defn create-api-key ([input__47307__auto__] (create-api-key input__47307__auto__ portkey.aws/*http-client*)) ([input49481 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateApiKeyRequest input49481)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49480] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 201 (:status response49480)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-key (:body response49480)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49480 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49480)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49480}))))))))))

(clojure.core/defn import-rest-api ([input__47307__auto__] (import-rest-api input__47307__auto__ portkey.aws/*http-client*)) ([input49483 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis?mode=import"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/ImportRestApiRequest input49483)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"failonwarnings" "failOnWarnings", nil "parameters"}) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49482] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 201 (:status response49482)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response49482)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49482 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49482)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49482}))))))))))

(clojure.core/defn delete-api-key ([input__47307__auto__] (delete-api-key input__47307__auto__ portkey.aws/*http-client*)) ([input49485 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys/{api_Key}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteApiKeyRequest input49485)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"api_Key" "apiKey"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49484] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49484)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49484 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49484)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49484}))))))))))

(clojure.core/defn get-integration ([input__47307__auto__] (get-integration input__47307__auto__ portkey.aws/*http-client*)) ([input49487 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetIntegrationRequest input49487)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49486] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49486)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration (:body response49486)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49486 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49486)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49486}))))))))))

(clojure.core/defn get-export ([input__47307__auto__] (get-export input__47307__auto__ portkey.aws/*http-client*)) ([input49489 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetExportRequest input49489)} (portkey.awsgen/params-to-header {"accepts" ["Accept" nil]}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName", "export_type" "exportType"}) (portkey.awsgen/params-to-querystring {nil "parameters"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49488] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49488)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/export-response (:body response49488)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49488 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49488)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49488}))))))))))

(clojure.core/defn delete-stage ([input__47307__auto__] (delete-stage input__47307__auto__ portkey.aws/*http-client*)) ([input49491 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteStageRequest input49491)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49490] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception}] (if (clojure.core/= 202 (:status response49490)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49490 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49490)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49490}))))))))))

(clojure.core/defn delete-request-validator ([input__47307__auto__] (delete-request-validator input__47307__auto__ portkey.aws/*http-client*)) ([input49493 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteRequestValidatorRequest input49493)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "requestvalidator_id" "requestValidatorId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49492] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 202 (:status response49492)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49492 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49492)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49492}))))))))))

(clojure.core/defn get-gateway-responses ([input__47307__auto__] (get-gateway-responses input__47307__auto__ portkey.aws/*http-client*)) ([input49495 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetGatewayResponsesRequest input49495)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49494] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49494)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/gateway-responses (:body response49494)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49494 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49494)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49494}))))))))))

(clojure.core/defn put-method-response ([input__47307__auto__] (put-method-response input__47307__auto__ portkey.aws/*http-client*)) ([input49497 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/PutMethodResponseRequest input49497)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49496] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49496)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method-response (:body response49496)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49496 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49496)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49496}))))))))))

(clojure.core/defn get-model ([input__47307__auto__] (get-model input__47307__auto__ portkey.aws/*http-client*)) ([input49499 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models/{model_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetModelRequest input49499)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "model_name" "modelName"}) (portkey.awsgen/params-to-querystring {"flatten" "flatten"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49498] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49498)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/model (:body response49498)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49498 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49498)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49498}))))))))))

(clojure.core/defn create-model ([input__47307__auto__] (create-model input__47307__auto__ portkey.aws/*http-client*)) ([input49501 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateModelRequest input49501)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49500] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49500)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/model (:body response49500)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49500 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49500)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49500}))))))))))

(clojure.core/defn update-api-key ([input__47307__auto__] (update-api-key input__47307__auto__ portkey.aws/*http-client*)) ([input49503 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys/{api_Key}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateApiKeyRequest input49503)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"api_Key" "apiKey"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49502] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= nil (:status response49502)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-key (:body response49502)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49502 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49502)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49502}))))))))))

(clojure.core/defn create-deployment ([input__47307__auto__] (create-deployment input__47307__auto__ portkey.aws/*http-client*)) ([input49505 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateDeploymentRequest input49505)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49504] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception}] (if (clojure.core/= 201 (:status response49504)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/deployment (:body response49504)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49504 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49504)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49504}))))))))))

(clojure.core/defn update-method ([input__47307__auto__] (update-method input__47307__auto__ portkey.aws/*http-client*)) ([input49507 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateMethodRequest input49507)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49506] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49506)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method (:body response49506)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49506 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49506)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49506}))))))))))

(clojure.core/defn test-invoke-authorizer ([input__47307__auto__] (test-invoke-authorizer input__47307__auto__ portkey.aws/*http-client*)) ([input49509 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers/{authorizer_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/TestInvokeAuthorizerRequest input49509)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "authorizer_id" "authorizerId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49508] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49508)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/test-invoke-authorizer-response (:body response49508)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49508 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49508)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49508}))))))))))

(clojure.core/defn create-documentation-part ([input__47307__auto__] (create-documentation-part input__47307__auto__ portkey.aws/*http-client*)) ([input49511 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateDocumentationPartRequest input49511)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49510] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49510)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-part (:body response49510)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49510 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49510)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49510}))))))))))

(clojure.core/defn update-stage ([input__47307__auto__] (update-stage input__47307__auto__ portkey.aws/*http-client*)) ([input49513 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateStageRequest input49513)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49512] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49512)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/stage (:body response49512)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49512 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49512)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49512}))))))))))

(clojure.core/defn update-request-validator ([input__47307__auto__] (update-request-validator input__47307__auto__ portkey.aws/*http-client*)) ([input49515 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateRequestValidatorRequest input49515)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "requestvalidator_id" "requestValidatorId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49514] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49514)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/request-validator (:body response49514)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49514 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49514)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49514}))))))))))

(clojure.core/defn get-sdk-types ([input__47307__auto__] (get-sdk-types input__47307__auto__ portkey.aws/*http-client*)) ([input49517 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/sdktypes"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetSdkTypesRequest input49517)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49516] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49516)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/sdk-types (:body response49516)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49516 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49516)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49516}))))))))))

(clojure.core/defn update-client-certificate ([input__47307__auto__] (update-client-certificate input__47307__auto__ portkey.aws/*http-client*)) ([input49519 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates/{clientcertificate_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateClientCertificateRequest input49519)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"clientcertificate_id" "clientCertificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49518] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= nil (:status response49518)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/client-certificate (:body response49518)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49518 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49518)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49518}))))))))))

(clojure.core/defn update-model ([input__47307__auto__] (update-model input__47307__auto__ portkey.aws/*http-client*)) ([input49521 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models/{model_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateModelRequest input49521)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "model_name" "modelName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49520] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49520)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/model (:body response49520)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49520 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49520)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49520}))))))))))

(clojure.core/defn get-documentation-versions ([input__47307__auto__] (get-documentation-versions input__47307__auto__ portkey.aws/*http-client*)) ([input49523 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDocumentationVersionsRequest input49523)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49522] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49522)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-versions (:body response49522)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49522 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49522)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49522}))))))))))

(clojure.core/defn update-usage ([input__47307__auto__] (update-usage input__47307__auto__ portkey.aws/*http-client*)) ([input49525 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys/{keyId}/usage"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateUsageRequest input49525)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId", "keyId" "keyId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49524] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= nil (:status response49524)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage (:body response49524)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49524 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49524)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49524}))))))))))

(clojure.core/defn create-usage-plan-key ([input__47307__auto__] (create-usage-plan-key input__47307__auto__ portkey.aws/*http-client*)) ([input49527 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateUsagePlanKeyRequest input49527)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49526] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49526)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan-key (:body response49526)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49526 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49526)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49526}))))))))))

(clojure.core/defn put-integration ([input__47307__auto__] (put-integration input__47307__auto__ portkey.aws/*http-client*)) ([input49529 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/PutIntegrationRequest input49529)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"resource_id" "resourceId", "http_method" "httpMethod", "restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49528] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49528)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration (:body response49528)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49528 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49528)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49528}))))))))))

(clojure.core/defn get-usage ([input__47307__auto__] (get-usage input__47307__auto__ portkey.aws/*http-client*)) ([input49531 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/usage"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetUsageRequest input49531)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {"keyId" "keyId", "startDate" "startDate", "endDate" "endDate", "position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49530] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49530)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage (:body response49530)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49530 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49530)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49530}))))))))))

(clojure.core/defn update-documentation-version ([input__47307__auto__] (update-documentation-version input__47307__auto__ portkey.aws/*http-client*)) ([input49533 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions/{doc_version}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateDocumentationVersionRequest input49533)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "doc_version" "documentationVersion"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49532] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49532)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-version (:body response49532)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49532 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49532)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49532}))))))))))

(clojure.core/defn get-stage ([input__47307__auto__] (get-stage input__47307__auto__ portkey.aws/*http-client*)) ([input49535 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetStageRequest input49535)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49534] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49534)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/stage (:body response49534)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49534 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49534)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49534}))))))))))

(clojure.core/defn update-method-response ([input__47307__auto__] (update-method-response input__47307__auto__ portkey.aws/*http-client*)) ([input49537 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateMethodResponseRequest input49537)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49536] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49536)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method-response (:body response49536)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49536 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49536)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49536}))))))))))

(clojure.core/defn create-base-path-mapping ([input__47307__auto__] (create-base-path-mapping input__47307__auto__ portkey.aws/*http-client*)) ([input49539 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateBasePathMappingRequest input49539)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49538] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49538)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/base-path-mapping (:body response49538)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49538 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49538)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49538}))))))))))

(clojure.core/defn get-documentation-part ([input__47307__auto__] (get-documentation-part input__47307__auto__ portkey.aws/*http-client*)) ([input49541 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts/{part_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDocumentationPartRequest input49541)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "part_id" "documentationPartId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49540] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49540)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-part (:body response49540)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49540 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49540)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49540}))))))))))

(clojure.core/defn delete-model ([input__47307__auto__] (delete-model input__47307__auto__ portkey.aws/*http-client*)) ([input49543 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models/{model_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteModelRequest input49543)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "model_name" "modelName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49542] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 202 (:status response49542)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49542 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49542)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49542}))))))))))

(clojure.core/defn import-documentation-parts ([input__47307__auto__] (import-documentation-parts input__47307__auto__ portkey.aws/*http-client*)) ([input49545 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/ImportDocumentationPartsRequest input49545)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"mode" "mode", "failonwarnings" "failOnWarnings"}) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49544] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49544)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-part-ids (:body response49544)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49544 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49544)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49544}))))))))))

(clojure.core/defn delete-method-response ([input__47307__auto__] (delete-method-response input__47307__auto__ portkey.aws/*http-client*)) ([input49547 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteMethodResponseRequest input49547)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49546] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 204 (:status response49546)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49546 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49546)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49546}))))))))))

(clojure.core/defn get-client-certificates ([input__47307__auto__] (get-client-certificates input__47307__auto__ portkey.aws/*http-client*)) ([input49549 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetClientCertificatesRequest input49549)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49548] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49548)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/client-certificates (:body response49548)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49548 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49548)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49548}))))))))))

(clojure.core/defn get-api-keys ([input__47307__auto__] (get-api-keys input__47307__auto__ portkey.aws/*http-client*)) ([input49551 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetApiKeysRequest input49551)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit", "name" "nameQuery", "customerId" "customerId", "includeValues" "includeValues"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49550] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49550)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-keys (:body response49550)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49550 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49550)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49550}))))))))))

(clojure.core/defn update-deployment ([input__47307__auto__] (update-deployment input__47307__auto__ portkey.aws/*http-client*)) ([input49553 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments/{deployment_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateDeploymentRequest input49553)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "deployment_id" "deploymentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49552] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception}] (if (clojure.core/= nil (:status response49552)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/deployment (:body response49552)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49552 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49552)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49552}))))))))))

(clojure.core/defn delete-domain-name ([input__47307__auto__] (delete-domain-name input__47307__auto__ portkey.aws/*http-client*)) ([input49555 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteDomainNameRequest input49555)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49554] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49554)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49554 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49554)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49554}))))))))))

(clojure.core/defn create-rest-api ([input__47307__auto__] (create-rest-api input__47307__auto__ portkey.aws/*http-client*)) ([input49557 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateRestApiRequest input49557)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49556] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49556)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response49556)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49556 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49556)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49556}))))))))))

(clojure.core/defn delete-authorizer ([input__47307__auto__] (delete-authorizer input__47307__auto__ portkey.aws/*http-client*)) ([input49559 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers/{authorizer_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteAuthorizerRequest input49559)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "authorizer_id" "authorizerId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49558] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 202 (:status response49558)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49558 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49558)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49558}))))))))))

(clojure.core/defn get-usage-plan-key ([input__47307__auto__] (get-usage-plan-key input__47307__auto__ portkey.aws/*http-client*)) ([input49561 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys/{keyId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetUsagePlanKeyRequest input49561)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId", "keyId" "keyId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49560] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49560)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan-key (:body response49560)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49560 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49560)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49560}))))))))))

(clojure.core/defn delete-resource ([input__47307__auto__] (delete-resource input__47307__auto__ portkey.aws/*http-client*)) ([input49563 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteResourceRequest input49563)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49562] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49562)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49562 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49562)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49562}))))))))))

(clojure.core/defn test-invoke-method ([input__47307__auto__] (test-invoke-method input__47307__auto__ portkey.aws/*http-client*)) ([input49565 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/TestInvokeMethodRequest input49565)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49564] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49564)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/test-invoke-method-response (:body response49564)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49564 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49564)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49564}))))))))))

(clojure.core/defn get-method-response ([input__47307__auto__] (get-method-response input__47307__auto__ portkey.aws/*http-client*)) ([input49567 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetMethodResponseRequest input49567)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49566] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49566)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method-response (:body response49566)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49566 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49566)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49566}))))))))))

(clojure.core/defn get-request-validator ([input__47307__auto__] (get-request-validator input__47307__auto__ portkey.aws/*http-client*)) ([input49569 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetRequestValidatorRequest input49569)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "requestvalidator_id" "requestValidatorId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49568] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49568)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/request-validator (:body response49568)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49568 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49568)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49568}))))))))))

(clojure.core/defn get-authorizer ([input__47307__auto__] (get-authorizer input__47307__auto__ portkey.aws/*http-client*)) ([input49571 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers/{authorizer_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetAuthorizerRequest input49571)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "authorizer_id" "authorizerId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49570] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49570)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/authorizer (:body response49570)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49570 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49570)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49570}))))))))))

(clojure.core/defn get-base-path-mappings ([input__47307__auto__] (get-base-path-mappings input__47307__auto__ portkey.aws/*http-client*)) ([input49573 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetBasePathMappingsRequest input49573)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49572] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49572)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/base-path-mappings (:body response49572)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49572 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49572)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49572}))))))))))

(clojure.core/defn delete-base-path-mapping ([input__47307__auto__] (delete-base-path-mapping input__47307__auto__ portkey.aws/*http-client*)) ([input49575 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings/{base_path}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteBasePathMappingRequest input49575)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName", "base_path" "basePath"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49574] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49574)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49574 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49574)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49574}))))))))))

(clojure.core/defn get-account ([input__47307__auto__] (get-account input__47307__auto__ portkey.aws/*http-client*)) ([input49577 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/account"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetAccountRequest input49577)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49576] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49576)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/account (:body response49576)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49576 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49576)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49576}))))))))))

(clojure.core/defn get-integration-response ([input__47307__auto__] (get-integration-response input__47307__auto__ portkey.aws/*http-client*)) ([input49579 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetIntegrationResponseRequest input49579)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49578] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49578)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration-response (:body response49578)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49578 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49578)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49578}))))))))))

(clojure.core/defn get-model-template ([input__47307__auto__] (get-model-template input__47307__auto__ portkey.aws/*http-client*)) ([input49581 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models/{model_name}/default_template"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetModelTemplateRequest input49581)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "model_name" "modelName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49580] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49580)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/template (:body response49580)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49580 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49580)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49580}))))))))))

(clojure.core/defn get-rest-api ([input__47307__auto__] (get-rest-api input__47307__auto__ portkey.aws/*http-client*)) ([input49583 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetRestApiRequest input49583)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49582] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49582)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response49582)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49582 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49582)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49582}))))))))))

(clojure.core/defn delete-integration-response ([input__47307__auto__] (delete-integration-response input__47307__auto__ portkey.aws/*http-client*)) ([input49585 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteIntegrationResponseRequest input49585)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49584] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 204 (:status response49584)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49584 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49584)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49584}))))))))))

(clojure.core/defn delete-usage-plan-key ([input__47307__auto__] (delete-usage-plan-key input__47307__auto__ portkey.aws/*http-client*)) ([input49587 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys/{keyId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteUsagePlanKeyRequest input49587)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId", "keyId" "keyId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49586] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49586)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49586 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49586)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49586}))))))))))

(clojure.core/defn delete-documentation-part ([input__47307__auto__] (delete-documentation-part input__47307__auto__ portkey.aws/*http-client*)) ([input49589 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts/{part_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteDocumentationPartRequest input49589)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "part_id" "documentationPartId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49588] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception}] (if (clojure.core/= 202 (:status response49588)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49588 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49588)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49588}))))))))))

(clojure.core/defn generate-client-certificate ([input__47307__auto__] (generate-client-certificate input__47307__auto__ portkey.aws/*http-client*)) ([input49591 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GenerateClientCertificateRequest input49591)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49590] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception}] (if (clojure.core/= 201 (:status response49590)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/client-certificate (:body response49590)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49590 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49590)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49590}))))))))))

(clojure.core/defn get-method ([input__47307__auto__] (get-method input__47307__auto__ portkey.aws/*http-client*)) ([input49593 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetMethodRequest input49593)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49592] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49592)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method (:body response49592)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49592 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49592)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49592}))))))))))

(clojure.core/defn get-models ([input__47307__auto__] (get-models input__47307__auto__ portkey.aws/*http-client*)) ([input49595 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetModelsRequest input49595)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49594] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49594)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/models (:body response49594)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49594 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49594)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49594}))))))))))

(clojure.core/defn get-documentation-version ([input__47307__auto__] (get-documentation-version input__47307__auto__ portkey.aws/*http-client*)) ([input49597 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions/{doc_version}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDocumentationVersionRequest input49597)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "doc_version" "documentationVersion"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49596] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49596)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-version (:body response49596)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49596 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49596)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49596}))))))))))

(clojure.core/defn create-documentation-version ([input__47307__auto__] (create-documentation-version input__47307__auto__ portkey.aws/*http-client*)) ([input49599 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateDocumentationVersionRequest input49599)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49598] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49598)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/documentation-version (:body response49598)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49598 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49598)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49598}))))))))))

(clojure.core/defn get-resources ([input__47307__auto__] (get-resources input__47307__auto__ portkey.aws/*http-client*)) ([input49601 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetResourcesRequest input49601)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit", "embed" "embed"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49600] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49600)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/resources (:body response49600)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49600 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49600)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49600}))))))))))

(clojure.core/defn get-api-key ([input__47307__auto__] (get-api-key input__47307__auto__ portkey.aws/*http-client*)) ([input49603 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys/{api_Key}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetApiKeyRequest input49603)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"api_Key" "apiKey"}) (portkey.awsgen/params-to-querystring {"includeValue" "includeValue"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49602] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49602)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/api-key (:body response49602)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49602 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49602)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49602}))))))))))

(clojure.core/defn create-stage ([input__47307__auto__] (create-stage input__47307__auto__ portkey.aws/*http-client*)) ([input49605 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateStageRequest input49605)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49604] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49604)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/stage (:body response49604)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49604 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49604)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49604}))))))))))

(clojure.core/defn delete-gateway-response ([input__47307__auto__] (delete-gateway-response input__47307__auto__ portkey.aws/*http-client*)) ([input49607 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses/{response_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteGatewayResponseRequest input49607)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "response_type" "responseType"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49606] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= 202 (:status response49606)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49606 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49606)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49606}))))))))))

(clojure.core/defn update-integration ([input__47307__auto__] (update-integration input__47307__auto__ portkey.aws/*http-client*)) ([input49609 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateIntegrationRequest input49609)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49608] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= nil (:status response49608)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration (:body response49608)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49608 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49608)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49608}))))))))))

(clojure.core/defn flush-stage-authorizers-cache ([input__47307__auto__] (flush-stage-authorizers-cache input__47307__auto__ portkey.aws/*http-client*)) ([input49611 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/FlushStageAuthorizersCacheRequest input49611)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49610] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49610)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49610 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49610)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49610}))))))))))

(clojure.core/defn delete-client-certificate ([input__47307__auto__] (delete-client-certificate input__47307__auto__ portkey.aws/*http-client*)) ([input49613 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates/{clientcertificate_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteClientCertificateRequest input49613)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"clientcertificate_id" "clientCertificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49612] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= 202 (:status response49612)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49612 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49612)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49612}))))))))))

(clojure.core/defn put-gateway-response ([input__47307__auto__] (put-gateway-response input__47307__auto__ portkey.aws/*http-client*)) ([input49615 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses/{response_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/PutGatewayResponseRequest input49615)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "response_type" "responseType"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49614] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49614)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/gateway-response (:body response49614)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49614 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49614)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49614}))))))))))

(clojure.core/defn get-domain-name ([input__47307__auto__] (get-domain-name input__47307__auto__ portkey.aws/*http-client*)) ([input49617 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDomainNameRequest input49617)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49616] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ServiceUnavailableException" :portkey.aws.apigateway.-2015-07-09/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49616)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/domain-name (:body response49616)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49616 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49616)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49616}))))))))))

(clojure.core/defn update-base-path-mapping ([input__47307__auto__] (update-base-path-mapping input__47307__auto__ portkey.aws/*http-client*)) ([input49619 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings/{base_path}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateBasePathMappingRequest input49619)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName", "base_path" "basePath"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49618] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49618)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/base-path-mapping (:body response49618)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49618 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49618)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49618}))))))))))

(clojure.core/defn get-usage-plans ([input__47307__auto__] (get-usage-plans input__47307__auto__ portkey.aws/*http-client*)) ([input49621 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetUsagePlansRequest input49621)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "keyId" "keyId", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49620] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception}] (if (clojure.core/= nil (:status response49620)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plans (:body response49620)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49620 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49620)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49620}))))))))))

(clojure.core/defn update-usage-plan ([input__47307__auto__] (update-usage-plan input__47307__auto__ portkey.aws/*http-client*)) ([input49623 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateUsagePlanRequest input49623)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49622] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= nil (:status response49622)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/usage-plan (:body response49622)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49622 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49622)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49622}))))))))))

(clojure.core/defn get-sdk ([input__47307__auto__] (get-sdk input__47307__auto__ portkey.aws/*http-client*)) ([input49625 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetSdkRequest input49625)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName", "sdk_type" "sdkType"}) (portkey.awsgen/params-to-querystring {nil "parameters"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49624] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49624)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/sdk-response (:body response49624)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49624 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49624)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49624}))))))))))

(clojure.core/defn put-method ([input__47307__auto__] (put-method input__47307__auto__ portkey.aws/*http-client*)) ([input49627 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/PutMethodRequest input49627)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"resource_id" "resourceId", "http_method" "httpMethod", "restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49626] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49626)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/method (:body response49626)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49626 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49626)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49626}))))))))))

(clojure.core/defn update-integration-response ([input__47307__auto__] (update-integration-response input__47307__auto__ portkey.aws/*http-client*)) ([input49629 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/UpdateIntegrationResponseRequest input49629)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49628] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49628)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/integration-response (:body response49628)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49628 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49628)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49628}))))))))))

(clojure.core/defn get-domain-names ([input__47307__auto__] (get-domain-names input__47307__auto__ portkey.aws/*http-client*)) ([input49631 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/GetDomainNamesRequest input49631)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49630] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= nil (:status response49630)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/domain-names (:body response49630)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49630 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49630)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49630}))))))))))

(clojure.core/defn put-rest-api ([input__47307__auto__] (put-rest-api input__47307__auto__ portkey.aws/*http-client*)) ([input49633 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/PutRestApiRequest input49633)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"mode" "mode", "failonwarnings" "failOnWarnings", nil "parameters"}) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49632] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway.-2015-07-09/conflict-exception}] (if (clojure.core/= nil (:status response49632)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/rest-api (:body response49632)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49632 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49632)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49632}))))))))))

(clojure.core/defn create-request-validator ([input__47307__auto__] (create-request-validator input__47307__auto__ portkey.aws/*http-client*)) ([input49635 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/CreateRequestValidatorRequest input49635)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49634] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "LimitExceededException" :portkey.aws.apigateway.-2015-07-09/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49634)) (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/request-validator (:body response49634)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49634 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49634)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49634}))))))))))

(clojure.core/defn delete-deployment ([input__47307__auto__] (delete-deployment input__47307__auto__ portkey.aws/*http-client*)) ([input49637 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments/{deployment_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway.-2015-07-09/DeleteDeploymentRequest input49637)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "deployment_id" "deploymentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49636] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway.-2015-07-09/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway.-2015-07-09/not-found-exception, "BadRequestException" :portkey.aws.apigateway.-2015-07-09/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway.-2015-07-09/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49636)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49636 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49636)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49636}))))))))))
