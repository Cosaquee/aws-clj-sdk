(ns portkey.aws.cognito-sync.-2014-06-30 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credentialScope
    {"service" "cognito-sync", "region" "ap-northeast-1"},
    :sslCommonName "cognito-sync.ap-northeast-1.amazonaws.com",
    :endpoint "https://cognito-sync.ap-northeast-1.amazonaws.com"},
   "eu-west-1"
   {:credentialScope {"service" "cognito-sync", "region" "eu-west-1"},
    :sslCommonName "cognito-sync.eu-west-1.amazonaws.com",
    :endpoint "https://cognito-sync.eu-west-1.amazonaws.com"},
   "us-east-2"
   {:credentialScope {"service" "cognito-sync", "region" "us-east-2"},
    :sslCommonName "cognito-sync.us-east-2.amazonaws.com",
    :endpoint "https://cognito-sync.us-east-2.amazonaws.com"},
   "ap-southeast-2"
   {:credentialScope
    {"service" "cognito-sync", "region" "ap-southeast-2"},
    :sslCommonName "cognito-sync.ap-southeast-2.amazonaws.com",
    :endpoint "https://cognito-sync.ap-southeast-2.amazonaws.com"},
   "ap-southeast-1"
   {:credentialScope
    {"service" "cognito-sync", "region" "ap-southeast-1"},
    :sslCommonName "cognito-sync.ap-southeast-1.amazonaws.com",
    :endpoint "https://cognito-sync.ap-southeast-1.amazonaws.com"},
   "ap-northeast-2"
   {:credentialScope
    {"service" "cognito-sync", "region" "ap-northeast-2"},
    :sslCommonName "cognito-sync.ap-northeast-2.amazonaws.com",
    :endpoint "https://cognito-sync.ap-northeast-2.amazonaws.com"},
   "eu-central-1"
   {:credentialScope
    {"service" "cognito-sync", "region" "eu-central-1"},
    :sslCommonName "cognito-sync.eu-central-1.amazonaws.com",
    :endpoint "https://cognito-sync.eu-central-1.amazonaws.com"},
   "eu-west-2"
   {:credentialScope {"service" "cognito-sync", "region" "eu-west-2"},
    :sslCommonName "cognito-sync.eu-west-2.amazonaws.com",
    :endpoint "https://cognito-sync.eu-west-2.amazonaws.com"},
   "us-west-2"
   {:credentialScope {"service" "cognito-sync", "region" "us-west-2"},
    :sslCommonName "cognito-sync.us-west-2.amazonaws.com",
    :endpoint "https://cognito-sync.us-west-2.amazonaws.com"},
   "us-east-1"
   {:credentialScope {"service" "cognito-sync", "region" "us-east-1"},
    :sslCommonName "cognito-sync.us-east-1.amazonaws.com",
    :endpoint "https://cognito-sync.us-east-1.amazonaws.com"},
   "ap-south-1"
   {:credentialScope {"service" "cognito-sync", "region" "ap-south-1"},
    :sslCommonName "cognito-sync.ap-south-1.amazonaws.com",
    :endpoint "https://cognito-sync.ap-south-1.amazonaws.com"}})

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.register-device-request/token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/push-token))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/register-device-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/Platform :portkey.aws.cognito-sync.-2014-06-30.register-device-request/Token] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/record-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44498__auto__] (clojure.core/<= 1 (clojure.core/count s__44498__auto__))) (clojure.core/fn [s__44499__auto__] (clojure.core/< (clojure.core/count s__44499__auto__) 1024))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.duplicate-request-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/duplicate-request-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.duplicate-request-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/stream-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44498__auto__] (clojure.core/<= 1 (clojure.core/count s__44498__auto__))) (clojure.core/fn [s__44499__auto__] (clojure.core/< (clojure.core/count s__44499__auto__) 128))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.dataset/creation-date (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.dataset/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.dataset/last-modified-by (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.dataset/data-storage (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.dataset/num-records (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/dataset (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/DatasetName :portkey.aws.cognito-sync.-2014-06-30.dataset/CreationDate :portkey.aws.cognito-sync.-2014-06-30.dataset/LastModifiedDate :portkey.aws.cognito-sync.-2014-06-30.dataset/LastModifiedBy :portkey.aws.cognito-sync.-2014-06-30.dataset/DataStorage :portkey.aws.cognito-sync.-2014-06-30.dataset/NumRecords]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/assume-role-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44498__auto__] (clojure.core/<= 20 (clojure.core/count s__44498__auto__))) (clojure.core/fn [s__44499__auto__] (clojure.core/< (clojure.core/count s__44499__auto__) 2048)) (clojure.core/fn [s__44500__auto__] (clojure.core/re-matches #"arn:aws:iam::\d+:role/.*" s__44500__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/platform (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"APNS" "APNS", :apns "APNS", "APNS_SANDBOX" "APNS_SANDBOX", :apns-sandbox "APNS_SANDBOX", "GCM" "GCM", :gcm "GCM", "ADM" "ADM", :adm "ADM"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/merged-dataset-name-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync.-2014-06-30/string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/describe-identity-pool-usage-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolUsage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.push-sync/application-arns (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/application-arn-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.push-sync/role-arn (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/assume-role-arn))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/push-sync (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.push-sync/ApplicationArns :portkey.aws.cognito-sync.-2014-06-30.push-sync/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/describe-identity-usage-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityUsage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/subscribe-to-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/DatasetName :portkey.aws.cognito-sync.-2014-06-30/DeviceId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/unsubscribe-from-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/application-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44500__auto__] (clojure.core/re-matches #"arn:aws:sns:[-0-9a-z]+:\d+:app/[A-Z_]+/[a-zA-Z0-9_.-]+" s__44500__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/sync-session-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/dataset-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44498__auto__] (clojure.core/<= 1 (clojure.core/count s__44498__auto__))) (clojure.core/fn [s__44499__auto__] (clojure.core/< (clojure.core/count s__44499__auto__) 128)) (clojure.core/fn [s__44500__auto__] (clojure.core/re-matches #"[a-zA-Z0-9_.:-]+" s__44500__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/describe-identity-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/set-cognito-events-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/Events] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/set-identity-pool-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/PushSync :portkey.aws.cognito-sync.-2014-06-30/CognitoStreams]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/get-identity-pool-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/set-identity-pool-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/PushSync :portkey.aws.cognito-sync.-2014-06-30/CognitoStreams]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.update-records-request/record-patches (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/record-patch-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/update-records-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/DatasetName :portkey.aws.cognito-sync.-2014-06-30/SyncSessionToken] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/DeviceId :portkey.aws.cognito-sync.-2014-06-30.update-records-request/RecordPatches :portkey.aws.cognito-sync.-2014-06-30/ClientContext]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record-patch/op (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/operation))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record-patch/key (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/record-key))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record-patch/value (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/record-value))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record-patch/sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record-patch/device-last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/record-patch (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.record-patch/Op :portkey.aws.cognito-sync.-2014-06-30.record-patch/Key :portkey.aws.cognito-sync.-2014-06-30.record-patch/SyncCount] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.record-patch/Value :portkey.aws.cognito-sync.-2014-06-30.record-patch/DeviceLastModifiedDate]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-request/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-request/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer-string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/list-identity-pool-usage-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-request/NextToken :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.cognito-streams/role-arn (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/assume-role-arn))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/cognito-streams (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/StreamName :portkey.aws.cognito-sync.-2014-06-30.cognito-streams/RoleArn :portkey.aws.cognito-sync.-2014-06-30/StreamingStatus]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/cognito-event-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/push-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/application-arn-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync.-2014-06-30/application-arn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/get-cognito-events-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.limit-exceeded-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.already-streamed-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/already-streamed-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.already-streamed-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.not-authorized-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.not-authorized-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/operation (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"replace" "replace", :replace "replace", "remove" "remove", :remove "remove"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/identity-pool-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44498__auto__] (clojure.core/<= 1 (clojure.core/count s__44498__auto__))) (clojure.core/fn [s__44499__auto__] (clojure.core/< (clojure.core/count s__44499__auto__) 55)) (clojure.core/fn [s__44500__auto__] (clojure.core/re-matches #"[\w-]+:[0-9a-f-]+" s__44500__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/events (clojure.spec.alpha/map-of :portkey.aws.cognito-sync.-2014-06-30/cognito-event-type :portkey.aws.cognito-sync.-2014-06-30/lambda-function-arn))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/describe-identity-pool-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.update-records-response/records (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/record-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/update-records-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.update-records-response/Records]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/delete-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/Dataset]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/bulk-publish-status (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"NOT_STARTED" "NOT_STARTED", :not-started "NOT_STARTED", "IN_PROGRESS" "IN_PROGRESS", :in-progress "IN_PROGRESS", "FAILED" "FAILED", :failed "FAILED", "SUCCEEDED" "SUCCEEDED", :succeeded "SUCCEEDED"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/identity-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44498__auto__] (clojure.core/<= 1 (clojure.core/count s__44498__auto__))) (clojure.core/fn [s__44499__auto__] (clojure.core/< (clojure.core/count s__44499__auto__) 55)) (clojure.core/fn [s__44500__auto__] (clojure.core/re-matches #"[\w-]+:[0-9a-f-]+" s__44500__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.get-bulk-publish-details-response/bulk-publish-start-time (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.get-bulk-publish-details-response/bulk-publish-complete-time (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.get-bulk-publish-details-response/failure-message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/get-bulk-publish-details-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30.get-bulk-publish-details-response/BulkPublishStartTime :portkey.aws.cognito-sync.-2014-06-30.get-bulk-publish-details-response/BulkPublishCompleteTime :portkey.aws.cognito-sync.-2014-06-30/BulkPublishStatus :portkey.aws.cognito-sync.-2014-06-30.get-bulk-publish-details-response/FailureMessage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.too-many-requests-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.internal-error-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.internal-error-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/integer-string (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-datasets-request/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-datasets-request/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer-string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/list-datasets-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.list-datasets-request/NextToken :portkey.aws.cognito-sync.-2014-06-30.list-datasets-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.resource-not-found-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/client-context (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/streaming-status (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"ENABLED" "ENABLED", :enabled "ENABLED", "DISABLED" "DISABLED", :disabled "DISABLED"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/get-cognito-events-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/Events]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/delete-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/DatasetName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/lambda-function-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/exception-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/describe-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/DatasetName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.lambda-throttled-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/lambda-throttled-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.lambda-throttled-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/describe-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/Dataset]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/record-patch-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync.-2014-06-30/record-patch :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/bulk-publish-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record/key (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/record-key))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record/value (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/record-value))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record/sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record/last-modified-by (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record/device-last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/record (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.record/Key :portkey.aws.cognito-sync.-2014-06-30.record/Value :portkey.aws.cognito-sync.-2014-06-30.record/SyncCount :portkey.aws.cognito-sync.-2014-06-30.record/LastModifiedDate :portkey.aws.cognito-sync.-2014-06-30.record/LastModifiedBy :portkey.aws.cognito-sync.-2014-06-30.record/DeviceLastModifiedDate]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/record-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync.-2014-06-30/record :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.resource-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/resource-conflict-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.resource-conflict-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/device-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44498__auto__] (clojure.core/<= 1 (clojure.core/count s__44498__auto__))) (clojure.core/fn [s__44499__auto__] (clojure.core/< (clojure.core/count s__44499__auto__) 256))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/identity-pool-usage-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync.-2014-06-30/identity-pool-usage :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.invalid-lambda-function-output-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/invalid-lambda-function-output-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.invalid-lambda-function-output-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/get-identity-pool-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/PushSync :portkey.aws.cognito-sync.-2014-06-30/CognitoStreams]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/sync-session-token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/dataset-sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/dataset-exists (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/boolean))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/dataset-deleted-after-requested-sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/boolean))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/merged-dataset-names (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/merged-dataset-name-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/records (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/record-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/last-modified-by (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/list-records-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.list-records-response/SyncSessionToken :portkey.aws.cognito-sync.-2014-06-30.list-records-response/DatasetSyncCount :portkey.aws.cognito-sync.-2014-06-30.list-records-response/Count :portkey.aws.cognito-sync.-2014-06-30.list-records-response/NextToken :portkey.aws.cognito-sync.-2014-06-30.list-records-response/DatasetExists :portkey.aws.cognito-sync.-2014-06-30.list-records-response/DatasetDeletedAfterRequestedSyncCount :portkey.aws.cognito-sync.-2014-06-30.list-records-response/MergedDatasetNames :portkey.aws.cognito-sync.-2014-06-30.list-records-response/Records :portkey.aws.cognito-sync.-2014-06-30.list-records-response/LastModifiedBy]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/subscribe-to-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/record-value (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44499__auto__] (clojure.core/< (clojure.core/count s__44499__auto__) 1048575))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/bulk-publish-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/unsubscribe-from-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/DatasetName :portkey.aws.cognito-sync.-2014-06-30/DeviceId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.concurrent-modification-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/concurrent-modification-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.concurrent-modification-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/dataset-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync.-2014-06-30/dataset :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/identity-pool-usages (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/identity-pool-usage-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/list-identity-pool-usage-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/IdentityPoolUsages :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/MaxResults :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/Count :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.identity-pool-usage/sync-sessions-count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.identity-pool-usage/data-storage (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.identity-pool-usage/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/identity-pool-usage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30.identity-pool-usage/SyncSessionsCount :portkey.aws.cognito-sync.-2014-06-30.identity-pool-usage/DataStorage :portkey.aws.cognito-sync.-2014-06-30.identity-pool-usage/LastModifiedDate]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-request/last-sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-request/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-request/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer-string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/list-records-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/DatasetName] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.list-records-request/LastSyncCount :portkey.aws.cognito-sync.-2014-06-30.list-records-request/NextToken :portkey.aws.cognito-sync.-2014-06-30.list-records-request/MaxResults :portkey.aws.cognito-sync.-2014-06-30/SyncSessionToken]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.invalid-parameter-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.invalid-parameter-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/register-device-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/DeviceId]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.identity-usage/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.identity-usage/dataset-count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.identity-usage/data-storage (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/identity-usage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30.identity-usage/LastModifiedDate :portkey.aws.cognito-sync.-2014-06-30.identity-usage/DatasetCount :portkey.aws.cognito-sync.-2014-06-30.identity-usage/DataStorage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-datasets-response/datasets (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/dataset-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-datasets-response/count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-datasets-response/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/list-datasets-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.list-datasets-response/Datasets :portkey.aws.cognito-sync.-2014-06-30.list-datasets-response/Count :portkey.aws.cognito-sync.-2014-06-30.list-datasets-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.invalid-configuration-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/invalid-configuration-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.invalid-configuration-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/get-bulk-publish-details-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/boolean clojure.core/boolean?)

(clojure.core/defn list-records ([input__47307__auto__] (list-records input__47307__auto__ portkey.aws/*http-client*)) ([input49673 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/ListRecordsRequest input49673)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {"lastSyncCount" "LastSyncCount", "nextToken" "NextToken", "maxResults" "MaxResults", "syncSessionToken" "SyncSessionToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49672] (clojure.core/let [errors__47310__auto__ {"InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception}] (if (clojure.core/= 200 (:status response49672)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/list-records-response (:body response49672)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49672 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49672)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49672}))))))))))

(clojure.core/defn describe-dataset ([input__47307__auto__] (describe-dataset input__47307__auto__ portkey.aws/*http-client*)) ([input49675 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/DescribeDatasetRequest input49675)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49674] (clojure.core/let [errors__47310__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49674)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/describe-dataset-response (:body response49674)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49674 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49674)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49674}))))))))))

(clojure.core/defn get-bulk-publish-details ([input__47307__auto__] (get-bulk-publish-details input__47307__auto__ portkey.aws/*http-client*)) ([input49677 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/getBulkPublishDetails"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/GetBulkPublishDetailsRequest input49677)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49676] (clojure.core/let [errors__47310__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception}] (if (clojure.core/= 200 (:status response49676)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/get-bulk-publish-details-response (:body response49676)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49676 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49676)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49676}))))))))))

(clojure.core/defn describe-identity-usage ([input__47307__auto__] (describe-identity-usage input__47307__auto__ portkey.aws/*http-client*)) ([input49679 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/DescribeIdentityUsageRequest input49679)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49678] (clojure.core/let [errors__47310__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49678)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/describe-identity-usage-response (:body response49678)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49678 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49678)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49678}))))))))))

(clojure.core/defn get-cognito-events ([input__47307__auto__] (get-cognito-events input__47307__auto__ portkey.aws/*http-client*)) ([input49681 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/events"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/GetCognitoEventsRequest input49681)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49680] (clojure.core/let [errors__47310__auto__ {"InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49680)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/get-cognito-events-response (:body response49680)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49680 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49680)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49680}))))))))))

(clojure.core/defn list-datasets ([input__47307__auto__] (list-datasets input__47307__auto__ portkey.aws/*http-client*)) ([input49683 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/ListDatasetsRequest input49683)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId"}) (portkey.awsgen/params-to-querystring {"nextToken" "NextToken", "maxResults" "MaxResults"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49682] (clojure.core/let [errors__47310__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49682)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/list-datasets-response (:body response49682)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49682 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49682)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49682}))))))))))

(clojure.core/defn list-identity-pool-usage ([input__47307__auto__] (list-identity-pool-usage input__47307__auto__ portkey.aws/*http-client*)) ([input49685 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/ListIdentityPoolUsageRequest input49685)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"nextToken" "NextToken", "maxResults" "MaxResults"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49684] (clojure.core/let [errors__47310__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49684)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/list-identity-pool-usage-response (:body response49684)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49684 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49684)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49684}))))))))))

(clojure.core/defn describe-identity-pool-usage ([input__47307__auto__] (describe-identity-pool-usage input__47307__auto__ portkey.aws/*http-client*)) ([input49687 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/DescribeIdentityPoolUsageRequest input49687)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49686] (clojure.core/let [errors__47310__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49686)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/describe-identity-pool-usage-response (:body response49686)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49686 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49686)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49686}))))))))))

(clojure.core/defn unsubscribe-from-dataset ([input__47307__auto__] (unsubscribe-from-dataset input__47307__auto__ portkey.aws/*http-client*)) ([input49689 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/UnsubscribeFromDatasetRequest input49689)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName", "DeviceId" "DeviceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49688] (clojure.core/let [errors__47310__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "InvalidConfigurationException" :portkey.aws.cognito-sync.-2014-06-30/invalid-configuration-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49688)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/unsubscribe-from-dataset-response (:body response49688)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49688 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49688)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49688}))))))))))

(clojure.core/defn subscribe-to-dataset ([input__47307__auto__] (subscribe-to-dataset input__47307__auto__ portkey.aws/*http-client*)) ([input49691 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/SubscribeToDatasetRequest input49691)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName", "DeviceId" "DeviceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49690] (clojure.core/let [errors__47310__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "InvalidConfigurationException" :portkey.aws.cognito-sync.-2014-06-30/invalid-configuration-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49690)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/subscribe-to-dataset-response (:body response49690)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49690 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49690)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49690}))))))))))

(clojure.core/defn get-identity-pool-configuration ([input__47307__auto__] (get-identity-pool-configuration input__47307__auto__ portkey.aws/*http-client*)) ([input49693 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/configuration"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/GetIdentityPoolConfigurationRequest input49693)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49692] (clojure.core/let [errors__47310__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49692)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/get-identity-pool-configuration-response (:body response49692)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49692 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49692)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49692}))))))))))

(clojure.core/defn set-cognito-events ([input__47307__auto__] (set-cognito-events input__47307__auto__ portkey.aws/*http-client*)) ([input49695 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/events"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/SetCognitoEventsRequest input49695)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49694] (clojure.core/let [errors__47310__auto__ {"InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49694)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49694 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49694)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49694}))))))))))

(clojure.core/defn set-identity-pool-configuration ([input__47307__auto__] (set-identity-pool-configuration input__47307__auto__ portkey.aws/*http-client*)) ([input49697 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/configuration"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/SetIdentityPoolConfigurationRequest input49697)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49696] (clojure.core/let [errors__47310__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception, "ConcurrentModificationException" :portkey.aws.cognito-sync.-2014-06-30/concurrent-modification-exception}] (if (clojure.core/= 200 (:status response49696)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/set-identity-pool-configuration-response (:body response49696)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49696 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49696)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49696}))))))))))

(clojure.core/defn register-device ([input__47307__auto__] (register-device input__47307__auto__ portkey.aws/*http-client*)) ([input49699 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identity/{IdentityId}/device"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/RegisterDeviceRequest input49699)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49698] (clojure.core/let [errors__47310__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "InvalidConfigurationException" :portkey.aws.cognito-sync.-2014-06-30/invalid-configuration-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49698)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/register-device-response (:body response49698)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49698 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49698)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49698}))))))))))

(clojure.core/defn update-records ([input__47307__auto__] (update-records input__47307__auto__ portkey.aws/*http-client*)) ([input49701 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/UpdateRecordsRequest input49701)} (portkey.awsgen/params-to-header {"ClientContext" ["x-amz-Client-Context" nil]}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49700] (clojure.core/let [errors__47310__auto__ {"LimitExceededException" :portkey.aws.cognito-sync.-2014-06-30/limit-exceeded-exception, "NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "LambdaThrottledException" :portkey.aws.cognito-sync.-2014-06-30/lambda-throttled-exception, "ResourceConflictException" :portkey.aws.cognito-sync.-2014-06-30/resource-conflict-exception, "InvalidLambdaFunctionOutputException" :portkey.aws.cognito-sync.-2014-06-30/invalid-lambda-function-output-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception}] (if (clojure.core/= 200 (:status response49700)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/update-records-response (:body response49700)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49700 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49700)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49700}))))))))))

(clojure.core/defn delete-dataset ([input__47307__auto__] (delete-dataset input__47307__auto__ portkey.aws/*http-client*)) ([input49703 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/DeleteDatasetRequest input49703)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49702] (clojure.core/let [errors__47310__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception, "ResourceConflictException" :portkey.aws.cognito-sync.-2014-06-30/resource-conflict-exception}] (if (clojure.core/= 200 (:status response49702)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/delete-dataset-response (:body response49702)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49702 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49702)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49702}))))))))))

(clojure.core/defn bulk-publish ([input__47307__auto__] (bulk-publish input__47307__auto__ portkey.aws/*http-client*)) ([input49705 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/bulkpublish"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/BulkPublishRequest input49705)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49704] (clojure.core/let [errors__47310__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "DuplicateRequestException" :portkey.aws.cognito-sync.-2014-06-30/duplicate-request-exception, "AlreadyStreamedException" :portkey.aws.cognito-sync.-2014-06-30/already-streamed-exception}] (if (clojure.core/= 200 (:status response49704)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/bulk-publish-response (:body response49704)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49704 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49704)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49704}))))))))))
