(ns portkey.aws.cognito-sync.-2014-06-30 (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.register-device-request/token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/push-token))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/register-device-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/Platform :portkey.aws.cognito-sync.-2014-06-30.register-device-request/Token] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/record-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 1024))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.duplicate-request-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/duplicate-request-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.duplicate-request-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/stream-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.dataset/creation-date (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.dataset/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.dataset/last-modified-by (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.dataset/data-storage (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.dataset/num-records (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/dataset (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/DatasetName :portkey.aws.cognito-sync.-2014-06-30.dataset/CreationDate :portkey.aws.cognito-sync.-2014-06-30.dataset/LastModifiedDate :portkey.aws.cognito-sync.-2014-06-30.dataset/LastModifiedBy :portkey.aws.cognito-sync.-2014-06-30.dataset/DataStorage :portkey.aws.cognito-sync.-2014-06-30.dataset/NumRecords]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/assume-role-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 20 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 2048)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"arn:aws:iam::\d+:role/.*" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/platform (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"APNS" "APNS", :apns "APNS", "APNS_SANDBOX" "APNS_SANDBOX", :apns-sandbox "APNS_SANDBOX", "GCM" "GCM", :gcm "GCM", "ADM" "ADM", :adm "ADM"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/merged-dataset-name-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync.-2014-06-30/string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/describe-identity-pool-usage-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolUsage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.push-sync/application-arns (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/application-arn-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.push-sync/role-arn (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/assume-role-arn))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/push-sync (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.push-sync/ApplicationArns :portkey.aws.cognito-sync.-2014-06-30.push-sync/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/describe-identity-usage-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityUsage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/subscribe-to-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/DatasetName :portkey.aws.cognito-sync.-2014-06-30/DeviceId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/unsubscribe-from-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/application-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"arn:aws:sns:[-0-9a-z]+:\d+:app/[A-Z_]+/[a-zA-Z0-9_.-]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/sync-session-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/dataset-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[a-zA-Z0-9_.:-]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/describe-identity-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/set-cognito-events-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/Events] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/set-identity-pool-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/PushSync :portkey.aws.cognito-sync.-2014-06-30/CognitoStreams]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/get-identity-pool-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/set-identity-pool-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/PushSync :portkey.aws.cognito-sync.-2014-06-30/CognitoStreams]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.update-records-request/record-patches (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/record-patch-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/update-records-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/DatasetName :portkey.aws.cognito-sync.-2014-06-30/SyncSessionToken] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/DeviceId :portkey.aws.cognito-sync.-2014-06-30.update-records-request/RecordPatches :portkey.aws.cognito-sync.-2014-06-30/ClientContext]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record-patch/op (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/operation))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record-patch/key (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/record-key))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record-patch/value (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/record-value))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record-patch/sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record-patch/device-last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/record-patch (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.record-patch/Op :portkey.aws.cognito-sync.-2014-06-30.record-patch/Key :portkey.aws.cognito-sync.-2014-06-30.record-patch/SyncCount] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.record-patch/Value :portkey.aws.cognito-sync.-2014-06-30.record-patch/DeviceLastModifiedDate]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-request/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-request/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer-string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/list-identity-pool-usage-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-request/NextToken :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.cognito-streams/role-arn (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/assume-role-arn))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/cognito-streams (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/StreamName :portkey.aws.cognito-sync.-2014-06-30.cognito-streams/RoleArn :portkey.aws.cognito-sync.-2014-06-30/StreamingStatus]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/cognito-event-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/push-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/application-arn-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync.-2014-06-30/application-arn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/get-cognito-events-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.limit-exceeded-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.already-streamed-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/already-streamed-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.already-streamed-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.not-authorized-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.not-authorized-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/operation (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"replace" "replace", :replace "replace", "remove" "remove", :remove "remove"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/identity-pool-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 55)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\w-]+:[0-9a-f-]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/events (clojure.spec.alpha/map-of :portkey.aws.cognito-sync.-2014-06-30/cognito-event-type :portkey.aws.cognito-sync.-2014-06-30/lambda-function-arn))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/describe-identity-pool-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.update-records-response/records (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/record-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/update-records-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.update-records-response/Records]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/delete-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/Dataset]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/bulk-publish-status (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"NOT_STARTED" "NOT_STARTED", :not-started "NOT_STARTED", "IN_PROGRESS" "IN_PROGRESS", :in-progress "IN_PROGRESS", "FAILED" "FAILED", :failed "FAILED", "SUCCEEDED" "SUCCEEDED", :succeeded "SUCCEEDED"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/identity-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 55)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\w-]+:[0-9a-f-]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.get-bulk-publish-details-response/bulk-publish-start-time (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.get-bulk-publish-details-response/bulk-publish-complete-time (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.get-bulk-publish-details-response/failure-message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/get-bulk-publish-details-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30.get-bulk-publish-details-response/BulkPublishStartTime :portkey.aws.cognito-sync.-2014-06-30.get-bulk-publish-details-response/BulkPublishCompleteTime :portkey.aws.cognito-sync.-2014-06-30/BulkPublishStatus :portkey.aws.cognito-sync.-2014-06-30.get-bulk-publish-details-response/FailureMessage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.too-many-requests-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.internal-error-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.internal-error-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/integer-string (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-datasets-request/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-datasets-request/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer-string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/list-datasets-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.list-datasets-request/NextToken :portkey.aws.cognito-sync.-2014-06-30.list-datasets-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.resource-not-found-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/client-context (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/streaming-status (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ENABLED" "ENABLED", :enabled "ENABLED", "DISABLED" "DISABLED", :disabled "DISABLED"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/get-cognito-events-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/Events]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/delete-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/DatasetName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/lambda-function-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/exception-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/describe-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/DatasetName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.lambda-throttled-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/lambda-throttled-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.lambda-throttled-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/describe-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/Dataset]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/record-patch-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync.-2014-06-30/record-patch :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/bulk-publish-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record/key (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/record-key))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record/value (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/record-value))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record/sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record/last-modified-by (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.record/device-last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/record (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.record/Key :portkey.aws.cognito-sync.-2014-06-30.record/Value :portkey.aws.cognito-sync.-2014-06-30.record/SyncCount :portkey.aws.cognito-sync.-2014-06-30.record/LastModifiedDate :portkey.aws.cognito-sync.-2014-06-30.record/LastModifiedBy :portkey.aws.cognito-sync.-2014-06-30.record/DeviceLastModifiedDate]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/record-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync.-2014-06-30/record :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.resource-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/resource-conflict-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.resource-conflict-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/device-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 256))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/identity-pool-usage-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync.-2014-06-30/identity-pool-usage :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.invalid-lambda-function-output-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/invalid-lambda-function-output-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.invalid-lambda-function-output-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/get-identity-pool-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/PushSync :portkey.aws.cognito-sync.-2014-06-30/CognitoStreams]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/sync-session-token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/dataset-sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/dataset-exists (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/boolean))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/dataset-deleted-after-requested-sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/boolean))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/merged-dataset-names (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/merged-dataset-name-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/records (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/record-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-response/last-modified-by (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/list-records-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.list-records-response/SyncSessionToken :portkey.aws.cognito-sync.-2014-06-30.list-records-response/DatasetSyncCount :portkey.aws.cognito-sync.-2014-06-30.list-records-response/Count :portkey.aws.cognito-sync.-2014-06-30.list-records-response/NextToken :portkey.aws.cognito-sync.-2014-06-30.list-records-response/DatasetExists :portkey.aws.cognito-sync.-2014-06-30.list-records-response/DatasetDeletedAfterRequestedSyncCount :portkey.aws.cognito-sync.-2014-06-30.list-records-response/MergedDatasetNames :portkey.aws.cognito-sync.-2014-06-30.list-records-response/Records :portkey.aws.cognito-sync.-2014-06-30.list-records-response/LastModifiedBy]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/subscribe-to-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/record-value (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 1048575))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/bulk-publish-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/unsubscribe-from-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/DatasetName :portkey.aws.cognito-sync.-2014-06-30/DeviceId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.concurrent-modification-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/concurrent-modification-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.concurrent-modification-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/dataset-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync.-2014-06-30/dataset :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/identity-pool-usages (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/identity-pool-usage-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/list-identity-pool-usage-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/IdentityPoolUsages :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/MaxResults :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/Count :portkey.aws.cognito-sync.-2014-06-30.list-identity-pool-usage-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.identity-pool-usage/sync-sessions-count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.identity-pool-usage/data-storage (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.identity-pool-usage/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/identity-pool-usage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30.identity-pool-usage/SyncSessionsCount :portkey.aws.cognito-sync.-2014-06-30.identity-pool-usage/DataStorage :portkey.aws.cognito-sync.-2014-06-30.identity-pool-usage/LastModifiedDate]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-request/last-sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-request/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-records-request/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer-string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/list-records-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/DatasetName] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.list-records-request/LastSyncCount :portkey.aws.cognito-sync.-2014-06-30.list-records-request/NextToken :portkey.aws.cognito-sync.-2014-06-30.list-records-request/MaxResults :portkey.aws.cognito-sync.-2014-06-30/SyncSessionToken]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.invalid-parameter-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.invalid-parameter-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/register-device-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/DeviceId]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.identity-usage/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.identity-usage/dataset-count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.identity-usage/data-storage (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/identity-usage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityId :portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId :portkey.aws.cognito-sync.-2014-06-30.identity-usage/LastModifiedDate :portkey.aws.cognito-sync.-2014-06-30.identity-usage/DatasetCount :portkey.aws.cognito-sync.-2014-06-30.identity-usage/DataStorage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-datasets-response/datasets (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/dataset-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-datasets-response/count (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.list-datasets-response/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/list-datasets-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.-2014-06-30.list-datasets-response/Datasets :portkey.aws.cognito-sync.-2014-06-30.list-datasets-response/Count :portkey.aws.cognito-sync.-2014-06-30.list-datasets-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30.invalid-configuration-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync.-2014-06-30/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/invalid-configuration-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30.invalid-configuration-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/get-bulk-publish-details-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.-2014-06-30/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.-2014-06-30/boolean clojure.core/boolean?)

(clojure.core/defn list-records ([input__36693__auto__] (list-records input__36693__auto__ portkey.aws/*http-client*)) ([input39235 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/ListRecordsRequest input39235)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {"lastSyncCount" "LastSyncCount", "nextToken" "NextToken", "maxResults" "MaxResults", "syncSessionToken" "SyncSessionToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records", :body body__36697__auto__} (clojure.core/fn [response39234] (clojure.core/let [errors__36698__auto__ {"InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception}] (if (clojure.core/= 200 (:status response39234)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/list-records-response (:body response39234)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39234 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39234)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39234}))))))))))

(clojure.core/defn describe-dataset ([input__36693__auto__] (describe-dataset input__36693__auto__ portkey.aws/*http-client*)) ([input39237 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/DescribeDatasetRequest input39237)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}", :body body__36697__auto__} (clojure.core/fn [response39236] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39236)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/describe-dataset-response (:body response39236)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39236 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39236)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39236}))))))))))

(clojure.core/defn get-bulk-publish-details ([input__36693__auto__] (get-bulk-publish-details input__36693__auto__ portkey.aws/*http-client*)) ([input39239 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/getBulkPublishDetails", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/GetBulkPublishDetailsRequest input39239)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/getBulkPublishDetails", :body body__36697__auto__} (clojure.core/fn [response39238] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception}] (if (clojure.core/= 200 (:status response39238)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/get-bulk-publish-details-response (:body response39238)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39238 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39238)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39238}))))))))))

(clojure.core/defn describe-identity-usage ([input__36693__auto__] (describe-identity-usage input__36693__auto__ portkey.aws/*http-client*)) ([input39241 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/DescribeIdentityUsageRequest input39241)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}", :body body__36697__auto__} (clojure.core/fn [response39240] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39240)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/describe-identity-usage-response (:body response39240)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39240 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39240)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39240}))))))))))

(clojure.core/defn get-cognito-events ([input__36693__auto__] (get-cognito-events input__36693__auto__ portkey.aws/*http-client*)) ([input39243 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/events", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/GetCognitoEventsRequest input39243)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/events", :body body__36697__auto__} (clojure.core/fn [response39242] (clojure.core/let [errors__36698__auto__ {"InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39242)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/get-cognito-events-response (:body response39242)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39242 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39242)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39242}))))))))))

(clojure.core/defn list-datasets ([input__36693__auto__] (list-datasets input__36693__auto__ portkey.aws/*http-client*)) ([input39245 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/ListDatasetsRequest input39245)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId"}) (portkey.awsgen/params-to-querystring {"nextToken" "NextToken", "maxResults" "MaxResults"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets", :body body__36697__auto__} (clojure.core/fn [response39244] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39244)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/list-datasets-response (:body response39244)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39244 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39244)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39244}))))))))))

(clojure.core/defn list-identity-pool-usage ([input__36693__auto__] (list-identity-pool-usage input__36693__auto__ portkey.aws/*http-client*)) ([input39247 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/ListIdentityPoolUsageRequest input39247)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"nextToken" "NextToken", "maxResults" "MaxResults"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools", :body body__36697__auto__} (clojure.core/fn [response39246] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39246)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/list-identity-pool-usage-response (:body response39246)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39246 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39246)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39246}))))))))))

(clojure.core/defn describe-identity-pool-usage ([input__36693__auto__] (describe-identity-pool-usage input__36693__auto__ portkey.aws/*http-client*)) ([input39249 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/DescribeIdentityPoolUsageRequest input39249)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}", :body body__36697__auto__} (clojure.core/fn [response39248] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39248)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/describe-identity-pool-usage-response (:body response39248)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39248 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39248)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39248}))))))))))

(clojure.core/defn unsubscribe-from-dataset ([input__36693__auto__] (unsubscribe-from-dataset input__36693__auto__ portkey.aws/*http-client*)) ([input39251 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/UnsubscribeFromDatasetRequest input39251)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName", "DeviceId" "DeviceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}", :body body__36697__auto__} (clojure.core/fn [response39250] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "InvalidConfigurationException" :portkey.aws.cognito-sync.-2014-06-30/invalid-configuration-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39250)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/unsubscribe-from-dataset-response (:body response39250)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39250 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39250)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39250}))))))))))

(clojure.core/defn subscribe-to-dataset ([input__36693__auto__] (subscribe-to-dataset input__36693__auto__ portkey.aws/*http-client*)) ([input39253 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/SubscribeToDatasetRequest input39253)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName", "DeviceId" "DeviceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}", :body body__36697__auto__} (clojure.core/fn [response39252] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "InvalidConfigurationException" :portkey.aws.cognito-sync.-2014-06-30/invalid-configuration-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39252)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/subscribe-to-dataset-response (:body response39252)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39252 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39252)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39252}))))))))))

(clojure.core/defn get-identity-pool-configuration ([input__36693__auto__] (get-identity-pool-configuration input__36693__auto__ portkey.aws/*http-client*)) ([input39255 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/configuration", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/GetIdentityPoolConfigurationRequest input39255)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/configuration", :body body__36697__auto__} (clojure.core/fn [response39254] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39254)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/get-identity-pool-configuration-response (:body response39254)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39254 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39254)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39254}))))))))))

(clojure.core/defn set-cognito-events ([input__36693__auto__] (set-cognito-events input__36693__auto__ portkey.aws/*http-client*)) ([input39257 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/events", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/SetCognitoEventsRequest input39257)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/events", :body body__36697__auto__} (clojure.core/fn [response39256] (clojure.core/let [errors__36698__auto__ {"InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39256)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39256 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39256)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39256}))))))))))

(clojure.core/defn set-identity-pool-configuration ([input__36693__auto__] (set-identity-pool-configuration input__36693__auto__ portkey.aws/*http-client*)) ([input39259 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/configuration", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/SetIdentityPoolConfigurationRequest input39259)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/configuration", :body body__36697__auto__} (clojure.core/fn [response39258] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception, "ConcurrentModificationException" :portkey.aws.cognito-sync.-2014-06-30/concurrent-modification-exception}] (if (clojure.core/= 200 (:status response39258)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/set-identity-pool-configuration-response (:body response39258)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39258 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39258)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39258}))))))))))

(clojure.core/defn register-device ([input__36693__auto__] (register-device input__36693__auto__ portkey.aws/*http-client*)) ([input39261 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identity/{IdentityId}/device", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/RegisterDeviceRequest input39261)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identity/{IdentityId}/device", :body body__36697__auto__} (clojure.core/fn [response39260] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "InvalidConfigurationException" :portkey.aws.cognito-sync.-2014-06-30/invalid-configuration-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39260)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/register-device-response (:body response39260)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39260 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39260)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39260}))))))))))

(clojure.core/defn update-records ([input__36693__auto__] (update-records input__36693__auto__ portkey.aws/*http-client*)) ([input39263 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/UpdateRecordsRequest input39263)} (portkey.awsgen/params-to-header {"ClientContext" ["x-amz-Client-Context" nil]}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}", :body body__36697__auto__} (clojure.core/fn [response39262] (clojure.core/let [errors__36698__auto__ {"LimitExceededException" :portkey.aws.cognito-sync.-2014-06-30/limit-exceeded-exception, "NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "LambdaThrottledException" :portkey.aws.cognito-sync.-2014-06-30/lambda-throttled-exception, "ResourceConflictException" :portkey.aws.cognito-sync.-2014-06-30/resource-conflict-exception, "InvalidLambdaFunctionOutputException" :portkey.aws.cognito-sync.-2014-06-30/invalid-lambda-function-output-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception}] (if (clojure.core/= 200 (:status response39262)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/update-records-response (:body response39262)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39262 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39262)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39262}))))))))))

(clojure.core/defn delete-dataset ([input__36693__auto__] (delete-dataset input__36693__auto__ portkey.aws/*http-client*)) ([input39265 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/DeleteDatasetRequest input39265)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}", :body body__36697__auto__} (clojure.core/fn [response39264] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync.-2014-06-30/too-many-requests-exception, "ResourceConflictException" :portkey.aws.cognito-sync.-2014-06-30/resource-conflict-exception}] (if (clojure.core/= 200 (:status response39264)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/delete-dataset-response (:body response39264)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39264 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39264)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39264}))))))))))

(clojure.core/defn bulk-publish ([input__36693__auto__] (bulk-publish input__36693__auto__ portkey.aws/*http-client*)) ([input39267 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/bulkpublish", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/BulkPublishRequest input39267)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/bulkpublish", :body body__36697__auto__} (clojure.core/fn [response39266] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync.-2014-06-30/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync.-2014-06-30/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync.-2014-06-30/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync.-2014-06-30/internal-error-exception, "DuplicateRequestException" :portkey.aws.cognito-sync.-2014-06-30/duplicate-request-exception, "AlreadyStreamedException" :portkey.aws.cognito-sync.-2014-06-30/already-streamed-exception}] (if (clojure.core/= 200 (:status response39266)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync.-2014-06-30/bulk-publish-response (:body response39266)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39266 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39266)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39266}))))))))))
