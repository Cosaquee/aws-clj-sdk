(ns portkey.aws.cognito-sync (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credential-scope
    {:service "cognito-sync", :region "ap-northeast-1"},
    :ssl-common-name "cognito-sync.ap-northeast-1.amazonaws.com",
    :endpoint "https://cognito-sync.ap-northeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-1"
   {:credential-scope {:service "cognito-sync", :region "eu-west-1"},
    :ssl-common-name "cognito-sync.eu-west-1.amazonaws.com",
    :endpoint "https://cognito-sync.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "cognito-sync", :region "us-east-2"},
    :ssl-common-name "cognito-sync.us-east-2.amazonaws.com",
    :endpoint "https://cognito-sync.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "cognito-sync", :region "ap-southeast-2"},
    :ssl-common-name "cognito-sync.ap-southeast-2.amazonaws.com",
    :endpoint "https://cognito-sync.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope
    {:service "cognito-sync", :region "ap-southeast-1"},
    :ssl-common-name "cognito-sync.ap-southeast-1.amazonaws.com",
    :endpoint "https://cognito-sync.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "ap-northeast-2"
   {:credential-scope
    {:service "cognito-sync", :region "ap-northeast-2"},
    :ssl-common-name "cognito-sync.ap-northeast-2.amazonaws.com",
    :endpoint "https://cognito-sync.ap-northeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope
    {:service "cognito-sync", :region "eu-central-1"},
    :ssl-common-name "cognito-sync.eu-central-1.amazonaws.com",
    :endpoint "https://cognito-sync.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "cognito-sync", :region "eu-west-2"},
    :ssl-common-name "cognito-sync.eu-west-2.amazonaws.com",
    :endpoint "https://cognito-sync.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "cognito-sync", :region "us-west-2"},
    :ssl-common-name "cognito-sync.us-west-2.amazonaws.com",
    :endpoint "https://cognito-sync.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "cognito-sync", :region "us-east-1"},
    :ssl-common-name "cognito-sync.us-east-1.amazonaws.com",
    :endpoint "https://cognito-sync.us-east-1.amazonaws.com",
    :signature-version :v4},
   "ap-south-1"
   {:credential-scope {:service "cognito-sync", :region "ap-south-1"},
    :ssl-common-name "cognito-sync.ap-south-1.amazonaws.com",
    :endpoint "https://cognito-sync.ap-south-1.amazonaws.com",
    :signature-version :v4}})

(clojure.spec.alpha/def :portkey.aws.cognito-sync.register-device-request/token (clojure.spec.alpha/and :portkey.aws.cognito-sync/push-token))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/register-device-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/Platform :portkey.aws.cognito-sync.register-device-request/Token] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/record-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 1024))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.duplicate-request-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/duplicate-request-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.duplicate-request-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/stream-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 128))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.dataset/creation-date (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.dataset/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.dataset/last-modified-by (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.dataset/data-storage (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.dataset/num-records (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/dataset (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/DatasetName :portkey.aws.cognito-sync.dataset/CreationDate :portkey.aws.cognito-sync.dataset/LastModifiedDate :portkey.aws.cognito-sync.dataset/LastModifiedBy :portkey.aws.cognito-sync.dataset/DataStorage :portkey.aws.cognito-sync.dataset/NumRecords]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/assume-role-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 20 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 2048)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"arn:aws:iam::\d+:role/.*" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/platform (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"APNS" "APNS", :apns "APNS", "APNS_SANDBOX" "APNS_SANDBOX", :apns-sandbox "APNS_SANDBOX", "GCM" "GCM", :gcm "GCM", "ADM" "ADM", :adm "ADM"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/merged-dataset-name-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync/string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/describe-identity-pool-usage-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityPoolUsage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.push-sync/application-arns (clojure.spec.alpha/and :portkey.aws.cognito-sync/application-arn-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.push-sync/role-arn (clojure.spec.alpha/and :portkey.aws.cognito-sync/assume-role-arn))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/push-sync (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.push-sync/ApplicationArns :portkey.aws.cognito-sync.push-sync/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/describe-identity-usage-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityUsage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/subscribe-to-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/DatasetName :portkey.aws.cognito-sync/DeviceId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/unsubscribe-from-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/application-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"arn:aws:sns:[-0-9a-z]+:\d+:app/[A-Z_]+/[a-zA-Z0-9_.-]+" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/sync-session-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/dataset-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 128)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"[a-zA-Z0-9_.:-]+" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/describe-identity-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/set-cognito-events-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/Events] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/set-identity-pool-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/PushSync :portkey.aws.cognito-sync/CognitoStreams]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/get-identity-pool-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/set-identity-pool-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId] :opt-un [:portkey.aws.cognito-sync/PushSync :portkey.aws.cognito-sync/CognitoStreams]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.update-records-request/record-patches (clojure.spec.alpha/and :portkey.aws.cognito-sync/record-patch-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/update-records-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/DatasetName :portkey.aws.cognito-sync/SyncSessionToken] :opt-un [:portkey.aws.cognito-sync/DeviceId :portkey.aws.cognito-sync.update-records-request/RecordPatches :portkey.aws.cognito-sync/ClientContext]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.record-patch/op (clojure.spec.alpha/and :portkey.aws.cognito-sync/operation))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record-patch/key (clojure.spec.alpha/and :portkey.aws.cognito-sync/record-key))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record-patch/value (clojure.spec.alpha/and :portkey.aws.cognito-sync/record-value))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record-patch/sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record-patch/device-last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/record-patch (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.record-patch/Op :portkey.aws.cognito-sync.record-patch/Key :portkey.aws.cognito-sync.record-patch/SyncCount] :opt-un [:portkey.aws.cognito-sync.record-patch/Value :portkey.aws.cognito-sync.record-patch/DeviceLastModifiedDate]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-identity-pool-usage-request/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-identity-pool-usage-request/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer-string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/list-identity-pool-usage-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.list-identity-pool-usage-request/NextToken :portkey.aws.cognito-sync.list-identity-pool-usage-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.cognito-streams/role-arn (clojure.spec.alpha/and :portkey.aws.cognito-sync/assume-role-arn))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/cognito-streams (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/StreamName :portkey.aws.cognito-sync.cognito-streams/RoleArn :portkey.aws.cognito-sync/StreamingStatus]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/cognito-event-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/push-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/application-arn-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync/application-arn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/get-cognito-events-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.limit-exceeded-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.already-streamed-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/already-streamed-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.already-streamed-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.not-authorized-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/not-authorized-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.not-authorized-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/operation (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"replace" "replace", :replace "replace", "remove" "remove", :remove "remove"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/identity-pool-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 55)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"[\w-]+:[0-9a-f-]+" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/events (clojure.spec.alpha/map-of :portkey.aws.cognito-sync/cognito-event-type :portkey.aws.cognito-sync/lambda-function-arn))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/describe-identity-pool-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.update-records-response/records (clojure.spec.alpha/and :portkey.aws.cognito-sync/record-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/update-records-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.update-records-response/Records]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/delete-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/Dataset]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/bulk-publish-status (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"NOT_STARTED" "NOT_STARTED", :not-started "NOT_STARTED", "IN_PROGRESS" "IN_PROGRESS", :in-progress "IN_PROGRESS", "FAILED" "FAILED", :failed "FAILED", "SUCCEEDED" "SUCCEEDED", :succeeded "SUCCEEDED"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.cognito-sync/identity-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 55)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"[\w-]+:[0-9a-f-]+" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.get-bulk-publish-details-response/bulk-publish-start-time (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.get-bulk-publish-details-response/bulk-publish-complete-time (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.get-bulk-publish-details-response/failure-message (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/get-bulk-publish-details-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync.get-bulk-publish-details-response/BulkPublishStartTime :portkey.aws.cognito-sync.get-bulk-publish-details-response/BulkPublishCompleteTime :portkey.aws.cognito-sync/BulkPublishStatus :portkey.aws.cognito-sync.get-bulk-publish-details-response/FailureMessage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/too-many-requests-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.too-many-requests-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.internal-error-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/internal-error-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.internal-error-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/integer-string (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-datasets-request/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-datasets-request/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer-string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/list-datasets-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/IdentityPoolId] :opt-un [:portkey.aws.cognito-sync.list-datasets-request/NextToken :portkey.aws.cognito-sync.list-datasets-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/resource-not-found-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.resource-not-found-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/client-context (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/streaming-status (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"ENABLED" "ENABLED", :enabled "ENABLED", "DISABLED" "DISABLED", :disabled "DISABLED"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/get-cognito-events-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/Events]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/delete-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/DatasetName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/lambda-function-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/exception-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/describe-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/DatasetName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.lambda-throttled-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/lambda-throttled-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.lambda-throttled-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/describe-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/Dataset]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/record-patch-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync/record-patch :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/bulk-publish-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.record/key (clojure.spec.alpha/and :portkey.aws.cognito-sync/record-key))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record/value (clojure.spec.alpha/and :portkey.aws.cognito-sync/record-value))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record/sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record/last-modified-by (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record/device-last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/record (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.record/Key :portkey.aws.cognito-sync.record/Value :portkey.aws.cognito-sync.record/SyncCount :portkey.aws.cognito-sync.record/LastModifiedDate :portkey.aws.cognito-sync.record/LastModifiedBy :portkey.aws.cognito-sync.record/DeviceLastModifiedDate]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/record-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync/record :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.resource-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/resource-conflict-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.resource-conflict-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/device-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 256))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/identity-pool-usage-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync/identity-pool-usage :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.invalid-lambda-function-output-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/invalid-lambda-function-output-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.invalid-lambda-function-output-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/get-identity-pool-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/PushSync :portkey.aws.cognito-sync/CognitoStreams]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/sync-session-token (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/dataset-sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/count (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/dataset-exists (clojure.spec.alpha/and :portkey.aws.cognito-sync/boolean))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/dataset-deleted-after-requested-sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync/boolean))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/merged-dataset-names (clojure.spec.alpha/and :portkey.aws.cognito-sync/merged-dataset-name-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/records (clojure.spec.alpha/and :portkey.aws.cognito-sync/record-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/last-modified-by (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/list-records-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.list-records-response/SyncSessionToken :portkey.aws.cognito-sync.list-records-response/DatasetSyncCount :portkey.aws.cognito-sync.list-records-response/Count :portkey.aws.cognito-sync.list-records-response/NextToken :portkey.aws.cognito-sync.list-records-response/DatasetExists :portkey.aws.cognito-sync.list-records-response/DatasetDeletedAfterRequestedSyncCount :portkey.aws.cognito-sync.list-records-response/MergedDatasetNames :portkey.aws.cognito-sync.list-records-response/Records :portkey.aws.cognito-sync.list-records-response/LastModifiedBy]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/subscribe-to-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/record-value (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 1048575))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/bulk-publish-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityPoolId]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/unsubscribe-from-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/DatasetName :portkey.aws.cognito-sync/DeviceId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.concurrent-modification-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/concurrent-modification-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.concurrent-modification-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/dataset-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync/dataset :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-identity-pool-usage-response/identity-pool-usages (clojure.spec.alpha/and :portkey.aws.cognito-sync/identity-pool-usage-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-identity-pool-usage-response/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-identity-pool-usage-response/count (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-identity-pool-usage-response/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/list-identity-pool-usage-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.list-identity-pool-usage-response/IdentityPoolUsages :portkey.aws.cognito-sync.list-identity-pool-usage-response/MaxResults :portkey.aws.cognito-sync.list-identity-pool-usage-response/Count :portkey.aws.cognito-sync.list-identity-pool-usage-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.identity-pool-usage/sync-sessions-count (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.identity-pool-usage/data-storage (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.identity-pool-usage/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/identity-pool-usage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync.identity-pool-usage/SyncSessionsCount :portkey.aws.cognito-sync.identity-pool-usage/DataStorage :portkey.aws.cognito-sync.identity-pool-usage/LastModifiedDate]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-request/last-sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-request/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-request/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer-string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/list-records-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/DatasetName] :opt-un [:portkey.aws.cognito-sync.list-records-request/LastSyncCount :portkey.aws.cognito-sync.list-records-request/NextToken :portkey.aws.cognito-sync.list-records-request/MaxResults :portkey.aws.cognito-sync/SyncSessionToken]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.invalid-parameter-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/invalid-parameter-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.invalid-parameter-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/register-device-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/DeviceId]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.identity-usage/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.identity-usage/dataset-count (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.identity-usage/data-storage (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/identity-usage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync.identity-usage/LastModifiedDate :portkey.aws.cognito-sync.identity-usage/DatasetCount :portkey.aws.cognito-sync.identity-usage/DataStorage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-datasets-response/datasets (clojure.spec.alpha/and :portkey.aws.cognito-sync/dataset-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-datasets-response/count (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-datasets-response/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/list-datasets-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.list-datasets-response/Datasets :portkey.aws.cognito-sync.list-datasets-response/Count :portkey.aws.cognito-sync.list-datasets-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.invalid-configuration-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/invalid-configuration-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.invalid-configuration-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/get-bulk-publish-details-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/boolean clojure.core/boolean?)

(clojure.core/defn list-records [input115057] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/list-records-request input115057)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {"lastSyncCount" "LastSyncCount", "nextToken" "NextToken", "maxResults" "MaxResults", "syncSessionToken" "SyncSessionToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115056] (clojure.core/let [errors__109313__auto__ {"InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception}] (if (clojure.core/= 200 (:status response115056)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/list-records-response (:body response115056))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115056 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115056)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115056}))])))))))
(clojure.spec.alpha/fdef list-records :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/list-records-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/list-records-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/list-records-response))

(clojure.core/defn describe-dataset [input115059] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/describe-dataset-request input115059)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115058] (clojure.core/let [errors__109313__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response115058)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/describe-dataset-response (:body response115058))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115058 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115058)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115058}))])))))))
(clojure.spec.alpha/fdef describe-dataset :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/describe-dataset-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/describe-dataset-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/describe-dataset-response))

(clojure.core/defn get-bulk-publish-details [input115061] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/getBulkPublishDetails"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/get-bulk-publish-details-request input115061)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115060] (clojure.core/let [errors__109313__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception}] (if (clojure.core/= 200 (:status response115060)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/get-bulk-publish-details-response (:body response115060))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115060 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115060)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115060}))])))))))
(clojure.spec.alpha/fdef get-bulk-publish-details :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/get-bulk-publish-details-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/get-bulk-publish-details-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/get-bulk-publish-details-response))

(clojure.core/defn describe-identity-usage [input115063] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/describe-identity-usage-request input115063)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115062] (clojure.core/let [errors__109313__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response115062)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/describe-identity-usage-response (:body response115062))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115062 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115062)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115062}))])))))))
(clojure.spec.alpha/fdef describe-identity-usage :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/describe-identity-usage-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/describe-identity-usage-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/describe-identity-usage-response))

(clojure.core/defn get-cognito-events [input115065] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/events"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/get-cognito-events-request input115065)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115064] (clojure.core/let [errors__109313__auto__ {"InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response115064)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/get-cognito-events-response (:body response115064))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115064 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115064)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115064}))])))))))
(clojure.spec.alpha/fdef get-cognito-events :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/get-cognito-events-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/get-cognito-events-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/get-cognito-events-response))

(clojure.core/defn list-datasets [input115067] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/list-datasets-request input115067)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId"}) (portkey.awsgen/params-to-querystring {"nextToken" "NextToken", "maxResults" "MaxResults"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115066] (clojure.core/let [errors__109313__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response115066)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/list-datasets-response (:body response115066))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115066 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115066)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115066}))])))))))
(clojure.spec.alpha/fdef list-datasets :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/list-datasets-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/list-datasets-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/list-datasets-response))

(clojure.core/defn list-identity-pool-usage [input115069] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/list-identity-pool-usage-request input115069)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"nextToken" "NextToken", "maxResults" "MaxResults"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115068] (clojure.core/let [errors__109313__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response115068)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/list-identity-pool-usage-response (:body response115068))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115068 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115068)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115068}))])))))))
(clojure.spec.alpha/fdef list-identity-pool-usage :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/list-identity-pool-usage-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/list-identity-pool-usage-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/list-identity-pool-usage-response))

(clojure.core/defn describe-identity-pool-usage [input115071] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/describe-identity-pool-usage-request input115071)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115070] (clojure.core/let [errors__109313__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response115070)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/describe-identity-pool-usage-response (:body response115070))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115070 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115070)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115070}))])))))))
(clojure.spec.alpha/fdef describe-identity-pool-usage :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/describe-identity-pool-usage-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/describe-identity-pool-usage-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/describe-identity-pool-usage-response))

(clojure.core/defn unsubscribe-from-dataset [input115073] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/unsubscribe-from-dataset-request input115073)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName", "DeviceId" "DeviceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115072] (clojure.core/let [errors__109313__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "InvalidConfigurationException" :portkey.aws.cognito-sync/invalid-configuration-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response115072)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/unsubscribe-from-dataset-response (:body response115072))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115072 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115072)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115072}))])))))))
(clojure.spec.alpha/fdef unsubscribe-from-dataset :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/unsubscribe-from-dataset-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/unsubscribe-from-dataset-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/unsubscribe-from-dataset-response))

(clojure.core/defn subscribe-to-dataset [input115075] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/subscribe-to-dataset-request input115075)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName", "DeviceId" "DeviceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115074] (clojure.core/let [errors__109313__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "InvalidConfigurationException" :portkey.aws.cognito-sync/invalid-configuration-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response115074)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/subscribe-to-dataset-response (:body response115074))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115074 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115074)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115074}))])))))))
(clojure.spec.alpha/fdef subscribe-to-dataset :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/subscribe-to-dataset-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/subscribe-to-dataset-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/subscribe-to-dataset-response))

(clojure.core/defn get-identity-pool-configuration [input115077] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/configuration"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/get-identity-pool-configuration-request input115077)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115076] (clojure.core/let [errors__109313__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response115076)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/get-identity-pool-configuration-response (:body response115076))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115076 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115076)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115076}))])))))))
(clojure.spec.alpha/fdef get-identity-pool-configuration :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/get-identity-pool-configuration-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/get-identity-pool-configuration-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/get-identity-pool-configuration-response))

(clojure.core/defn set-cognito-events [input115079] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/events"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/set-cognito-events-request input115079)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115078] (clojure.core/let [errors__109313__auto__ {"InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response115078)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115078 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115078)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115078}))])))))))
(clojure.spec.alpha/fdef set-cognito-events :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/set-cognito-events-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/set-cognito-events-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn set-identity-pool-configuration [input115081] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/configuration"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/set-identity-pool-configuration-request input115081)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115080] (clojure.core/let [errors__109313__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception, "ConcurrentModificationException" :portkey.aws.cognito-sync/concurrent-modification-exception}] (if (clojure.core/= 200 (:status response115080)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/set-identity-pool-configuration-response (:body response115080))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115080 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115080)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115080}))])))))))
(clojure.spec.alpha/fdef set-identity-pool-configuration :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/set-identity-pool-configuration-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/set-identity-pool-configuration-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/set-identity-pool-configuration-response))

(clojure.core/defn register-device [input115083] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identity/{IdentityId}/device"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/register-device-request input115083)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115082] (clojure.core/let [errors__109313__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "InvalidConfigurationException" :portkey.aws.cognito-sync/invalid-configuration-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response115082)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/register-device-response (:body response115082))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115082 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115082)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115082}))])))))))
(clojure.spec.alpha/fdef register-device :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/register-device-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/register-device-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/register-device-response))

(clojure.core/defn update-records [input115085] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/update-records-request input115085)} (portkey.awsgen/params-to-header {"ClientContext" ["x-amz-Client-Context" nil]}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115084] (clojure.core/let [errors__109313__auto__ {"LimitExceededException" :portkey.aws.cognito-sync/limit-exceeded-exception, "NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "LambdaThrottledException" :portkey.aws.cognito-sync/lambda-throttled-exception, "ResourceConflictException" :portkey.aws.cognito-sync/resource-conflict-exception, "InvalidLambdaFunctionOutputException" :portkey.aws.cognito-sync/invalid-lambda-function-output-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception}] (if (clojure.core/= 200 (:status response115084)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/update-records-response (:body response115084))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115084 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115084)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115084}))])))))))
(clojure.spec.alpha/fdef update-records :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/update-records-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/update-records-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/update-records-response))

(clojure.core/defn delete-dataset [input115087] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/delete-dataset-request input115087)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115086] (clojure.core/let [errors__109313__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception, "ResourceConflictException" :portkey.aws.cognito-sync/resource-conflict-exception}] (if (clojure.core/= 200 (:status response115086)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/delete-dataset-response (:body response115086))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115086 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115086)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115086}))])))))))
(clojure.spec.alpha/fdef delete-dataset :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/delete-dataset-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/delete-dataset-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/delete-dataset-response))

(clojure.core/defn bulk-publish [input115089] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.cognito-sync/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/identitypools/{IdentityPoolId}/bulkpublish"), :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/bulk-publish-request input115089)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response115088] (clojure.core/let [errors__109313__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "DuplicateRequestException" :portkey.aws.cognito-sync/duplicate-request-exception, "AlreadyStreamedException" :portkey.aws.cognito-sync/already-streamed-exception}] (if (clojure.core/= 200 (:status response115088)) [:result (clojure.spec.alpha/unform :portkey.aws.cognito-sync/bulk-publish-response (:body response115088))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response115088 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response115088)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response115088}))])))))))
(clojure.spec.alpha/fdef bulk-publish :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/bulk-publish-request) :async (clojure.spec.alpha/tuple :portkey.aws.cognito-sync/bulk-publish-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.cognito-sync/bulk-publish-response))
