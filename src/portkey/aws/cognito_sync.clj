(ns portkey.aws.cognito-sync (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.register-device-request/token (clojure.spec.alpha/and :portkey.aws.cognito-sync/push-token))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/register-device-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/Platform :portkey.aws.cognito-sync.register-device-request/Token] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/record-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 1024))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.duplicate-request-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/duplicate-request-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.duplicate-request-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/stream-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.dataset/creation-date (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.dataset/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.dataset/last-modified-by (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.dataset/data-storage (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.dataset/num-records (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/dataset (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/DatasetName :portkey.aws.cognito-sync.dataset/CreationDate :portkey.aws.cognito-sync.dataset/LastModifiedDate :portkey.aws.cognito-sync.dataset/LastModifiedBy :portkey.aws.cognito-sync.dataset/DataStorage :portkey.aws.cognito-sync.dataset/NumRecords]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/assume-role-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 20 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 2048)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"arn:aws:iam::\d+:role/.*" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/platform (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"APNS" "APNS", :apns "APNS", "APNS_SANDBOX" "APNS_SANDBOX", :apns-sandbox "APNS_SANDBOX", "GCM" "GCM", :gcm "GCM", "ADM" "ADM", :adm "ADM"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/merged-dataset-name-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync/string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/describe-identity-pool-usage-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityPoolUsage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.push-sync/application-arns (clojure.spec.alpha/and :portkey.aws.cognito-sync/application-arn-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.push-sync/role-arn (clojure.spec.alpha/and :portkey.aws.cognito-sync/assume-role-arn))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/push-sync (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.push-sync/ApplicationArns :portkey.aws.cognito-sync.push-sync/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/describe-identity-usage-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityUsage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/subscribe-to-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/DatasetName :portkey.aws.cognito-sync/DeviceId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/unsubscribe-from-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/application-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"arn:aws:sns:[-0-9a-z]+:\d+:app/[A-Z_]+/[a-zA-Z0-9_.-]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/sync-session-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/dataset-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[a-zA-Z0-9_.:-]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/describe-identity-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/set-cognito-events-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/Events] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/set-identity-pool-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/PushSync :portkey.aws.cognito-sync/CognitoStreams]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/get-identity-pool-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/set-identity-pool-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId] :opt-un [:portkey.aws.cognito-sync/PushSync :portkey.aws.cognito-sync/CognitoStreams]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.update-records-request/record-patches (clojure.spec.alpha/and :portkey.aws.cognito-sync/record-patch-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/update-records-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/DatasetName :portkey.aws.cognito-sync/SyncSessionToken] :opt-un [:portkey.aws.cognito-sync/DeviceId :portkey.aws.cognito-sync.update-records-request/RecordPatches :portkey.aws.cognito-sync/ClientContext]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.record-patch/op (clojure.spec.alpha/and :portkey.aws.cognito-sync/operation))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record-patch/key (clojure.spec.alpha/and :portkey.aws.cognito-sync/record-key))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record-patch/value (clojure.spec.alpha/and :portkey.aws.cognito-sync/record-value))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record-patch/sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record-patch/device-last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/record-patch (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.record-patch/Op :portkey.aws.cognito-sync.record-patch/Key :portkey.aws.cognito-sync.record-patch/SyncCount] :opt-un [:portkey.aws.cognito-sync.record-patch/Value :portkey.aws.cognito-sync.record-patch/DeviceLastModifiedDate]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-identity-pool-usage-request/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-identity-pool-usage-request/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer-string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/list-identity-pool-usage-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.list-identity-pool-usage-request/NextToken :portkey.aws.cognito-sync.list-identity-pool-usage-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.cognito-streams/role-arn (clojure.spec.alpha/and :portkey.aws.cognito-sync/assume-role-arn))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/cognito-streams (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/StreamName :portkey.aws.cognito-sync.cognito-streams/RoleArn :portkey.aws.cognito-sync/StreamingStatus]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/cognito-event-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/push-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/application-arn-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync/application-arn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/get-cognito-events-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.limit-exceeded-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.already-streamed-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/already-streamed-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.already-streamed-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.not-authorized-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/not-authorized-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.not-authorized-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/operation (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"replace" "replace", :replace "replace", "remove" "remove", :remove "remove"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/identity-pool-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 55)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\w-]+:[0-9a-f-]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/events (clojure.spec.alpha/map-of :portkey.aws.cognito-sync/cognito-event-type :portkey.aws.cognito-sync/lambda-function-arn))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/describe-identity-pool-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.update-records-response/records (clojure.spec.alpha/and :portkey.aws.cognito-sync/record-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/update-records-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.update-records-response/Records]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/delete-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/Dataset]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/bulk-publish-status (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"NOT_STARTED" "NOT_STARTED", :not-started "NOT_STARTED", "IN_PROGRESS" "IN_PROGRESS", :in-progress "IN_PROGRESS", "FAILED" "FAILED", :failed "FAILED", "SUCCEEDED" "SUCCEEDED", :succeeded "SUCCEEDED"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.cognito-sync/identity-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 55)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\w-]+:[0-9a-f-]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.get-bulk-publish-details-response/bulk-publish-start-time (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.get-bulk-publish-details-response/bulk-publish-complete-time (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.get-bulk-publish-details-response/failure-message (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/get-bulk-publish-details-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync.get-bulk-publish-details-response/BulkPublishStartTime :portkey.aws.cognito-sync.get-bulk-publish-details-response/BulkPublishCompleteTime :portkey.aws.cognito-sync/BulkPublishStatus :portkey.aws.cognito-sync.get-bulk-publish-details-response/FailureMessage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/too-many-requests-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.too-many-requests-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.internal-error-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/internal-error-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.internal-error-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/integer-string (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-datasets-request/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-datasets-request/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer-string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/list-datasets-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/IdentityPoolId] :opt-un [:portkey.aws.cognito-sync.list-datasets-request/NextToken :portkey.aws.cognito-sync.list-datasets-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/resource-not-found-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.resource-not-found-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/client-context (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/streaming-status (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ENABLED" "ENABLED", :enabled "ENABLED", "DISABLED" "DISABLED", :disabled "DISABLED"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/get-cognito-events-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/Events]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/delete-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/DatasetName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/lambda-function-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/exception-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/describe-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/DatasetName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.lambda-throttled-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/lambda-throttled-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.lambda-throttled-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/describe-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/Dataset]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/record-patch-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync/record-patch :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/bulk-publish-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.record/key (clojure.spec.alpha/and :portkey.aws.cognito-sync/record-key))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record/value (clojure.spec.alpha/and :portkey.aws.cognito-sync/record-value))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record/sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record/last-modified-by (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.record/device-last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/record (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.record/Key :portkey.aws.cognito-sync.record/Value :portkey.aws.cognito-sync.record/SyncCount :portkey.aws.cognito-sync.record/LastModifiedDate :portkey.aws.cognito-sync.record/LastModifiedBy :portkey.aws.cognito-sync.record/DeviceLastModifiedDate]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/record-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync/record :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.resource-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/resource-conflict-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.resource-conflict-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/device-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 256))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/identity-pool-usage-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync/identity-pool-usage :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.invalid-lambda-function-output-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/invalid-lambda-function-output-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.invalid-lambda-function-output-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/get-identity-pool-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/PushSync :portkey.aws.cognito-sync/CognitoStreams]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/sync-session-token (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/dataset-sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/count (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/dataset-exists (clojure.spec.alpha/and :portkey.aws.cognito-sync/boolean))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/dataset-deleted-after-requested-sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync/boolean))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/merged-dataset-names (clojure.spec.alpha/and :portkey.aws.cognito-sync/merged-dataset-name-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/records (clojure.spec.alpha/and :portkey.aws.cognito-sync/record-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-response/last-modified-by (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/list-records-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.list-records-response/SyncSessionToken :portkey.aws.cognito-sync.list-records-response/DatasetSyncCount :portkey.aws.cognito-sync.list-records-response/Count :portkey.aws.cognito-sync.list-records-response/NextToken :portkey.aws.cognito-sync.list-records-response/DatasetExists :portkey.aws.cognito-sync.list-records-response/DatasetDeletedAfterRequestedSyncCount :portkey.aws.cognito-sync.list-records-response/MergedDatasetNames :portkey.aws.cognito-sync.list-records-response/Records :portkey.aws.cognito-sync.list-records-response/LastModifiedBy]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/subscribe-to-dataset-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/record-value (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 1048575))))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/bulk-publish-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityPoolId]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/unsubscribe-from-dataset-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/DatasetName :portkey.aws.cognito-sync/DeviceId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.concurrent-modification-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/concurrent-modification-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.concurrent-modification-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/dataset-list (clojure.spec.alpha/coll-of :portkey.aws.cognito-sync/dataset :max-count nil))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-identity-pool-usage-response/identity-pool-usages (clojure.spec.alpha/and :portkey.aws.cognito-sync/identity-pool-usage-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-identity-pool-usage-response/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-identity-pool-usage-response/count (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-identity-pool-usage-response/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/list-identity-pool-usage-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.list-identity-pool-usage-response/IdentityPoolUsages :portkey.aws.cognito-sync.list-identity-pool-usage-response/MaxResults :portkey.aws.cognito-sync.list-identity-pool-usage-response/Count :portkey.aws.cognito-sync.list-identity-pool-usage-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.identity-pool-usage/sync-sessions-count (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.identity-pool-usage/data-storage (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.identity-pool-usage/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/identity-pool-usage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync.identity-pool-usage/SyncSessionsCount :portkey.aws.cognito-sync.identity-pool-usage/DataStorage :portkey.aws.cognito-sync.identity-pool-usage/LastModifiedDate]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-request/last-sync-count (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-request/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-records-request/max-results (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer-string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/list-records-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/DatasetName] :opt-un [:portkey.aws.cognito-sync.list-records-request/LastSyncCount :portkey.aws.cognito-sync.list-records-request/NextToken :portkey.aws.cognito-sync.list-records-request/MaxResults :portkey.aws.cognito-sync/SyncSessionToken]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.invalid-parameter-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/invalid-parameter-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.invalid-parameter-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/register-device-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/DeviceId]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.identity-usage/last-modified-date (clojure.spec.alpha/and :portkey.aws.cognito-sync/date))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.identity-usage/dataset-count (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.identity-usage/data-storage (clojure.spec.alpha/and :portkey.aws.cognito-sync/long))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/identity-usage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync/IdentityId :portkey.aws.cognito-sync/IdentityPoolId :portkey.aws.cognito-sync.identity-usage/LastModifiedDate :portkey.aws.cognito-sync.identity-usage/DatasetCount :portkey.aws.cognito-sync.identity-usage/DataStorage]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-datasets-response/datasets (clojure.spec.alpha/and :portkey.aws.cognito-sync/dataset-list))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-datasets-response/count (clojure.spec.alpha/and :portkey.aws.cognito-sync/integer))
(clojure.spec.alpha/def :portkey.aws.cognito-sync.list-datasets-response/next-token (clojure.spec.alpha/and :portkey.aws.cognito-sync/string))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/list-datasets-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.cognito-sync.list-datasets-response/Datasets :portkey.aws.cognito-sync.list-datasets-response/Count :portkey.aws.cognito-sync.list-datasets-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.cognito-sync.invalid-configuration-exception/message (clojure.spec.alpha/and :portkey.aws.cognito-sync/exception-message))
(clojure.spec.alpha/def :portkey.aws.cognito-sync/invalid-configuration-exception (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync.invalid-configuration-exception/message] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/get-bulk-publish-details-request (portkey.awsgen/json-keys :req-un [:portkey.aws.cognito-sync/IdentityPoolId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.cognito-sync/boolean clojure.core/boolean?)

(clojure.core/defn list-records ([input__36693__auto__] (list-records input__36693__auto__ portkey.aws/*http-client*)) ([input39201 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/ListRecordsRequest input39201)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {"lastSyncCount" "LastSyncCount", "nextToken" "NextToken", "maxResults" "MaxResults", "syncSessionToken" "SyncSessionToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/records", :body body__36697__auto__} (clojure.core/fn [response39200] (clojure.core/let [errors__36698__auto__ {"InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception}] (if (clojure.core/= 200 (:status response39200)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/list-records-response (:body response39200)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39200 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39200)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39200}))))))))))

(clojure.core/defn describe-dataset ([input__36693__auto__] (describe-dataset input__36693__auto__ portkey.aws/*http-client*)) ([input39203 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/DescribeDatasetRequest input39203)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}", :body body__36697__auto__} (clojure.core/fn [response39202] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39202)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/describe-dataset-response (:body response39202)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39202 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39202)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39202}))))))))))

(clojure.core/defn get-bulk-publish-details ([input__36693__auto__] (get-bulk-publish-details input__36693__auto__ portkey.aws/*http-client*)) ([input39205 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/getBulkPublishDetails", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/GetBulkPublishDetailsRequest input39205)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/getBulkPublishDetails", :body body__36697__auto__} (clojure.core/fn [response39204] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception}] (if (clojure.core/= 200 (:status response39204)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/get-bulk-publish-details-response (:body response39204)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39204 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39204)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39204}))))))))))

(clojure.core/defn describe-identity-usage ([input__36693__auto__] (describe-identity-usage input__36693__auto__ portkey.aws/*http-client*)) ([input39207 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/DescribeIdentityUsageRequest input39207)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}", :body body__36697__auto__} (clojure.core/fn [response39206] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39206)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/describe-identity-usage-response (:body response39206)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39206 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39206)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39206}))))))))))

(clojure.core/defn get-cognito-events ([input__36693__auto__] (get-cognito-events input__36693__auto__ portkey.aws/*http-client*)) ([input39209 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/events", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/GetCognitoEventsRequest input39209)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/events", :body body__36697__auto__} (clojure.core/fn [response39208] (clojure.core/let [errors__36698__auto__ {"InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39208)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/get-cognito-events-response (:body response39208)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39208 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39208)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39208}))))))))))

(clojure.core/defn list-datasets ([input__36693__auto__] (list-datasets input__36693__auto__ portkey.aws/*http-client*)) ([input39211 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/ListDatasetsRequest input39211)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId"}) (portkey.awsgen/params-to-querystring {"nextToken" "NextToken", "maxResults" "MaxResults"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets", :body body__36697__auto__} (clojure.core/fn [response39210] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39210)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/list-datasets-response (:body response39210)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39210 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39210)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39210}))))))))))

(clojure.core/defn list-identity-pool-usage ([input__36693__auto__] (list-identity-pool-usage input__36693__auto__ portkey.aws/*http-client*)) ([input39213 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/ListIdentityPoolUsageRequest input39213)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"nextToken" "NextToken", "maxResults" "MaxResults"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools", :body body__36697__auto__} (clojure.core/fn [response39212] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39212)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/list-identity-pool-usage-response (:body response39212)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39212 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39212)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39212}))))))))))

(clojure.core/defn describe-identity-pool-usage ([input__36693__auto__] (describe-identity-pool-usage input__36693__auto__ portkey.aws/*http-client*)) ([input39215 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/DescribeIdentityPoolUsageRequest input39215)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}", :body body__36697__auto__} (clojure.core/fn [response39214] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39214)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/describe-identity-pool-usage-response (:body response39214)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39214 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39214)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39214}))))))))))

(clojure.core/defn unsubscribe-from-dataset ([input__36693__auto__] (unsubscribe-from-dataset input__36693__auto__ portkey.aws/*http-client*)) ([input39217 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/UnsubscribeFromDatasetRequest input39217)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName", "DeviceId" "DeviceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}", :body body__36697__auto__} (clojure.core/fn [response39216] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "InvalidConfigurationException" :portkey.aws.cognito-sync/invalid-configuration-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39216)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/unsubscribe-from-dataset-response (:body response39216)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39216 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39216)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39216}))))))))))

(clojure.core/defn subscribe-to-dataset ([input__36693__auto__] (subscribe-to-dataset input__36693__auto__ portkey.aws/*http-client*)) ([input39219 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/SubscribeToDatasetRequest input39219)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName", "DeviceId" "DeviceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}/subscriptions/{DeviceId}", :body body__36697__auto__} (clojure.core/fn [response39218] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "InvalidConfigurationException" :portkey.aws.cognito-sync/invalid-configuration-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39218)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/subscribe-to-dataset-response (:body response39218)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39218 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39218)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39218}))))))))))

(clojure.core/defn get-identity-pool-configuration ([input__36693__auto__] (get-identity-pool-configuration input__36693__auto__ portkey.aws/*http-client*)) ([input39221 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/configuration", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/GetIdentityPoolConfigurationRequest input39221)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/configuration", :body body__36697__auto__} (clojure.core/fn [response39220] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39220)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/get-identity-pool-configuration-response (:body response39220)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39220 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39220)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39220}))))))))))

(clojure.core/defn set-cognito-events ([input__36693__auto__] (set-cognito-events input__36693__auto__ portkey.aws/*http-client*)) ([input39223 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/events", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/SetCognitoEventsRequest input39223)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/events", :body body__36697__auto__} (clojure.core/fn [response39222] (clojure.core/let [errors__36698__auto__ {"InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39222)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39222 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39222)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39222}))))))))))

(clojure.core/defn set-identity-pool-configuration ([input__36693__auto__] (set-identity-pool-configuration input__36693__auto__ portkey.aws/*http-client*)) ([input39225 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/configuration", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/SetIdentityPoolConfigurationRequest input39225)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/configuration", :body body__36697__auto__} (clojure.core/fn [response39224] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception, "ConcurrentModificationException" :portkey.aws.cognito-sync/concurrent-modification-exception}] (if (clojure.core/= 200 (:status response39224)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/set-identity-pool-configuration-response (:body response39224)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39224 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39224)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39224}))))))))))

(clojure.core/defn register-device ([input__36693__auto__] (register-device input__36693__auto__ portkey.aws/*http-client*)) ([input39227 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identity/{IdentityId}/device", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/RegisterDeviceRequest input39227)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identity/{IdentityId}/device", :body body__36697__auto__} (clojure.core/fn [response39226] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "InvalidConfigurationException" :portkey.aws.cognito-sync/invalid-configuration-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception}] (if (clojure.core/= 200 (:status response39226)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/register-device-response (:body response39226)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39226 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39226)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39226}))))))))))

(clojure.core/defn update-records ([input__36693__auto__] (update-records input__36693__auto__ portkey.aws/*http-client*)) ([input39229 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/UpdateRecordsRequest input39229)} (portkey.awsgen/params-to-header {"ClientContext" ["x-amz-Client-Context" nil]}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}", :body body__36697__auto__} (clojure.core/fn [response39228] (clojure.core/let [errors__36698__auto__ {"LimitExceededException" :portkey.aws.cognito-sync/limit-exceeded-exception, "NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "LambdaThrottledException" :portkey.aws.cognito-sync/lambda-throttled-exception, "ResourceConflictException" :portkey.aws.cognito-sync/resource-conflict-exception, "InvalidLambdaFunctionOutputException" :portkey.aws.cognito-sync/invalid-lambda-function-output-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception}] (if (clojure.core/= 200 (:status response39228)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/update-records-response (:body response39228)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39228 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39228)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39228}))))))))))

(clojure.core/defn delete-dataset ([input__36693__auto__] (delete-dataset input__36693__auto__ portkey.aws/*http-client*)) ([input39231 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/DeleteDatasetRequest input39231)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId", "IdentityId" "IdentityId", "DatasetName" "DatasetName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/identities/{IdentityId}/datasets/{DatasetName}", :body body__36697__auto__} (clojure.core/fn [response39230] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "TooManyRequestsException" :portkey.aws.cognito-sync/too-many-requests-exception, "ResourceConflictException" :portkey.aws.cognito-sync/resource-conflict-exception}] (if (clojure.core/= 200 (:status response39230)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/delete-dataset-response (:body response39230)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39230 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39230)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39230}))))))))))

(clojure.core/defn bulk-publish ([input__36693__auto__] (bulk-publish input__36693__auto__ portkey.aws/*http-client*)) ([input39233 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/bulkpublish", :body (clojure.spec.alpha/unform :portkey.aws.cognito-sync/BulkPublishRequest input39233)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"IdentityPoolId" "IdentityPoolId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/identitypools/{IdentityPoolId}/bulkpublish", :body body__36697__auto__} (clojure.core/fn [response39232] (clojure.core/let [errors__36698__auto__ {"NotAuthorizedException" :portkey.aws.cognito-sync/not-authorized-exception, "InvalidParameterException" :portkey.aws.cognito-sync/invalid-parameter-exception, "ResourceNotFoundException" :portkey.aws.cognito-sync/resource-not-found-exception, "InternalErrorException" :portkey.aws.cognito-sync/internal-error-exception, "DuplicateRequestException" :portkey.aws.cognito-sync/duplicate-request-exception, "AlreadyStreamedException" :portkey.aws.cognito-sync/already-streamed-exception}] (if (clojure.core/= 200 (:status response39232)) (clojure.spec.alpha/unform :portkey.aws.cognito-sync/bulk-publish-response (:body response39232)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response39232 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response39232)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response39232}))))))))))
