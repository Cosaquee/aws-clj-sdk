(ns portkey.aws.greengrass (:require [portkey.aws]))

(def
 endpoints
 '{"ap-southeast-2"
   {:credentialScope
    {"service" "greengrass", "region" "ap-southeast-2"},
    :sslCommonName "greengrass.ap-southeast-2.amazonaws.com",
    :endpoint "https://greengrass.ap-southeast-2.amazonaws.com"},
   "eu-central-1"
   {:credentialScope {"service" "greengrass", "region" "eu-central-1"},
    :sslCommonName "greengrass.eu-central-1.amazonaws.com",
    :endpoint "https://greengrass.eu-central-1.amazonaws.com"},
   "us-west-2"
   {:credentialScope {"service" "greengrass", "region" "us-west-2"},
    :sslCommonName "greengrass.us-west-2.amazonaws.com",
    :endpoint "https://greengrass.us-west-2.amazonaws.com"},
   "us-east-1"
   {:credentialScope {"service" "greengrass", "region" "us-east-1"},
    :sslCommonName "greengrass.us-east-1.amazonaws.com",
    :endpoint "https://greengrass.us-east-1.amazonaws.com"}})

(clojure.spec.alpha/def :portkey.aws.greengrass.device-definition-version/devices (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass/device-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.device-definition-version/Devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-function-definition-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.update-function-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-core-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-core-definition-version-response/Arn :portkey.aws.greengrass.get-core-definition-version-response/CreationTimestamp :portkey.aws.greengrass.get-core-definition-version-response/Definition :portkey.aws.greengrass.get-core-definition-version-response/Id :portkey.aws.greengrass.get-core-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.internal-server-error-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/internal-server-error-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass/ErrorDetails :portkey.aws.greengrass.internal-server-error-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-authority-properties/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-authority-properties/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/group-certificate-authority-properties (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.group-certificate-authority-properties/GroupCertificateAuthorityArn :portkey.aws.greengrass.group-certificate-authority-properties/GroupCertificateAuthorityId]))

(clojure.spec.alpha/def :portkey.aws.greengrass/empty (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-logger-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-logger-definition-version-response/Arn :portkey.aws.greengrass.create-logger-definition-version-response/CreationTimestamp :portkey.aws.greengrass.create-logger-definition-version-response/Id :portkey.aws.greengrass.create-logger-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-core-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-core-definition-request/AmznClientToken :portkey.aws.greengrass.create-core-definition-request/InitialVersion :portkey.aws.greengrass.create-core-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/definition-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.definition-information/Arn :portkey.aws.greengrass.definition-information/CreationTimestamp :portkey.aws.greengrass.definition-information/Id :portkey.aws.greengrass.definition-information/LastUpdatedTimestamp :portkey.aws.greengrass.definition-information/LatestVersion :portkey.aws.greengrass.definition-information/LatestVersionArn :portkey.aws.greengrass.definition-information/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-core-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-core-definition-versions-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.list-core-definition-versions-request/MaxResults :portkey.aws.greengrass.list-core-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/--timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-device-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-device-definition-version-response/Arn :portkey.aws.greengrass.create-device-definition-version-response/CreationTimestamp :portkey.aws.greengrass.create-device-definition-version-response/Id :portkey.aws.greengrass.create-device-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-function-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-function-definition-version-response/Arn :portkey.aws.greengrass.get-function-definition-version-response/CreationTimestamp :portkey.aws.greengrass.get-function-definition-version-response/Definition :portkey.aws.greengrass.get-function-definition-version-response/Id :portkey.aws.greengrass.get-function-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-response/deployment-status (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-response/error-message (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-response/updated-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-deployment-status-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-deployment-status-response/DeploymentStatus :portkey.aws.greengrass.get-deployment-status-response/ErrorMessage :portkey.aws.greengrass.get-deployment-status-response/UpdatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-function-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-function-definition-versions-response/NextToken :portkey.aws.greengrass.list-function-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-device (clojure.spec.alpha/coll-of :portkey.aws.greengrass/device :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-request/cores (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-core-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-core-definition-version-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.create-core-definition-version-request/AmznClientToken :portkey.aws.greengrass.create-core-definition-version-request/Cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-logger-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-logger-definition-request/AmznClientToken :portkey.aws.greengrass.create-logger-definition-request/InitialVersion :portkey.aws.greengrass.create-logger-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-request/loggers (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-logger-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-logger-definition-version-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.create-logger-definition-version-request/AmznClientToken :portkey.aws.greengrass.create-logger-definition-version-request/Loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.associate-role-to-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.associate-role-to-group-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/associate-role-to-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.associate-role-to-group-request/GroupId] :opt-un [:portkey.aws.greengrass.associate-role-to-group-request/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-request/devices (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-device-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-device-definition-version-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.create-device-definition-version-request/AmznClientToken :portkey.aws.greengrass.create-device-definition-version-request/Devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.deployment/created-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.deployment/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.deployment/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.deployment/group-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/deployment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.deployment/CreatedAt :portkey.aws.greengrass.deployment/DeploymentArn :portkey.aws.greengrass.deployment/DeploymentId :portkey.aws.greengrass.deployment/GroupArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/bad-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass/ErrorDetails :portkey.aws.greengrass.bad-request-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-device-definition-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/deployment-type (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"NewDeployment" "NewDeployment", :new-deployment "NewDeployment", "Redeployment" "Redeployment", :redeployment "Redeployment"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-subscription-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-subscription-definition-versions-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.list-subscription-definition-versions-request/MaxResults :portkey.aws.greengrass.list-subscription-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/logger-level (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {:warn "WARN", "WARN" "WARN", :debug "DEBUG", "ERROR" "ERROR", :fatal "FATAL", "DEBUG" "DEBUG", "FATAL" "FATAL", :info "INFO", :error "ERROR", "INFO" "INFO"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass/get-service-role-for-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.connectivity-info/host-address (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.connectivity-info/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.connectivity-info/metadata (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.connectivity-info/port-number (clojure.spec.alpha/and :portkey.aws.greengrass/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass/connectivity-info (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.connectivity-info/HostAddress :portkey.aws.greengrass.connectivity-info/Id :portkey.aws.greengrass.connectivity-info/Metadata :portkey.aws.greengrass.connectivity-info/PortNumber]))

(clojure.spec.alpha/def :portkey.aws.greengrass.associate-service-role-to-account-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/associate-service-role-to-account-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.associate-service-role-to-account-request/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-subscription-definition-response/Arn :portkey.aws.greengrass.create-subscription-definition-response/CreationTimestamp :portkey.aws.greengrass.create-subscription-definition-response/Id :portkey.aws.greengrass.create-subscription-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.create-subscription-definition-response/LatestVersion :portkey.aws.greengrass.create-subscription-definition-response/LatestVersionArn :portkey.aws.greengrass.create-subscription-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-request/subscription-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-subscription-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-subscription-definition-version-request/SubscriptionDefinitionId :portkey.aws.greengrass.get-subscription-definition-version-request/SubscriptionDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-logger-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-logger-definition-versions-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.list-logger-definition-versions-request/MaxResults :portkey.aws.greengrass.list-logger-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-function-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-function-definitions-response/Definitions :portkey.aws.greengrass.list-function-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/logger-type (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"FileSystem" "FileSystem", :file-system "FileSystem", "AWSCloudWatch" "AWSCloudWatch", :awscloud-watch "AWSCloudWatch"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-core-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-core-definitions-request/MaxResults :portkey.aws.greengrass.list-core-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-device-definition-response/Arn :portkey.aws.greengrass.get-device-definition-response/CreationTimestamp :portkey.aws.greengrass.get-device-definition-response/Id :portkey.aws.greengrass.get-device-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.get-device-definition-response/LatestVersion :portkey.aws.greengrass.get-device-definition-response/LatestVersionArn :portkey.aws.greengrass.get-device-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.associate-service-role-to-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/associate-service-role-to-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.associate-service-role-to-account-response/AssociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass/--string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-associated-role-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-associated-role-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-associated-role-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-associated-role-response/AssociatedAt :portkey.aws.greengrass.get-associated-role-response/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-certificate-authority-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-certificate-authority-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-group-certificate-authority-request/GroupId] :opt-un [:portkey.aws.greengrass.create-group-certificate-authority-request/AmznClientToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-group-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass/group-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-response/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-response/pem-encoded-certificate (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-certificate-authority-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-group-certificate-authority-response/GroupCertificateAuthorityArn :portkey.aws.greengrass.get-group-certificate-authority-response/GroupCertificateAuthorityId :portkey.aws.greengrass.get-group-certificate-authority-response/PemEncodedCertificate]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-core-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-core-definitions-response/Definitions :portkey.aws.greengrass.list-core-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-core (clojure.spec.alpha/coll-of :portkey.aws.greengrass/core :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.disassociate-role-from-group-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/disassociate-role-from-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.disassociate-role-from-group-response/DisassociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-request/function-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-function-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-function-definition-version-request/FunctionDefinitionId :portkey.aws.greengrass.get-function-definition-version-request/FunctionDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-associated-role-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-associated-role-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-associated-role-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-device-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-device-definition-versions-response/NextToken :portkey.aws.greengrass.list-device-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.function-definition-version/functions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass/function-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.function-definition-version/Functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.logger-definition-version/loggers (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass/logger-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.logger-definition-version/Loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-subscription-definition-request/SubscriptionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-request/device-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-device-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-device-definition-version-request/DeviceDefinitionVersionId :portkey.aws.greengrass.get-device-definition-version-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-subscription-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-subscription-definitions-request/MaxResults :portkey.aws.greengrass.list-subscription-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-subscription-definition-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.update-subscription-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-group-response/Arn :portkey.aws.greengrass.get-group-response/CreationTimestamp :portkey.aws.greengrass.get-group-response/Id :portkey.aws.greengrass.get-group-response/LastUpdatedTimestamp :portkey.aws.greengrass.get-group-response/LatestVersion :portkey.aws.greengrass.get-group-response/LatestVersionArn :portkey.aws.greengrass.get-group-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-group-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.disassociate-role-from-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/disassociate-role-from-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.disassociate-role-from-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-group-certificate-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.update-group-certificate-configuration-response/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.update-group-certificate-configuration-response/CertificateExpiryInMilliseconds :portkey.aws.greengrass.update-group-certificate-configuration-response/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-group-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-group-versions-request/GroupId] :opt-un [:portkey.aws.greengrass.list-group-versions-request/MaxResults :portkey.aws.greengrass.list-group-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-groups-response/groups (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-group-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-groups-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-groups-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-groups-response/Groups :portkey.aws.greengrass.list-groups-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-configuration/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-configuration/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-configuration/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/group-certificate-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.group-certificate-configuration/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.group-certificate-configuration/CertificateExpiryInMilliseconds :portkey.aws.greengrass.group-certificate-configuration/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-device-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-device-definitions-request/MaxResults :portkey.aws.greengrass.list-device-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-subscription-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-subscription-definition-version-response/Arn :portkey.aws.greengrass.create-subscription-definition-version-response/CreationTimestamp :portkey.aws.greengrass.create-subscription-definition-version-response/Id :portkey.aws.greengrass.create-subscription-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-group-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.associate-role-to-group-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/associate-role-to-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.associate-role-to-group-response/AssociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-connectivity-info-request/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-connectivity-info-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-connectivity-info-request/ThingName] :opt-un [:portkey.aws.greengrass.update-connectivity-info-request/ConnectivityInfo]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-version-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass/version-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.version-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.version-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.version-information/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.version-information/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/version-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.version-information/Arn :portkey.aws.greengrass.version-information/CreationTimestamp :portkey.aws.greengrass.version-information/Id :portkey.aws.greengrass.version-information/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-core-definition-response/Arn :portkey.aws.greengrass.get-core-definition-response/CreationTimestamp :portkey.aws.greengrass.get-core-definition-response/Id :portkey.aws.greengrass.get-core-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.get-core-definition-response/LatestVersion :portkey.aws.greengrass.get-core-definition-response/LatestVersionArn :portkey.aws.greengrass.get-core-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-logger-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-logger-definition-version-response/Arn :portkey.aws.greengrass.get-logger-definition-version-response/CreationTimestamp :portkey.aws.greengrass.get-logger-definition-version-response/Definition :portkey.aws.greengrass.get-logger-definition-version-response/Id :portkey.aws.greengrass.get-logger-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-function-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-function-definition-versions-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.list-function-definition-versions-request/MaxResults :portkey.aws.greengrass.list-function-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-function-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-function-definition-request/AmznClientToken :portkey.aws.greengrass.create-function-definition-request/InitialVersion :portkey.aws.greengrass.create-function-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-logger-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-logger-definitions-request/MaxResults :portkey.aws.greengrass.list-logger-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-device-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-device-definitions-response/Definitions :portkey.aws.greengrass.list-device-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-device-definition-response/Arn :portkey.aws.greengrass.create-device-definition-response/CreationTimestamp :portkey.aws.greengrass.create-device-definition-response/Id :portkey.aws.greengrass.create-device-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.create-device-definition-response/LatestVersion :portkey.aws.greengrass.create-device-definition-response/LatestVersionArn :portkey.aws.greengrass.create-device-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/group-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.group-version/CoreDefinitionVersionArn :portkey.aws.greengrass.group-version/DeviceDefinitionVersionArn :portkey.aws.greengrass.group-version/FunctionDefinitionVersionArn :portkey.aws.greengrass.group-version/LoggerDefinitionVersionArn :portkey.aws.greengrass.group-version/SubscriptionDefinitionVersionArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/group-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.group-information/Arn :portkey.aws.greengrass.group-information/CreationTimestamp :portkey.aws.greengrass.group-information/Id :portkey.aws.greengrass.group-information/LastUpdatedTimestamp :portkey.aws.greengrass.group-information/LatestVersion :portkey.aws.greengrass.group-information/LatestVersionArn :portkey.aws.greengrass.group-information/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.delete-function-definition-request/FunctionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.error-detail/detailed-error-code (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.error-detail/detailed-error-message (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/error-detail (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.error-detail/DetailedErrorCode :portkey.aws.greengrass.error-detail/DetailedErrorMessage]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-subscription-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-subscription-definition-version-response/Arn :portkey.aws.greengrass.get-subscription-definition-version-response/CreationTimestamp :portkey.aws.greengrass.get-subscription-definition-version-response/Definition :portkey.aws.greengrass.get-subscription-definition-version-response/Id :portkey.aws.greengrass.get-subscription-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-logger-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-logger-definition-versions-response/NextToken :portkey.aws.greengrass.list-logger-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-request/logger-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-logger-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-logger-definition-version-request/LoggerDefinitionVersionId :portkey.aws.greengrass.get-logger-definition-version-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-logger-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-logger-definitions-response/Definitions :portkey.aws.greengrass.list-logger-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-service-role-for-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-service-role-for-account-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-service-role-for-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-service-role-for-account-response/AssociatedAt :portkey.aws.greengrass.get-service-role-for-account-response/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-group-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-group-versions-response/NextToken :portkey.aws.greengrass.list-group-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-certificate-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-group-certificate-configuration-response/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.get-group-certificate-configuration-response/CertificateExpiryInMilliseconds :portkey.aws.greengrass.get-group-certificate-configuration-response/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-connectivity-info-response/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-connectivity-info-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-connectivity-info-response/ConnectivityInfo :portkey.aws.greengrass.get-connectivity-info-response/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-deployments-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-deployments-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-deployments-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-deployments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-deployments-request/GroupId] :opt-un [:portkey.aws.greengrass.list-deployments-request/MaxResults :portkey.aws.greengrass.list-deployments-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/--boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-definition-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass/definition-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.disassociate-service-role-from-account-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/disassociate-service-role-from-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.disassociate-service-role-from-account-response/DisassociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-certificate-authorities-response/group-certificate-authorities (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-group-certificate-authority-properties))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-group-certificate-authorities-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-group-certificate-authorities-response/GroupCertificateAuthorities]))

(clojure.spec.alpha/def :portkey.aws.greengrass.core-definition-version/cores (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass/core-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.core-definition-version/Cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-deployment-request/GroupId] :opt-un [:portkey.aws.greengrass.create-deployment-request/AmznClientToken :portkey.aws.greengrass.create-deployment-request/DeploymentId :portkey.aws.greengrass/DeploymentType :portkey.aws.greengrass.create-deployment-request/GroupVersionId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-versions-response/NextToken :portkey.aws.greengrass.list-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.subscription-definition-version/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass/subscription-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.subscription-definition-version/Subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.delete-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.delete-subscription-definition-request/SubscriptionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-certificate-authorities-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-group-certificate-authorities-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-group-certificate-authorities-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-core-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-core-definition-versions-response/NextToken :portkey.aws.greengrass.list-core-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-certificate-authority-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-group-certificate-authority-response/GroupCertificateAuthorityArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-logger-definition-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.update-logger-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-core-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-core-definition-version-response/Arn :portkey.aws.greengrass.create-core-definition-version-response/CreationTimestamp :portkey.aws.greengrass.create-core-definition-version-response/Id :portkey.aws.greengrass.create-core-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.delete-core-definition-request/CoreDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-request/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-group-certificate-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-group-certificate-configuration-request/GroupId] :opt-un [:portkey.aws.greengrass.update-group-certificate-configuration-request/CertificateExpiryInMilliseconds]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-deployment-status-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-deployment-status-request/GroupId :portkey.aws.greengrass.get-deployment-status-request/DeploymentId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-group-version-request/GroupId] :opt-un [:portkey.aws.greengrass.create-group-version-request/AmznClientToken :portkey.aws.greengrass.create-group-version-request/CoreDefinitionVersionArn :portkey.aws.greengrass.create-group-version-request/DeviceDefinitionVersionArn :portkey.aws.greengrass.create-group-version-request/FunctionDefinitionVersionArn :portkey.aws.greengrass.create-group-version-request/LoggerDefinitionVersionArn :portkey.aws.greengrass.create-group-version-request/SubscriptionDefinitionVersionArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-core-definition-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.update-core-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-subscription-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-subscription-definitions-response/Definitions :portkey.aws.greengrass.list-subscription-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-group-version-response/Arn :portkey.aws.greengrass.get-group-version-response/CreationTimestamp :portkey.aws.greengrass.get-group-version-response/Definition :portkey.aws.greengrass.get-group-version-response/Id :portkey.aws.greengrass.get-group-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-request/core-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-core-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-core-definition-version-request/CoreDefinitionId :portkey.aws.greengrass.get-core-definition-version-request/CoreDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-device-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-device-definition-version-response/Arn :portkey.aws.greengrass.get-device-definition-version-response/CreationTimestamp :portkey.aws.greengrass.get-device-definition-version-response/Definition :portkey.aws.greengrass.get-device-definition-version-response/Id :portkey.aws.greengrass.get-device-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-function-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-function-definition-version-response/Arn :portkey.aws.greengrass.create-function-definition-version-response/CreationTimestamp :portkey.aws.greengrass.create-function-definition-version-response/Id :portkey.aws.greengrass.create-function-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/environment (clojure.spec.alpha/and :portkey.aws.greengrass/function-configuration-environment))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/exec-args (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/executable (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/memory-size (clojure.spec.alpha/and :portkey.aws.greengrass/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/pinned (clojure.spec.alpha/and :portkey.aws.greengrass/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/timeout (clojure.spec.alpha/and :portkey.aws.greengrass/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass/function-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.function-configuration/Environment :portkey.aws.greengrass.function-configuration/ExecArgs :portkey.aws.greengrass.function-configuration/Executable :portkey.aws.greengrass.function-configuration/MemorySize :portkey.aws.greengrass.function-configuration/Pinned :portkey.aws.greengrass.function-configuration/Timeout]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-device-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-device-definition-versions-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.list-device-definition-versions-request/MaxResults :portkey.aws.greengrass.list-device-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-groups-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-groups-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-groups-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-groups-request/MaxResults :portkey.aws.greengrass.list-groups-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-subscription-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-subscription-definition-versions-response/NextToken :portkey.aws.greengrass.list-subscription-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass/--double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration-environment/variables (clojure.spec.alpha/and :portkey.aws.greengrass/map-of--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/function-configuration-environment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.function-configuration-environment/Variables]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-group-response/Arn :portkey.aws.greengrass.create-group-response/CreationTimestamp :portkey.aws.greengrass.create-group-response/Id :portkey.aws.greengrass.create-group-response/LastUpdatedTimestamp :portkey.aws.greengrass.create-group-response/LatestVersion :portkey.aws.greengrass.create-group-response/LatestVersionArn :portkey.aws.greengrass.create-group-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/error-details (clojure.spec.alpha/coll-of :portkey.aws.greengrass/error-detail :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-function-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-function-definitions-request/MaxResults :portkey.aws.greengrass.list-function-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-logger-definition-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.subscription/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.subscription/source (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.subscription/subject (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.subscription/target (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/subscription (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.subscription/Id :portkey.aws.greengrass.subscription/Source :portkey.aws.greengrass.subscription/Subject :portkey.aws.greengrass.subscription/Target]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-group-request/AmznClientToken :portkey.aws.greengrass.create-group-request/InitialVersion :portkey.aws.greengrass.create-group-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.core/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.core/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.core/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.core/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/core (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.core/CertificateArn :portkey.aws.greengrass.core/Id :portkey.aws.greengrass.core/SyncShadow :portkey.aws.greengrass.core/ThingArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-group-version-request/GroupVersionId :portkey.aws.greengrass.get-group-version-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/disassociate-service-role-from-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-request/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-subscription-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-subscription-definition-version-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.create-subscription-definition-version-request/AmznClientToken :portkey.aws.greengrass.create-subscription-definition-version-request/Subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-certificate-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-group-certificate-configuration-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-deployments-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-deployments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass/Deployments :portkey.aws.greengrass.list-deployments-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-subscription (clojure.spec.alpha/coll-of :portkey.aws.greengrass/subscription :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-request/functions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-function-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-function-definition-version-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.create-function-definition-version-request/AmznClientToken :portkey.aws.greengrass.create-function-definition-version-request/Functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.function/function-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.function/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/function (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.function/FunctionArn :portkey.aws.greengrass/FunctionConfiguration :portkey.aws.greengrass.function/Id]))

(clojure.spec.alpha/def :portkey.aws.greengrass/--integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-response/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-response/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-deployment-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-deployment-response/DeploymentArn :portkey.aws.greengrass.create-deployment-response/DeploymentId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.delete-logger-definition-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.delete-device-definition-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-logger-definition-response/Arn :portkey.aws.greengrass.get-logger-definition-response/CreationTimestamp :portkey.aws.greengrass.get-logger-definition-response/Id :portkey.aws.greengrass.get-logger-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.get-logger-definition-response/LatestVersion :portkey.aws.greengrass.get-logger-definition-response/LatestVersionArn :portkey.aws.greengrass.get-logger-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-subscription-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-subscription-definition-request/AmznClientToken :portkey.aws.greengrass.create-subscription-definition-request/InitialVersion :portkey.aws.greengrass.create-subscription-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-device-definition-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.update-device-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-subscription-definition-response/Arn :portkey.aws.greengrass.get-subscription-definition-response/CreationTimestamp :portkey.aws.greengrass.get-subscription-definition-response/Id :portkey.aws.greengrass.get-subscription-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.get-subscription-definition-response/LatestVersion :portkey.aws.greengrass.get-subscription-definition-response/LatestVersionArn :portkey.aws.greengrass.get-subscription-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-core-definition-request/CoreDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-request/certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-certificate-authority-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-group-certificate-authority-request/CertificateAuthorityId :portkey.aws.greengrass.get-group-certificate-authority-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-logger-definition-response/Arn :portkey.aws.greengrass.create-logger-definition-response/CreationTimestamp :portkey.aws.greengrass.create-logger-definition-response/Id :portkey.aws.greengrass.create-logger-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.create-logger-definition-response/LatestVersion :portkey.aws.greengrass.create-logger-definition-response/LatestVersionArn :portkey.aws.greengrass.create-logger-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.device/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.device/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.device/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.device/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/device (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.device/CertificateArn :portkey.aws.greengrass.device/Id :portkey.aws.greengrass.device/SyncShadow :portkey.aws.greengrass.device/ThingArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass/logger-component (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"GreengrassSystem" "GreengrassSystem", :greengrass-system "GreengrassSystem", "Lambda" "Lambda", :lambda "Lambda"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-function-definition-request/FunctionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-connectivity-info (clojure.spec.alpha/coll-of :portkey.aws.greengrass/connectivity-info :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-device-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-device-definition-request/AmznClientToken :portkey.aws.greengrass.create-device-definition-request/InitialVersion :portkey.aws.greengrass.create-device-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-group-certificate-authority-properties (clojure.spec.alpha/coll-of :portkey.aws.greengrass/group-certificate-authority-properties :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-connectivity-info-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-connectivity-info-request/ThingName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-group-version-response/Arn :portkey.aws.greengrass.create-group-version-response/CreationTimestamp :portkey.aws.greengrass.create-group-version-response/Id :portkey.aws.greengrass.create-group-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-definitions-response/Definitions :portkey.aws.greengrass.list-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-core-definition-response/Arn :portkey.aws.greengrass.create-core-definition-response/CreationTimestamp :portkey.aws.greengrass.create-core-definition-response/Id :portkey.aws.greengrass.create-core-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.create-core-definition-response/LatestVersion :portkey.aws.greengrass.create-core-definition-response/LatestVersionArn :portkey.aws.greengrass.create-core-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.general-error/message (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/general-error (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass/ErrorDetails :portkey.aws.greengrass.general-error/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-function (clojure.spec.alpha/coll-of :portkey.aws.greengrass/function :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-function-definition-response/Arn :portkey.aws.greengrass.create-function-definition-response/CreationTimestamp :portkey.aws.greengrass.create-function-definition-response/Id :portkey.aws.greengrass.create-function-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.create-function-definition-response/LatestVersion :portkey.aws.greengrass.create-function-definition-response/LatestVersionArn :portkey.aws.greengrass.create-function-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-connectivity-info-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-connectivity-info-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.update-connectivity-info-response/Message :portkey.aws.greengrass.update-connectivity-info-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-function-definition-response/Arn :portkey.aws.greengrass.get-function-definition-response/CreationTimestamp :portkey.aws.greengrass.get-function-definition-response/Id :portkey.aws.greengrass.get-function-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.get-function-definition-response/LatestVersion :portkey.aws.greengrass.get-function-definition-response/LatestVersionArn :portkey.aws.greengrass.get-function-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-group-request/GroupId] :opt-un [:portkey.aws.greengrass.update-group-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-logger (clojure.spec.alpha/coll-of :portkey.aws.greengrass/logger :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass/map-of--string (clojure.spec.alpha/map-of :portkey.aws.greengrass/--string :portkey.aws.greengrass/--string))

(clojure.spec.alpha/def :portkey.aws.greengrass.logger/component (clojure.spec.alpha/and :portkey.aws.greengrass/logger-component))
(clojure.spec.alpha/def :portkey.aws.greengrass.logger/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.logger/level (clojure.spec.alpha/and :portkey.aws.greengrass/logger-level))
(clojure.spec.alpha/def :portkey.aws.greengrass.logger/space (clojure.spec.alpha/and :portkey.aws.greengrass/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.logger/type (clojure.spec.alpha/and :portkey.aws.greengrass/logger-type))
(clojure.spec.alpha/def :portkey.aws.greengrass/logger (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.logger/Component :portkey.aws.greengrass.logger/Id :portkey.aws.greengrass.logger/Level :portkey.aws.greengrass.logger/Space :portkey.aws.greengrass.logger/Type]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/deployments (clojure.spec.alpha/coll-of :portkey.aws.greengrass/deployment :max-count nil))

(clojure.core/defn create-device-definition ([input__47307__auto__] (create-device-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47417 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/CreateDeviceDefinitionRequest input47417)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47416] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47416)) (clojure.spec.alpha/unform :portkey.aws.greengrass/create-device-definition-response (:body response47416)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47416 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47416)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47416}))))))))))

(clojure.core/defn get-function-definition ([input__47307__auto__] (get-function-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47419 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetFunctionDefinitionRequest input47419)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47418] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47418)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-function-definition-response (:body response47418)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47418 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47418)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47418}))))))))))

(clojure.core/defn delete-group ([input__47307__auto__] (delete-group input__47307__auto__ portkey.aws/*http-client*)) ([input47421 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/DeleteGroupRequest input47421)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47420] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47420)) (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-group-response (:body response47420)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47420 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47420)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47420}))))))))))

(clojure.core/defn create-device-definition-version ([input__47307__auto__] (create-device-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47423 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/CreateDeviceDefinitionVersionRequest input47423)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47422] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47422)) (clojure.spec.alpha/unform :portkey.aws.greengrass/create-device-definition-version-response (:body response47422)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47422 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47422)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47422}))))))))))

(clojure.core/defn list-logger-definitions ([input__47307__auto__] (list-logger-definitions input__47307__auto__ portkey.aws/*http-client*)) ([input47425 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/ListLoggerDefinitionsRequest input47425)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47424] (clojure.core/let [errors__47310__auto__ {}] (if (clojure.core/= 200 (:status response47424)) (clojure.spec.alpha/unform :portkey.aws.greengrass/list-logger-definitions-response (:body response47424)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47424 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47424)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47424}))))))))))

(clojure.core/defn list-function-definitions ([input__47307__auto__] (list-function-definitions input__47307__auto__ portkey.aws/*http-client*)) ([input47427 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/ListFunctionDefinitionsRequest input47427)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47426] (clojure.core/let [errors__47310__auto__ {}] (if (clojure.core/= 200 (:status response47426)) (clojure.spec.alpha/unform :portkey.aws.greengrass/list-function-definitions-response (:body response47426)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47426 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47426)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47426}))))))))))

(clojure.core/defn create-function-definition ([input__47307__auto__] (create-function-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47429 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/CreateFunctionDefinitionRequest input47429)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47428] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47428)) (clojure.spec.alpha/unform :portkey.aws.greengrass/create-function-definition-response (:body response47428)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47428 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47428)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47428}))))))))))

(clojure.core/defn create-core-definition ([input__47307__auto__] (create-core-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47431 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/CreateCoreDefinitionRequest input47431)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47430] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47430)) (clojure.spec.alpha/unform :portkey.aws.greengrass/create-core-definition-response (:body response47430)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47430 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47430)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47430}))))))))))

(clojure.core/defn list-groups ([input__47307__auto__] (list-groups input__47307__auto__ portkey.aws/*http-client*)) ([input47433 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/ListGroupsRequest input47433)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47432] (clojure.core/let [errors__47310__auto__ {}] (if (clojure.core/= 200 (:status response47432)) (clojure.spec.alpha/unform :portkey.aws.greengrass/list-groups-response (:body response47432)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47432 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47432)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47432}))))))))))

(clojure.core/defn create-logger-definition ([input__47307__auto__] (create-logger-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47435 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/CreateLoggerDefinitionRequest input47435)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47434] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47434)) (clojure.spec.alpha/unform :portkey.aws.greengrass/create-logger-definition-response (:body response47434)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47434 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47434)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47434}))))))))))

(clojure.core/defn get-subscription-definition-version ([input__47307__auto__] (get-subscription-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47437 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetSubscriptionDefinitionVersionRequest input47437)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId", "SubscriptionDefinitionVersionId" "SubscriptionDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47436] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47436)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-subscription-definition-version-response (:body response47436)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47436 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47436)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47436}))))))))))

(clojure.core/defn list-function-definition-versions ([input__47307__auto__] (list-function-definition-versions input__47307__auto__ portkey.aws/*http-client*)) ([input47439 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/ListFunctionDefinitionVersionsRequest input47439)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47438] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47438)) (clojure.spec.alpha/unform :portkey.aws.greengrass/list-function-definition-versions-response (:body response47438)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47438 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47438)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47438}))))))))))

(clojure.core/defn update-logger-definition ([input__47307__auto__] (update-logger-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47441 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/UpdateLoggerDefinitionRequest input47441)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47440] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47440)) (clojure.spec.alpha/unform :portkey.aws.greengrass/update-logger-definition-response (:body response47440)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47440 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47440)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47440}))))))))))

(clojure.core/defn disassociate-service-role-from-account ([input__47307__auto__] (disassociate-service-role-from-account input__47307__auto__ portkey.aws/*http-client*)) ([input47443 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/DisassociateServiceRoleFromAccountRequest input47443)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47442] (clojure.core/let [errors__47310__auto__ {"InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47442)) (clojure.spec.alpha/unform :portkey.aws.greengrass/disassociate-service-role-from-account-response (:body response47442)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47442 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47442)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47442}))))))))))

(clojure.core/defn create-subscription-definition-version ([input__47307__auto__] (create-subscription-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47445 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/CreateSubscriptionDefinitionVersionRequest input47445)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47444] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47444)) (clojure.spec.alpha/unform :portkey.aws.greengrass/create-subscription-definition-version-response (:body response47444)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47444 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47444)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47444}))))))))))

(clojure.core/defn delete-subscription-definition ([input__47307__auto__] (delete-subscription-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47447 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/DeleteSubscriptionDefinitionRequest input47447)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47446] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47446)) (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-subscription-definition-response (:body response47446)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47446 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47446)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47446}))))))))))

(clojure.core/defn create-logger-definition-version ([input__47307__auto__] (create-logger-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47449 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/CreateLoggerDefinitionVersionRequest input47449)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47448] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47448)) (clojure.spec.alpha/unform :portkey.aws.greengrass/create-logger-definition-version-response (:body response47448)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47448 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47448)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47448}))))))))))

(clojure.core/defn delete-logger-definition ([input__47307__auto__] (delete-logger-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47451 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/DeleteLoggerDefinitionRequest input47451)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47450] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47450)) (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-logger-definition-response (:body response47450)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47450 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47450)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47450}))))))))))

(clojure.core/defn get-subscription-definition ([input__47307__auto__] (get-subscription-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47453 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetSubscriptionDefinitionRequest input47453)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47452] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47452)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-subscription-definition-response (:body response47452)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47452 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47452)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47452}))))))))))

(clojure.core/defn update-group-certificate-configuration ([input__47307__auto__] (update-group-certificate-configuration input__47307__auto__ portkey.aws/*http-client*)) ([input47455 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/UpdateGroupCertificateConfigurationRequest input47455)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47454] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47454)) (clojure.spec.alpha/unform :portkey.aws.greengrass/update-group-certificate-configuration-response (:body response47454)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47454 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47454)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47454}))))))))))

(clojure.core/defn create-deployment ([input__47307__auto__] (create-deployment input__47307__auto__ portkey.aws/*http-client*)) ([input47457 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/CreateDeploymentRequest input47457)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47456] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47456)) (clojure.spec.alpha/unform :portkey.aws.greengrass/create-deployment-response (:body response47456)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47456 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47456)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47456}))))))))))

(clojure.core/defn delete-device-definition ([input__47307__auto__] (delete-device-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47459 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/DeleteDeviceDefinitionRequest input47459)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47458] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47458)) (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-device-definition-response (:body response47458)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47458 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47458)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47458}))))))))))

(clojure.core/defn list-subscription-definitions ([input__47307__auto__] (list-subscription-definitions input__47307__auto__ portkey.aws/*http-client*)) ([input47461 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/ListSubscriptionDefinitionsRequest input47461)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47460] (clojure.core/let [errors__47310__auto__ {}] (if (clojure.core/= 200 (:status response47460)) (clojure.spec.alpha/unform :portkey.aws.greengrass/list-subscription-definitions-response (:body response47460)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47460 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47460)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47460}))))))))))

(clojure.core/defn list-group-versions ([input__47307__auto__] (list-group-versions input__47307__auto__ portkey.aws/*http-client*)) ([input47463 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/ListGroupVersionsRequest input47463)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47462] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47462)) (clojure.spec.alpha/unform :portkey.aws.greengrass/list-group-versions-response (:body response47462)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47462 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47462)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47462}))))))))))

(clojure.core/defn list-subscription-definition-versions ([input__47307__auto__] (list-subscription-definition-versions input__47307__auto__ portkey.aws/*http-client*)) ([input47465 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/ListSubscriptionDefinitionVersionsRequest input47465)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47464] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47464)) (clojure.spec.alpha/unform :portkey.aws.greengrass/list-subscription-definition-versions-response (:body response47464)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47464 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47464)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47464}))))))))))

(clojure.core/defn list-logger-definition-versions ([input__47307__auto__] (list-logger-definition-versions input__47307__auto__ portkey.aws/*http-client*)) ([input47467 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/ListLoggerDefinitionVersionsRequest input47467)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47466] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47466)) (clojure.spec.alpha/unform :portkey.aws.greengrass/list-logger-definition-versions-response (:body response47466)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47466 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47466)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47466}))))))))))

(clojure.core/defn get-associated-role ([input__47307__auto__] (get-associated-role input__47307__auto__ portkey.aws/*http-client*)) ([input47469 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetAssociatedRoleRequest input47469)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47468] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47468)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-associated-role-response (:body response47468)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47468 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47468)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47468}))))))))))

(clojure.core/defn get-group ([input__47307__auto__] (get-group input__47307__auto__ portkey.aws/*http-client*)) ([input47471 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetGroupRequest input47471)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47470] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47470)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-group-response (:body response47470)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47470 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47470)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47470}))))))))))

(clojure.core/defn update-group ([input__47307__auto__] (update-group input__47307__auto__ portkey.aws/*http-client*)) ([input47473 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/UpdateGroupRequest input47473)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47472] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47472)) (clojure.spec.alpha/unform :portkey.aws.greengrass/update-group-response (:body response47472)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47472 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47472)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47472}))))))))))

(clojure.core/defn get-group-certificate-authority ([input__47307__auto__] (get-group-certificate-authority input__47307__auto__ portkey.aws/*http-client*)) ([input47475 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetGroupCertificateAuthorityRequest input47475)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CertificateAuthorityId" "CertificateAuthorityId", "GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47474] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47474)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-group-certificate-authority-response (:body response47474)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47474 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47474)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47474}))))))))))

(clojure.core/defn get-core-definition ([input__47307__auto__] (get-core-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47477 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetCoreDefinitionRequest input47477)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47476] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47476)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-core-definition-response (:body response47476)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47476 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47476)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47476}))))))))))

(clojure.core/defn list-core-definitions ([input__47307__auto__] (list-core-definitions input__47307__auto__ portkey.aws/*http-client*)) ([input47479 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/ListCoreDefinitionsRequest input47479)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47478] (clojure.core/let [errors__47310__auto__ {}] (if (clojure.core/= 200 (:status response47478)) (clojure.spec.alpha/unform :portkey.aws.greengrass/list-core-definitions-response (:body response47478)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47478 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47478)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47478}))))))))))

(clojure.core/defn get-deployment-status ([input__47307__auto__] (get-deployment-status input__47307__auto__ portkey.aws/*http-client*)) ([input47481 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetDeploymentStatusRequest input47481)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeploymentId" "DeploymentId", "GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47480] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47480)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-deployment-status-response (:body response47480)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47480 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47480)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47480}))))))))))

(clojure.core/defn get-connectivity-info ([input__47307__auto__] (get-connectivity-info input__47307__auto__ portkey.aws/*http-client*)) ([input47483 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/things/{ThingName}/connectivityInfo"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetConnectivityInfoRequest input47483)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ThingName" "ThingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47482] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47482)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-connectivity-info-response (:body response47482)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47482 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47482)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47482}))))))))))

(clojure.core/defn get-device-definition ([input__47307__auto__] (get-device-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47485 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetDeviceDefinitionRequest input47485)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47484] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47484)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-device-definition-response (:body response47484)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47484 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47484)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47484}))))))))))

(clojure.core/defn list-deployments ([input__47307__auto__] (list-deployments input__47307__auto__ portkey.aws/*http-client*)) ([input47487 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/ListDeploymentsRequest input47487)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47486] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47486)) (clojure.spec.alpha/unform :portkey.aws.greengrass/list-deployments-response (:body response47486)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47486 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47486)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47486}))))))))))

(clojure.core/defn create-group-version ([input__47307__auto__] (create-group-version input__47307__auto__ portkey.aws/*http-client*)) ([input47489 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/CreateGroupVersionRequest input47489)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47488] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47488)) (clojure.spec.alpha/unform :portkey.aws.greengrass/create-group-version-response (:body response47488)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47488 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47488)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47488}))))))))))

(clojure.core/defn get-device-definition-version ([input__47307__auto__] (get-device-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47491 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetDeviceDefinitionVersionRequest input47491)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId", "DeviceDefinitionVersionId" "DeviceDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47490] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47490)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-device-definition-version-response (:body response47490)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47490 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47490)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47490}))))))))))

(clojure.core/defn update-function-definition ([input__47307__auto__] (update-function-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47493 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/UpdateFunctionDefinitionRequest input47493)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47492] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47492)) (clojure.spec.alpha/unform :portkey.aws.greengrass/update-function-definition-response (:body response47492)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47492 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47492)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47492}))))))))))

(clojure.core/defn delete-function-definition ([input__47307__auto__] (delete-function-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47495 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/DeleteFunctionDefinitionRequest input47495)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47494] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47494)) (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-function-definition-response (:body response47494)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47494 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47494)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47494}))))))))))

(clojure.core/defn list-core-definition-versions ([input__47307__auto__] (list-core-definition-versions input__47307__auto__ portkey.aws/*http-client*)) ([input47497 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/ListCoreDefinitionVersionsRequest input47497)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47496] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47496)) (clojure.spec.alpha/unform :portkey.aws.greengrass/list-core-definition-versions-response (:body response47496)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47496 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47496)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47496}))))))))))

(clojure.core/defn list-group-certificate-authorities ([input__47307__auto__] (list-group-certificate-authorities input__47307__auto__ portkey.aws/*http-client*)) ([input47499 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/ListGroupCertificateAuthoritiesRequest input47499)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47498] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47498)) (clojure.spec.alpha/unform :portkey.aws.greengrass/list-group-certificate-authorities-response (:body response47498)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47498 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47498)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47498}))))))))))

(clojure.core/defn get-logger-definition ([input__47307__auto__] (get-logger-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47501 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetLoggerDefinitionRequest input47501)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47500] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47500)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-logger-definition-response (:body response47500)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47500 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47500)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47500}))))))))))

(clojure.core/defn update-device-definition ([input__47307__auto__] (update-device-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47503 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/UpdateDeviceDefinitionRequest input47503)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47502] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47502)) (clojure.spec.alpha/unform :portkey.aws.greengrass/update-device-definition-response (:body response47502)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47502 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47502)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47502}))))))))))

(clojure.core/defn create-group-certificate-authority ([input__47307__auto__] (create-group-certificate-authority input__47307__auto__ portkey.aws/*http-client*)) ([input47505 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/CreateGroupCertificateAuthorityRequest input47505)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47504] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47504)) (clojure.spec.alpha/unform :portkey.aws.greengrass/create-group-certificate-authority-response (:body response47504)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47504 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47504)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47504}))))))))))

(clojure.core/defn create-function-definition-version ([input__47307__auto__] (create-function-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47507 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/CreateFunctionDefinitionVersionRequest input47507)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47506] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47506)) (clojure.spec.alpha/unform :portkey.aws.greengrass/create-function-definition-version-response (:body response47506)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47506 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47506)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47506}))))))))))

(clojure.core/defn get-core-definition-version ([input__47307__auto__] (get-core-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47509 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetCoreDefinitionVersionRequest input47509)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId", "CoreDefinitionVersionId" "CoreDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47508] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47508)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-core-definition-version-response (:body response47508)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47508 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47508)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47508}))))))))))

(clojure.core/defn get-function-definition-version ([input__47307__auto__] (get-function-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47511 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetFunctionDefinitionVersionRequest input47511)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId", "FunctionDefinitionVersionId" "FunctionDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47510] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47510)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-function-definition-version-response (:body response47510)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47510 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47510)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47510}))))))))))

(clojure.core/defn update-core-definition ([input__47307__auto__] (update-core-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47513 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/UpdateCoreDefinitionRequest input47513)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47512] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47512)) (clojure.spec.alpha/unform :portkey.aws.greengrass/update-core-definition-response (:body response47512)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47512 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47512)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47512}))))))))))

(clojure.core/defn associate-role-to-group ([input__47307__auto__] (associate-role-to-group input__47307__auto__ portkey.aws/*http-client*)) ([input47515 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/AssociateRoleToGroupRequest input47515)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47514] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47514)) (clojure.spec.alpha/unform :portkey.aws.greengrass/associate-role-to-group-response (:body response47514)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47514 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47514)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47514}))))))))))

(clojure.core/defn associate-service-role-to-account ([input__47307__auto__] (associate-service-role-to-account input__47307__auto__ portkey.aws/*http-client*)) ([input47517 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/AssociateServiceRoleToAccountRequest input47517)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47516] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47516)) (clojure.spec.alpha/unform :portkey.aws.greengrass/associate-service-role-to-account-response (:body response47516)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47516 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47516)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47516}))))))))))

(clojure.core/defn update-subscription-definition ([input__47307__auto__] (update-subscription-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47519 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/UpdateSubscriptionDefinitionRequest input47519)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47518] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47518)) (clojure.spec.alpha/unform :portkey.aws.greengrass/update-subscription-definition-response (:body response47518)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47518 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47518)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47518}))))))))))

(clojure.core/defn update-connectivity-info ([input__47307__auto__] (update-connectivity-info input__47307__auto__ portkey.aws/*http-client*)) ([input47521 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/things/{ThingName}/connectivityInfo"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/UpdateConnectivityInfoRequest input47521)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ThingName" "ThingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47520] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47520)) (clojure.spec.alpha/unform :portkey.aws.greengrass/update-connectivity-info-response (:body response47520)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47520 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47520)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47520}))))))))))

(clojure.core/defn create-group ([input__47307__auto__] (create-group input__47307__auto__ portkey.aws/*http-client*)) ([input47523 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/CreateGroupRequest input47523)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47522] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47522)) (clojure.spec.alpha/unform :portkey.aws.greengrass/create-group-response (:body response47522)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47522 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47522)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47522}))))))))))

(clojure.core/defn create-subscription-definition ([input__47307__auto__] (create-subscription-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47525 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/CreateSubscriptionDefinitionRequest input47525)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47524] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47524)) (clojure.spec.alpha/unform :portkey.aws.greengrass/create-subscription-definition-response (:body response47524)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47524 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47524)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47524}))))))))))

(clojure.core/defn get-group-version ([input__47307__auto__] (get-group-version input__47307__auto__ portkey.aws/*http-client*)) ([input47527 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions/{GroupVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetGroupVersionRequest input47527)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId", "GroupVersionId" "GroupVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47526] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47526)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-group-version-response (:body response47526)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47526 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47526)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47526}))))))))))

(clojure.core/defn get-service-role-for-account ([input__47307__auto__] (get-service-role-for-account input__47307__auto__ portkey.aws/*http-client*)) ([input47529 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetServiceRoleForAccountRequest input47529)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47528] (clojure.core/let [errors__47310__auto__ {"InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47528)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-service-role-for-account-response (:body response47528)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47528 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47528)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47528}))))))))))

(clojure.core/defn get-group-certificate-configuration ([input__47307__auto__] (get-group-certificate-configuration input__47307__auto__ portkey.aws/*http-client*)) ([input47531 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetGroupCertificateConfigurationRequest input47531)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47530] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47530)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-group-certificate-configuration-response (:body response47530)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47530 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47530)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47530}))))))))))

(clojure.core/defn delete-core-definition ([input__47307__auto__] (delete-core-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47533 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/DeleteCoreDefinitionRequest input47533)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47532] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47532)) (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-core-definition-response (:body response47532)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47532 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47532)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47532}))))))))))

(clojure.core/defn get-logger-definition-version ([input__47307__auto__] (get-logger-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47535 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/GetLoggerDefinitionVersionRequest input47535)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId", "LoggerDefinitionVersionId" "LoggerDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47534] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47534)) (clojure.spec.alpha/unform :portkey.aws.greengrass/get-logger-definition-version-response (:body response47534)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47534 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47534)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47534}))))))))))

(clojure.core/defn list-device-definition-versions ([input__47307__auto__] (list-device-definition-versions input__47307__auto__ portkey.aws/*http-client*)) ([input47537 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/ListDeviceDefinitionVersionsRequest input47537)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47536] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47536)) (clojure.spec.alpha/unform :portkey.aws.greengrass/list-device-definition-versions-response (:body response47536)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47536 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47536)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47536}))))))))))

(clojure.core/defn create-core-definition-version ([input__47307__auto__] (create-core-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47539 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/CreateCoreDefinitionVersionRequest input47539)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47538] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response47538)) (clojure.spec.alpha/unform :portkey.aws.greengrass/create-core-definition-version-response (:body response47538)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47538 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47538)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47538}))))))))))

(clojure.core/defn disassociate-role-from-group ([input__47307__auto__] (disassociate-role-from-group input__47307__auto__ portkey.aws/*http-client*)) ([input47541 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/DisassociateRoleFromGroupRequest input47541)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47540] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47540)) (clojure.spec.alpha/unform :portkey.aws.greengrass/disassociate-role-from-group-response (:body response47540)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47540 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47540)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47540}))))))))))

(clojure.core/defn list-device-definitions ([input__47307__auto__] (list-device-definitions input__47307__auto__ portkey.aws/*http-client*)) ([input47543 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/ListDeviceDefinitionsRequest input47543)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47542] (clojure.core/let [errors__47310__auto__ {}] (if (clojure.core/= 200 (:status response47542)) (clojure.spec.alpha/unform :portkey.aws.greengrass/list-device-definitions-response (:body response47542)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47542 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47542)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47542}))))))))))
