(ns portkey.aws.greengrass (:require [portkey.aws]))

(def
 endpoints
 '{"ap-southeast-2"
   {:credential-scope
    {:service "greengrass", :region "ap-southeast-2"},
    :ssl-common-name "greengrass.ap-southeast-2.amazonaws.com",
    :endpoint "https://greengrass.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "greengrass", :region "eu-central-1"},
    :ssl-common-name "greengrass.eu-central-1.amazonaws.com",
    :endpoint "https://greengrass.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "greengrass", :region "us-west-2"},
    :ssl-common-name "greengrass.us-west-2.amazonaws.com",
    :endpoint "https://greengrass.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "greengrass", :region "us-east-1"},
    :ssl-common-name "greengrass.us-east-1.amazonaws.com",
    :endpoint "https://greengrass.us-east-1.amazonaws.com",
    :signature-version :v4}})

(clojure.spec.alpha/def :portkey.aws.greengrass.device-definition-version/devices (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass/device-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.device-definition-version/Devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-function-definition-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.update-function-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-core-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-core-definition-version-response/Arn :portkey.aws.greengrass.get-core-definition-version-response/CreationTimestamp :portkey.aws.greengrass.get-core-definition-version-response/Definition :portkey.aws.greengrass.get-core-definition-version-response/Id :portkey.aws.greengrass.get-core-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.internal-server-error-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/internal-server-error-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass/ErrorDetails :portkey.aws.greengrass.internal-server-error-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-authority-properties/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-authority-properties/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/group-certificate-authority-properties (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.group-certificate-authority-properties/GroupCertificateAuthorityArn :portkey.aws.greengrass.group-certificate-authority-properties/GroupCertificateAuthorityId]))

(clojure.spec.alpha/def :portkey.aws.greengrass/empty (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-logger-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-logger-definition-version-response/Arn :portkey.aws.greengrass.create-logger-definition-version-response/CreationTimestamp :portkey.aws.greengrass.create-logger-definition-version-response/Id :portkey.aws.greengrass.create-logger-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-core-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-core-definition-request/AmznClientToken :portkey.aws.greengrass.create-core-definition-request/InitialVersion :portkey.aws.greengrass.create-core-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.definition-information/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/definition-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.definition-information/Arn :portkey.aws.greengrass.definition-information/CreationTimestamp :portkey.aws.greengrass.definition-information/Id :portkey.aws.greengrass.definition-information/LastUpdatedTimestamp :portkey.aws.greengrass.definition-information/LatestVersion :portkey.aws.greengrass.definition-information/LatestVersionArn :portkey.aws.greengrass.definition-information/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-core-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-core-definition-versions-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.list-core-definition-versions-request/MaxResults :portkey.aws.greengrass.list-core-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/--timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-device-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-device-definition-version-response/Arn :portkey.aws.greengrass.create-device-definition-version-response/CreationTimestamp :portkey.aws.greengrass.create-device-definition-version-response/Id :portkey.aws.greengrass.create-device-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-function-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-function-definition-version-response/Arn :portkey.aws.greengrass.get-function-definition-version-response/CreationTimestamp :portkey.aws.greengrass.get-function-definition-version-response/Definition :portkey.aws.greengrass.get-function-definition-version-response/Id :portkey.aws.greengrass.get-function-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-response/deployment-status (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-response/error-message (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-response/updated-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-deployment-status-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-deployment-status-response/DeploymentStatus :portkey.aws.greengrass.get-deployment-status-response/ErrorMessage :portkey.aws.greengrass.get-deployment-status-response/UpdatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-function-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-function-definition-versions-response/NextToken :portkey.aws.greengrass.list-function-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-device (clojure.spec.alpha/coll-of :portkey.aws.greengrass/device :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-request/cores (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-core-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-core-definition-version-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.create-core-definition-version-request/AmznClientToken :portkey.aws.greengrass.create-core-definition-version-request/Cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-logger-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-logger-definition-request/AmznClientToken :portkey.aws.greengrass.create-logger-definition-request/InitialVersion :portkey.aws.greengrass.create-logger-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-version-request/loggers (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-logger-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-logger-definition-version-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.create-logger-definition-version-request/AmznClientToken :portkey.aws.greengrass.create-logger-definition-version-request/Loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.associate-role-to-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.associate-role-to-group-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/associate-role-to-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.associate-role-to-group-request/GroupId] :opt-un [:portkey.aws.greengrass.associate-role-to-group-request/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-version-request/devices (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-device-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-device-definition-version-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.create-device-definition-version-request/AmznClientToken :portkey.aws.greengrass.create-device-definition-version-request/Devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.deployment/created-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.deployment/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.deployment/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.deployment/group-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/deployment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.deployment/CreatedAt :portkey.aws.greengrass.deployment/DeploymentArn :portkey.aws.greengrass.deployment/DeploymentId :portkey.aws.greengrass.deployment/GroupArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/bad-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass/ErrorDetails :portkey.aws.greengrass.bad-request-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-device-definition-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/deployment-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"NewDeployment" "NewDeployment", :new-deployment "NewDeployment", "Redeployment" "Redeployment", :redeployment "Redeployment"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-subscription-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-subscription-definition-versions-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.list-subscription-definition-versions-request/MaxResults :portkey.aws.greengrass.list-subscription-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/logger-level (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {:warn "WARN", "WARN" "WARN", :debug "DEBUG", "ERROR" "ERROR", :fatal "FATAL", "DEBUG" "DEBUG", "FATAL" "FATAL", :info "INFO", :error "ERROR", "INFO" "INFO"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass/get-service-role-for-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.connectivity-info/host-address (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.connectivity-info/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.connectivity-info/metadata (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.connectivity-info/port-number (clojure.spec.alpha/and :portkey.aws.greengrass/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass/connectivity-info (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.connectivity-info/HostAddress :portkey.aws.greengrass.connectivity-info/Id :portkey.aws.greengrass.connectivity-info/Metadata :portkey.aws.greengrass.connectivity-info/PortNumber]))

(clojure.spec.alpha/def :portkey.aws.greengrass.associate-service-role-to-account-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/associate-service-role-to-account-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.associate-service-role-to-account-request/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-subscription-definition-response/Arn :portkey.aws.greengrass.create-subscription-definition-response/CreationTimestamp :portkey.aws.greengrass.create-subscription-definition-response/Id :portkey.aws.greengrass.create-subscription-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.create-subscription-definition-response/LatestVersion :portkey.aws.greengrass.create-subscription-definition-response/LatestVersionArn :portkey.aws.greengrass.create-subscription-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-request/subscription-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-subscription-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-subscription-definition-version-request/SubscriptionDefinitionId :portkey.aws.greengrass.get-subscription-definition-version-request/SubscriptionDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-logger-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-logger-definition-versions-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.list-logger-definition-versions-request/MaxResults :portkey.aws.greengrass.list-logger-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-function-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-function-definitions-response/Definitions :portkey.aws.greengrass.list-function-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/logger-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"FileSystem" "FileSystem", :file-system "FileSystem", "AWSCloudWatch" "AWSCloudWatch", :awscloud-watch "AWSCloudWatch"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-core-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-core-definitions-request/MaxResults :portkey.aws.greengrass.list-core-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-device-definition-response/Arn :portkey.aws.greengrass.get-device-definition-response/CreationTimestamp :portkey.aws.greengrass.get-device-definition-response/Id :portkey.aws.greengrass.get-device-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.get-device-definition-response/LatestVersion :portkey.aws.greengrass.get-device-definition-response/LatestVersionArn :portkey.aws.greengrass.get-device-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.associate-service-role-to-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/associate-service-role-to-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.associate-service-role-to-account-response/AssociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass/--string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-associated-role-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-associated-role-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-associated-role-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-associated-role-response/AssociatedAt :portkey.aws.greengrass.get-associated-role-response/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-certificate-authority-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-certificate-authority-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-group-certificate-authority-request/GroupId] :opt-un [:portkey.aws.greengrass.create-group-certificate-authority-request/AmznClientToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-group-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass/group-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-response/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-response/pem-encoded-certificate (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-certificate-authority-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-group-certificate-authority-response/GroupCertificateAuthorityArn :portkey.aws.greengrass.get-group-certificate-authority-response/GroupCertificateAuthorityId :portkey.aws.greengrass.get-group-certificate-authority-response/PemEncodedCertificate]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-core-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-core-definitions-response/Definitions :portkey.aws.greengrass.list-core-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-core (clojure.spec.alpha/coll-of :portkey.aws.greengrass/core :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.disassociate-role-from-group-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/disassociate-role-from-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.disassociate-role-from-group-response/DisassociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-version-request/function-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-function-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-function-definition-version-request/FunctionDefinitionId :portkey.aws.greengrass.get-function-definition-version-request/FunctionDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-associated-role-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-associated-role-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-associated-role-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-device-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-device-definition-versions-response/NextToken :portkey.aws.greengrass.list-device-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.function-definition-version/functions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass/function-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.function-definition-version/Functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.logger-definition-version/loggers (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass/logger-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.logger-definition-version/Loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-subscription-definition-request/SubscriptionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-request/device-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-device-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-device-definition-version-request/DeviceDefinitionVersionId :portkey.aws.greengrass.get-device-definition-version-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-subscription-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-subscription-definitions-request/MaxResults :portkey.aws.greengrass.list-subscription-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-subscription-definition-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.update-subscription-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-group-response/Arn :portkey.aws.greengrass.get-group-response/CreationTimestamp :portkey.aws.greengrass.get-group-response/Id :portkey.aws.greengrass.get-group-response/LastUpdatedTimestamp :portkey.aws.greengrass.get-group-response/LatestVersion :portkey.aws.greengrass.get-group-response/LatestVersionArn :portkey.aws.greengrass.get-group-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-group-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.disassociate-role-from-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/disassociate-role-from-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.disassociate-role-from-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-group-certificate-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.update-group-certificate-configuration-response/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.update-group-certificate-configuration-response/CertificateExpiryInMilliseconds :portkey.aws.greengrass.update-group-certificate-configuration-response/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-group-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-group-versions-request/GroupId] :opt-un [:portkey.aws.greengrass.list-group-versions-request/MaxResults :portkey.aws.greengrass.list-group-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-groups-response/groups (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-group-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-groups-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-groups-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-groups-response/Groups :portkey.aws.greengrass.list-groups-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-configuration/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-configuration/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-certificate-configuration/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/group-certificate-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.group-certificate-configuration/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.group-certificate-configuration/CertificateExpiryInMilliseconds :portkey.aws.greengrass.group-certificate-configuration/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-device-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-device-definitions-request/MaxResults :portkey.aws.greengrass.list-device-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-subscription-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-subscription-definition-version-response/Arn :portkey.aws.greengrass.create-subscription-definition-version-response/CreationTimestamp :portkey.aws.greengrass.create-subscription-definition-version-response/Id :portkey.aws.greengrass.create-subscription-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-group-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.associate-role-to-group-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/associate-role-to-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.associate-role-to-group-response/AssociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-connectivity-info-request/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-connectivity-info-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-connectivity-info-request/ThingName] :opt-un [:portkey.aws.greengrass.update-connectivity-info-request/ConnectivityInfo]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-version-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass/version-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.version-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.version-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.version-information/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.version-information/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/version-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.version-information/Arn :portkey.aws.greengrass.version-information/CreationTimestamp :portkey.aws.greengrass.version-information/Id :portkey.aws.greengrass.version-information/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-core-definition-response/Arn :portkey.aws.greengrass.get-core-definition-response/CreationTimestamp :portkey.aws.greengrass.get-core-definition-response/Id :portkey.aws.greengrass.get-core-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.get-core-definition-response/LatestVersion :portkey.aws.greengrass.get-core-definition-response/LatestVersionArn :portkey.aws.greengrass.get-core-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-logger-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-logger-definition-version-response/Arn :portkey.aws.greengrass.get-logger-definition-version-response/CreationTimestamp :portkey.aws.greengrass.get-logger-definition-version-response/Definition :portkey.aws.greengrass.get-logger-definition-version-response/Id :portkey.aws.greengrass.get-logger-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-function-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-function-definition-versions-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.list-function-definition-versions-request/MaxResults :portkey.aws.greengrass.list-function-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-function-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-function-definition-request/AmznClientToken :portkey.aws.greengrass.create-function-definition-request/InitialVersion :portkey.aws.greengrass.create-function-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-logger-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-logger-definitions-request/MaxResults :portkey.aws.greengrass.list-logger-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-device-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-device-definitions-response/Definitions :portkey.aws.greengrass.list-device-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-device-definition-response/Arn :portkey.aws.greengrass.create-device-definition-response/CreationTimestamp :portkey.aws.greengrass.create-device-definition-response/Id :portkey.aws.greengrass.create-device-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.create-device-definition-response/LatestVersion :portkey.aws.greengrass.create-device-definition-response/LatestVersionArn :portkey.aws.greengrass.create-device-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-version/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/group-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.group-version/CoreDefinitionVersionArn :portkey.aws.greengrass.group-version/DeviceDefinitionVersionArn :portkey.aws.greengrass.group-version/FunctionDefinitionVersionArn :portkey.aws.greengrass.group-version/LoggerDefinitionVersionArn :portkey.aws.greengrass.group-version/SubscriptionDefinitionVersionArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.group-information/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/group-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.group-information/Arn :portkey.aws.greengrass.group-information/CreationTimestamp :portkey.aws.greengrass.group-information/Id :portkey.aws.greengrass.group-information/LastUpdatedTimestamp :portkey.aws.greengrass.group-information/LatestVersion :portkey.aws.greengrass.group-information/LatestVersionArn :portkey.aws.greengrass.group-information/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.delete-function-definition-request/FunctionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.error-detail/detailed-error-code (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.error-detail/detailed-error-message (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/error-detail (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.error-detail/DetailedErrorCode :portkey.aws.greengrass.error-detail/DetailedErrorMessage]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-subscription-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-subscription-definition-version-response/Arn :portkey.aws.greengrass.get-subscription-definition-version-response/CreationTimestamp :portkey.aws.greengrass.get-subscription-definition-version-response/Definition :portkey.aws.greengrass.get-subscription-definition-version-response/Id :portkey.aws.greengrass.get-subscription-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-logger-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-logger-definition-versions-response/NextToken :portkey.aws.greengrass.list-logger-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-version-request/logger-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-logger-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-logger-definition-version-request/LoggerDefinitionVersionId :portkey.aws.greengrass.get-logger-definition-version-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-logger-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-logger-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-logger-definitions-response/Definitions :portkey.aws.greengrass.list-logger-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-service-role-for-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-service-role-for-account-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-service-role-for-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-service-role-for-account-response/AssociatedAt :portkey.aws.greengrass.get-service-role-for-account-response/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-group-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-group-versions-response/NextToken :portkey.aws.greengrass.list-group-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-certificate-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-group-certificate-configuration-response/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.get-group-certificate-configuration-response/CertificateExpiryInMilliseconds :portkey.aws.greengrass.get-group-certificate-configuration-response/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-connectivity-info-response/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-connectivity-info-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-connectivity-info-response/ConnectivityInfo :portkey.aws.greengrass.get-connectivity-info-response/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-deployments-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-deployments-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-deployments-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-deployments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-deployments-request/GroupId] :opt-un [:portkey.aws.greengrass.list-deployments-request/MaxResults :portkey.aws.greengrass.list-deployments-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/--boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-definition-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass/definition-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.disassociate-service-role-from-account-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/disassociate-service-role-from-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.disassociate-service-role-from-account-response/DisassociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-certificate-authorities-response/group-certificate-authorities (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-group-certificate-authority-properties))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-group-certificate-authorities-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-group-certificate-authorities-response/GroupCertificateAuthorities]))

(clojure.spec.alpha/def :portkey.aws.greengrass.core-definition-version/cores (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass/core-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.core-definition-version/Cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-deployment-request/GroupId] :opt-un [:portkey.aws.greengrass.create-deployment-request/AmznClientToken :portkey.aws.greengrass.create-deployment-request/DeploymentId :portkey.aws.greengrass/DeploymentType :portkey.aws.greengrass.create-deployment-request/GroupVersionId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-versions-response/NextToken :portkey.aws.greengrass.list-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.subscription-definition-version/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass/subscription-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.subscription-definition-version/Subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.delete-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.delete-subscription-definition-request/SubscriptionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-group-certificate-authorities-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-group-certificate-authorities-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-group-certificate-authorities-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-core-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-core-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-core-definition-versions-response/NextToken :portkey.aws.greengrass.list-core-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-certificate-authority-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-group-certificate-authority-response/GroupCertificateAuthorityArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-logger-definition-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.update-logger-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-core-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-core-definition-version-response/Arn :portkey.aws.greengrass.create-core-definition-version-response/CreationTimestamp :portkey.aws.greengrass.create-core-definition-version-response/Id :portkey.aws.greengrass.create-core-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.delete-core-definition-request/CoreDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-request/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-group-certificate-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-group-certificate-configuration-request/GroupId] :opt-un [:portkey.aws.greengrass.update-group-certificate-configuration-request/CertificateExpiryInMilliseconds]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-deployment-status-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-deployment-status-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-deployment-status-request/GroupId :portkey.aws.greengrass.get-deployment-status-request/DeploymentId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-request/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-group-version-request/GroupId] :opt-un [:portkey.aws.greengrass.create-group-version-request/AmznClientToken :portkey.aws.greengrass.create-group-version-request/CoreDefinitionVersionArn :portkey.aws.greengrass.create-group-version-request/DeviceDefinitionVersionArn :portkey.aws.greengrass.create-group-version-request/FunctionDefinitionVersionArn :portkey.aws.greengrass.create-group-version-request/LoggerDefinitionVersionArn :portkey.aws.greengrass.create-group-version-request/SubscriptionDefinitionVersionArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-core-definition-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.update-core-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-subscription-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-subscription-definitions-response/Definitions :portkey.aws.greengrass.list-subscription-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-group-version-response/Arn :portkey.aws.greengrass.get-group-version-response/CreationTimestamp :portkey.aws.greengrass.get-group-version-response/Definition :portkey.aws.greengrass.get-group-version-response/Id :portkey.aws.greengrass.get-group-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-version-request/core-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-core-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-core-definition-version-request/CoreDefinitionId :portkey.aws.greengrass.get-core-definition-version-request/CoreDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/update-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-device-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-device-definition-version-response/Arn :portkey.aws.greengrass.get-device-definition-version-response/CreationTimestamp :portkey.aws.greengrass.get-device-definition-version-response/Definition :portkey.aws.greengrass.get-device-definition-version-response/Id :portkey.aws.greengrass.get-device-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-function-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-function-definition-version-response/Arn :portkey.aws.greengrass.create-function-definition-version-response/CreationTimestamp :portkey.aws.greengrass.create-function-definition-version-response/Id :portkey.aws.greengrass.create-function-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/environment (clojure.spec.alpha/and :portkey.aws.greengrass/function-configuration-environment))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/exec-args (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/executable (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/memory-size (clojure.spec.alpha/and :portkey.aws.greengrass/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/pinned (clojure.spec.alpha/and :portkey.aws.greengrass/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration/timeout (clojure.spec.alpha/and :portkey.aws.greengrass/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass/function-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.function-configuration/Environment :portkey.aws.greengrass.function-configuration/ExecArgs :portkey.aws.greengrass.function-configuration/Executable :portkey.aws.greengrass.function-configuration/MemorySize :portkey.aws.greengrass.function-configuration/Pinned :portkey.aws.greengrass.function-configuration/Timeout]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-device-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-device-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.list-device-definition-versions-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.list-device-definition-versions-request/MaxResults :portkey.aws.greengrass.list-device-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-groups-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-groups-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-groups-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-groups-request/MaxResults :portkey.aws.greengrass.list-groups-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-subscription-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-subscription-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-subscription-definition-versions-response/NextToken :portkey.aws.greengrass.list-subscription-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass/--double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.greengrass.function-configuration-environment/variables (clojure.spec.alpha/and :portkey.aws.greengrass/map-of--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/function-configuration-environment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.function-configuration-environment/Variables]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-group-response/Arn :portkey.aws.greengrass.create-group-response/CreationTimestamp :portkey.aws.greengrass.create-group-response/Id :portkey.aws.greengrass.create-group-response/LastUpdatedTimestamp :portkey.aws.greengrass.create-group-response/LatestVersion :portkey.aws.greengrass.create-group-response/LatestVersionArn :portkey.aws.greengrass.create-group-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/error-details (clojure.spec.alpha/coll-of :portkey.aws.greengrass/error-detail :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-function-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-function-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-function-definitions-request/MaxResults :portkey.aws.greengrass.list-function-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-logger-definition-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.subscription/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.subscription/source (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.subscription/subject (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.subscription/target (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/subscription (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.subscription/Id :portkey.aws.greengrass.subscription/Source :portkey.aws.greengrass.subscription/Subject :portkey.aws.greengrass.subscription/Target]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-group-request/AmznClientToken :portkey.aws.greengrass.create-group-request/InitialVersion :portkey.aws.greengrass.create-group-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.core/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.core/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.core/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.core/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/core (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.core/CertificateArn :portkey.aws.greengrass.core/Id :portkey.aws.greengrass.core/SyncShadow :portkey.aws.greengrass.core/ThingArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-version-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-group-version-request/GroupVersionId :portkey.aws.greengrass.get-group-version-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/disassociate-service-role-from-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-version-request/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-subscription-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-subscription-definition-version-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.create-subscription-definition-version-request/AmznClientToken :portkey.aws.greengrass.create-subscription-definition-version-request/Subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-certificate-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-group-certificate-configuration-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-deployments-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-deployments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass/Deployments :portkey.aws.greengrass.list-deployments-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-subscription (clojure.spec.alpha/coll-of :portkey.aws.greengrass/subscription :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-version-request/functions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-function-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.create-function-definition-version-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.create-function-definition-version-request/AmznClientToken :portkey.aws.greengrass.create-function-definition-version-request/Functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.function/function-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.function/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/function (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.function/FunctionArn :portkey.aws.greengrass/FunctionConfiguration :portkey.aws.greengrass.function/Id]))

(clojure.spec.alpha/def :portkey.aws.greengrass/--integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-response/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-deployment-response/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-deployment-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-deployment-response/DeploymentArn :portkey.aws.greengrass.create-deployment-response/DeploymentId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.delete-logger-definition-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.delete-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/delete-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.delete-device-definition-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-logger-definition-response/Arn :portkey.aws.greengrass.get-logger-definition-response/CreationTimestamp :portkey.aws.greengrass.get-logger-definition-response/Id :portkey.aws.greengrass.get-logger-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.get-logger-definition-response/LatestVersion :portkey.aws.greengrass.get-logger-definition-response/LatestVersionArn :portkey.aws.greengrass.get-logger-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-subscription-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-subscription-definition-request/AmznClientToken :portkey.aws.greengrass.create-subscription-definition-request/InitialVersion :portkey.aws.greengrass.create-subscription-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-device-definition-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.update-device-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-subscription-definition-response/Arn :portkey.aws.greengrass.get-subscription-definition-response/CreationTimestamp :portkey.aws.greengrass.get-subscription-definition-response/Id :portkey.aws.greengrass.get-subscription-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.get-subscription-definition-response/LatestVersion :portkey.aws.greengrass.get-subscription-definition-response/LatestVersionArn :portkey.aws.greengrass.get-subscription-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-core-definition-request/CoreDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-request/certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-group-certificate-authority-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-group-certificate-authority-request/CertificateAuthorityId :portkey.aws.greengrass.get-group-certificate-authority-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-logger-definition-response/Arn :portkey.aws.greengrass.create-logger-definition-response/CreationTimestamp :portkey.aws.greengrass.create-logger-definition-response/Id :portkey.aws.greengrass.create-logger-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.create-logger-definition-response/LatestVersion :portkey.aws.greengrass.create-logger-definition-response/LatestVersionArn :portkey.aws.greengrass.create-logger-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.device/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.device/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.device/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.device/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/device (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.device/CertificateArn :portkey.aws.greengrass.device/Id :portkey.aws.greengrass.device/SyncShadow :portkey.aws.greengrass.device/ThingArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass/logger-component (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"GreengrassSystem" "GreengrassSystem", :greengrass-system "GreengrassSystem", "Lambda" "Lambda", :lambda "Lambda"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-function-definition-request/FunctionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-connectivity-info (clojure.spec.alpha/coll-of :portkey.aws.greengrass/connectivity-info :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-device-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-device-definition-request/AmznClientToken :portkey.aws.greengrass.create-device-definition-request/InitialVersion :portkey.aws.greengrass.create-device-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-group-certificate-authority-properties (clojure.spec.alpha/coll-of :portkey.aws.greengrass/group-certificate-authority-properties :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-connectivity-info-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.get-connectivity-info-request/ThingName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-group-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-group-version-response/Arn :portkey.aws.greengrass.create-group-version-response/CreationTimestamp :portkey.aws.greengrass.create-group-version-response/Id :portkey.aws.greengrass.create-group-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.list-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.list-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/list-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.list-definitions-response/Definitions :portkey.aws.greengrass.list-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-core-definition-response/Arn :portkey.aws.greengrass.create-core-definition-response/CreationTimestamp :portkey.aws.greengrass.create-core-definition-response/Id :portkey.aws.greengrass.create-core-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.create-core-definition-response/LatestVersion :portkey.aws.greengrass.create-core-definition-response/LatestVersionArn :portkey.aws.greengrass.create-core-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.general-error/message (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/general-error (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass/ErrorDetails :portkey.aws.greengrass.general-error/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-function (clojure.spec.alpha/coll-of :portkey.aws.greengrass/function :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.create-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/create-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.create-function-definition-response/Arn :portkey.aws.greengrass.create-function-definition-response/CreationTimestamp :portkey.aws.greengrass.create-function-definition-response/Id :portkey.aws.greengrass.create-function-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.create-function-definition-response/LatestVersion :portkey.aws.greengrass.create-function-definition-response/LatestVersionArn :portkey.aws.greengrass.create-function-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-connectivity-info-response/version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-connectivity-info-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.update-connectivity-info-response/Message :portkey.aws.greengrass.update-connectivity-info-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.get-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/get-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.get-function-definition-response/Arn :portkey.aws.greengrass.get-function-definition-response/CreationTimestamp :portkey.aws.greengrass.get-function-definition-response/Id :portkey.aws.greengrass.get-function-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.get-function-definition-response/LatestVersion :portkey.aws.greengrass.get-function-definition-response/LatestVersionArn :portkey.aws.greengrass.get-function-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.update-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass/update-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.update-group-request/GroupId] :opt-un [:portkey.aws.greengrass.update-group-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass/list-of-logger (clojure.spec.alpha/coll-of :portkey.aws.greengrass/logger :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass/map-of--string (clojure.spec.alpha/map-of :portkey.aws.greengrass/--string :portkey.aws.greengrass/--string))

(clojure.spec.alpha/def :portkey.aws.greengrass.logger/component (clojure.spec.alpha/and :portkey.aws.greengrass/logger-component))
(clojure.spec.alpha/def :portkey.aws.greengrass.logger/id (clojure.spec.alpha/and :portkey.aws.greengrass/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.logger/level (clojure.spec.alpha/and :portkey.aws.greengrass/logger-level))
(clojure.spec.alpha/def :portkey.aws.greengrass.logger/space (clojure.spec.alpha/and :portkey.aws.greengrass/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.logger/type (clojure.spec.alpha/and :portkey.aws.greengrass/logger-type))
(clojure.spec.alpha/def :portkey.aws.greengrass/logger (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.logger/Component :portkey.aws.greengrass.logger/Id :portkey.aws.greengrass.logger/Level :portkey.aws.greengrass.logger/Space :portkey.aws.greengrass.logger/Type]))

(clojure.spec.alpha/def :portkey.aws.greengrass/delete-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass/deployments (clojure.spec.alpha/coll-of :portkey.aws.greengrass/deployment :max-count nil))

(clojure.core/defn create-device-definition [input112835] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/create-device-definition-request input112835)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112834] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112834)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/create-device-definition-response (:body response112834))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112834 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112834)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112834}))])))))))
(clojure.spec.alpha/fdef create-device-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-device-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-device-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-device-definition-response))

(clojure.core/defn get-function-definition [input112837] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-function-definition-request input112837)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112836] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112836)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-function-definition-response (:body response112836))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112836 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112836)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112836}))])))))))
(clojure.spec.alpha/fdef get-function-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-function-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-function-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-function-definition-response))

(clojure.core/defn delete-group [input112839] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-group-request input112839)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112838] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112838)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-group-response (:body response112838))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112838 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112838)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112838}))])))))))
(clojure.spec.alpha/fdef delete-group :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-group-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-group-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/delete-group-response))

(clojure.core/defn create-device-definition-version [input112841] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/create-device-definition-version-request input112841)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112840] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112840)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/create-device-definition-version-response (:body response112840))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112840 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112840)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112840}))])))))))
(clojure.spec.alpha/fdef create-device-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-device-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-device-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-device-definition-version-response))

(clojure.core/defn list-logger-definitions [input112843] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/list-logger-definitions-request input112843)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112842] (clojure.core/let [errors__109313__auto__ {}] (if (clojure.core/= 200 (:status response112842)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/list-logger-definitions-response (:body response112842))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112842 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112842)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112842}))])))))))
(clojure.spec.alpha/fdef list-logger-definitions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-logger-definitions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-logger-definitions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-logger-definitions-response))

(clojure.core/defn list-function-definitions [input112845] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/list-function-definitions-request input112845)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112844] (clojure.core/let [errors__109313__auto__ {}] (if (clojure.core/= 200 (:status response112844)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/list-function-definitions-response (:body response112844))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112844 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112844)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112844}))])))))))
(clojure.spec.alpha/fdef list-function-definitions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-function-definitions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-function-definitions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-function-definitions-response))

(clojure.core/defn create-function-definition [input112847] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/create-function-definition-request input112847)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112846] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112846)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/create-function-definition-response (:body response112846))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112846 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112846)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112846}))])))))))
(clojure.spec.alpha/fdef create-function-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-function-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-function-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-function-definition-response))

(clojure.core/defn create-core-definition [input112849] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/create-core-definition-request input112849)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112848] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112848)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/create-core-definition-response (:body response112848))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112848 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112848)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112848}))])))))))
(clojure.spec.alpha/fdef create-core-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-core-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-core-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-core-definition-response))

(clojure.core/defn list-groups [input112851] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/list-groups-request input112851)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112850] (clojure.core/let [errors__109313__auto__ {}] (if (clojure.core/= 200 (:status response112850)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/list-groups-response (:body response112850))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112850 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112850)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112850}))])))))))
(clojure.spec.alpha/fdef list-groups :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-groups-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-groups-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-groups-response))

(clojure.core/defn create-logger-definition [input112853] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/create-logger-definition-request input112853)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112852] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112852)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/create-logger-definition-response (:body response112852))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112852 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112852)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112852}))])))))))
(clojure.spec.alpha/fdef create-logger-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-logger-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-logger-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-logger-definition-response))

(clojure.core/defn get-subscription-definition-version [input112855] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-subscription-definition-version-request input112855)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId", "SubscriptionDefinitionVersionId" "SubscriptionDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112854] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112854)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-subscription-definition-version-response (:body response112854))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112854 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112854)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112854}))])))))))
(clojure.spec.alpha/fdef get-subscription-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-subscription-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-subscription-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-subscription-definition-version-response))

(clojure.core/defn list-function-definition-versions [input112857] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/list-function-definition-versions-request input112857)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112856] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112856)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/list-function-definition-versions-response (:body response112856))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112856 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112856)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112856}))])))))))
(clojure.spec.alpha/fdef list-function-definition-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-function-definition-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-function-definition-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-function-definition-versions-response))

(clojure.core/defn update-logger-definition [input112859] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/update-logger-definition-request input112859)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112858] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112858)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/update-logger-definition-response (:body response112858))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112858 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112858)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112858}))])))))))
(clojure.spec.alpha/fdef update-logger-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-logger-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-logger-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-logger-definition-response))

(clojure.core/defn disassociate-service-role-from-account [input112861] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/disassociate-service-role-from-account-request input112861)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112860] (clojure.core/let [errors__109313__auto__ {"InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response112860)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/disassociate-service-role-from-account-response (:body response112860))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112860 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112860)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112860}))])))))))
(clojure.spec.alpha/fdef disassociate-service-role-from-account :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/disassociate-service-role-from-account-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/disassociate-service-role-from-account-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/disassociate-service-role-from-account-response))

(clojure.core/defn create-subscription-definition-version [input112863] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/create-subscription-definition-version-request input112863)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112862] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112862)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/create-subscription-definition-version-response (:body response112862))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112862 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112862)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112862}))])))))))
(clojure.spec.alpha/fdef create-subscription-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-subscription-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-subscription-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-subscription-definition-version-response))

(clojure.core/defn delete-subscription-definition [input112865] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-subscription-definition-request input112865)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112864] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112864)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-subscription-definition-response (:body response112864))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112864 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112864)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112864}))])))))))
(clojure.spec.alpha/fdef delete-subscription-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-subscription-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-subscription-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/delete-subscription-definition-response))

(clojure.core/defn create-logger-definition-version [input112867] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/create-logger-definition-version-request input112867)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112866] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112866)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/create-logger-definition-version-response (:body response112866))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112866 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112866)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112866}))])))))))
(clojure.spec.alpha/fdef create-logger-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-logger-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-logger-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-logger-definition-version-response))

(clojure.core/defn delete-logger-definition [input112869] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-logger-definition-request input112869)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112868] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112868)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-logger-definition-response (:body response112868))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112868 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112868)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112868}))])))))))
(clojure.spec.alpha/fdef delete-logger-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-logger-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-logger-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/delete-logger-definition-response))

(clojure.core/defn get-subscription-definition [input112871] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-subscription-definition-request input112871)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112870] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112870)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-subscription-definition-response (:body response112870))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112870 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112870)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112870}))])))))))
(clojure.spec.alpha/fdef get-subscription-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-subscription-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-subscription-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-subscription-definition-response))

(clojure.core/defn update-group-certificate-configuration [input112873] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/update-group-certificate-configuration-request input112873)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112872] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response112872)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/update-group-certificate-configuration-response (:body response112872))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112872 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112872)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112872}))])))))))
(clojure.spec.alpha/fdef update-group-certificate-configuration :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-group-certificate-configuration-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-group-certificate-configuration-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-group-certificate-configuration-response))

(clojure.core/defn create-deployment [input112875] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/create-deployment-request input112875)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112874] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112874)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/create-deployment-response (:body response112874))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112874 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112874)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112874}))])))))))
(clojure.spec.alpha/fdef create-deployment :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-deployment-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-deployment-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-deployment-response))

(clojure.core/defn delete-device-definition [input112877] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-device-definition-request input112877)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112876] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112876)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-device-definition-response (:body response112876))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112876 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112876)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112876}))])))))))
(clojure.spec.alpha/fdef delete-device-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-device-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-device-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/delete-device-definition-response))

(clojure.core/defn list-subscription-definitions [input112879] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/list-subscription-definitions-request input112879)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112878] (clojure.core/let [errors__109313__auto__ {}] (if (clojure.core/= 200 (:status response112878)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/list-subscription-definitions-response (:body response112878))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112878 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112878)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112878}))])))))))
(clojure.spec.alpha/fdef list-subscription-definitions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-subscription-definitions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-subscription-definitions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-subscription-definitions-response))

(clojure.core/defn list-group-versions [input112881] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/list-group-versions-request input112881)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112880] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112880)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/list-group-versions-response (:body response112880))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112880 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112880)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112880}))])))))))
(clojure.spec.alpha/fdef list-group-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-group-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-group-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-group-versions-response))

(clojure.core/defn list-subscription-definition-versions [input112883] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/list-subscription-definition-versions-request input112883)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112882] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112882)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/list-subscription-definition-versions-response (:body response112882))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112882 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112882)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112882}))])))))))
(clojure.spec.alpha/fdef list-subscription-definition-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-subscription-definition-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-subscription-definition-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-subscription-definition-versions-response))

(clojure.core/defn list-logger-definition-versions [input112885] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/list-logger-definition-versions-request input112885)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112884] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112884)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/list-logger-definition-versions-response (:body response112884))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112884 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112884)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112884}))])))))))
(clojure.spec.alpha/fdef list-logger-definition-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-logger-definition-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-logger-definition-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-logger-definition-versions-response))

(clojure.core/defn get-associated-role [input112887] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-associated-role-request input112887)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112886] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response112886)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-associated-role-response (:body response112886))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112886 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112886)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112886}))])))))))
(clojure.spec.alpha/fdef get-associated-role :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-associated-role-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-associated-role-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-associated-role-response))

(clojure.core/defn get-group [input112889] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-group-request input112889)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112888] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112888)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-group-response (:body response112888))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112888 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112888)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112888}))])))))))
(clojure.spec.alpha/fdef get-group :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-group-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-group-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-group-response))

(clojure.core/defn update-group [input112891] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/update-group-request input112891)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112890] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112890)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/update-group-response (:body response112890))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112890 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112890)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112890}))])))))))
(clojure.spec.alpha/fdef update-group :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-group-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-group-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-group-response))

(clojure.core/defn get-group-certificate-authority [input112893] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-group-certificate-authority-request input112893)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CertificateAuthorityId" "CertificateAuthorityId", "GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112892] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response112892)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-group-certificate-authority-response (:body response112892))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112892 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112892)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112892}))])))))))
(clojure.spec.alpha/fdef get-group-certificate-authority :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-group-certificate-authority-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-group-certificate-authority-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-group-certificate-authority-response))

(clojure.core/defn get-core-definition [input112895] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-core-definition-request input112895)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112894] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112894)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-core-definition-response (:body response112894))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112894 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112894)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112894}))])))))))
(clojure.spec.alpha/fdef get-core-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-core-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-core-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-core-definition-response))

(clojure.core/defn list-core-definitions [input112897] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/list-core-definitions-request input112897)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112896] (clojure.core/let [errors__109313__auto__ {}] (if (clojure.core/= 200 (:status response112896)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/list-core-definitions-response (:body response112896))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112896 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112896)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112896}))])))))))
(clojure.spec.alpha/fdef list-core-definitions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-core-definitions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-core-definitions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-core-definitions-response))

(clojure.core/defn get-deployment-status [input112899] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-deployment-status-request input112899)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeploymentId" "DeploymentId", "GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112898] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112898)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-deployment-status-response (:body response112898))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112898 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112898)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112898}))])))))))
(clojure.spec.alpha/fdef get-deployment-status :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-deployment-status-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-deployment-status-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-deployment-status-response))

(clojure.core/defn get-connectivity-info [input112901] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/things/{ThingName}/connectivityInfo"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-connectivity-info-request input112901)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ThingName" "ThingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112900] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response112900)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-connectivity-info-response (:body response112900))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112900 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112900)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112900}))])))))))
(clojure.spec.alpha/fdef get-connectivity-info :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-connectivity-info-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-connectivity-info-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-connectivity-info-response))

(clojure.core/defn get-device-definition [input112903] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-device-definition-request input112903)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112902] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112902)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-device-definition-response (:body response112902))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112902 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112902)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112902}))])))))))
(clojure.spec.alpha/fdef get-device-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-device-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-device-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-device-definition-response))

(clojure.core/defn list-deployments [input112905] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/list-deployments-request input112905)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112904] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112904)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/list-deployments-response (:body response112904))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112904 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112904)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112904}))])))))))
(clojure.spec.alpha/fdef list-deployments :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-deployments-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-deployments-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-deployments-response))

(clojure.core/defn create-group-version [input112907] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/create-group-version-request input112907)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112906] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112906)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/create-group-version-response (:body response112906))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112906 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112906)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112906}))])))))))
(clojure.spec.alpha/fdef create-group-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-group-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-group-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-group-version-response))

(clojure.core/defn get-device-definition-version [input112909] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-device-definition-version-request input112909)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId", "DeviceDefinitionVersionId" "DeviceDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112908] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112908)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-device-definition-version-response (:body response112908))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112908 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112908)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112908}))])))))))
(clojure.spec.alpha/fdef get-device-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-device-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-device-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-device-definition-version-response))

(clojure.core/defn update-function-definition [input112911] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/update-function-definition-request input112911)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112910] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112910)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/update-function-definition-response (:body response112910))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112910 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112910)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112910}))])))))))
(clojure.spec.alpha/fdef update-function-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-function-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-function-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-function-definition-response))

(clojure.core/defn delete-function-definition [input112913] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-function-definition-request input112913)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112912] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112912)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-function-definition-response (:body response112912))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112912 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112912)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112912}))])))))))
(clojure.spec.alpha/fdef delete-function-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-function-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-function-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/delete-function-definition-response))

(clojure.core/defn list-core-definition-versions [input112915] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/list-core-definition-versions-request input112915)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112914] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112914)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/list-core-definition-versions-response (:body response112914))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112914 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112914)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112914}))])))))))
(clojure.spec.alpha/fdef list-core-definition-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-core-definition-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-core-definition-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-core-definition-versions-response))

(clojure.core/defn list-group-certificate-authorities [input112917] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/list-group-certificate-authorities-request input112917)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112916] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response112916)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/list-group-certificate-authorities-response (:body response112916))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112916 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112916)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112916}))])))))))
(clojure.spec.alpha/fdef list-group-certificate-authorities :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-group-certificate-authorities-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-group-certificate-authorities-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-group-certificate-authorities-response))

(clojure.core/defn get-logger-definition [input112919] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-logger-definition-request input112919)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112918] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112918)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-logger-definition-response (:body response112918))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112918 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112918)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112918}))])))))))
(clojure.spec.alpha/fdef get-logger-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-logger-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-logger-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-logger-definition-response))

(clojure.core/defn update-device-definition [input112921] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/update-device-definition-request input112921)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112920] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112920)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/update-device-definition-response (:body response112920))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112920 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112920)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112920}))])))))))
(clojure.spec.alpha/fdef update-device-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-device-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-device-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-device-definition-response))

(clojure.core/defn create-group-certificate-authority [input112923] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/create-group-certificate-authority-request input112923)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112922] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response112922)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/create-group-certificate-authority-response (:body response112922))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112922 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112922)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112922}))])))))))
(clojure.spec.alpha/fdef create-group-certificate-authority :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-group-certificate-authority-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-group-certificate-authority-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-group-certificate-authority-response))

(clojure.core/defn create-function-definition-version [input112925] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/create-function-definition-version-request input112925)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112924] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112924)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/create-function-definition-version-response (:body response112924))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112924 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112924)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112924}))])))))))
(clojure.spec.alpha/fdef create-function-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-function-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-function-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-function-definition-version-response))

(clojure.core/defn get-core-definition-version [input112927] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-core-definition-version-request input112927)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId", "CoreDefinitionVersionId" "CoreDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112926] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112926)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-core-definition-version-response (:body response112926))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112926 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112926)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112926}))])))))))
(clojure.spec.alpha/fdef get-core-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-core-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-core-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-core-definition-version-response))

(clojure.core/defn get-function-definition-version [input112929] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-function-definition-version-request input112929)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId", "FunctionDefinitionVersionId" "FunctionDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112928] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112928)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-function-definition-version-response (:body response112928))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112928 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112928)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112928}))])))))))
(clojure.spec.alpha/fdef get-function-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-function-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-function-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-function-definition-version-response))

(clojure.core/defn update-core-definition [input112931] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/update-core-definition-request input112931)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112930] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112930)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/update-core-definition-response (:body response112930))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112930 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112930)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112930}))])))))))
(clojure.spec.alpha/fdef update-core-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-core-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-core-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-core-definition-response))

(clojure.core/defn associate-role-to-group [input112933] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/associate-role-to-group-request input112933)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112932] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response112932)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/associate-role-to-group-response (:body response112932))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112932 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112932)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112932}))])))))))
(clojure.spec.alpha/fdef associate-role-to-group :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/associate-role-to-group-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/associate-role-to-group-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/associate-role-to-group-response))

(clojure.core/defn associate-service-role-to-account [input112935] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/associate-service-role-to-account-request input112935)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112934] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response112934)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/associate-service-role-to-account-response (:body response112934))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112934 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112934)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112934}))])))))))
(clojure.spec.alpha/fdef associate-service-role-to-account :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/associate-service-role-to-account-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/associate-service-role-to-account-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/associate-service-role-to-account-response))

(clojure.core/defn update-subscription-definition [input112937] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/update-subscription-definition-request input112937)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112936] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112936)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/update-subscription-definition-response (:body response112936))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112936 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112936)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112936}))])))))))
(clojure.spec.alpha/fdef update-subscription-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-subscription-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-subscription-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-subscription-definition-response))

(clojure.core/defn update-connectivity-info [input112939] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/things/{ThingName}/connectivityInfo"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/update-connectivity-info-request input112939)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ThingName" "ThingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112938] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response112938)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/update-connectivity-info-response (:body response112938))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112938 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112938)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112938}))])))))))
(clojure.spec.alpha/fdef update-connectivity-info :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-connectivity-info-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/update-connectivity-info-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/update-connectivity-info-response))

(clojure.core/defn create-group [input112941] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/create-group-request input112941)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112940] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112940)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/create-group-response (:body response112940))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112940 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112940)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112940}))])))))))
(clojure.spec.alpha/fdef create-group :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-group-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-group-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-group-response))

(clojure.core/defn create-subscription-definition [input112943] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/create-subscription-definition-request input112943)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112942] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112942)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/create-subscription-definition-response (:body response112942))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112942 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112942)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112942}))])))))))
(clojure.spec.alpha/fdef create-subscription-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-subscription-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-subscription-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-subscription-definition-response))

(clojure.core/defn get-group-version [input112945] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions/{GroupVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-group-version-request input112945)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId", "GroupVersionId" "GroupVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112944] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112944)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-group-version-response (:body response112944))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112944 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112944)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112944}))])))))))
(clojure.spec.alpha/fdef get-group-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-group-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-group-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-group-version-response))

(clojure.core/defn get-service-role-for-account [input112947] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-service-role-for-account-request input112947)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112946] (clojure.core/let [errors__109313__auto__ {"InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response112946)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-service-role-for-account-response (:body response112946))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112946 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112946)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112946}))])))))))
(clojure.spec.alpha/fdef get-service-role-for-account :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-service-role-for-account-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-service-role-for-account-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-service-role-for-account-response))

(clojure.core/defn get-group-certificate-configuration [input112949] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-group-certificate-configuration-request input112949)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112948] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response112948)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-group-certificate-configuration-response (:body response112948))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112948 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112948)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112948}))])))))))
(clojure.spec.alpha/fdef get-group-certificate-configuration :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-group-certificate-configuration-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-group-certificate-configuration-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-group-certificate-configuration-response))

(clojure.core/defn delete-core-definition [input112951] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-core-definition-request input112951)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112950] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112950)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/delete-core-definition-response (:body response112950))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112950 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112950)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112950}))])))))))
(clojure.spec.alpha/fdef delete-core-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-core-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/delete-core-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/delete-core-definition-response))

(clojure.core/defn get-logger-definition-version [input112953] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/get-logger-definition-version-request input112953)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId", "LoggerDefinitionVersionId" "LoggerDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112952] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112952)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/get-logger-definition-version-response (:body response112952))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112952 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112952)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112952}))])))))))
(clojure.spec.alpha/fdef get-logger-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-logger-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/get-logger-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/get-logger-definition-version-response))

(clojure.core/defn list-device-definition-versions [input112955] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/list-device-definition-versions-request input112955)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112954] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112954)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/list-device-definition-versions-response (:body response112954))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112954 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112954)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112954}))])))))))
(clojure.spec.alpha/fdef list-device-definition-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-device-definition-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-device-definition-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-device-definition-versions-response))

(clojure.core/defn create-core-definition-version [input112957] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/create-core-definition-version-request input112957)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112956] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception}] (if (clojure.core/= 200 (:status response112956)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/create-core-definition-version-response (:body response112956))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112956 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112956)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112956}))])))))))
(clojure.spec.alpha/fdef create-core-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-core-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/create-core-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/create-core-definition-version-response))

(clojure.core/defn disassociate-role-from-group [input112959] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/disassociate-role-from-group-request input112959)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112958] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass/internal-server-error-exception}] (if (clojure.core/= 200 (:status response112958)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/disassociate-role-from-group-response (:body response112958))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112958 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112958)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112958}))])))))))
(clojure.spec.alpha/fdef disassociate-role-from-group :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/disassociate-role-from-group-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/disassociate-role-from-group-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/disassociate-role-from-group-response))

(clojure.core/defn list-device-definitions [input112961] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass/list-device-definitions-request input112961)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112960] (clojure.core/let [errors__109313__auto__ {}] (if (clojure.core/= 200 (:status response112960)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass/list-device-definitions-response (:body response112960))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112960 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112960)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112960}))])))))))
(clojure.spec.alpha/fdef list-device-definitions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-device-definitions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass/list-device-definitions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass/list-device-definitions-response))
