(ns portkey.aws.iot (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.iot.accept-certificate-transfer-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.accept-certificate-transfer-request/set-as-active (clojure.spec.alpha/and :portkey.aws.iot/set-as-active))
(clojure.spec.alpha/def :portkey.aws.iot/accept-certificate-transfer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.accept-certificate-transfer-request/certificateId] :opt-un [:portkey.aws.iot.accept-certificate-transfer-request/setAsActive]))

(clojure.spec.alpha/def :portkey.aws.iot/registry-max-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__30878__30879__auto__] (clojure.core/<= 1 p1__30878__30879__auto__)) (fn* [p1__30880__30881__auto__] (clojure.core/<= p1__30880__30881__auto__ 250))))

(clojure.spec.alpha/def :portkey.aws.iot.list-policy-versions-response/policy-versions (clojure.spec.alpha/and :portkey.aws.iot/policy-versions))
(clojure.spec.alpha/def :portkey.aws.iot/list-policy-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-policy-versions-response/policyVersions]))

(clojure.spec.alpha/def :portkey.aws.iot/auto-registration-status (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"ENABLE" "ENABLE", :enable "ENABLE", "DISABLE" "DISABLE", :disable "DISABLE"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.iot.deprecate-thing-type-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.deprecate-thing-type-request/undo-deprecate (clojure.spec.alpha/and :portkey.aws.iot/undo-deprecate))
(clojure.spec.alpha/def :portkey.aws.iot/deprecate-thing-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.deprecate-thing-type-request/thingTypeName] :opt-un [:portkey.aws.iot.deprecate-thing-type-request/undoDeprecate]))

(clojure.spec.alpha/def :portkey.aws.iot.unauthorized-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/unauthorized-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.unauthorized-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot/outgoing-certificates (clojure.spec.alpha/coll-of :portkey.aws.iot/outgoing-certificate :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.detach-principal-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.detach-principal-policy-request/principal (clojure.spec.alpha/and :portkey.aws.iot/principal))
(clojure.spec.alpha/def :portkey.aws.iot/detach-principal-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.detach-principal-policy-request/policyName :portkey.aws.iot.detach-principal-policy-request/principal] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/range-key-field (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/thing-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.iot/thing-attribute :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.thing-type-properties/thing-type-description (clojure.spec.alpha/and :portkey.aws.iot/thing-type-description))
(clojure.spec.alpha/def :portkey.aws.iot.thing-type-properties/searchable-attributes (clojure.spec.alpha/and :portkey.aws.iot/searchable-attributes))
(clojure.spec.alpha/def :portkey.aws.iot/thing-type-properties (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.thing-type-properties/thingTypeDescription :portkey.aws.iot.thing-type-properties/searchableAttributes]))

(clojure.spec.alpha/def :portkey.aws.iot.register-certificate-request/certificate-pem (clojure.spec.alpha/and :portkey.aws.iot/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.register-certificate-request/ca-certificate-pem (clojure.spec.alpha/and :portkey.aws.iot/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.register-certificate-request/set-as-active (clojure.spec.alpha/and :portkey.aws.iot/set-as-active-flag))
(clojure.spec.alpha/def :portkey.aws.iot.register-certificate-request/status (clojure.spec.alpha/and :portkey.aws.iot/certificate-status))
(clojure.spec.alpha/def :portkey.aws.iot/register-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.register-certificate-request/certificatePem] :opt-un [:portkey.aws.iot.register-certificate-request/caCertificatePem :portkey.aws.iot.register-certificate-request/setAsActive :portkey.aws.iot.register-certificate-request/status]))

(clojure.spec.alpha/def :portkey.aws.iot/detach-thing-principal-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.create-thing-request/thing-name (clojure.spec.alpha/and :portkey.aws.iot/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.create-thing-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.create-thing-request/attribute-payload (clojure.spec.alpha/and :portkey.aws.iot/attribute-payload))
(clojure.spec.alpha/def :portkey.aws.iot/create-thing-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.create-thing-request/thingName] :opt-un [:portkey.aws.iot.create-thing-request/thingTypeName :portkey.aws.iot.create-thing-request/attributePayload]))

(clojure.spec.alpha/def :portkey.aws.iot/stream-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.dynamodbv2-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.dynamodbv2-action/put-item (clojure.spec.alpha/and :portkey.aws.iot/put-item-input))
(clojure.spec.alpha/def :portkey.aws.iot/dynamodbv2-action (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.dynamodbv2-action/roleArn :portkey.aws.iot.dynamodbv2-action/putItem]))

(clojure.spec.alpha/def :portkey.aws.iot/delete-registration-code-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.topic-rule-payload/sql (clojure.spec.alpha/and :portkey.aws.iot/sql))
(clojure.spec.alpha/def :portkey.aws.iot.topic-rule-payload/description (clojure.spec.alpha/and :portkey.aws.iot/description))
(clojure.spec.alpha/def :portkey.aws.iot.topic-rule-payload/actions (clojure.spec.alpha/and :portkey.aws.iot/action-list))
(clojure.spec.alpha/def :portkey.aws.iot.topic-rule-payload/rule-disabled (clojure.spec.alpha/and :portkey.aws.iot/is-disabled))
(clojure.spec.alpha/def :portkey.aws.iot.topic-rule-payload/aws-iot-sql-version (clojure.spec.alpha/and :portkey.aws.iot/aws-iot-sql-version))
(clojure.spec.alpha/def :portkey.aws.iot/topic-rule-payload (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.topic-rule-payload/sql :portkey.aws.iot.topic-rule-payload/actions] :opt-un [:portkey.aws.iot.topic-rule-payload/description :portkey.aws.iot.topic-rule-payload/ruleDisabled :portkey.aws.iot.topic-rule-payload/awsIotSqlVersion]))

(clojure.spec.alpha/def :portkey.aws.iot.list-principal-things-response/things (clojure.spec.alpha/and :portkey.aws.iot/thing-name-list))
(clojure.spec.alpha/def :portkey.aws.iot.list-principal-things-response/next-token (clojure.spec.alpha/and :portkey.aws.iot/next-token))
(clojure.spec.alpha/def :portkey.aws.iot/list-principal-things-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-principal-things-response/things :portkey.aws.iot.list-principal-things-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.iot/private-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__)))))

(clojure.spec.alpha/def :portkey.aws.iot.transfer-certificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.transfer-certificate-request/target-aws-account (clojure.spec.alpha/and :portkey.aws.iot/aws-account-id))
(clojure.spec.alpha/def :portkey.aws.iot.transfer-certificate-request/transfer-message (clojure.spec.alpha/and :portkey.aws.iot/message))
(clojure.spec.alpha/def :portkey.aws.iot/transfer-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.transfer-certificate-request/certificateId :portkey.aws.iot.transfer-certificate-request/targetAwsAccount] :opt-un [:portkey.aws.iot.transfer-certificate-request/transferMessage]))

(clojure.spec.alpha/def :portkey.aws.iot/deprecation-date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.iot.update-certificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.update-certificate-request/new-status (clojure.spec.alpha/and :portkey.aws.iot/certificate-status))
(clojure.spec.alpha/def :portkey.aws.iot/update-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.update-certificate-request/certificateId :portkey.aws.iot.update-certificate-request/newStatus] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/function-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/topic-pattern (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/rule-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 128)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9_]+$" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.describe-thing-response/default-client-id (clojure.spec.alpha/and :portkey.aws.iot/client-id))
(clojure.spec.alpha/def :portkey.aws.iot.describe-thing-response/thing-name (clojure.spec.alpha/and :portkey.aws.iot/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.describe-thing-response/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.describe-thing-response/attributes (clojure.spec.alpha/and :portkey.aws.iot/attributes))
(clojure.spec.alpha/def :portkey.aws.iot.describe-thing-response/version (clojure.spec.alpha/and :portkey.aws.iot/version))
(clojure.spec.alpha/def :portkey.aws.iot/describe-thing-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.describe-thing-response/defaultClientId :portkey.aws.iot.describe-thing-response/thingName :portkey.aws.iot.describe-thing-response/thingTypeName :portkey.aws.iot.describe-thing-response/attributes :portkey.aws.iot.describe-thing-response/version]))

(clojure.spec.alpha/def :portkey.aws.iot.create-keys-and-certificate-request/set-as-active (clojure.spec.alpha/and :portkey.aws.iot/set-as-active))
(clojure.spec.alpha/def :portkey.aws.iot/create-keys-and-certificate-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.create-keys-and-certificate-request/setAsActive]))

(clojure.spec.alpha/def :portkey.aws.iot.updatecacertificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.updatecacertificate-request/new-status (clojure.spec.alpha/and :portkey.aws.iot/cacertificate-status))
(clojure.spec.alpha/def :portkey.aws.iot.updatecacertificate-request/new-auto-registration-status (clojure.spec.alpha/and :portkey.aws.iot/auto-registration-status))
(clojure.spec.alpha/def :portkey.aws.iot/updatecacertificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.updatecacertificate-request/certificateId] :opt-un [:portkey.aws.iot.updatecacertificate-request/newStatus :portkey.aws.iot.updatecacertificate-request/newAutoRegistrationStatus]))

(clojure.spec.alpha/def :portkey.aws.iot.certificate-state-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/certificate-state-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.certificate-state-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot/certificate-signing-request (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__)))))

(clojure.spec.alpha/def :portkey.aws.iot/page-size (clojure.spec.alpha/and clojure.core/int? (fn* [p1__30878__30879__auto__] (clojure.core/<= 1 p1__30878__30879__auto__)) (fn* [p1__30880__30881__auto__] (clojure.core/<= p1__30880__30881__auto__ 250))))

(clojure.spec.alpha/def :portkey.aws.iot.invalid-request-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/invalid-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.invalid-request-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot/thing-type-description (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 2028)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"[\p{Graph}\x20]*" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.certificate-validation-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/certificate-validation-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.certificate-validation-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.thing-attribute/thing-name (clojure.spec.alpha/and :portkey.aws.iot/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.thing-attribute/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.thing-attribute/attributes (clojure.spec.alpha/and :portkey.aws.iot/attributes))
(clojure.spec.alpha/def :portkey.aws.iot.thing-attribute/version (clojure.spec.alpha/and :portkey.aws.iot/version))
(clojure.spec.alpha/def :portkey.aws.iot/thing-attribute (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.thing-attribute/thingName :portkey.aws.iot.thing-attribute/thingTypeName :portkey.aws.iot.thing-attribute/attributes :portkey.aws.iot.thing-attribute/version]))

(clojure.spec.alpha/def :portkey.aws.iot.list-topic-rules-request/topic (clojure.spec.alpha/and :portkey.aws.iot/topic))
(clojure.spec.alpha/def :portkey.aws.iot.list-topic-rules-request/max-results (clojure.spec.alpha/and :portkey.aws.iot/max-results))
(clojure.spec.alpha/def :portkey.aws.iot.list-topic-rules-request/next-token (clojure.spec.alpha/and :portkey.aws.iot/next-token))
(clojure.spec.alpha/def :portkey.aws.iot.list-topic-rules-request/rule-disabled (clojure.spec.alpha/and :portkey.aws.iot/is-disabled))
(clojure.spec.alpha/def :portkey.aws.iot/list-topic-rules-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-topic-rules-request/topic :portkey.aws.iot.list-topic-rules-request/maxResults :portkey.aws.iot.list-topic-rules-request/nextToken :portkey.aws.iot.list-topic-rules-request/ruleDisabled]))

(clojure.spec.alpha/def :portkey.aws.iot/canned-access-control-list (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"authenticated-read" "authenticated-read", "public-read-write" "public-read-write", :bucket-owner-full-control "bucket-owner-full-control", :private "private", "bucket-owner-full-control" "bucket-owner-full-control", "private" "private", :log-delivery-write "log-delivery-write", :authenticated-read "authenticated-read", "aws-exec-read" "aws-exec-read", :aws-exec-read "aws-exec-read", :bucket-owner-read "bucket-owner-read", "bucket-owner-read" "bucket-owner-read", "public-read" "public-read", "log-delivery-write" "log-delivery-write", :public-read-write "public-read-write", :public-read "public-read"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.iot.list-outgoing-certificates-request/page-size (clojure.spec.alpha/and :portkey.aws.iot/page-size))
(clojure.spec.alpha/def :portkey.aws.iot.list-outgoing-certificates-request/marker (clojure.spec.alpha/and :portkey.aws.iot/marker))
(clojure.spec.alpha/def :portkey.aws.iot.list-outgoing-certificates-request/ascending-order (clojure.spec.alpha/and :portkey.aws.iot/ascending-order))
(clojure.spec.alpha/def :portkey.aws.iot/list-outgoing-certificates-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-outgoing-certificates-request/pageSize :portkey.aws.iot.list-outgoing-certificates-request/marker :portkey.aws.iot.list-outgoing-certificates-request/ascendingOrder]))

(clojure.spec.alpha/def :portkey.aws.iot/thing-type-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 128)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"[a-zA-Z0-9:_-]+" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.list-principal-policies-request/principal (clojure.spec.alpha/and :portkey.aws.iot/principal))
(clojure.spec.alpha/def :portkey.aws.iot.list-principal-policies-request/marker (clojure.spec.alpha/and :portkey.aws.iot/marker))
(clojure.spec.alpha/def :portkey.aws.iot.list-principal-policies-request/page-size (clojure.spec.alpha/and :portkey.aws.iot/page-size))
(clojure.spec.alpha/def :portkey.aws.iot.list-principal-policies-request/ascending-order (clojure.spec.alpha/and :portkey.aws.iot/ascending-order))
(clojure.spec.alpha/def :portkey.aws.iot/list-principal-policies-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.list-principal-policies-request/principal] :opt-un [:portkey.aws.iot.list-principal-policies-request/marker :portkey.aws.iot.list-principal-policies-request/pageSize :portkey.aws.iot.list-principal-policies-request/ascendingOrder]))

(clojure.spec.alpha/def :portkey.aws.iot/resource-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.get-logging-options-response/role-arn (clojure.spec.alpha/and :portkey.aws.iot/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.get-logging-options-response/log-level (clojure.spec.alpha/and :portkey.aws.iot/log-level))
(clojure.spec.alpha/def :portkey.aws.iot/get-logging-options-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.get-logging-options-response/roleArn :portkey.aws.iot.get-logging-options-response/logLevel]))

(clojure.spec.alpha/def :portkey.aws.iot/attribute-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 128)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"[a-zA-Z0-9_.,@/:#-]+" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.outgoing-certificate/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.outgoing-certificate/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.outgoing-certificate/transferred-to (clojure.spec.alpha/and :portkey.aws.iot/aws-account-id))
(clojure.spec.alpha/def :portkey.aws.iot.outgoing-certificate/transfer-date (clojure.spec.alpha/and :portkey.aws.iot/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.outgoing-certificate/transfer-message (clojure.spec.alpha/and :portkey.aws.iot/message))
(clojure.spec.alpha/def :portkey.aws.iot.outgoing-certificate/creation-date (clojure.spec.alpha/and :portkey.aws.iot/date-type))
(clojure.spec.alpha/def :portkey.aws.iot/outgoing-certificate (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.outgoing-certificate/certificateArn :portkey.aws.iot.outgoing-certificate/certificateId :portkey.aws.iot.outgoing-certificate/transferredTo :portkey.aws.iot.outgoing-certificate/transferDate :portkey.aws.iot.outgoing-certificate/transferMessage :portkey.aws.iot.outgoing-certificate/creationDate]))

(clojure.spec.alpha/def :portkey.aws.iot.list-certificates-response/certificates (clojure.spec.alpha/and :portkey.aws.iot/certificates))
(clojure.spec.alpha/def :portkey.aws.iot.list-certificates-response/next-marker (clojure.spec.alpha/and :portkey.aws.iot/marker))
(clojure.spec.alpha/def :portkey.aws.iot/list-certificates-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-certificates-response/certificates :portkey.aws.iot.list-certificates-response/nextMarker]))

(clojure.spec.alpha/def :portkey.aws.iot.set-default-policy-version-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.set-default-policy-version-request/policy-version-id (clojure.spec.alpha/and :portkey.aws.iot/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot/set-default-policy-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.set-default-policy-version-request/policyName :portkey.aws.iot.set-default-policy-version-request/policyVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.enable-topic-rule-request/rule-name (clojure.spec.alpha/and :portkey.aws.iot/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot/enable-topic-rule-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.enable-topic-rule-request/ruleName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/log-level (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"DISABLED" "DISABLED", :disabled "DISABLED", :warn "WARN", "WARN" "WARN", :debug "DEBUG", "ERROR" "ERROR", "DEBUG" "DEBUG", :info "INFO", :error "ERROR", "INFO" "INFO"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.iot/policy-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 128)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"[\w+=,.@-]+" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot/cacertificates (clojure.spec.alpha/coll-of :portkey.aws.iot/cacertificate :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot/error-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/action-list (clojure.spec.alpha/coll-of :portkey.aws.iot/action :max-count 10))

(clojure.spec.alpha/def :portkey.aws.iot.reject-certificate-transfer-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.reject-certificate-transfer-request/reject-reason (clojure.spec.alpha/and :portkey.aws.iot/message))
(clojure.spec.alpha/def :portkey.aws.iot/reject-certificate-transfer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.reject-certificate-transfer-request/certificateId] :opt-un [:portkey.aws.iot.reject-certificate-transfer-request/rejectReason]))

(clojure.spec.alpha/def :portkey.aws.iot.list-certificates-request/page-size (clojure.spec.alpha/and :portkey.aws.iot/page-size))
(clojure.spec.alpha/def :portkey.aws.iot.list-certificates-request/marker (clojure.spec.alpha/and :portkey.aws.iot/marker))
(clojure.spec.alpha/def :portkey.aws.iot.list-certificates-request/ascending-order (clojure.spec.alpha/and :portkey.aws.iot/ascending-order))
(clojure.spec.alpha/def :portkey.aws.iot/list-certificates-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-certificates-request/pageSize :portkey.aws.iot.list-certificates-request/marker :portkey.aws.iot.list-certificates-request/ascendingOrder]))

(clojure.spec.alpha/def :portkey.aws.iot/thing-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.describe-thing-request/thing-name (clojure.spec.alpha/and :portkey.aws.iot/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot/describe-thing-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.describe-thing-request/thingName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.get-topic-rule-response/rule-arn (clojure.spec.alpha/and :portkey.aws.iot/rule-arn))
(clojure.spec.alpha/def :portkey.aws.iot.get-topic-rule-response/rule (clojure.spec.alpha/and :portkey.aws.iot/topic-rule))
(clojure.spec.alpha/def :portkey.aws.iot/get-topic-rule-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.get-topic-rule-response/ruleArn :portkey.aws.iot.get-topic-rule-response/rule]))

(clojure.spec.alpha/def :portkey.aws.iot/certificates (clojure.spec.alpha/coll-of :portkey.aws.iot/certificate :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.thing-type-metadata/deprecated (clojure.spec.alpha/and :portkey.aws.iot/boolean))
(clojure.spec.alpha/def :portkey.aws.iot.thing-type-metadata/deprecation-date (clojure.spec.alpha/and :portkey.aws.iot/deprecation-date))
(clojure.spec.alpha/def :portkey.aws.iot.thing-type-metadata/creation-date (clojure.spec.alpha/and :portkey.aws.iot/creation-date))
(clojure.spec.alpha/def :portkey.aws.iot/thing-type-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.thing-type-metadata/deprecated :portkey.aws.iot.thing-type-metadata/deprecationDate :portkey.aws.iot.thing-type-metadata/creationDate]))

(clojure.spec.alpha/def :portkey.aws.iot.attribute-payload/attributes (clojure.spec.alpha/and :portkey.aws.iot/attributes))
(clojure.spec.alpha/def :portkey.aws.iot.attribute-payload/merge (clojure.spec.alpha/and :portkey.aws.iot/flag))
(clojure.spec.alpha/def :portkey.aws.iot/attribute-payload (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.attribute-payload/attributes :portkey.aws.iot.attribute-payload/merge]))

(clojure.spec.alpha/def :portkey.aws.iot.describe-thing-type-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot/describe-thing-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.describe-thing-type-request/thingTypeName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.describecacertificate-response/certificate-description (clojure.spec.alpha/and :portkey.aws.iot/cacertificate-description))
(clojure.spec.alpha/def :portkey.aws.iot/describecacertificate-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.describecacertificate-response/certificateDescription]))

(clojure.spec.alpha/def :portkey.aws.iot/state-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/use-base64 clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.describe-certificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot/describe-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.describe-certificate-request/certificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/principal-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.list-thing-types-request/next-token (clojure.spec.alpha/and :portkey.aws.iot/next-token))
(clojure.spec.alpha/def :portkey.aws.iot.list-thing-types-request/max-results (clojure.spec.alpha/and :portkey.aws.iot/registry-max-results))
(clojure.spec.alpha/def :portkey.aws.iot.list-thing-types-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot/list-thing-types-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-thing-types-request/nextToken :portkey.aws.iot.list-thing-types-request/maxResults :portkey.aws.iot.list-thing-types-request/thingTypeName]))

(clojure.spec.alpha/def :portkey.aws.iot/cacertificate-status (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"ACTIVE" "ACTIVE", :active "ACTIVE", "INACTIVE" "INACTIVE", :inactive "INACTIVE"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.iot/partition-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.delete-thing-request/thing-name (clojure.spec.alpha/and :portkey.aws.iot/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.delete-thing-request/expected-version (clojure.spec.alpha/and :portkey.aws.iot/optional-version))
(clojure.spec.alpha/def :portkey.aws.iot/delete-thing-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.delete-thing-request/thingName] :opt-un [:portkey.aws.iot.delete-thing-request/expectedVersion]))

(clojure.spec.alpha/def :portkey.aws.iot.list-principal-policies-response/policies (clojure.spec.alpha/and :portkey.aws.iot/policies))
(clojure.spec.alpha/def :portkey.aws.iot.list-principal-policies-response/next-marker (clojure.spec.alpha/and :portkey.aws.iot/marker))
(clojure.spec.alpha/def :portkey.aws.iot/list-principal-policies-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-principal-policies-response/policies :portkey.aws.iot.list-principal-policies-response/nextMarker]))

(clojure.spec.alpha/def :portkey.aws.iot/flag clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.certificate-description/creation-date (clojure.spec.alpha/and :portkey.aws.iot/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.certificate-description/certificate-pem (clojure.spec.alpha/and :portkey.aws.iot/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.certificate-description/ca-certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.certificate-description/last-modified-date (clojure.spec.alpha/and :portkey.aws.iot/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.certificate-description/owned-by (clojure.spec.alpha/and :portkey.aws.iot/aws-account-id))
(clojure.spec.alpha/def :portkey.aws.iot.certificate-description/transfer-data (clojure.spec.alpha/and :portkey.aws.iot/transfer-data))
(clojure.spec.alpha/def :portkey.aws.iot.certificate-description/status (clojure.spec.alpha/and :portkey.aws.iot/certificate-status))
(clojure.spec.alpha/def :portkey.aws.iot.certificate-description/previous-owned-by (clojure.spec.alpha/and :portkey.aws.iot/aws-account-id))
(clojure.spec.alpha/def :portkey.aws.iot.certificate-description/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.certificate-description/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot/certificate-description (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.certificate-description/creationDate :portkey.aws.iot.certificate-description/certificatePem :portkey.aws.iot.certificate-description/caCertificateId :portkey.aws.iot.certificate-description/lastModifiedDate :portkey.aws.iot.certificate-description/ownedBy :portkey.aws.iot.certificate-description/transferData :portkey.aws.iot.certificate-description/status :portkey.aws.iot.certificate-description/previousOwnedBy :portkey.aws.iot.certificate-description/certificateArn :portkey.aws.iot.certificate-description/certificateId]))

(clojure.spec.alpha/def :portkey.aws.iot.delete-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/delete-conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.delete-conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot/marker (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.detach-thing-principal-request/thing-name (clojure.spec.alpha/and :portkey.aws.iot/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.detach-thing-principal-request/principal (clojure.spec.alpha/and :portkey.aws.iot/principal))
(clojure.spec.alpha/def :portkey.aws.iot/detach-thing-principal-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.detach-thing-principal-request/thingName :portkey.aws.iot.detach-thing-principal-request/principal] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/rule-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.transfer-certificate-response/transferred-certificate-arn (clojure.spec.alpha/and :portkey.aws.iot/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot/transfer-certificate-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.transfer-certificate-response/transferredCertificateArn]))

(clojure.spec.alpha/def :portkey.aws.iot.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.thing-type-definition/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.thing-type-definition/thing-type-properties (clojure.spec.alpha/and :portkey.aws.iot/thing-type-properties))
(clojure.spec.alpha/def :portkey.aws.iot.thing-type-definition/thing-type-metadata (clojure.spec.alpha/and :portkey.aws.iot/thing-type-metadata))
(clojure.spec.alpha/def :portkey.aws.iot/thing-type-definition (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.thing-type-definition/thingTypeName :portkey.aws.iot.thing-type-definition/thingTypeProperties :portkey.aws.iot.thing-type-definition/thingTypeMetadata]))

(clojure.spec.alpha/def :portkey.aws.iot/deprecate-thing-type-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.list-topic-rules-response/rules (clojure.spec.alpha/and :portkey.aws.iot/topic-rule-list))
(clojure.spec.alpha/def :portkey.aws.iot.list-topic-rules-response/next-token (clojure.spec.alpha/and :portkey.aws.iot/next-token))
(clojure.spec.alpha/def :portkey.aws.iot/list-topic-rules-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-topic-rules-response/rules :portkey.aws.iot.list-topic-rules-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.iot/thing-name-list (clojure.spec.alpha/coll-of :portkey.aws.iot/thing-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.create-certificate-from-csr-request/certificate-signing-request (clojure.spec.alpha/and :portkey.aws.iot/certificate-signing-request))
(clojure.spec.alpha/def :portkey.aws.iot.create-certificate-from-csr-request/set-as-active (clojure.spec.alpha/and :portkey.aws.iot/set-as-active))
(clojure.spec.alpha/def :portkey.aws.iot/create-certificate-from-csr-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.create-certificate-from-csr-request/certificateSigningRequest] :opt-un [:portkey.aws.iot.create-certificate-from-csr-request/setAsActive]))

(clojure.spec.alpha/def :portkey.aws.iot.describe-thing-type-response/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.describe-thing-type-response/thing-type-properties (clojure.spec.alpha/and :portkey.aws.iot/thing-type-properties))
(clojure.spec.alpha/def :portkey.aws.iot.describe-thing-type-response/thing-type-metadata (clojure.spec.alpha/and :portkey.aws.iot/thing-type-metadata))
(clojure.spec.alpha/def :portkey.aws.iot/describe-thing-type-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.describe-thing-type-response/thingTypeName :portkey.aws.iot.describe-thing-type-response/thingTypeProperties :portkey.aws.iot.describe-thing-type-response/thingTypeMetadata]))

(clojure.spec.alpha/def :portkey.aws.iot/elasticsearch-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.delete-topic-rule-request/rule-name (clojure.spec.alpha/and :portkey.aws.iot/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot/delete-topic-rule-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.delete-topic-rule-request/ruleName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/set-as-active-flag clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot/thing-type-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.resource-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/resource-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.resource-already-exists-exception/message :portkey.aws.iot/resourceId :portkey.aws.iot/resourceArn]))

(clojure.spec.alpha/def :portkey.aws.iot.list-certificates-bycaresponse/certificates (clojure.spec.alpha/and :portkey.aws.iot/certificates))
(clojure.spec.alpha/def :portkey.aws.iot.list-certificates-bycaresponse/next-marker (clojure.spec.alpha/and :portkey.aws.iot/marker))
(clojure.spec.alpha/def :portkey.aws.iot/list-certificates-bycaresponse (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-certificates-bycaresponse/certificates :portkey.aws.iot.list-certificates-bycaresponse/nextMarker]))

(clojure.spec.alpha/def :portkey.aws.iot.list-thing-principals-request/thing-name (clojure.spec.alpha/and :portkey.aws.iot/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot/list-thing-principals-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.list-thing-principals-request/thingName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.listcacertificates-response/certificates (clojure.spec.alpha/and :portkey.aws.iot/cacertificates))
(clojure.spec.alpha/def :portkey.aws.iot.listcacertificates-response/next-marker (clojure.spec.alpha/and :portkey.aws.iot/marker))
(clojure.spec.alpha/def :portkey.aws.iot/listcacertificates-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.listcacertificates-response/certificates :portkey.aws.iot.listcacertificates-response/nextMarker]))

(clojure.spec.alpha/def :portkey.aws.iot.service-unavailable-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/service-unavailable-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.service-unavailable-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.create-keys-and-certificate-response/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.create-keys-and-certificate-response/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.create-keys-and-certificate-response/certificate-pem (clojure.spec.alpha/and :portkey.aws.iot/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.create-keys-and-certificate-response/key-pair (clojure.spec.alpha/and :portkey.aws.iot/key-pair))
(clojure.spec.alpha/def :portkey.aws.iot/create-keys-and-certificate-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.create-keys-and-certificate-response/certificateArn :portkey.aws.iot.create-keys-and-certificate-response/certificateId :portkey.aws.iot.create-keys-and-certificate-response/certificatePem :portkey.aws.iot.create-keys-and-certificate-response/keyPair]))

(clojure.spec.alpha/def :portkey.aws.iot/aws-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/delete-registration-code-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/metric-unit (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/allow-auto-registration clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.policy-version/version-id (clojure.spec.alpha/and :portkey.aws.iot/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot.policy-version/is-default-version (clojure.spec.alpha/and :portkey.aws.iot/is-default-version))
(clojure.spec.alpha/def :portkey.aws.iot.policy-version/create-date (clojure.spec.alpha/and :portkey.aws.iot/date-type))
(clojure.spec.alpha/def :portkey.aws.iot/policy-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.policy-version/versionId :portkey.aws.iot.policy-version/isDefaultVersion :portkey.aws.iot.policy-version/createDate]))

(clojure.spec.alpha/def :portkey.aws.iot.put-item-input/table-name (clojure.spec.alpha/and :portkey.aws.iot/table-name))
(clojure.spec.alpha/def :portkey.aws.iot/put-item-input (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.put-item-input/tableName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/next-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.deletecacertificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot/deletecacertificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.deletecacertificate-request/certificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/range-key-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/hash-key-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.firehose-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.firehose-action/delivery-stream-name (clojure.spec.alpha/and :portkey.aws.iot/delivery-stream-name))
(clojure.spec.alpha/def :portkey.aws.iot.firehose-action/separator (clojure.spec.alpha/and :portkey.aws.iot/firehose-separator))
(clojure.spec.alpha/def :portkey.aws.iot/firehose-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.firehose-action/roleArn :portkey.aws.iot.firehose-action/deliveryStreamName] :opt-un [:portkey.aws.iot.firehose-action/separator]))

(clojure.spec.alpha/def :portkey.aws.iot/metric-timestamp (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/topic (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.get-topic-rule-request/rule-name (clojure.spec.alpha/and :portkey.aws.iot/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot/get-topic-rule-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.get-topic-rule-request/ruleName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.create-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.create-policy-request/policy-document (clojure.spec.alpha/and :portkey.aws.iot/policy-document))
(clojure.spec.alpha/def :portkey.aws.iot/create-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.create-policy-request/policyName :portkey.aws.iot.create-policy-request/policyDocument] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.attach-principal-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.attach-principal-policy-request/principal (clojure.spec.alpha/and :portkey.aws.iot/principal))
(clojure.spec.alpha/def :portkey.aws.iot/attach-principal-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.attach-principal-policy-request/policyName :portkey.aws.iot.attach-principal-policy-request/principal] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/salesforce-token (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 40 (clojure.core/count s__30837__auto__)))))

(clojure.spec.alpha/def :portkey.aws.iot/attributes (clojure.spec.alpha/map-of :portkey.aws.iot/attribute-name :portkey.aws.iot/attribute-value))

(clojure.spec.alpha/def :portkey.aws.iot.create-certificate-from-csr-response/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.create-certificate-from-csr-response/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.create-certificate-from-csr-response/certificate-pem (clojure.spec.alpha/and :portkey.aws.iot/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot/create-certificate-from-csr-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.create-certificate-from-csr-response/certificateArn :portkey.aws.iot.create-certificate-from-csr-response/certificateId :portkey.aws.iot.create-certificate-from-csr-response/certificatePem]))

(clojure.spec.alpha/def :portkey.aws.iot/queue-url (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.internal-failure-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/internal-failure-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.internal-failure-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.get-policy-version-response/policy-arn (clojure.spec.alpha/and :portkey.aws.iot/policy-arn))
(clojure.spec.alpha/def :portkey.aws.iot.get-policy-version-response/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.get-policy-version-response/policy-document (clojure.spec.alpha/and :portkey.aws.iot/policy-document))
(clojure.spec.alpha/def :portkey.aws.iot.get-policy-version-response/policy-version-id (clojure.spec.alpha/and :portkey.aws.iot/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot.get-policy-version-response/is-default-version (clojure.spec.alpha/and :portkey.aws.iot/is-default-version))
(clojure.spec.alpha/def :portkey.aws.iot/get-policy-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.get-policy-version-response/policyArn :portkey.aws.iot.get-policy-version-response/policyName :portkey.aws.iot.get-policy-version-response/policyDocument :portkey.aws.iot.get-policy-version-response/policyVersionId :portkey.aws.iot.get-policy-version-response/isDefaultVersion]))

(clojure.spec.alpha/def :portkey.aws.iot.versions-limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/versions-limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.versions-limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot/searchable-attributes (clojure.spec.alpha/coll-of :portkey.aws.iot/attribute-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot/message-format (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"RAW" "RAW", :raw "RAW", "JSON" "JSON", :json "JSON"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.iot/date-type clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.iot/attribute-value (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 800)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"[a-zA-Z0-9_.,@/:#-]*" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.listcacertificates-request/page-size (clojure.spec.alpha/and :portkey.aws.iot/page-size))
(clojure.spec.alpha/def :portkey.aws.iot.listcacertificates-request/marker (clojure.spec.alpha/and :portkey.aws.iot/marker))
(clojure.spec.alpha/def :portkey.aws.iot.listcacertificates-request/ascending-order (clojure.spec.alpha/and :portkey.aws.iot/ascending-order))
(clojure.spec.alpha/def :portkey.aws.iot/listcacertificates-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.listcacertificates-request/pageSize :portkey.aws.iot.listcacertificates-request/marker :portkey.aws.iot.listcacertificates-request/ascendingOrder]))

(clojure.spec.alpha/def :portkey.aws.iot/dynamo-key-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"STRING" "STRING", :string "STRING", "NUMBER" "NUMBER", :number "NUMBER"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.iot.delete-certificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot/delete-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.delete-certificate-request/certificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.cancel-certificate-transfer-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot/cancel-certificate-transfer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.cancel-certificate-transfer-request/certificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.get-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot/get-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.get-policy-request/policyName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.get-registration-code-response/registration-code (clojure.spec.alpha/and :portkey.aws.iot/registration-code))
(clojure.spec.alpha/def :portkey.aws.iot/get-registration-code-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.get-registration-code-response/registrationCode]))

(clojure.spec.alpha/def :portkey.aws.iot/get-logging-options-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/resource-not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.resource-not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.sns-action/target-arn (clojure.spec.alpha/and :portkey.aws.iot/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.sns-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.sns-action/message-format (clojure.spec.alpha/and :portkey.aws.iot/message-format))
(clojure.spec.alpha/def :portkey.aws.iot/sns-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.sns-action/targetArn :portkey.aws.iot.sns-action/roleArn] :opt-un [:portkey.aws.iot.sns-action/messageFormat]))

(clojure.spec.alpha/def :portkey.aws.iot/undo-deprecate clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot/delete-thing-type-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/deletecacertificate-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.delete-thing-type-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot/delete-thing-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.delete-thing-type-request/thingTypeName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.delete-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot/delete-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.delete-policy-request/policyName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/description (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.delete-policy-version-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.delete-policy-version-request/policy-version-id (clojure.spec.alpha/and :portkey.aws.iot/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot/delete-policy-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.delete-policy-version-request/policyName :portkey.aws.iot.delete-policy-version-request/policyVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/policy-document (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/aws-account-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"[0-9]{12}" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot/message (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 128))))

(clojure.spec.alpha/def :portkey.aws.iot/is-disabled clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.sql-parse-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/sql-parse-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.sql-parse-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.internal-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/internal-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.internal-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.get-policy-response/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.get-policy-response/policy-arn (clojure.spec.alpha/and :portkey.aws.iot/policy-arn))
(clojure.spec.alpha/def :portkey.aws.iot.get-policy-response/policy-document (clojure.spec.alpha/and :portkey.aws.iot/policy-document))
(clojure.spec.alpha/def :portkey.aws.iot.get-policy-response/default-version-id (clojure.spec.alpha/and :portkey.aws.iot/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot/get-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.get-policy-response/policyName :portkey.aws.iot.get-policy-response/policyArn :portkey.aws.iot.get-policy-response/policyDocument :portkey.aws.iot.get-policy-response/defaultVersionId]))

(clojure.spec.alpha/def :portkey.aws.iot.cloudwatch-metric-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.cloudwatch-metric-action/metric-namespace (clojure.spec.alpha/and :portkey.aws.iot/metric-namespace))
(clojure.spec.alpha/def :portkey.aws.iot.cloudwatch-metric-action/metric-name (clojure.spec.alpha/and :portkey.aws.iot/metric-name))
(clojure.spec.alpha/def :portkey.aws.iot.cloudwatch-metric-action/metric-value (clojure.spec.alpha/and :portkey.aws.iot/metric-value))
(clojure.spec.alpha/def :portkey.aws.iot.cloudwatch-metric-action/metric-unit (clojure.spec.alpha/and :portkey.aws.iot/metric-unit))
(clojure.spec.alpha/def :portkey.aws.iot.cloudwatch-metric-action/metric-timestamp (clojure.spec.alpha/and :portkey.aws.iot/metric-timestamp))
(clojure.spec.alpha/def :portkey.aws.iot/cloudwatch-metric-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.cloudwatch-metric-action/roleArn :portkey.aws.iot.cloudwatch-metric-action/metricNamespace :portkey.aws.iot.cloudwatch-metric-action/metricName :portkey.aws.iot.cloudwatch-metric-action/metricValue :portkey.aws.iot.cloudwatch-metric-action/metricUnit] :opt-un [:portkey.aws.iot.cloudwatch-metric-action/metricTimestamp]))

(clojure.spec.alpha/def :portkey.aws.iot.version-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/version-conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.version-conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.create-policy-response/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.create-policy-response/policy-arn (clojure.spec.alpha/and :portkey.aws.iot/policy-arn))
(clojure.spec.alpha/def :portkey.aws.iot.create-policy-response/policy-document (clojure.spec.alpha/and :portkey.aws.iot/policy-document))
(clojure.spec.alpha/def :portkey.aws.iot.create-policy-response/policy-version-id (clojure.spec.alpha/and :portkey.aws.iot/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot/create-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.create-policy-response/policyName :portkey.aws.iot.create-policy-response/policyArn :portkey.aws.iot.create-policy-response/policyDocument :portkey.aws.iot.create-policy-response/policyVersionId]))

(clojure.spec.alpha/def :portkey.aws.iot/remove-thing-type clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot/delivery-stream-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.attach-thing-principal-request/thing-name (clojure.spec.alpha/and :portkey.aws.iot/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.attach-thing-principal-request/principal (clojure.spec.alpha/and :portkey.aws.iot/principal))
(clojure.spec.alpha/def :portkey.aws.iot/attach-thing-principal-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.attach-thing-principal-request/thingName :portkey.aws.iot.attach-thing-principal-request/principal] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.sqs-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.sqs-action/queue-url (clojure.spec.alpha/and :portkey.aws.iot/queue-url))
(clojure.spec.alpha/def :portkey.aws.iot.sqs-action/use-base64 (clojure.spec.alpha/and :portkey.aws.iot/use-base64))
(clojure.spec.alpha/def :portkey.aws.iot/sqs-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.sqs-action/roleArn :portkey.aws.iot.sqs-action/queueUrl] :opt-un [:portkey.aws.iot.sqs-action/useBase64]))

(clojure.spec.alpha/def :portkey.aws.iot.list-policy-versions-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot/list-policy-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.list-policy-versions-request/policyName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.get-policy-version-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.get-policy-version-request/policy-version-id (clojure.spec.alpha/and :portkey.aws.iot/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot/get-policy-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.get-policy-version-request/policyName :portkey.aws.iot.get-policy-version-request/policyVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/update-thing-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/policy-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.list-principal-things-request/next-token (clojure.spec.alpha/and :portkey.aws.iot/next-token))
(clojure.spec.alpha/def :portkey.aws.iot.list-principal-things-request/max-results (clojure.spec.alpha/and :portkey.aws.iot/registry-max-results))
(clojure.spec.alpha/def :portkey.aws.iot.list-principal-things-request/principal (clojure.spec.alpha/and :portkey.aws.iot/principal))
(clojure.spec.alpha/def :portkey.aws.iot/list-principal-things-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.list-principal-things-request/principal] :opt-un [:portkey.aws.iot.list-principal-things-request/nextToken :portkey.aws.iot.list-principal-things-request/maxResults]))

(clojure.spec.alpha/def :portkey.aws.iot.describe-certificate-response/certificate-description (clojure.spec.alpha/and :portkey.aws.iot/certificate-description))
(clojure.spec.alpha/def :portkey.aws.iot/describe-certificate-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.describe-certificate-response/certificateDescription]))

(clojure.spec.alpha/def :portkey.aws.iot/describe-endpoint-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.list-certificates-bycarequest/ca-certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.list-certificates-bycarequest/page-size (clojure.spec.alpha/and :portkey.aws.iot/page-size))
(clojure.spec.alpha/def :portkey.aws.iot.list-certificates-bycarequest/marker (clojure.spec.alpha/and :portkey.aws.iot/marker))
(clojure.spec.alpha/def :portkey.aws.iot.list-certificates-bycarequest/ascending-order (clojure.spec.alpha/and :portkey.aws.iot/ascending-order))
(clojure.spec.alpha/def :portkey.aws.iot/list-certificates-bycarequest (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.list-certificates-bycarequest/caCertificateId] :opt-un [:portkey.aws.iot.list-certificates-bycarequest/pageSize :portkey.aws.iot.list-certificates-bycarequest/marker :portkey.aws.iot.list-certificates-bycarequest/ascendingOrder]))

(clojure.spec.alpha/def :portkey.aws.iot/alarm-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/hash-key-field (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/thing-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 128)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"[a-zA-Z0-9:_-]+" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.republish-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.republish-action/topic (clojure.spec.alpha/and :portkey.aws.iot/topic-pattern))
(clojure.spec.alpha/def :portkey.aws.iot/republish-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.republish-action/roleArn :portkey.aws.iot.republish-action/topic] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.registercacertificate-request/ca-certificate (clojure.spec.alpha/and :portkey.aws.iot/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.registercacertificate-request/verification-certificate (clojure.spec.alpha/and :portkey.aws.iot/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.registercacertificate-request/set-as-active (clojure.spec.alpha/and :portkey.aws.iot/set-as-active))
(clojure.spec.alpha/def :portkey.aws.iot.registercacertificate-request/allow-auto-registration (clojure.spec.alpha/and :portkey.aws.iot/allow-auto-registration))
(clojure.spec.alpha/def :portkey.aws.iot/registercacertificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.registercacertificate-request/caCertificate :portkey.aws.iot.registercacertificate-request/verificationCertificate] :opt-un [:portkey.aws.iot.registercacertificate-request/setAsActive :portkey.aws.iot.registercacertificate-request/allowAutoRegistration]))

(clojure.spec.alpha/def :portkey.aws.iot.list-policies-request/marker (clojure.spec.alpha/and :portkey.aws.iot/marker))
(clojure.spec.alpha/def :portkey.aws.iot.list-policies-request/page-size (clojure.spec.alpha/and :portkey.aws.iot/page-size))
(clojure.spec.alpha/def :portkey.aws.iot.list-policies-request/ascending-order (clojure.spec.alpha/and :portkey.aws.iot/ascending-order))
(clojure.spec.alpha/def :portkey.aws.iot/list-policies-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-policies-request/marker :portkey.aws.iot.list-policies-request/pageSize :portkey.aws.iot.list-policies-request/ascendingOrder]))

(clojure.spec.alpha/def :portkey.aws.iot.register-certificate-response/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.register-certificate-response/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot/register-certificate-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.register-certificate-response/certificateArn :portkey.aws.iot.register-certificate-response/certificateId]))

(clojure.spec.alpha/def :portkey.aws.iot/metric-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/client-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.transfer-already-completed-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/transfer-already-completed-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.transfer-already-completed-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.list-thing-principals-response/principals (clojure.spec.alpha/and :portkey.aws.iot/principals))
(clojure.spec.alpha/def :portkey.aws.iot/list-thing-principals-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-thing-principals-response/principals]))

(clojure.spec.alpha/def :portkey.aws.iot.elasticsearch-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.elasticsearch-action/endpoint (clojure.spec.alpha/and :portkey.aws.iot/elasticsearch-endpoint))
(clojure.spec.alpha/def :portkey.aws.iot.elasticsearch-action/index (clojure.spec.alpha/and :portkey.aws.iot/elasticsearch-index))
(clojure.spec.alpha/def :portkey.aws.iot.elasticsearch-action/type (clojure.spec.alpha/and :portkey.aws.iot/elasticsearch-type))
(clojure.spec.alpha/def :portkey.aws.iot.elasticsearch-action/id (clojure.spec.alpha/and :portkey.aws.iot/elasticsearch-id))
(clojure.spec.alpha/def :portkey.aws.iot/elasticsearch-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.elasticsearch-action/roleArn :portkey.aws.iot.elasticsearch-action/endpoint :portkey.aws.iot.elasticsearch-action/index :portkey.aws.iot.elasticsearch-action/type :portkey.aws.iot.elasticsearch-action/id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/elasticsearch-index (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/policies (clojure.spec.alpha/coll-of :portkey.aws.iot/policy :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot/certificate-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/set-as-active clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot/table-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/aws-iot-sql-version (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.disable-topic-rule-request/rule-name (clojure.spec.alpha/and :portkey.aws.iot/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot/disable-topic-rule-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.disable-topic-rule-request/ruleName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/sql (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/creation-date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.iot.dynamodbaction/range-key-value (clojure.spec.alpha/and :portkey.aws.iot/range-key-value))
(clojure.spec.alpha/def :portkey.aws.iot.dynamodbaction/table-name (clojure.spec.alpha/and :portkey.aws.iot/table-name))
(clojure.spec.alpha/def :portkey.aws.iot.dynamodbaction/hash-key-value (clojure.spec.alpha/and :portkey.aws.iot/hash-key-value))
(clojure.spec.alpha/def :portkey.aws.iot.dynamodbaction/role-arn (clojure.spec.alpha/and :portkey.aws.iot/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.dynamodbaction/range-key-field (clojure.spec.alpha/and :portkey.aws.iot/range-key-field))
(clojure.spec.alpha/def :portkey.aws.iot.dynamodbaction/hash-key-type (clojure.spec.alpha/and :portkey.aws.iot/dynamo-key-type))
(clojure.spec.alpha/def :portkey.aws.iot.dynamodbaction/operation (clojure.spec.alpha/and :portkey.aws.iot/dynamo-operation))
(clojure.spec.alpha/def :portkey.aws.iot.dynamodbaction/payload-field (clojure.spec.alpha/and :portkey.aws.iot/payload-field))
(clojure.spec.alpha/def :portkey.aws.iot.dynamodbaction/hash-key-field (clojure.spec.alpha/and :portkey.aws.iot/hash-key-field))
(clojure.spec.alpha/def :portkey.aws.iot.dynamodbaction/range-key-type (clojure.spec.alpha/and :portkey.aws.iot/dynamo-key-type))
(clojure.spec.alpha/def :portkey.aws.iot/dynamodbaction (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.dynamodbaction/tableName :portkey.aws.iot.dynamodbaction/roleArn :portkey.aws.iot.dynamodbaction/hashKeyField :portkey.aws.iot.dynamodbaction/hashKeyValue] :opt-un [:portkey.aws.iot.dynamodbaction/rangeKeyValue :portkey.aws.iot.dynamodbaction/rangeKeyField :portkey.aws.iot.dynamodbaction/hashKeyType :portkey.aws.iot.dynamodbaction/operation :portkey.aws.iot.dynamodbaction/payloadField :portkey.aws.iot.dynamodbaction/rangeKeyType]))

(clojure.spec.alpha/def :portkey.aws.iot/delete-thing-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.list-policy-principals-response/principals (clojure.spec.alpha/and :portkey.aws.iot/principals))
(clojure.spec.alpha/def :portkey.aws.iot.list-policy-principals-response/next-marker (clojure.spec.alpha/and :portkey.aws.iot/marker))
(clojure.spec.alpha/def :portkey.aws.iot/list-policy-principals-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-policy-principals-response/principals :portkey.aws.iot.list-policy-principals-response/nextMarker]))

(clojure.spec.alpha/def :portkey.aws.iot/topic-rule-list (clojure.spec.alpha/coll-of :portkey.aws.iot/topic-rule-list-item :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.update-thing-request/thing-name (clojure.spec.alpha/and :portkey.aws.iot/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.update-thing-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.update-thing-request/attribute-payload (clojure.spec.alpha/and :portkey.aws.iot/attribute-payload))
(clojure.spec.alpha/def :portkey.aws.iot.update-thing-request/expected-version (clojure.spec.alpha/and :portkey.aws.iot/optional-version))
(clojure.spec.alpha/def :portkey.aws.iot.update-thing-request/remove-thing-type (clojure.spec.alpha/and :portkey.aws.iot/remove-thing-type))
(clojure.spec.alpha/def :portkey.aws.iot/update-thing-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.update-thing-request/thingName] :opt-un [:portkey.aws.iot.update-thing-request/thingTypeName :portkey.aws.iot.update-thing-request/attributePayload :portkey.aws.iot.update-thing-request/expectedVersion :portkey.aws.iot.update-thing-request/removeThingType]))

(clojure.spec.alpha/def :portkey.aws.iot/policy-version-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"[0-9]+" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.list-thing-types-response/thing-types (clojure.spec.alpha/and :portkey.aws.iot/thing-type-list))
(clojure.spec.alpha/def :portkey.aws.iot.list-thing-types-response/next-token (clojure.spec.alpha/and :portkey.aws.iot/next-token))
(clojure.spec.alpha/def :portkey.aws.iot/list-thing-types-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-thing-types-response/thingTypes :portkey.aws.iot.list-thing-types-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.iot.describecacertificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot/describecacertificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.describecacertificate-request/certificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/dynamo-operation (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.create-thing-response/thing-name (clojure.spec.alpha/and :portkey.aws.iot/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.create-thing-response/thing-arn (clojure.spec.alpha/and :portkey.aws.iot/thing-arn))
(clojure.spec.alpha/def :portkey.aws.iot/create-thing-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.create-thing-response/thingName :portkey.aws.iot.create-thing-response/thingArn]))

(clojure.spec.alpha/def :portkey.aws.iot.list-policy-principals-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.list-policy-principals-request/marker (clojure.spec.alpha/and :portkey.aws.iot/marker))
(clojure.spec.alpha/def :portkey.aws.iot.list-policy-principals-request/page-size (clojure.spec.alpha/and :portkey.aws.iot/page-size))
(clojure.spec.alpha/def :portkey.aws.iot.list-policy-principals-request/ascending-order (clojure.spec.alpha/and :portkey.aws.iot/ascending-order))
(clojure.spec.alpha/def :portkey.aws.iot/list-policy-principals-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.list-policy-principals-request/policyName] :opt-un [:portkey.aws.iot.list-policy-principals-request/marker :portkey.aws.iot.list-policy-principals-request/pageSize :portkey.aws.iot.list-policy-principals-request/ascendingOrder]))

(clojure.spec.alpha/def :portkey.aws.iot/certificate-status (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:inactive "INACTIVE", "REGISTER_INACTIVE" "REGISTER_INACTIVE", "REVOKED" "REVOKED", :revoked "REVOKED", :pending-activation "PENDING_ACTIVATION", :register-inactive "REGISTER_INACTIVE", :pending-transfer "PENDING_TRANSFER", :active "ACTIVE", "INACTIVE" "INACTIVE", "PENDING_ACTIVATION" "PENDING_ACTIVATION", "ACTIVE" "ACTIVE", "PENDING_TRANSFER" "PENDING_TRANSFER"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.iot.policy/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.policy/policy-arn (clojure.spec.alpha/and :portkey.aws.iot/policy-arn))
(clojure.spec.alpha/def :portkey.aws.iot/policy (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.policy/policyName :portkey.aws.iot.policy/policyArn]))

(clojure.spec.alpha/def :portkey.aws.iot/key-pair (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot/PublicKey :portkey.aws.iot/PrivateKey]))

(clojure.spec.alpha/def :portkey.aws.iot/max-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__30878__30879__auto__] (clojure.core/<= 1 p1__30878__30879__auto__)) (fn* [p1__30880__30881__auto__] (clojure.core/<= p1__30880__30881__auto__ 10000))))

(clojure.spec.alpha/def :portkey.aws.iot.malformed-policy-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/malformed-policy-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.malformed-policy-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot/set-as-default clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot/version clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.iot.registercacertificate-response/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.registercacertificate-response/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot/registercacertificate-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.registercacertificate-response/certificateArn :portkey.aws.iot.registercacertificate-response/certificateId]))

(clojure.spec.alpha/def :portkey.aws.iot/metric-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.logging-options-payload/role-arn (clojure.spec.alpha/and :portkey.aws.iot/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.logging-options-payload/log-level (clojure.spec.alpha/and :portkey.aws.iot/log-level))
(clojure.spec.alpha/def :portkey.aws.iot/logging-options-payload (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.logging-options-payload/roleArn] :opt-un [:portkey.aws.iot.logging-options-payload/logLevel]))

(clojure.spec.alpha/def :portkey.aws.iot/elasticsearch-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.throttling-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/throttling-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.throttling-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot/resource-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.salesforce-action/token (clojure.spec.alpha/and :portkey.aws.iot/salesforce-token))
(clojure.spec.alpha/def :portkey.aws.iot.salesforce-action/url (clojure.spec.alpha/and :portkey.aws.iot/salesforce-endpoint))
(clojure.spec.alpha/def :portkey.aws.iot/salesforce-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.salesforce-action/token :portkey.aws.iot.salesforce-action/url] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/salesforce-endpoint (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 2000)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"https://ingestion-[a-zA-Z0-9]{1,12}\.[a-zA-Z0-9]+\.((sfdc-matrix\.net)|(sfdcnow\.com))/streams/\w{1,20}/\w{1,20}/event" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot/metric-namespace (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.list-policies-response/policies (clojure.spec.alpha/and :portkey.aws.iot/policies))
(clojure.spec.alpha/def :portkey.aws.iot.list-policies-response/next-marker (clojure.spec.alpha/and :portkey.aws.iot/marker))
(clojure.spec.alpha/def :portkey.aws.iot/list-policies-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-policies-response/policies :portkey.aws.iot.list-policies-response/nextMarker]))

(clojure.spec.alpha/def :portkey.aws.iot/ascending-order clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot/is-default-version clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.transfer-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/transfer-conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.transfer-conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot/optional-version clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.iot/principal (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.cacertificate-description/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.cacertificate-description/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.cacertificate-description/status (clojure.spec.alpha/and :portkey.aws.iot/cacertificate-status))
(clojure.spec.alpha/def :portkey.aws.iot.cacertificate-description/certificate-pem (clojure.spec.alpha/and :portkey.aws.iot/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.cacertificate-description/owned-by (clojure.spec.alpha/and :portkey.aws.iot/aws-account-id))
(clojure.spec.alpha/def :portkey.aws.iot.cacertificate-description/creation-date (clojure.spec.alpha/and :portkey.aws.iot/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.cacertificate-description/auto-registration-status (clojure.spec.alpha/and :portkey.aws.iot/auto-registration-status))
(clojure.spec.alpha/def :portkey.aws.iot/cacertificate-description (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.cacertificate-description/certificateArn :portkey.aws.iot.cacertificate-description/certificateId :portkey.aws.iot.cacertificate-description/status :portkey.aws.iot.cacertificate-description/certificatePem :portkey.aws.iot.cacertificate-description/ownedBy :portkey.aws.iot.cacertificate-description/creationDate :portkey.aws.iot.cacertificate-description/autoRegistrationStatus]))

(clojure.spec.alpha/def :portkey.aws.iot.transfer-data/transfer-message (clojure.spec.alpha/and :portkey.aws.iot/message))
(clojure.spec.alpha/def :portkey.aws.iot.transfer-data/reject-reason (clojure.spec.alpha/and :portkey.aws.iot/message))
(clojure.spec.alpha/def :portkey.aws.iot.transfer-data/transfer-date (clojure.spec.alpha/and :portkey.aws.iot/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.transfer-data/accept-date (clojure.spec.alpha/and :portkey.aws.iot/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.transfer-data/reject-date (clojure.spec.alpha/and :portkey.aws.iot/date-type))
(clojure.spec.alpha/def :portkey.aws.iot/transfer-data (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.transfer-data/transferMessage :portkey.aws.iot.transfer-data/rejectReason :portkey.aws.iot.transfer-data/transferDate :portkey.aws.iot.transfer-data/acceptDate :portkey.aws.iot.transfer-data/rejectDate]))

(clojure.spec.alpha/def :portkey.aws.iot.registration-code-validation-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/registration-code-validation-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.registration-code-validation-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot/policy-versions (clojure.spec.alpha/coll-of :portkey.aws.iot/policy-version :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.cloudwatch-alarm-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.cloudwatch-alarm-action/alarm-name (clojure.spec.alpha/and :portkey.aws.iot/alarm-name))
(clojure.spec.alpha/def :portkey.aws.iot.cloudwatch-alarm-action/state-reason (clojure.spec.alpha/and :portkey.aws.iot/state-reason))
(clojure.spec.alpha/def :portkey.aws.iot.cloudwatch-alarm-action/state-value (clojure.spec.alpha/and :portkey.aws.iot/state-value))
(clojure.spec.alpha/def :portkey.aws.iot/cloudwatch-alarm-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.cloudwatch-alarm-action/roleArn :portkey.aws.iot.cloudwatch-alarm-action/alarmName :portkey.aws.iot.cloudwatch-alarm-action/stateReason :portkey.aws.iot.cloudwatch-alarm-action/stateValue] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.lambda-action/function-arn (clojure.spec.alpha/and :portkey.aws.iot/function-arn))
(clojure.spec.alpha/def :portkey.aws.iot/lambda-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.lambda-action/functionArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.set-logging-options-request/logging-options-payload (clojure.spec.alpha/and :portkey.aws.iot/logging-options-payload))
(clojure.spec.alpha/def :portkey.aws.iot/set-logging-options-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.set-logging-options-request/loggingOptionsPayload] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/bucket-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/certificate-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 64 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 64)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"(0x)?[a-fA-F0-9]+" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot/attach-thing-principal-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/endpoint-address (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/certificate-pem (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 65536))))

(clojure.spec.alpha/def :portkey.aws.iot.create-thing-type-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.create-thing-type-request/thing-type-properties (clojure.spec.alpha/and :portkey.aws.iot/thing-type-properties))
(clojure.spec.alpha/def :portkey.aws.iot/create-thing-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.create-thing-type-request/thingTypeName] :opt-un [:portkey.aws.iot.create-thing-type-request/thingTypeProperties]))

(clojure.spec.alpha/def :portkey.aws.iot.action/dynamodb (clojure.spec.alpha/and :portkey.aws.iot/dynamodbaction))
(clojure.spec.alpha/def :portkey.aws.iot.action/sns (clojure.spec.alpha/and :portkey.aws.iot/sns-action))
(clojure.spec.alpha/def :portkey.aws.iot.action/cloudwatch-alarm (clojure.spec.alpha/and :portkey.aws.iot/cloudwatch-alarm-action))
(clojure.spec.alpha/def :portkey.aws.iot.action/republish (clojure.spec.alpha/and :portkey.aws.iot/republish-action))
(clojure.spec.alpha/def :portkey.aws.iot.action/kinesis (clojure.spec.alpha/and :portkey.aws.iot/kinesis-action))
(clojure.spec.alpha/def :portkey.aws.iot.action/s3 (clojure.spec.alpha/and :portkey.aws.iot/s3-action))
(clojure.spec.alpha/def :portkey.aws.iot.action/salesforce (clojure.spec.alpha/and :portkey.aws.iot/salesforce-action))
(clojure.spec.alpha/def :portkey.aws.iot.action/sqs (clojure.spec.alpha/and :portkey.aws.iot/sqs-action))
(clojure.spec.alpha/def :portkey.aws.iot.action/elasticsearch (clojure.spec.alpha/and :portkey.aws.iot/elasticsearch-action))
(clojure.spec.alpha/def :portkey.aws.iot.action/cloudwatch-metric (clojure.spec.alpha/and :portkey.aws.iot/cloudwatch-metric-action))
(clojure.spec.alpha/def :portkey.aws.iot.action/firehose (clojure.spec.alpha/and :portkey.aws.iot/firehose-action))
(clojure.spec.alpha/def :portkey.aws.iot.action/dynamodbv2 (clojure.spec.alpha/and :portkey.aws.iot/dynamodbv2-action))
(clojure.spec.alpha/def :portkey.aws.iot.action/lambda (clojure.spec.alpha/and :portkey.aws.iot/lambda-action))
(clojure.spec.alpha/def :portkey.aws.iot/action (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.action/dynamoDB :portkey.aws.iot.action/sns :portkey.aws.iot.action/cloudwatchAlarm :portkey.aws.iot.action/republish :portkey.aws.iot.action/kinesis :portkey.aws.iot.action/s3 :portkey.aws.iot.action/salesforce :portkey.aws.iot.action/sqs :portkey.aws.iot.action/elasticsearch :portkey.aws.iot.action/cloudwatchMetric :portkey.aws.iot.action/firehose :portkey.aws.iot.action/dynamoDBv2 :portkey.aws.iot.action/lambda]))

(clojure.spec.alpha/def :portkey.aws.iot/thing-type-list (clojure.spec.alpha/coll-of :portkey.aws.iot/thing-type-definition :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.create-topic-rule-request/rule-name (clojure.spec.alpha/and :portkey.aws.iot/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot.create-topic-rule-request/topic-rule-payload (clojure.spec.alpha/and :portkey.aws.iot/topic-rule-payload))
(clojure.spec.alpha/def :portkey.aws.iot/create-topic-rule-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.create-topic-rule-request/ruleName :portkey.aws.iot.create-topic-rule-request/topicRulePayload] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot/created-at-date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.iot.certificate/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.certificate/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.certificate/status (clojure.spec.alpha/and :portkey.aws.iot/certificate-status))
(clojure.spec.alpha/def :portkey.aws.iot.certificate/creation-date (clojure.spec.alpha/and :portkey.aws.iot/date-type))
(clojure.spec.alpha/def :portkey.aws.iot/certificate (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.certificate/certificateArn :portkey.aws.iot.certificate/certificateId :portkey.aws.iot.certificate/status :portkey.aws.iot.certificate/creationDate]))

(clojure.spec.alpha/def :portkey.aws.iot.create-policy-version-response/policy-arn (clojure.spec.alpha/and :portkey.aws.iot/policy-arn))
(clojure.spec.alpha/def :portkey.aws.iot.create-policy-version-response/policy-document (clojure.spec.alpha/and :portkey.aws.iot/policy-document))
(clojure.spec.alpha/def :portkey.aws.iot.create-policy-version-response/policy-version-id (clojure.spec.alpha/and :portkey.aws.iot/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot.create-policy-version-response/is-default-version (clojure.spec.alpha/and :portkey.aws.iot/is-default-version))
(clojure.spec.alpha/def :portkey.aws.iot/create-policy-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.create-policy-version-response/policyArn :portkey.aws.iot.create-policy-version-response/policyDocument :portkey.aws.iot.create-policy-version-response/policyVersionId :portkey.aws.iot.create-policy-version-response/isDefaultVersion]))

(clojure.spec.alpha/def :portkey.aws.iot/state-reason (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot/elasticsearch-endpoint (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"https?://.*" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.list-things-request/next-token (clojure.spec.alpha/and :portkey.aws.iot/next-token))
(clojure.spec.alpha/def :portkey.aws.iot.list-things-request/max-results (clojure.spec.alpha/and :portkey.aws.iot/registry-max-results))
(clojure.spec.alpha/def :portkey.aws.iot.list-things-request/attribute-name (clojure.spec.alpha/and :portkey.aws.iot/attribute-name))
(clojure.spec.alpha/def :portkey.aws.iot.list-things-request/attribute-value (clojure.spec.alpha/and :portkey.aws.iot/attribute-value))
(clojure.spec.alpha/def :portkey.aws.iot.list-things-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot/list-things-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-things-request/nextToken :portkey.aws.iot.list-things-request/maxResults :portkey.aws.iot.list-things-request/attributeName :portkey.aws.iot.list-things-request/attributeValue :portkey.aws.iot.list-things-request/thingTypeName]))

(clojure.spec.alpha/def :portkey.aws.iot.describe-endpoint-response/endpoint-address (clojure.spec.alpha/and :portkey.aws.iot/endpoint-address))
(clojure.spec.alpha/def :portkey.aws.iot/describe-endpoint-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.describe-endpoint-response/endpointAddress]))

(clojure.spec.alpha/def :portkey.aws.iot.replace-topic-rule-request/rule-name (clojure.spec.alpha/and :portkey.aws.iot/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot.replace-topic-rule-request/topic-rule-payload (clojure.spec.alpha/and :portkey.aws.iot/topic-rule-payload))
(clojure.spec.alpha/def :portkey.aws.iot/replace-topic-rule-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.replace-topic-rule-request/ruleName :portkey.aws.iot.replace-topic-rule-request/topicRulePayload] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.s3-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.s3-action/bucket-name (clojure.spec.alpha/and :portkey.aws.iot/bucket-name))
(clojure.spec.alpha/def :portkey.aws.iot.s3-action/key (clojure.spec.alpha/and :portkey.aws.iot/key))
(clojure.spec.alpha/def :portkey.aws.iot.s3-action/canned-acl (clojure.spec.alpha/and :portkey.aws.iot/canned-access-control-list))
(clojure.spec.alpha/def :portkey.aws.iot/s3-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.s3-action/roleArn :portkey.aws.iot.s3-action/bucketName :portkey.aws.iot.s3-action/key] :opt-un [:portkey.aws.iot.s3-action/cannedAcl]))

(clojure.spec.alpha/def :portkey.aws.iot/get-registration-code-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.kinesis-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.kinesis-action/stream-name (clojure.spec.alpha/and :portkey.aws.iot/stream-name))
(clojure.spec.alpha/def :portkey.aws.iot.kinesis-action/partition-key (clojure.spec.alpha/and :portkey.aws.iot/partition-key))
(clojure.spec.alpha/def :portkey.aws.iot/kinesis-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.kinesis-action/roleArn :portkey.aws.iot.kinesis-action/streamName] :opt-un [:portkey.aws.iot.kinesis-action/partitionKey]))

(clojure.spec.alpha/def :portkey.aws.iot.cacertificate/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.cacertificate/certificate-id (clojure.spec.alpha/and :portkey.aws.iot/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.cacertificate/status (clojure.spec.alpha/and :portkey.aws.iot/cacertificate-status))
(clojure.spec.alpha/def :portkey.aws.iot.cacertificate/creation-date (clojure.spec.alpha/and :portkey.aws.iot/date-type))
(clojure.spec.alpha/def :portkey.aws.iot/cacertificate (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.cacertificate/certificateArn :portkey.aws.iot.cacertificate/certificateId :portkey.aws.iot.cacertificate/status :portkey.aws.iot.cacertificate/creationDate]))

(clojure.spec.alpha/def :portkey.aws.iot/public-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__)))))

(clojure.spec.alpha/def :portkey.aws.iot.list-things-response/things (clojure.spec.alpha/and :portkey.aws.iot/thing-attribute-list))
(clojure.spec.alpha/def :portkey.aws.iot.list-things-response/next-token (clojure.spec.alpha/and :portkey.aws.iot/next-token))
(clojure.spec.alpha/def :portkey.aws.iot/list-things-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-things-response/things :portkey.aws.iot.list-things-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.iot.create-policy-version-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.create-policy-version-request/policy-document (clojure.spec.alpha/and :portkey.aws.iot/policy-document))
(clojure.spec.alpha/def :portkey.aws.iot.create-policy-version-request/set-as-default (clojure.spec.alpha/and :portkey.aws.iot/set-as-default))
(clojure.spec.alpha/def :portkey.aws.iot/create-policy-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.create-policy-version-request/policyName :portkey.aws.iot.create-policy-version-request/policyDocument] :opt-un [:portkey.aws.iot.create-policy-version-request/setAsDefault]))

(clojure.spec.alpha/def :portkey.aws.iot.create-thing-type-response/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.create-thing-type-response/thing-type-arn (clojure.spec.alpha/and :portkey.aws.iot/thing-type-arn))
(clojure.spec.alpha/def :portkey.aws.iot/create-thing-type-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.create-thing-type-response/thingTypeName :portkey.aws.iot.create-thing-type-response/thingTypeArn]))

(clojure.spec.alpha/def :portkey.aws.iot.certificate-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.iot/error-message))
(clojure.spec.alpha/def :portkey.aws.iot/certificate-conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.certificate-conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.list-outgoing-certificates-response/outgoing-certificates (clojure.spec.alpha/and :portkey.aws.iot/outgoing-certificates))
(clojure.spec.alpha/def :portkey.aws.iot.list-outgoing-certificates-response/next-marker (clojure.spec.alpha/and :portkey.aws.iot/marker))
(clojure.spec.alpha/def :portkey.aws.iot/list-outgoing-certificates-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.list-outgoing-certificates-response/outgoingCertificates :portkey.aws.iot.list-outgoing-certificates-response/nextMarker]))

(clojure.spec.alpha/def :portkey.aws.iot/payload-field (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.topic-rule-list-item/rule-arn (clojure.spec.alpha/and :portkey.aws.iot/rule-arn))
(clojure.spec.alpha/def :portkey.aws.iot.topic-rule-list-item/rule-name (clojure.spec.alpha/and :portkey.aws.iot/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot.topic-rule-list-item/topic-pattern (clojure.spec.alpha/and :portkey.aws.iot/topic-pattern))
(clojure.spec.alpha/def :portkey.aws.iot.topic-rule-list-item/created-at (clojure.spec.alpha/and :portkey.aws.iot/created-at-date))
(clojure.spec.alpha/def :portkey.aws.iot.topic-rule-list-item/rule-disabled (clojure.spec.alpha/and :portkey.aws.iot/is-disabled))
(clojure.spec.alpha/def :portkey.aws.iot/topic-rule-list-item (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.topic-rule-list-item/ruleArn :portkey.aws.iot.topic-rule-list-item/ruleName :portkey.aws.iot.topic-rule-list-item/topicPattern :portkey.aws.iot.topic-rule-list-item/createdAt :portkey.aws.iot.topic-rule-list-item/ruleDisabled]))

(clojure.spec.alpha/def :portkey.aws.iot/firehose-separator (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"([\n\t])|(\r\n)|(,)" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot/principals (clojure.spec.alpha/coll-of :portkey.aws.iot/principal-arn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.topic-rule/rule-name (clojure.spec.alpha/and :portkey.aws.iot/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot.topic-rule/sql (clojure.spec.alpha/and :portkey.aws.iot/sql))
(clojure.spec.alpha/def :portkey.aws.iot.topic-rule/description (clojure.spec.alpha/and :portkey.aws.iot/description))
(clojure.spec.alpha/def :portkey.aws.iot.topic-rule/created-at (clojure.spec.alpha/and :portkey.aws.iot/created-at-date))
(clojure.spec.alpha/def :portkey.aws.iot.topic-rule/actions (clojure.spec.alpha/and :portkey.aws.iot/action-list))
(clojure.spec.alpha/def :portkey.aws.iot.topic-rule/rule-disabled (clojure.spec.alpha/and :portkey.aws.iot/is-disabled))
(clojure.spec.alpha/def :portkey.aws.iot.topic-rule/aws-iot-sql-version (clojure.spec.alpha/and :portkey.aws.iot/aws-iot-sql-version))
(clojure.spec.alpha/def :portkey.aws.iot/topic-rule (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.topic-rule/ruleName :portkey.aws.iot.topic-rule/sql :portkey.aws.iot.topic-rule/description :portkey.aws.iot.topic-rule/createdAt :portkey.aws.iot.topic-rule/actions :portkey.aws.iot.topic-rule/ruleDisabled :portkey.aws.iot.topic-rule/awsIotSqlVersion]))

(clojure.spec.alpha/def :portkey.aws.iot/registration-code (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 64 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 64)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"(0x)?[a-fA-F0-9]+" s__30839__auto__))))

(clojure.core/defn list-policy-versions ([input__33752__auto__] (list-policy-versions input__33752__auto__ portkey.aws/*http-client*)) ([input35222 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version", :body (clojure.spec.alpha/unform :portkey.aws.iot/ListPolicyVersionsRequest input35222)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["policyName" "policyName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version", :body body__33756__auto__} (clojure.core/fn [response35221] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35221)) (clojure.spec.alpha/unform :portkey.aws.iot/list-policy-versions-response (:body response35221)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35221 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35221)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35221}))))))))))

(clojure.core/defn delete-policy-version ([input__33752__auto__] (delete-policy-version input__33752__auto__ portkey.aws/*http-client*)) ([input35224 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version/{policyVersionId}", :body (clojure.spec.alpha/unform :portkey.aws.iot/DeletePolicyVersionRequest input35224)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["policyName" "policyName"] ["policyVersionId" "policyVersionId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version/{policyVersionId}", :body body__33756__auto__} (clojure.core/fn [response35223] (clojure.core/let [errors__33757__auto__ {"DeleteConflictException" :portkey.aws.iot/delete-conflict-exception, "ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35223)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35223 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35223)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35223}))))))))))

(clojure.core/defn attach-principal-policy ([input__33752__auto__] (attach-principal-policy input__33752__auto__ portkey.aws/*http-client*)) ([input35226 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principal-policies/{policyName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/AttachPrincipalPolicyRequest input35226)} (portkey.awsgen/params-to-header ["principal" ["x-amzn-iot-principal" nil]]) (portkey.awsgen/params-to-uri ["policyName" "policyName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principal-policies/{policyName}", :body body__33756__auto__} (clojure.core/fn [response35225] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception, "LimitExceededException" :portkey.aws.iot/limit-exceeded-exception}] (if (clojure.core/= nil (:status response35225)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35225 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35225)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35225}))))))))))

(clojure.core/defn list-certificates-byca ([input__33752__auto__] (list-certificates-byca input__33752__auto__ portkey.aws/*http-client*)) ([input35228 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates-by-ca/{caCertificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot/ListCertificatesByCARequest input35228)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["caCertificateId" "caCertificateId"]) (portkey.awsgen/params-to-querystring ["pageSize" "pageSize"] ["marker" "marker"] ["isAscendingOrder" "ascendingOrder"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates-by-ca/{caCertificateId}", :body body__33756__auto__} (clojure.core/fn [response35227] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35227)) (clojure.spec.alpha/unform :portkey.aws.iot/list-certificates-bycaresponse (:body response35227)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35227 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35227)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35227}))))))))))

(clojure.core/defn get-policy-version ([input__33752__auto__] (get-policy-version input__33752__auto__ portkey.aws/*http-client*)) ([input35230 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version/{policyVersionId}", :body (clojure.spec.alpha/unform :portkey.aws.iot/GetPolicyVersionRequest input35230)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["policyName" "policyName"] ["policyVersionId" "policyVersionId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version/{policyVersionId}", :body body__33756__auto__} (clojure.core/fn [response35229] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35229)) (clojure.spec.alpha/unform :portkey.aws.iot/get-policy-version-response (:body response35229)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35229 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35229)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35229}))))))))))

(clojure.core/defn cancel-certificate-transfer ([input__33752__auto__] (cancel-certificate-transfer input__33752__auto__ portkey.aws/*http-client*)) ([input35232 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cancel-certificate-transfer/{certificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot/CancelCertificateTransferRequest input35232)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["certificateId" "certificateId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cancel-certificate-transfer/{certificateId}", :body body__33756__auto__} (clojure.core/fn [response35231] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "TransferAlreadyCompletedException" :portkey.aws.iot/transfer-already-completed-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35231)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35231 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35231)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35231}))))))))))

(clojure.core/defn listcacertificates ([input__33752__auto__] (listcacertificates input__33752__auto__ portkey.aws/*http-client*)) ([input35234 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificates", :body (clojure.spec.alpha/unform :portkey.aws.iot/ListCACertificatesRequest input35234)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["pageSize" "pageSize"] ["marker" "marker"] ["isAscendingOrder" "ascendingOrder"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificates", :body body__33756__auto__} (clojure.core/fn [response35233] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35233)) (clojure.spec.alpha/unform :portkey.aws.iot/listcacertificates-response (:body response35233)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35233 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35233)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35233}))))))))))

(clojure.core/defn create-thing ([input__33752__auto__] (create-thing input__33752__auto__ portkey.aws/*http-client*)) ([input35236 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/CreateThingRequest input35236)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["thingName" "thingName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body body__33756__auto__} (clojure.core/fn [response35235] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception, "ResourceAlreadyExistsException" :portkey.aws.iot/resource-already-exists-exception, "ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception}] (if (clojure.core/= nil (:status response35235)) (clojure.spec.alpha/unform :portkey.aws.iot/create-thing-response (:body response35235)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35235 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35235)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35235}))))))))))

(clojure.core/defn create-topic-rule ([input__33752__auto__] (create-topic-rule input__33752__auto__ portkey.aws/*http-client*)) ([input35238 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/CreateTopicRuleRequest input35238)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["ruleName" "ruleName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "topicRulePayload") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body body__33756__auto__} (clojure.core/fn [response35237] (clojure.core/let [errors__33757__auto__ {"SqlParseException" :portkey.aws.iot/sql-parse-exception, "InternalException" :portkey.aws.iot/internal-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ResourceAlreadyExistsException" :portkey.aws.iot/resource-already-exists-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception}] (if (clojure.core/= nil (:status response35237)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35237 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35237)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35237}))))))))))

(clojure.core/defn accept-certificate-transfer ([input__33752__auto__] (accept-certificate-transfer input__33752__auto__ portkey.aws/*http-client*)) ([input35240 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/accept-certificate-transfer/{certificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot/AcceptCertificateTransferRequest input35240)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["certificateId" "certificateId"]) (portkey.awsgen/params-to-querystring ["setAsActive" "setAsActive"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/accept-certificate-transfer/{certificateId}", :body body__33756__auto__} (clojure.core/fn [response35239] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "TransferAlreadyCompletedException" :portkey.aws.iot/transfer-already-completed-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35239)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35239 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35239)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35239}))))))))))

(clojure.core/defn get-registration-code ([input__33752__auto__] (get-registration-code input__33752__auto__ portkey.aws/*http-client*)) ([input35242 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/registrationcode", :body (clojure.spec.alpha/unform :portkey.aws.iot/GetRegistrationCodeRequest input35242)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/registrationcode", :body body__33756__auto__} (clojure.core/fn [response35241] (clojure.core/let [errors__33757__auto__ {"ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception}] (if (clojure.core/= nil (:status response35241)) (clojure.spec.alpha/unform :portkey.aws.iot/get-registration-code-response (:body response35241)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35241 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35241)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35241}))))))))))

(clojure.core/defn list-policies ([input__33752__auto__] (list-policies input__33752__auto__ portkey.aws/*http-client*)) ([input35244 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies", :body (clojure.spec.alpha/unform :portkey.aws.iot/ListPoliciesRequest input35244)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["marker" "marker"] ["pageSize" "pageSize"] ["isAscendingOrder" "ascendingOrder"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies", :body body__33756__auto__} (clojure.core/fn [response35243] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35243)) (clojure.spec.alpha/unform :portkey.aws.iot/list-policies-response (:body response35243)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35243 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35243)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35243}))))))))))

(clojure.core/defn delete-registration-code ([input__33752__auto__] (delete-registration-code input__33752__auto__ portkey.aws/*http-client*)) ([input35246 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/registrationcode", :body (clojure.spec.alpha/unform :portkey.aws.iot/DeleteRegistrationCodeRequest input35246)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/registrationcode", :body body__33756__auto__} (clojure.core/fn [response35245] (clojure.core/let [errors__33757__auto__ {"ThrottlingException" :portkey.aws.iot/throttling-exception, "ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35245)) (clojure.spec.alpha/unform :portkey.aws.iot/delete-registration-code-response (:body response35245)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35245 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35245)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35245}))))))))))

(clojure.core/defn describecacertificate ([input__33752__auto__] (describecacertificate input__33752__auto__ portkey.aws/*http-client*)) ([input35248 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate/{caCertificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot/DescribeCACertificateRequest input35248)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["caCertificateId" "certificateId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate/{caCertificateId}", :body body__33756__auto__} (clojure.core/fn [response35247] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception, "ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception}] (if (clojure.core/= nil (:status response35247)) (clojure.spec.alpha/unform :portkey.aws.iot/describecacertificate-response (:body response35247)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35247 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35247)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35247}))))))))))

(clojure.core/defn detach-thing-principal ([input__33752__auto__] (detach-thing-principal input__33752__auto__ portkey.aws/*http-client*)) ([input35250 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}/principals", :body (clojure.spec.alpha/unform :portkey.aws.iot/DetachThingPrincipalRequest input35250)} (portkey.awsgen/params-to-header ["principal" ["x-amzn-principal" nil]]) (portkey.awsgen/params-to-uri ["thingName" "thingName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}/principals", :body body__33756__auto__} (clojure.core/fn [response35249] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35249)) (clojure.spec.alpha/unform :portkey.aws.iot/detach-thing-principal-response (:body response35249)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35249 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35249)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35249}))))))))))

(clojure.core/defn list-outgoing-certificates ([input__33752__auto__] (list-outgoing-certificates input__33752__auto__ portkey.aws/*http-client*)) ([input35252 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates-out-going", :body (clojure.spec.alpha/unform :portkey.aws.iot/ListOutgoingCertificatesRequest input35252)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["pageSize" "pageSize"] ["marker" "marker"] ["isAscendingOrder" "ascendingOrder"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates-out-going", :body body__33756__auto__} (clojure.core/fn [response35251] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35251)) (clojure.spec.alpha/unform :portkey.aws.iot/list-outgoing-certificates-response (:body response35251)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35251 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35251)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35251}))))))))))

(clojure.core/defn deletecacertificate ([input__33752__auto__] (deletecacertificate input__33752__auto__ portkey.aws/*http-client*)) ([input35254 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate/{caCertificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot/DeleteCACertificateRequest input35254)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["caCertificateId" "certificateId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate/{caCertificateId}", :body body__33756__auto__} (clojure.core/fn [response35253] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "CertificateStateException" :portkey.aws.iot/certificate-state-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception, "ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception}] (if (clojure.core/= nil (:status response35253)) (clojure.spec.alpha/unform :portkey.aws.iot/deletecacertificate-response (:body response35253)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35253 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35253)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35253}))))))))))

(clojure.core/defn list-principal-things ([input__33752__auto__] (list-principal-things input__33752__auto__ portkey.aws/*http-client*)) ([input35256 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principals/things", :body (clojure.spec.alpha/unform :portkey.aws.iot/ListPrincipalThingsRequest input35256)} (portkey.awsgen/params-to-header ["principal" ["x-amzn-principal" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["nextToken" "nextToken"] ["maxResults" "maxResults"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principals/things", :body body__33756__auto__} (clojure.core/fn [response35255] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception, "ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception}] (if (clojure.core/= nil (:status response35255)) (clojure.spec.alpha/unform :portkey.aws.iot/list-principal-things-response (:body response35255)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35255 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35255)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35255}))))))))))

(clojure.core/defn create-policy-version ([input__33752__auto__] (create-policy-version input__33752__auto__ portkey.aws/*http-client*)) ([input35258 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version", :body (clojure.spec.alpha/unform :portkey.aws.iot/CreatePolicyVersionRequest input35258)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["policyName" "policyName"]) (portkey.awsgen/params-to-querystring ["setAsDefault" "setAsDefault"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version", :body body__33756__auto__} (clojure.core/fn [response35257] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "MalformedPolicyException" :portkey.aws.iot/malformed-policy-exception, "VersionsLimitExceededException" :portkey.aws.iot/versions-limit-exceeded-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35257)) (clojure.spec.alpha/unform :portkey.aws.iot/create-policy-version-response (:body response35257)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35257 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35257)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35257}))))))))))

(clojure.core/defn describe-endpoint ([input__33752__auto__] (describe-endpoint input__33752__auto__ portkey.aws/*http-client*)) ([input35260 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/endpoint", :body (clojure.spec.alpha/unform :portkey.aws.iot/DescribeEndpointRequest input35260)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/endpoint", :body body__33756__auto__} (clojure.core/fn [response35259] (clojure.core/let [errors__33757__auto__ {"InternalFailureException" :portkey.aws.iot/internal-failure-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception}] (if (clojure.core/= nil (:status response35259)) (clojure.spec.alpha/unform :portkey.aws.iot/describe-endpoint-response (:body response35259)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35259 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35259)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35259}))))))))))

(clojure.core/defn register-certificate ([input__33752__auto__] (register-certificate input__33752__auto__ portkey.aws/*http-client*)) ([input35262 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificate/register", :body (clojure.spec.alpha/unform :portkey.aws.iot/RegisterCertificateRequest input35262)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["setAsActive" "setAsActive"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificate/register", :body body__33756__auto__} (clojure.core/fn [response35261] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "CertificateStateException" :portkey.aws.iot/certificate-state-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "CertificateValidationException" :portkey.aws.iot/certificate-validation-exception, "ResourceAlreadyExistsException" :portkey.aws.iot/resource-already-exists-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "CertificateConflictException" :portkey.aws.iot/certificate-conflict-exception}] (if (clojure.core/= nil (:status response35261)) (clojure.spec.alpha/unform :portkey.aws.iot/register-certificate-response (:body response35261)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35261 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35261)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35261}))))))))))

(clojure.core/defn get-policy ([input__33752__auto__] (get-policy input__33752__auto__ portkey.aws/*http-client*)) ([input35264 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/GetPolicyRequest input35264)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["policyName" "policyName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}", :body body__33756__auto__} (clojure.core/fn [response35263] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35263)) (clojure.spec.alpha/unform :portkey.aws.iot/get-policy-response (:body response35263)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35263 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35263)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35263}))))))))))

(clojure.core/defn enable-topic-rule ([input__33752__auto__] (enable-topic-rule input__33752__auto__ portkey.aws/*http-client*)) ([input35266 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}/enable", :body (clojure.spec.alpha/unform :portkey.aws.iot/EnableTopicRuleRequest input35266)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["ruleName" "ruleName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}/enable", :body body__33756__auto__} (clojure.core/fn [response35265] (clojure.core/let [errors__33757__auto__ {"InternalException" :portkey.aws.iot/internal-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception}] (if (clojure.core/= nil (:status response35265)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35265 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35265)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35265}))))))))))

(clojure.core/defn deprecate-thing-type ([input__33752__auto__] (deprecate-thing-type input__33752__auto__ portkey.aws/*http-client*)) ([input35268 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}/deprecate", :body (clojure.spec.alpha/unform :portkey.aws.iot/DeprecateThingTypeRequest input35268)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["thingTypeName" "thingTypeName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}/deprecate", :body body__33756__auto__} (clojure.core/fn [response35267] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35267)) (clojure.spec.alpha/unform :portkey.aws.iot/deprecate-thing-type-response (:body response35267)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35267 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35267)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35267}))))))))))

(clojure.core/defn delete-thing-type ([input__33752__auto__] (delete-thing-type input__33752__auto__ portkey.aws/*http-client*)) ([input35270 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/DeleteThingTypeRequest input35270)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["thingTypeName" "thingTypeName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}", :body body__33756__auto__} (clojure.core/fn [response35269] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35269)) (clojure.spec.alpha/unform :portkey.aws.iot/delete-thing-type-response (:body response35269)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35269 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35269)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35269}))))))))))

(clojure.core/defn replace-topic-rule ([input__33752__auto__] (replace-topic-rule input__33752__auto__ portkey.aws/*http-client*)) ([input35272 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/ReplaceTopicRuleRequest input35272)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["ruleName" "ruleName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "topicRulePayload") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body body__33756__auto__} (clojure.core/fn [response35271] (clojure.core/let [errors__33757__auto__ {"SqlParseException" :portkey.aws.iot/sql-parse-exception, "InternalException" :portkey.aws.iot/internal-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception}] (if (clojure.core/= nil (:status response35271)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35271 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35271)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35271}))))))))))

(clojure.core/defn get-topic-rule ([input__33752__auto__] (get-topic-rule input__33752__auto__ portkey.aws/*http-client*)) ([input35274 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/GetTopicRuleRequest input35274)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["ruleName" "ruleName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body body__33756__auto__} (clojure.core/fn [response35273] (clojure.core/let [errors__33757__auto__ {"InternalException" :portkey.aws.iot/internal-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception}] (if (clojure.core/= nil (:status response35273)) (clojure.spec.alpha/unform :portkey.aws.iot/get-topic-rule-response (:body response35273)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35273 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35273)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35273}))))))))))

(clojure.core/defn reject-certificate-transfer ([input__33752__auto__] (reject-certificate-transfer input__33752__auto__ portkey.aws/*http-client*)) ([input35276 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/reject-certificate-transfer/{certificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot/RejectCertificateTransferRequest input35276)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["certificateId" "certificateId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/reject-certificate-transfer/{certificateId}", :body body__33756__auto__} (clojure.core/fn [response35275] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "TransferAlreadyCompletedException" :portkey.aws.iot/transfer-already-completed-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35275)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35275 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35275)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35275}))))))))))

(clojure.core/defn delete-thing ([input__33752__auto__] (delete-thing input__33752__auto__ portkey.aws/*http-client*)) ([input35278 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/DeleteThingRequest input35278)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["thingName" "thingName"]) (portkey.awsgen/params-to-querystring ["expectedVersion" "expectedVersion"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body body__33756__auto__} (clojure.core/fn [response35277] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "VersionConflictException" :portkey.aws.iot/version-conflict-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35277)) (clojure.spec.alpha/unform :portkey.aws.iot/delete-thing-response (:body response35277)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35277 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35277)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35277}))))))))))

(clojure.core/defn list-certificates ([input__33752__auto__] (list-certificates input__33752__auto__ portkey.aws/*http-client*)) ([input35280 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates", :body (clojure.spec.alpha/unform :portkey.aws.iot/ListCertificatesRequest input35280)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["pageSize" "pageSize"] ["marker" "marker"] ["isAscendingOrder" "ascendingOrder"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates", :body body__33756__auto__} (clojure.core/fn [response35279] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35279)) (clojure.spec.alpha/unform :portkey.aws.iot/list-certificates-response (:body response35279)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35279 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35279)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35279}))))))))))

(clojure.core/defn list-thing-types ([input__33752__auto__] (list-thing-types input__33752__auto__ portkey.aws/*http-client*)) ([input35282 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types", :body (clojure.spec.alpha/unform :portkey.aws.iot/ListThingTypesRequest input35282)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["nextToken" "nextToken"] ["maxResults" "maxResults"] ["thingTypeName" "thingTypeName"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types", :body body__33756__auto__} (clojure.core/fn [response35281] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35281)) (clojure.spec.alpha/unform :portkey.aws.iot/list-thing-types-response (:body response35281)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35281 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35281)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35281}))))))))))

(clojure.core/defn describe-thing ([input__33752__auto__] (describe-thing input__33752__auto__ portkey.aws/*http-client*)) ([input35284 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/DescribeThingRequest input35284)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["thingName" "thingName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body body__33756__auto__} (clojure.core/fn [response35283] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35283)) (clojure.spec.alpha/unform :portkey.aws.iot/describe-thing-response (:body response35283)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35283 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35283)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35283}))))))))))

(clojure.core/defn list-policy-principals ([input__33752__auto__] (list-policy-principals input__33752__auto__ portkey.aws/*http-client*)) ([input35286 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policy-principals", :body (clojure.spec.alpha/unform :portkey.aws.iot/ListPolicyPrincipalsRequest input35286)} (portkey.awsgen/params-to-header ["policyName" ["x-amzn-iot-policy" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["marker" "marker"] ["pageSize" "pageSize"] ["isAscendingOrder" "ascendingOrder"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policy-principals", :body body__33756__auto__} (clojure.core/fn [response35285] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35285)) (clojure.spec.alpha/unform :portkey.aws.iot/list-policy-principals-response (:body response35285)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35285 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35285)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35285}))))))))))

(clojure.core/defn set-default-policy-version ([input__33752__auto__] (set-default-policy-version input__33752__auto__ portkey.aws/*http-client*)) ([input35288 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version/{policyVersionId}", :body (clojure.spec.alpha/unform :portkey.aws.iot/SetDefaultPolicyVersionRequest input35288)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["policyName" "policyName"] ["policyVersionId" "policyVersionId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version/{policyVersionId}", :body body__33756__auto__} (clojure.core/fn [response35287] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35287)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35287 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35287)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35287}))))))))))

(clojure.core/defn create-policy ([input__33752__auto__] (create-policy input__33752__auto__ portkey.aws/*http-client*)) ([input35290 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/CreatePolicyRequest input35290)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["policyName" "policyName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}", :body body__33756__auto__} (clojure.core/fn [response35289] (clojure.core/let [errors__33757__auto__ {"ResourceAlreadyExistsException" :portkey.aws.iot/resource-already-exists-exception, "MalformedPolicyException" :portkey.aws.iot/malformed-policy-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35289)) (clojure.spec.alpha/unform :portkey.aws.iot/create-policy-response (:body response35289)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35289 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35289)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35289}))))))))))

(clojure.core/defn describe-thing-type ([input__33752__auto__] (describe-thing-type input__33752__auto__ portkey.aws/*http-client*)) ([input35292 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/DescribeThingTypeRequest input35292)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["thingTypeName" "thingTypeName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}", :body body__33756__auto__} (clojure.core/fn [response35291] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35291)) (clojure.spec.alpha/unform :portkey.aws.iot/describe-thing-type-response (:body response35291)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35291 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35291)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35291}))))))))))

(clojure.core/defn attach-thing-principal ([input__33752__auto__] (attach-thing-principal input__33752__auto__ portkey.aws/*http-client*)) ([input35294 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}/principals", :body (clojure.spec.alpha/unform :portkey.aws.iot/AttachThingPrincipalRequest input35294)} (portkey.awsgen/params-to-header ["principal" ["x-amzn-principal" nil]]) (portkey.awsgen/params-to-uri ["thingName" "thingName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}/principals", :body body__33756__auto__} (clojure.core/fn [response35293] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35293)) (clojure.spec.alpha/unform :portkey.aws.iot/attach-thing-principal-response (:body response35293)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35293 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35293)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35293}))))))))))

(clojure.core/defn create-keys-and-certificate ([input__33752__auto__] (create-keys-and-certificate input__33752__auto__ portkey.aws/*http-client*)) ([input35296 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/keys-and-certificate", :body (clojure.spec.alpha/unform :portkey.aws.iot/CreateKeysAndCertificateRequest input35296)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["setAsActive" "setAsActive"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/keys-and-certificate", :body body__33756__auto__} (clojure.core/fn [response35295] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35295)) (clojure.spec.alpha/unform :portkey.aws.iot/create-keys-and-certificate-response (:body response35295)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35295 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35295)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35295}))))))))))

(clojure.core/defn registercacertificate ([input__33752__auto__] (registercacertificate input__33752__auto__ portkey.aws/*http-client*)) ([input35298 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate", :body (clojure.spec.alpha/unform :portkey.aws.iot/RegisterCACertificateRequest input35298)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["setAsActive" "setAsActive"] ["allowAutoRegistration" "allowAutoRegistration"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate", :body body__33756__auto__} (clojure.core/fn [response35297] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "CertificateValidationException" :portkey.aws.iot/certificate-validation-exception, "LimitExceededException" :portkey.aws.iot/limit-exceeded-exception, "ResourceAlreadyExistsException" :portkey.aws.iot/resource-already-exists-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "RegistrationCodeValidationException" :portkey.aws.iot/registration-code-validation-exception}] (if (clojure.core/= nil (:status response35297)) (clojure.spec.alpha/unform :portkey.aws.iot/registercacertificate-response (:body response35297)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35297 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35297)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35297}))))))))))

(clojure.core/defn disable-topic-rule ([input__33752__auto__] (disable-topic-rule input__33752__auto__ portkey.aws/*http-client*)) ([input35300 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}/disable", :body (clojure.spec.alpha/unform :portkey.aws.iot/DisableTopicRuleRequest input35300)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["ruleName" "ruleName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}/disable", :body body__33756__auto__} (clojure.core/fn [response35299] (clojure.core/let [errors__33757__auto__ {"InternalException" :portkey.aws.iot/internal-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception}] (if (clojure.core/= nil (:status response35299)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35299 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35299)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35299}))))))))))

(clojure.core/defn list-topic-rules ([input__33752__auto__] (list-topic-rules input__33752__auto__ portkey.aws/*http-client*)) ([input35302 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules", :body (clojure.spec.alpha/unform :portkey.aws.iot/ListTopicRulesRequest input35302)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["topic" "topic"] ["maxResults" "maxResults"] ["nextToken" "nextToken"] ["ruleDisabled" "ruleDisabled"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules", :body body__33756__auto__} (clojure.core/fn [response35301] (clojure.core/let [errors__33757__auto__ {"InternalException" :portkey.aws.iot/internal-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception}] (if (clojure.core/= nil (:status response35301)) (clojure.spec.alpha/unform :portkey.aws.iot/list-topic-rules-response (:body response35301)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35301 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35301)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35301}))))))))))

(clojure.core/defn detach-principal-policy ([input__33752__auto__] (detach-principal-policy input__33752__auto__ portkey.aws/*http-client*)) ([input35304 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principal-policies/{policyName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/DetachPrincipalPolicyRequest input35304)} (portkey.awsgen/params-to-header ["principal" ["x-amzn-iot-principal" nil]]) (portkey.awsgen/params-to-uri ["policyName" "policyName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principal-policies/{policyName}", :body body__33756__auto__} (clojure.core/fn [response35303] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35303)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35303 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35303)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35303}))))))))))

(clojure.core/defn updatecacertificate ([input__33752__auto__] (updatecacertificate input__33752__auto__ portkey.aws/*http-client*)) ([input35306 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate/{caCertificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot/UpdateCACertificateRequest input35306)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["caCertificateId" "certificateId"]) (portkey.awsgen/params-to-querystring ["newStatus" "newStatus"] ["newAutoRegistrationStatus" "newAutoRegistrationStatus"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate/{caCertificateId}", :body body__33756__auto__} (clojure.core/fn [response35305] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35305)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35305 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35305)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35305}))))))))))

(clojure.core/defn delete-topic-rule ([input__33752__auto__] (delete-topic-rule input__33752__auto__ portkey.aws/*http-client*)) ([input35308 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/DeleteTopicRuleRequest input35308)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["ruleName" "ruleName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body body__33756__auto__} (clojure.core/fn [response35307] (clojure.core/let [errors__33757__auto__ {"InternalException" :portkey.aws.iot/internal-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception}] (if (clojure.core/= nil (:status response35307)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35307 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35307)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35307}))))))))))

(clojure.core/defn describe-certificate ([input__33752__auto__] (describe-certificate input__33752__auto__ portkey.aws/*http-client*)) ([input35310 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates/{certificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot/DescribeCertificateRequest input35310)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["certificateId" "certificateId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates/{certificateId}", :body body__33756__auto__} (clojure.core/fn [response35309] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception, "ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception}] (if (clojure.core/= nil (:status response35309)) (clojure.spec.alpha/unform :portkey.aws.iot/describe-certificate-response (:body response35309)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35309 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35309)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35309}))))))))))

(clojure.core/defn set-logging-options ([input__33752__auto__] (set-logging-options input__33752__auto__ portkey.aws/*http-client*)) ([input35312 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/loggingOptions", :body (clojure.spec.alpha/unform :portkey.aws.iot/SetLoggingOptionsRequest input35312)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "loggingOptionsPayload") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/loggingOptions", :body body__33756__auto__} (clojure.core/fn [response35311] (clojure.core/let [errors__33757__auto__ {"InternalException" :portkey.aws.iot/internal-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception}] (if (clojure.core/= nil (:status response35311)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35311 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35311)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35311}))))))))))

(clojure.core/defn list-thing-principals ([input__33752__auto__] (list-thing-principals input__33752__auto__ portkey.aws/*http-client*)) ([input35314 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}/principals", :body (clojure.spec.alpha/unform :portkey.aws.iot/ListThingPrincipalsRequest input35314)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["thingName" "thingName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}/principals", :body body__33756__auto__} (clojure.core/fn [response35313] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception, "ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception}] (if (clojure.core/= nil (:status response35313)) (clojure.spec.alpha/unform :portkey.aws.iot/list-thing-principals-response (:body response35313)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35313 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35313)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35313}))))))))))

(clojure.core/defn list-principal-policies ([input__33752__auto__] (list-principal-policies input__33752__auto__ portkey.aws/*http-client*)) ([input35316 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principal-policies", :body (clojure.spec.alpha/unform :portkey.aws.iot/ListPrincipalPoliciesRequest input35316)} (portkey.awsgen/params-to-header ["principal" ["x-amzn-iot-principal" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["marker" "marker"] ["pageSize" "pageSize"] ["isAscendingOrder" "ascendingOrder"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principal-policies", :body body__33756__auto__} (clojure.core/fn [response35315] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35315)) (clojure.spec.alpha/unform :portkey.aws.iot/list-principal-policies-response (:body response35315)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35315 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35315)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35315}))))))))))

(clojure.core/defn transfer-certificate ([input__33752__auto__] (transfer-certificate input__33752__auto__ portkey.aws/*http-client*)) ([input35318 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/transfer-certificate/{certificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot/TransferCertificateRequest input35318)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["certificateId" "certificateId"]) (portkey.awsgen/params-to-querystring ["targetAwsAccount" "targetAwsAccount"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/transfer-certificate/{certificateId}", :body body__33756__auto__} (clojure.core/fn [response35317] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "CertificateStateException" :portkey.aws.iot/certificate-state-exception, "TransferConflictException" :portkey.aws.iot/transfer-conflict-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35317)) (clojure.spec.alpha/unform :portkey.aws.iot/transfer-certificate-response (:body response35317)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35317 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35317)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35317}))))))))))

(clojure.core/defn delete-policy ([input__33752__auto__] (delete-policy input__33752__auto__ portkey.aws/*http-client*)) ([input35320 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/DeletePolicyRequest input35320)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["policyName" "policyName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}", :body body__33756__auto__} (clojure.core/fn [response35319] (clojure.core/let [errors__33757__auto__ {"DeleteConflictException" :portkey.aws.iot/delete-conflict-exception, "ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35319)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35319 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35319)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35319}))))))))))

(clojure.core/defn update-thing ([input__33752__auto__] (update-thing input__33752__auto__ portkey.aws/*http-client*)) ([input35322 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/UpdateThingRequest input35322)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["thingName" "thingName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body body__33756__auto__} (clojure.core/fn [response35321] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "VersionConflictException" :portkey.aws.iot/version-conflict-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception, "ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception}] (if (clojure.core/= nil (:status response35321)) (clojure.spec.alpha/unform :portkey.aws.iot/update-thing-response (:body response35321)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35321 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35321)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35321}))))))))))

(clojure.core/defn delete-certificate ([input__33752__auto__] (delete-certificate input__33752__auto__ portkey.aws/*http-client*)) ([input35324 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates/{certificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot/DeleteCertificateRequest input35324)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["certificateId" "certificateId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates/{certificateId}", :body body__33756__auto__} (clojure.core/fn [response35323] (clojure.core/let [errors__33757__auto__ {"CertificateStateException" :portkey.aws.iot/certificate-state-exception, "DeleteConflictException" :portkey.aws.iot/delete-conflict-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception, "ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception}] (if (clojure.core/= nil (:status response35323)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35323 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35323)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35323}))))))))))

(clojure.core/defn get-logging-options ([input__33752__auto__] (get-logging-options input__33752__auto__ portkey.aws/*http-client*)) ([input35326 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/loggingOptions", :body (clojure.spec.alpha/unform :portkey.aws.iot/GetLoggingOptionsRequest input35326)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/loggingOptions", :body body__33756__auto__} (clojure.core/fn [response35325] (clojure.core/let [errors__33757__auto__ {"InternalException" :portkey.aws.iot/internal-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception}] (if (clojure.core/= nil (:status response35325)) (clojure.spec.alpha/unform :portkey.aws.iot/get-logging-options-response (:body response35325)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35325 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35325)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35325}))))))))))

(clojure.core/defn create-thing-type ([input__33752__auto__] (create-thing-type input__33752__auto__ portkey.aws/*http-client*)) ([input35328 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}", :body (clojure.spec.alpha/unform :portkey.aws.iot/CreateThingTypeRequest input35328)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["thingTypeName" "thingTypeName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}", :body body__33756__auto__} (clojure.core/fn [response35327] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception, "ResourceAlreadyExistsException" :portkey.aws.iot/resource-already-exists-exception}] (if (clojure.core/= nil (:status response35327)) (clojure.spec.alpha/unform :portkey.aws.iot/create-thing-type-response (:body response35327)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35327 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35327)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35327}))))))))))

(clojure.core/defn update-certificate ([input__33752__auto__] (update-certificate input__33752__auto__ portkey.aws/*http-client*)) ([input35330 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates/{certificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot/UpdateCertificateRequest input35330)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["certificateId" "certificateId"]) (portkey.awsgen/params-to-querystring ["newStatus" "newStatus"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates/{certificateId}", :body body__33756__auto__} (clojure.core/fn [response35329] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.iot/resource-not-found-exception, "CertificateStateException" :portkey.aws.iot/certificate-state-exception, "InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35329)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35329 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35329)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35329}))))))))))

(clojure.core/defn create-certificate-from-csr ([input__33752__auto__] (create-certificate-from-csr input__33752__auto__ portkey.aws/*http-client*)) ([input35332 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates", :body (clojure.spec.alpha/unform :portkey.aws.iot/CreateCertificateFromCsrRequest input35332)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["setAsActive" "setAsActive"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates", :body body__33756__auto__} (clojure.core/fn [response35331] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35331)) (clojure.spec.alpha/unform :portkey.aws.iot/create-certificate-from-csr-response (:body response35331)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35331 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35331)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35331}))))))))))

(clojure.core/defn list-things ([input__33752__auto__] (list-things input__33752__auto__ portkey.aws/*http-client*)) ([input35334 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things", :body (clojure.spec.alpha/unform :portkey.aws.iot/ListThingsRequest input35334)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["nextToken" "nextToken"] ["maxResults" "maxResults"] ["attributeName" "attributeName"] ["attributeValue" "attributeValue"] ["thingTypeName" "thingTypeName"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things", :body body__33756__auto__} (clojure.core/fn [response35333] (clojure.core/let [errors__33757__auto__ {"InvalidRequestException" :portkey.aws.iot/invalid-request-exception, "ThrottlingException" :portkey.aws.iot/throttling-exception, "UnauthorizedException" :portkey.aws.iot/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot/internal-failure-exception}] (if (clojure.core/= nil (:status response35333)) (clojure.spec.alpha/unform :portkey.aws.iot/list-things-response (:body response35333)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35333 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35333)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35333}))))))))))
