(ns portkey.aws.lex-models.-2017-04-19 (:require [portkey.aws]))

(def endpoints 'nil)

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-metadata/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-metadata/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-metadata/status (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/status))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-metadata/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-metadata/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-metadata/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/bot-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.bot-metadata/name :portkey.aws.lex-models.-2017-04-19.bot-metadata/description :portkey.aws.lex-models.-2017-04-19.bot-metadata/status :portkey.aws.lex-models.-2017-04-19.bot-metadata/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.bot-metadata/createdDate :portkey.aws.lex-models.-2017-04-19.bot-metadata/version]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bots-response/bots (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-metadata-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bots-response/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-bots-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-bots-response/bots :portkey.aws.lex-models.-2017-04-19.get-bots-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/slot-list (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/slot :max-count 100))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-alias-metadata/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/alias-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-alias-metadata/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-alias-metadata/bot-version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-alias-metadata/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-alias-metadata/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-alias-metadata/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-alias-metadata/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/bot-alias-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.bot-alias-metadata/name :portkey.aws.lex-models.-2017-04-19.bot-alias-metadata/description :portkey.aws.lex-models.-2017-04-19.bot-alias-metadata/botVersion :portkey.aws.lex-models.-2017-04-19.bot-alias-metadata/botName :portkey.aws.lex-models.-2017-04-19.bot-alias-metadata/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.bot-alias-metadata/createdDate :portkey.aws.lex-models.-2017-04-19.bot-alias-metadata/checksum]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-alias-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/alias-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-alias-request/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-alias-request/bot-version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-alias-request/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-alias-request/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/put-bot-alias-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.put-bot-alias-request/name :portkey.aws.lex-models.-2017-04-19.put-bot-alias-request/botVersion :portkey.aws.lex-models.-2017-04-19.put-bot-alias-request/botName] :opt-un [:portkey.aws.lex-models.-2017-04-19.put-bot-alias-request/description :portkey.aws.lex-models.-2017-04-19.put-bot-alias-request/checksum]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/locale-list (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/locale :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-slot-type-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-type-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/delete-slot-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.delete-slot-type-request/name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/builtin-intent-metadata-list (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/builtin-intent-metadata :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.resource-reference/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.resource-reference/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/resource-reference (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.resource-reference/name :portkey.aws.lex-models.-2017-04-19.resource-reference/version]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/lambdaarn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 20 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 2048)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"arn:aws:lambda:[a-z]+-[a-z]+-[0-9]:[0-9]{12}:function:[a-zA-Z0-9-_]+(/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?(:[a-zA-Z0-9-_]+)?" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-aliases-response/bot-aliases (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-alias-metadata-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-aliases-response/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-bot-aliases-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-bot-aliases-response/BotAliases :portkey.aws.lex-models.-2017-04-19.get-bot-aliases-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.prompt/messages (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/message-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.prompt/max-attempts (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/prompt-max-attempts))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.prompt/response-card (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/response-card))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/prompt (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.prompt/messages :portkey.aws.lex-models.-2017-04-19.prompt/maxAttempts] :opt-un [:portkey.aws.lex-models.-2017-04-19.prompt/responseCard]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/intents (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/idle-sessionttlin-seconds (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/sessionttl))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/clarification-prompt (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/prompt))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/locale (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/locale))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/status (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/status))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/abort-statement (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/statement))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/failure-reason (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/child-directed (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/boolean))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/voice-id (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-response/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/put-bot-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.put-bot-response/intents :portkey.aws.lex-models.-2017-04-19.put-bot-response/createdDate :portkey.aws.lex-models.-2017-04-19.put-bot-response/idleSessionTTLInSeconds :portkey.aws.lex-models.-2017-04-19.put-bot-response/clarificationPrompt :portkey.aws.lex-models.-2017-04-19.put-bot-response/name :portkey.aws.lex-models.-2017-04-19.put-bot-response/locale :portkey.aws.lex-models.-2017-04-19.put-bot-response/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.put-bot-response/status :portkey.aws.lex-models.-2017-04-19.put-bot-response/abortStatement :portkey.aws.lex-models.-2017-04-19.put-bot-response/version :portkey.aws.lex-models.-2017-04-19.put-bot-response/failureReason :portkey.aws.lex-models.-2017-04-19.put-bot-response/childDirected :portkey.aws.lex-models.-2017-04-19.put-bot-response/checksum :portkey.aws.lex-models.-2017-04-19.put-bot-response/voiceId :portkey.aws.lex-models.-2017-04-19.put-bot-response/description]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-response/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-channel-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-response/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-response/bot-alias (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/alias-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-response/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-response/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-response/type (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/channel-type))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-response/bot-configuration (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/channel-configuration-map))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-bot-channel-association-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-response/name :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-response/description :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-response/botAlias :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-response/botName :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-response/createdDate :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-response/type :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-response/botConfiguration]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/bad-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.bad-request-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/channel-configuration-map (clojure.spec.alpha/map-of :portkey.aws.lex-models.-2017-04-19/string :portkey.aws.lex-models.-2017-04-19/string))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.precondition-failed-exception/message (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/precondition-failed-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.precondition-failed-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-alias-response/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/alias-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-alias-response/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-alias-response/bot-version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-alias-response/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-alias-response/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-alias-response/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-alias-response/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/put-bot-alias-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.put-bot-alias-response/name :portkey.aws.lex-models.-2017-04-19.put-bot-alias-response/description :portkey.aws.lex-models.-2017-04-19.put-bot-alias-response/botVersion :portkey.aws.lex-models.-2017-04-19.put-bot-alias-response/botName :portkey.aws.lex-models.-2017-04-19.put-bot-alias-response/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.put-bot-alias-response/createdDate :portkey.aws.lex-models.-2017-04-19.put-bot-alias-response/checksum]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bots-request/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bots-request/max-results (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/max-results))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bots-request/name-contains (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-bots-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-bots-request/nextToken :portkey.aws.lex-models.-2017-04-19.get-bots-request/maxResults :portkey.aws.lex-models.-2017-04-19.get-bots-request/nameContains]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/locale (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"en-US" "en-US", :en-us "en-US"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.utterance-data/utterance-string (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/utterance-string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.utterance-data/count (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/count))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.utterance-data/distinct-users (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/count))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.utterance-data/first-uttered-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.utterance-data/last-uttered-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/utterance-data (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.utterance-data/utteranceString :portkey.aws.lex-models.-2017-04-19.utterance-data/count :portkey.aws.lex-models.-2017-04-19.utterance-data/distinctUsers :portkey.aws.lex-models.-2017-04-19.utterance-data/firstUtteredDate :portkey.aws.lex-models.-2017-04-19.utterance-data/lastUtteredDate]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/alias-name-or-list-all (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 100)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^(-|^[a-zA-Z]+((_[a-zA-Z]+)*|([a-zA-Z]+_)*))$" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-associations-request/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-associations-request/bot-alias (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/alias-name-or-list-all))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-associations-request/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-associations-request/max-results (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/max-results))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-associations-request/name-contains (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-channel-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-bot-channel-associations-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.get-bot-channel-associations-request/botName :portkey.aws.lex-models.-2017-04-19.get-bot-channel-associations-request/botAlias] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-bot-channel-associations-request/nextToken :portkey.aws.lex-models.-2017-04-19.get-bot-channel-associations-request/maxResults :portkey.aws.lex-models.-2017-04-19.get-bot-channel-associations-request/nameContains]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-request/intents (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-request/idle-sessionttlin-seconds (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/sessionttl))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-request/clarification-prompt (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/prompt))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-request/locale (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/locale))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-request/process-behavior (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/process-behavior))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-request/abort-statement (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/statement))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-request/child-directed (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/boolean))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-request/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-request/voice-id (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-bot-request/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/put-bot-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.put-bot-request/name :portkey.aws.lex-models.-2017-04-19.put-bot-request/locale :portkey.aws.lex-models.-2017-04-19.put-bot-request/childDirected] :opt-un [:portkey.aws.lex-models.-2017-04-19.put-bot-request/intents :portkey.aws.lex-models.-2017-04-19.put-bot-request/idleSessionTTLInSeconds :portkey.aws.lex-models.-2017-04-19.put-bot-request/clarificationPrompt :portkey.aws.lex-models.-2017-04-19.put-bot-request/processBehavior :portkey.aws.lex-models.-2017-04-19.put-bot-request/abortStatement :portkey.aws.lex-models.-2017-04-19.put-bot-request/checksum :portkey.aws.lex-models.-2017-04-19.put-bot-request/voiceId :portkey.aws.lex-models.-2017-04-19.put-bot-request/description]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/prompt-max-attempts (clojure.spec.alpha/and clojure.core/int? (fn* [p1__99566__99567__auto__] (clojure.core/<= 1 p1__99566__99567__auto__)) (fn* [p1__99568__99569__auto__] (clojure.core/<= p1__99568__99569__auto__ 5))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/builtin-intent-slot-list (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/builtin-intent-slot :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-request/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/create-bot-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.create-bot-version-request/name] :opt-un [:portkey.aws.lex-models.-2017-04-19.create-bot-version-request/checksum]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/numerical-version (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 64)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"[0-9]+" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.utterance-list/bot-version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.utterance-list/utterances (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/list-of-utterance))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/utterance-list (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.utterance-list/botVersion :portkey.aws.lex-models.-2017-04-19.utterance-list/utterances]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-utterances-view-response/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-utterances-view-response/utterances (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/lists-of-utterances))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-utterances-view-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-utterances-view-response/botName :portkey.aws.lex-models.-2017-04-19.get-utterances-view-response/utterances]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-response/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-type-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-response/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-response/enumeration-values (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/enumeration-values))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-response/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-response/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-response/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-response/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/create-slot-type-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.create-slot-type-version-response/name :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-response/description :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-response/enumerationValues :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-response/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-response/createdDate :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-response/version :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-response/checksum]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-intent-version-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-intent-version-request/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/numerical-version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/delete-intent-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.delete-intent-version-request/name :portkey.aws.lex-models.-2017-04-19.delete-intent-version-request/version] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-slot-types-response/slot-types (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/builtin-slot-type-metadata-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-slot-types-response/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-builtin-slot-types-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-builtin-slot-types-response/slotTypes :portkey.aws.lex-models.-2017-04-19.get-builtin-slot-types-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.statement/messages (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/message-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.statement/response-card (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/response-card))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/statement (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.statement/messages] :opt-un [:portkey.aws.lex-models.-2017-04-19.statement/responseCard]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/user-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 2 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 100))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-slot-type-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-type-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-slot-type-request/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-slot-type-request/enumeration-values (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/enumeration-values))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-slot-type-request/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/put-slot-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.put-slot-type-request/name] :opt-un [:portkey.aws.lex-models.-2017-04-19.put-slot-type-request/description :portkey.aws.lex-models.-2017-04-19.put-slot-type-request/enumerationValues :portkey.aws.lex-models.-2017-04-19.put-slot-type-request/checksum]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-request/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/create-intent-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.create-intent-version-request/name] :opt-un [:portkey.aws.lex-models.-2017-04-19.create-intent-version-request/checksum]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.resource-in-use-exception/reference-type (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/reference-type))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.resource-in-use-exception/example-reference (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/resource-reference))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/resource-in-use-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.resource-in-use-exception/referenceType :portkey.aws.lex-models.-2017-04-19.resource-in-use-exception/exampleReference]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.code-hook/uri (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/lambdaarn))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.code-hook/message-version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/message-version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/code-hook (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.code-hook/uri :portkey.aws.lex-models.-2017-04-19.code-hook/messageVersion] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/count (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/intent-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 100)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^[a-zA-Z]+((_[a-zA-Z]+)*|([a-zA-Z]+_)*|_)" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.limit-exceeded-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.limit-exceeded-exception/retryAfterSeconds :portkey.aws.lex-models.-2017-04-19.limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-type-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-slot-type-version-request/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/create-slot-type-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.create-slot-type-version-request/name] :opt-un [:portkey.aws.lex-models.-2017-04-19.create-slot-type-version-request/checksum]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/slot-utterance-list (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/utterance :max-count 10))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-types-request/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-types-request/max-results (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/max-results))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-types-request/name-contains (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-type-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-slot-types-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-slot-types-request/nextToken :portkey.aws.lex-models.-2017-04-19.get-slot-types-request/maxResults :portkey.aws.lex-models.-2017-04-19.get-slot-types-request/nameContains]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/response-card (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 50000))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-intents-request/locale (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/locale))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-intents-request/signature-contains (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-intents-request/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-intents-request/max-results (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/max-results))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-builtin-intents-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-builtin-intents-request/locale :portkey.aws.lex-models.-2017-04-19.get-builtin-intents-request/signatureContains :portkey.aws.lex-models.-2017-04-19.get-builtin-intents-request/nextToken :portkey.aws.lex-models.-2017-04-19.get-builtin-intents-request/maxResults]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-bot-alias-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/alias-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-bot-alias-request/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/delete-bot-alias-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.delete-bot-alias-request/name :portkey.aws.lex-models.-2017-04-19.delete-bot-alias-request/botName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/status (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"BUILDING" "BUILDING", :building "BUILDING", "READY" "READY", :ready "READY", "FAILED" "FAILED", :failed "FAILED", "NOT_BUILT" "NOT_BUILT", :not-built "NOT_BUILT"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/next-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/priority (clojure.spec.alpha/and clojure.core/int? (fn* [p1__99566__99567__auto__] (clojure.core/<= 0 p1__99566__99567__auto__)) (fn* [p1__99568__99569__auto__] (clojure.core/<= p1__99568__99569__auto__ 100))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/status-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"Detected" "Detected", :detected "Detected", "Missed" "Missed", :missed "Missed"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/utterance-string (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 2000))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-slot-type-version-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-type-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-slot-type-version-request/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/numerical-version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/delete-slot-type-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.delete-slot-type-version-request/name :portkey.aws.lex-models.-2017-04-19.delete-slot-type-version-request/version] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-bot-version-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-bot-version-request/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/numerical-version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/delete-bot-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.delete-bot-version-request/name :portkey.aws.lex-models.-2017-04-19.delete-bot-version-request/version] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/bot-versions (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/version :max-count 5))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/content-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"PlainText" "PlainText", :plain-text "PlainText", "SSML" "SSML", :ssml "SSML"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/sessionttl (clojure.spec.alpha/and clojure.core/int? (fn* [p1__99566__99567__auto__] (clojure.core/<= 60 p1__99566__99567__auto__)) (fn* [p1__99568__99569__auto__] (clojure.core/<= p1__99568__99569__auto__ 86400))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/bot-alias-metadata-list (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/bot-alias-metadata :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/content-string (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 1000))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.internal-failure-exception/message (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/internal-failure-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.internal-failure-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.follow-up-prompt/prompt (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/prompt))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.follow-up-prompt/rejection-statement (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/statement))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/follow-up-prompt (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.follow-up-prompt/prompt :portkey.aws.lex-models.-2017-04-19.follow-up-prompt/rejectionStatement] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-channel-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-request/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-request/bot-alias (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/alias-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-bot-channel-association-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-request/name :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-request/botName :portkey.aws.lex-models.-2017-04-19.get-bot-channel-association-request/botAlias] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/builtin-intent-signature (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.builtin-intent-slot/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/builtin-intent-slot (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.builtin-intent-slot/name]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/intents (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/idle-sessionttlin-seconds (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/sessionttl))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/clarification-prompt (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/prompt))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/locale (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/locale))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/status (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/status))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/abort-statement (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/statement))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/failure-reason (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/child-directed (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/boolean))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/voice-id (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/create-bot-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.create-bot-version-response/intents :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/createdDate :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/idleSessionTTLInSeconds :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/clarificationPrompt :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/name :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/locale :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/status :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/abortStatement :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/version :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/failureReason :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/childDirected :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/checksum :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/voiceId :portkey.aws.lex-models.-2017-04-19.create-bot-version-response/description]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intents-request/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intents-request/max-results (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/max-results))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intents-request/name-contains (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-intents-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-intents-request/nextToken :portkey.aws.lex-models.-2017-04-19.get-intents-request/maxResults :portkey.aws.lex-models.-2017-04-19.get-intents-request/nameContains]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-type-versions-response/slot-types (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-type-metadata-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-type-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-slot-type-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-slot-type-versions-response/slotTypes :portkey.aws.lex-models.-2017-04-19.get-slot-type-versions-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-versions-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/max-results))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-bot-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.get-bot-versions-request/name] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-bot-versions-request/nextToken :portkey.aws.lex-models.-2017-04-19.get-bot-versions-request/maxResults]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-versions-response/intents (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-metadata-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-intent-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-intent-versions-response/intents :portkey.aws.lex-models.-2017-04-19.get-intent-versions-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-type-versions-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-type-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-type-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-type-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/max-results))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-slot-type-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.get-slot-type-versions-request/name] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-slot-type-versions-request/nextToken :portkey.aws.lex-models.-2017-04-19.get-slot-type-versions-request/maxResults]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/intents (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/idle-sessionttlin-seconds (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/sessionttl))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/clarification-prompt (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/prompt))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/locale (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/locale))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/status (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/status))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/abort-statement (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/statement))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/failure-reason (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/child-directed (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/boolean))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/voice-id (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-response/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-bot-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-bot-response/intents :portkey.aws.lex-models.-2017-04-19.get-bot-response/createdDate :portkey.aws.lex-models.-2017-04-19.get-bot-response/idleSessionTTLInSeconds :portkey.aws.lex-models.-2017-04-19.get-bot-response/clarificationPrompt :portkey.aws.lex-models.-2017-04-19.get-bot-response/name :portkey.aws.lex-models.-2017-04-19.get-bot-response/locale :portkey.aws.lex-models.-2017-04-19.get-bot-response/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.get-bot-response/status :portkey.aws.lex-models.-2017-04-19.get-bot-response/abortStatement :portkey.aws.lex-models.-2017-04-19.get-bot-response/version :portkey.aws.lex-models.-2017-04-19.get-bot-response/failureReason :portkey.aws.lex-models.-2017-04-19.get-bot-response/childDirected :portkey.aws.lex-models.-2017-04-19.get-bot-response/checksum :portkey.aws.lex-models.-2017-04-19.get-bot-response/voiceId :portkey.aws.lex-models.-2017-04-19.get-bot-response/description]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-slot-types-request/locale (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/locale))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-slot-types-request/signature-contains (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-slot-types-request/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-slot-types-request/max-results (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/max-results))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-builtin-slot-types-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-builtin-slot-types-request/locale :portkey.aws.lex-models.-2017-04-19.get-builtin-slot-types-request/signatureContains :portkey.aws.lex-models.-2017-04-19.get-builtin-slot-types-request/nextToken :portkey.aws.lex-models.-2017-04-19.get-builtin-slot-types-request/maxResults]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/intent-list (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/intent :max-count 100))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/fulfillment-activity-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"ReturnIntent" "ReturnIntent", :return-intent "ReturnIntent", "CodeHook" "CodeHook", :code-hook "CodeHook"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/bot-channel-association-list (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/bot-channel-association :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intents-response/intents (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-metadata-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intents-response/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-intents-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-intents-response/intents :portkey.aws.lex-models.-2017-04-19.get-intents-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.conflict-exception/message (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/utterance (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 200))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/value (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 140))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/list-of-utterance (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/utterance-data :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/description (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 0 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 200))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-slot-type-response/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-type-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-slot-type-response/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-slot-type-response/enumeration-values (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/enumeration-values))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-slot-type-response/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-slot-type-response/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-slot-type-response/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-slot-type-response/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/put-slot-type-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.put-slot-type-response/name :portkey.aws.lex-models.-2017-04-19.put-slot-type-response/description :portkey.aws.lex-models.-2017-04-19.put-slot-type-response/enumerationValues :portkey.aws.lex-models.-2017-04-19.put-slot-type-response/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.put-slot-type-response/createdDate :portkey.aws.lex-models.-2017-04-19.put-slot-type-response/version :portkey.aws.lex-models.-2017-04-19.put-slot-type-response/checksum]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-associations-response/bot-channel-associations (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-channel-association-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-channel-associations-response/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-bot-channel-associations-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-bot-channel-associations-response/botChannelAssociations :portkey.aws.lex-models.-2017-04-19.get-bot-channel-associations-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.message/content-type (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/content-type))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.message/content (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/content-string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/message (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.message/contentType :portkey.aws.lex-models.-2017-04-19.message/content] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-intent-request/signature (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/builtin-intent-signature))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-builtin-intent-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.get-builtin-intent-request/signature] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/slot-type-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 100)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^[a-zA-Z]+((_[a-zA-Z]+)*|([a-zA-Z]+_)*|_)" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.not-found-exception/message (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-utterances-request/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-utterances-request/user-id (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/user-id))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/delete-utterances-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.delete-utterances-request/botName :portkey.aws.lex-models.-2017-04-19.delete-utterances-request/userId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/custom-or-builtin-slot-type-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 100)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^([a-zA-Z]|AMAZON.)+((_[a-zA-Z]+)*|([a-zA-Z]+_)*|_)" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/enumeration-values (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/enumeration-value :max-count 10000))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/bot-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 2 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 50)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^[a-zA-Z]+((_[a-zA-Z]+)*|([a-zA-Z]+_)*|_)" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.slot/priority (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/priority))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.slot/response-card (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/response-card))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.slot/slot-type (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/custom-or-builtin-slot-type-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.slot/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.slot/slot-constraint (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-constraint))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.slot/slot-type-version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.slot/sample-utterances (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-utterance-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.slot/value-elicitation-prompt (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/prompt))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.slot/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/slot (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.slot/name :portkey.aws.lex-models.-2017-04-19.slot/slotConstraint] :opt-un [:portkey.aws.lex-models.-2017-04-19.slot/priority :portkey.aws.lex-models.-2017-04-19.slot/responseCard :portkey.aws.lex-models.-2017-04-19.slot/slotType :portkey.aws.lex-models.-2017-04-19.slot/slotTypeVersion :portkey.aws.lex-models.-2017-04-19.slot/sampleUtterances :portkey.aws.lex-models.-2017-04-19.slot/valueElicitationPrompt :portkey.aws.lex-models.-2017-04-19.slot/description]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/builtin-slot-type-metadata-list (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/builtin-slot-type-metadata :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-bot-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/delete-bot-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.delete-bot-request/name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/slot-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 100)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^[a-zA-Z]+(((_|.)[a-zA-Z]+)*|([a-zA-Z]+(_|.))*|(_|.))" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-intent-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/delete-intent-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.delete-intent-request/name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/follow-up-prompt (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/follow-up-prompt))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/fulfillment-activity (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/fulfillment-activity))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/slots (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/parent-intent-signature (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/builtin-intent-signature))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/confirmation-prompt (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/prompt))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/rejection-statement (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/statement))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/dialog-code-hook (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/code-hook))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/conclusion-statement (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/statement))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/sample-utterances (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-utterance-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-response/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/put-intent-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.put-intent-response/followUpPrompt :portkey.aws.lex-models.-2017-04-19.put-intent-response/fulfillmentActivity :portkey.aws.lex-models.-2017-04-19.put-intent-response/slots :portkey.aws.lex-models.-2017-04-19.put-intent-response/parentIntentSignature :portkey.aws.lex-models.-2017-04-19.put-intent-response/confirmationPrompt :portkey.aws.lex-models.-2017-04-19.put-intent-response/createdDate :portkey.aws.lex-models.-2017-04-19.put-intent-response/name :portkey.aws.lex-models.-2017-04-19.put-intent-response/rejectionStatement :portkey.aws.lex-models.-2017-04-19.put-intent-response/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.put-intent-response/dialogCodeHook :portkey.aws.lex-models.-2017-04-19.put-intent-response/conclusionStatement :portkey.aws.lex-models.-2017-04-19.put-intent-response/sampleUtterances :portkey.aws.lex-models.-2017-04-19.put-intent-response/version :portkey.aws.lex-models.-2017-04-19.put-intent-response/checksum :portkey.aws.lex-models.-2017-04-19.put-intent-response/description]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-bot-channel-association-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-channel-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-bot-channel-association-request/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.delete-bot-channel-association-request/bot-alias (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/alias-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/delete-bot-channel-association-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.delete-bot-channel-association-request/name :portkey.aws.lex-models.-2017-04-19.delete-bot-channel-association-request/botName :portkey.aws.lex-models.-2017-04-19.delete-bot-channel-association-request/botAlias] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/builtin-slot-type-signature (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.fulfillment-activity/type (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/fulfillment-activity-type))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.fulfillment-activity/code-hook (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/code-hook))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/fulfillment-activity (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.fulfillment-activity/type] :opt-un [:portkey.aws.lex-models.-2017-04-19.fulfillment-activity/codeHook]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/message-list (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/message :max-count 5))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-versions-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/max-results))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-intent-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.get-intent-versions-request/name] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-intent-versions-request/nextToken :portkey.aws.lex-models.-2017-04-19.get-intent-versions-request/maxResults]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-request/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-intent-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.get-intent-request/name :portkey.aws.lex-models.-2017-04-19.get-intent-request/version] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/follow-up-prompt (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/follow-up-prompt))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/fulfillment-activity (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/fulfillment-activity))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/slots (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/parent-intent-signature (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/builtin-intent-signature))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/confirmation-prompt (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/prompt))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/rejection-statement (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/statement))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/dialog-code-hook (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/code-hook))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/conclusion-statement (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/statement))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/sample-utterances (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-utterance-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-intent-response/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-intent-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-intent-response/followUpPrompt :portkey.aws.lex-models.-2017-04-19.get-intent-response/fulfillmentActivity :portkey.aws.lex-models.-2017-04-19.get-intent-response/slots :portkey.aws.lex-models.-2017-04-19.get-intent-response/parentIntentSignature :portkey.aws.lex-models.-2017-04-19.get-intent-response/confirmationPrompt :portkey.aws.lex-models.-2017-04-19.get-intent-response/createdDate :portkey.aws.lex-models.-2017-04-19.get-intent-response/name :portkey.aws.lex-models.-2017-04-19.get-intent-response/rejectionStatement :portkey.aws.lex-models.-2017-04-19.get-intent-response/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.get-intent-response/dialogCodeHook :portkey.aws.lex-models.-2017-04-19.get-intent-response/conclusionStatement :portkey.aws.lex-models.-2017-04-19.get-intent-response/sampleUtterances :portkey.aws.lex-models.-2017-04-19.get-intent-response/version :portkey.aws.lex-models.-2017-04-19.get-intent-response/checksum :portkey.aws.lex-models.-2017-04-19.get-intent-response/description]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.intent-metadata/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.intent-metadata/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.intent-metadata/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.intent-metadata/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.intent-metadata/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/intent-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.intent-metadata/name :portkey.aws.lex-models.-2017-04-19.intent-metadata/description :portkey.aws.lex-models.-2017-04-19.intent-metadata/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.intent-metadata/createdDate :portkey.aws.lex-models.-2017-04-19.intent-metadata/version]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/slot-constraint (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"Required" "Required", :required "Required", "Optional" "Optional", :optional "Optional"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.slot-type-metadata/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-type-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.slot-type-metadata/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.slot-type-metadata/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.slot-type-metadata/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.slot-type-metadata/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/slot-type-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.slot-type-metadata/name :portkey.aws.lex-models.-2017-04-19.slot-type-metadata/description :portkey.aws.lex-models.-2017-04-19.slot-type-metadata/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.slot-type-metadata/createdDate :portkey.aws.lex-models.-2017-04-19.slot-type-metadata/version]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/intent-metadata-list (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/intent-metadata :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/message-version (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 5))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/slot-type-metadata-list (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/slot-type-metadata :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-request/follow-up-prompt (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/follow-up-prompt))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-request/fulfillment-activity (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/fulfillment-activity))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-request/slots (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-request/parent-intent-signature (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/builtin-intent-signature))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-request/confirmation-prompt (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/prompt))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-request/rejection-statement (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/statement))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-request/dialog-code-hook (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/code-hook))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-request/conclusion-statement (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/statement))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-request/sample-utterances (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-utterance-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-request/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.put-intent-request/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/put-intent-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.put-intent-request/name] :opt-un [:portkey.aws.lex-models.-2017-04-19.put-intent-request/followUpPrompt :portkey.aws.lex-models.-2017-04-19.put-intent-request/fulfillmentActivity :portkey.aws.lex-models.-2017-04-19.put-intent-request/slots :portkey.aws.lex-models.-2017-04-19.put-intent-request/parentIntentSignature :portkey.aws.lex-models.-2017-04-19.put-intent-request/confirmationPrompt :portkey.aws.lex-models.-2017-04-19.put-intent-request/rejectionStatement :portkey.aws.lex-models.-2017-04-19.put-intent-request/dialogCodeHook :portkey.aws.lex-models.-2017-04-19.put-intent-request/conclusionStatement :portkey.aws.lex-models.-2017-04-19.put-intent-request/sampleUtterances :portkey.aws.lex-models.-2017-04-19.put-intent-request/checksum :portkey.aws.lex-models.-2017-04-19.put-intent-request/description]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/reference-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"Intent" "Intent", :intent "Intent", "Bot" "Bot", :bot "Bot", "BotAlias" "BotAlias", :bot-alias "BotAlias", "BotChannel" "BotChannel", :bot-channel "BotChannel"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/max-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__99566__99567__auto__] (clojure.core/<= 1 p1__99566__99567__auto__)) (fn* [p1__99568__99569__auto__] (clojure.core/<= p1__99568__99569__auto__ 50))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/version (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 64)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"\$LATEST|[0-9]+" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.builtin-intent-metadata/signature (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/builtin-intent-signature))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.builtin-intent-metadata/supported-locales (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/locale-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/builtin-intent-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.builtin-intent-metadata/signature :portkey.aws.lex-models.-2017-04-19.builtin-intent-metadata/supportedLocales]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/intent-utterance-list (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/utterance :max-count 1500))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-intent-response/signature (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/builtin-intent-signature))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-intent-response/supported-locales (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/locale-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-intent-response/slots (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/builtin-intent-slot-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-builtin-intent-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-builtin-intent-response/signature :portkey.aws.lex-models.-2017-04-19.get-builtin-intent-response/supportedLocales :portkey.aws.lex-models.-2017-04-19.get-builtin-intent-response/slots]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-type-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-type-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-type-request/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-slot-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.get-slot-type-request/name :portkey.aws.lex-models.-2017-04-19.get-slot-type-request/version] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.enumeration-value/value (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/value))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/enumeration-value (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.enumeration-value/value] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/alias-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 100)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^[a-zA-Z]+((_[a-zA-Z]+)*|([a-zA-Z]+_)*|_)" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-alias-response/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/alias-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-alias-response/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-alias-response/bot-version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-alias-response/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-alias-response/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-alias-response/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-alias-response/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-bot-alias-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-bot-alias-response/name :portkey.aws.lex-models.-2017-04-19.get-bot-alias-response/description :portkey.aws.lex-models.-2017-04-19.get-bot-alias-response/botVersion :portkey.aws.lex-models.-2017-04-19.get-bot-alias-response/botName :portkey.aws.lex-models.-2017-04-19.get-bot-alias-response/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.get-bot-alias-response/createdDate :portkey.aws.lex-models.-2017-04-19.get-bot-alias-response/checksum]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-type-response/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-type-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-type-response/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-type-response/enumeration-values (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/enumeration-values))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-type-response/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-type-response/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-type-response/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-type-response/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-slot-type-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-slot-type-response/name :portkey.aws.lex-models.-2017-04-19.get-slot-type-response/description :portkey.aws.lex-models.-2017-04-19.get-slot-type-response/enumerationValues :portkey.aws.lex-models.-2017-04-19.get-slot-type-response/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.get-slot-type-response/createdDate :portkey.aws.lex-models.-2017-04-19.get-slot-type-response/version :portkey.aws.lex-models.-2017-04-19.get-slot-type-response/checksum]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 64)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"[a-zA-Z]+" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-versions-response/bots (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-metadata-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-bot-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-bot-versions-response/bots :portkey.aws.lex-models.-2017-04-19.get-bot-versions-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-request/version-or-alias (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-bot-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.get-bot-request/name :portkey.aws.lex-models.-2017-04-19.get-bot-request/versionOrAlias] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-aliases-request/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-aliases-request/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-aliases-request/max-results (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/max-results))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-aliases-request/name-contains (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/alias-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-bot-aliases-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.get-bot-aliases-request/botName] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-bot-aliases-request/nextToken :portkey.aws.lex-models.-2017-04-19.get-bot-aliases-request/maxResults :portkey.aws.lex-models.-2017-04-19.get-bot-aliases-request/nameContains]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/bot-metadata-list (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/bot-metadata :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-channel-association/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-channel-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-channel-association/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-channel-association/bot-alias (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/alias-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-channel-association/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-channel-association/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-channel-association/type (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/channel-type))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.bot-channel-association/bot-configuration (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/channel-configuration-map))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/bot-channel-association (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.bot-channel-association/name :portkey.aws.lex-models.-2017-04-19.bot-channel-association/description :portkey.aws.lex-models.-2017-04-19.bot-channel-association/botAlias :portkey.aws.lex-models.-2017-04-19.bot-channel-association/botName :portkey.aws.lex-models.-2017-04-19.bot-channel-association/createdDate :portkey.aws.lex-models.-2017-04-19.bot-channel-association/type :portkey.aws.lex-models.-2017-04-19.bot-channel-association/botConfiguration]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/bot-channel-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 100)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^[a-zA-Z]+((_[a-zA-Z]+)*|([a-zA-Z]+_)*|_)" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.builtin-slot-type-metadata/signature (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/builtin-slot-type-signature))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.builtin-slot-type-metadata/supported-locales (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/locale-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/builtin-slot-type-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.builtin-slot-type-metadata/signature :portkey.aws.lex-models.-2017-04-19.builtin-slot-type-metadata/supportedLocales]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-alias-request/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/alias-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-bot-alias-request/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-bot-alias-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.get-bot-alias-request/name :portkey.aws.lex-models.-2017-04-19.get-bot-alias-request/botName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/process-behavior (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"SAVE" "SAVE", :save "SAVE", "BUILD" "BUILD", :build "BUILD"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-intents-response/intents (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/builtin-intent-metadata-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-builtin-intents-response/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-builtin-intents-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-builtin-intents-response/intents :portkey.aws.lex-models.-2017-04-19.get-builtin-intents-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-types-response/slot-types (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-type-metadata-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-slot-types-response/next-token (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/next-token))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-slot-types-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.get-slot-types-response/slotTypes :portkey.aws.lex-models.-2017-04-19.get-slot-types-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/lists-of-utterances (clojure.spec.alpha/coll-of :portkey.aws.lex-models.-2017-04-19/utterance-list :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.intent/intent-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.intent/intent-version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/intent (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.intent/intentName :portkey.aws.lex-models.-2017-04-19.intent/intentVersion] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/follow-up-prompt (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/follow-up-prompt))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/fulfillment-activity (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/fulfillment-activity))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/slots (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/slot-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/parent-intent-signature (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/builtin-intent-signature))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/confirmation-prompt (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/prompt))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/created-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/rejection-statement (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/statement))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/last-updated-date (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/timestamp))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/dialog-code-hook (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/code-hook))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/conclusion-statement (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/statement))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/sample-utterances (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/intent-utterance-list))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/version (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/version))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/checksum (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/string))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/description (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/description))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/create-intent-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lex-models.-2017-04-19.create-intent-version-response/followUpPrompt :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/fulfillmentActivity :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/slots :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/parentIntentSignature :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/confirmationPrompt :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/createdDate :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/name :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/rejectionStatement :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/lastUpdatedDate :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/dialogCodeHook :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/conclusionStatement :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/sampleUtterances :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/version :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/checksum :portkey.aws.lex-models.-2017-04-19.create-intent-version-response/description]))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/channel-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"Facebook" "Facebook", :facebook "Facebook", "Slack" "Slack", :slack "Slack", "Twilio-Sms" "Twilio-Sms", :twilio-sms "Twilio-Sms"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-utterances-view-request/bot-name (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-name))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-utterances-view-request/bot-versions (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/bot-versions))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19.get-utterances-view-request/status-type (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/status-type))
(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/get-utterances-view-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lex-models.-2017-04-19.get-utterances-view-request/botName :portkey.aws.lex-models.-2017-04-19.get-utterances-view-request/botVersions :portkey.aws.lex-models.-2017-04-19.get-utterances-view-request/statusType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lex-models.-2017-04-19/boolean clojure.core/boolean?)

(clojure.core/defn delete-bot-channel-association [input113157] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{botName}/aliases/{aliasName}/channels/{name}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/delete-bot-channel-association-request input113157)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name", "botName" "botName", "aliasName" "botAlias"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113156] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 204 (:status response113156)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113156 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113156)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113156}))])))))))
(clojure.spec.alpha/fdef delete-bot-channel-association :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-bot-channel-association-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-bot-channel-association-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn get-builtin-slot-types [input113159] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/builtins/slottypes/"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-builtin-slot-types-request input113159)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"locale" "locale", "signatureContains" "signatureContains", "nextToken" "nextToken", "maxResults" "maxResults"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113158] (clojure.core/let [errors__109313__auto__ {"LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113158)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-builtin-slot-types-response (:body response113158))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113158 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113158)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113158}))])))))))
(clojure.spec.alpha/fdef get-builtin-slot-types :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-builtin-slot-types-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-builtin-slot-types-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-builtin-slot-types-response))

(clojure.core/defn get-bot-channel-associations [input113161] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{botName}/aliases/{aliasName}/channels/"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-bot-channel-associations-request input113161)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"botName" "botName", "aliasName" "botAlias"}) (portkey.awsgen/params-to-querystring {"nextToken" "nextToken", "maxResults" "maxResults", "nameContains" "nameContains"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113160] (clojure.core/let [errors__109313__auto__ {"LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113160)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-bot-channel-associations-response (:body response113160))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113160 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113160)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113160}))])))))))
(clojure.spec.alpha/fdef get-bot-channel-associations :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-bot-channel-associations-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-bot-channel-associations-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-bot-channel-associations-response))

(clojure.core/defn create-slot-type-version [input113163] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/slottypes/{name}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/create-slot-type-version-request input113163)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113162] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception, "PreconditionFailedException" :portkey.aws.lex-models.-2017-04-19/precondition-failed-exception}] (if (clojure.core/= 201 (:status response113162)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/create-slot-type-version-response (:body response113162))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113162 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113162)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113162}))])))))))
(clojure.spec.alpha/fdef create-slot-type-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/create-slot-type-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/create-slot-type-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/create-slot-type-version-response))

(clojure.core/defn get-slot-type [input113165] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/slottypes/{name}/versions/{version}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-slot-type-request input113165)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name", "version" "version"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113164] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113164)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-slot-type-response (:body response113164))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113164 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113164)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113164}))])))))))
(clojure.spec.alpha/fdef get-slot-type :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-slot-type-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-slot-type-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-slot-type-response))

(clojure.core/defn get-intent-versions [input113167] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/intents/{name}/versions/"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-intent-versions-request input113167)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name"}) (portkey.awsgen/params-to-querystring {"nextToken" "nextToken", "maxResults" "maxResults"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113166] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113166)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-intent-versions-response (:body response113166))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113166 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113166)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113166}))])))))))
(clojure.spec.alpha/fdef get-intent-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-intent-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-intent-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-intent-versions-response))

(clojure.core/defn get-utterances-view [input113169] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{botname}/utterances?view=aggregation"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-utterances-view-request input113169)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"botname" "botName"}) (portkey.awsgen/params-to-querystring {"bot_versions" "botVersions", "status_type" "statusType"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113168] (clojure.core/let [errors__109313__auto__ {"LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113168)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-utterances-view-response (:body response113168))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113168 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113168)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113168}))])))))))
(clojure.spec.alpha/fdef get-utterances-view :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-utterances-view-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-utterances-view-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-utterances-view-response))

(clojure.core/defn delete-intent-version [input113171] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/intents/{name}/versions/{version}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/delete-intent-version-request input113171)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name", "version" "version"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113170] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception, "ResourceInUseException" :portkey.aws.lex-models.-2017-04-19/resource-in-use-exception}] (if (clojure.core/= 204 (:status response113170)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113170 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113170)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113170}))])))))))
(clojure.spec.alpha/fdef delete-intent-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-intent-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-intent-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn get-builtin-intents [input113173] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/builtins/intents/"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-builtin-intents-request input113173)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"locale" "locale", "signatureContains" "signatureContains", "nextToken" "nextToken", "maxResults" "maxResults"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113172] (clojure.core/let [errors__109313__auto__ {"LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113172)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-builtin-intents-response (:body response113172))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113172 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113172)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113172}))])))))))
(clojure.spec.alpha/fdef get-builtin-intents :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-builtin-intents-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-builtin-intents-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-builtin-intents-response))

(clojure.core/defn get-slot-types [input113175] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/slottypes/"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-slot-types-request input113175)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"nextToken" "nextToken", "maxResults" "maxResults", "nameContains" "nameContains"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113174] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113174)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-slot-types-response (:body response113174))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113174 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113174)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113174}))])))))))
(clojure.spec.alpha/fdef get-slot-types :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-slot-types-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-slot-types-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-slot-types-response))

(clojure.core/defn get-bot-alias [input113177] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{botName}/aliases/{name}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-bot-alias-request input113177)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name", "botName" "botName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113176] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113176)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-bot-alias-response (:body response113176))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113176 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113176)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113176}))])))))))
(clojure.spec.alpha/fdef get-bot-alias :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-bot-alias-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-bot-alias-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-bot-alias-response))

(clojure.core/defn get-builtin-intent [input113179] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/builtins/intents/{signature}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-builtin-intent-request input113179)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"signature" "signature"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113178] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113178)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-builtin-intent-response (:body response113178))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113178 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113178)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113178}))])))))))
(clojure.spec.alpha/fdef get-builtin-intent :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-builtin-intent-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-builtin-intent-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-builtin-intent-response))

(clojure.core/defn delete-slot-type [input113181] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/slottypes/{name}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/delete-slot-type-request input113181)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113180] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception, "ResourceInUseException" :portkey.aws.lex-models.-2017-04-19/resource-in-use-exception}] (if (clojure.core/= 204 (:status response113180)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113180 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113180)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113180}))])))))))
(clojure.spec.alpha/fdef delete-slot-type :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-slot-type-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-slot-type-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn create-bot-version [input113183] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{name}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/create-bot-version-request input113183)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113182] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception, "PreconditionFailedException" :portkey.aws.lex-models.-2017-04-19/precondition-failed-exception}] (if (clojure.core/= 201 (:status response113182)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/create-bot-version-response (:body response113182))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113182 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113182)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113182}))])))))))
(clojure.spec.alpha/fdef create-bot-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/create-bot-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/create-bot-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/create-bot-version-response))

(clojure.core/defn put-intent [input113185] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/intents/{name}/versions/$LATEST"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/put-intent-request input113185)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113184] (clojure.core/let [errors__109313__auto__ {"ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception, "PreconditionFailedException" :portkey.aws.lex-models.-2017-04-19/precondition-failed-exception}] (if (clojure.core/= 200 (:status response113184)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/put-intent-response (:body response113184))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113184 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113184)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113184}))])))))))
(clojure.spec.alpha/fdef put-intent :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/put-intent-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/put-intent-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/put-intent-response))

(clojure.core/defn delete-intent [input113187] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/intents/{name}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/delete-intent-request input113187)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113186] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception, "ResourceInUseException" :portkey.aws.lex-models.-2017-04-19/resource-in-use-exception}] (if (clojure.core/= 204 (:status response113186)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113186 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113186)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113186}))])))))))
(clojure.spec.alpha/fdef delete-intent :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-intent-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-intent-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn get-intents [input113189] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/intents/"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-intents-request input113189)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"nextToken" "nextToken", "maxResults" "maxResults", "nameContains" "nameContains"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113188] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113188)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-intents-response (:body response113188))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113188 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113188)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113188}))])))))))
(clojure.spec.alpha/fdef get-intents :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-intents-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-intents-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-intents-response))

(clojure.core/defn delete-utterances [input113191] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{botName}/utterances/{userId}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/delete-utterances-request input113191)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"botName" "botName", "userId" "userId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113190] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 204 (:status response113190)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113190 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113190)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113190}))])))))))
(clojure.spec.alpha/fdef delete-utterances :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-utterances-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-utterances-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn get-intent [input113193] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/intents/{name}/versions/{version}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-intent-request input113193)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name", "version" "version"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113192] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113192)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-intent-response (:body response113192))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113192 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113192)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113192}))])))))))
(clojure.spec.alpha/fdef get-intent :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-intent-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-intent-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-intent-response))

(clojure.core/defn create-intent-version [input113195] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/intents/{name}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/create-intent-version-request input113195)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113194] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception, "PreconditionFailedException" :portkey.aws.lex-models.-2017-04-19/precondition-failed-exception}] (if (clojure.core/= 201 (:status response113194)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/create-intent-version-response (:body response113194))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113194 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113194)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113194}))])))))))
(clojure.spec.alpha/fdef create-intent-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/create-intent-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/create-intent-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/create-intent-version-response))

(clojure.core/defn get-bot-channel-association [input113197] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{botName}/aliases/{aliasName}/channels/{name}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-bot-channel-association-request input113197)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name", "botName" "botName", "aliasName" "botAlias"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113196] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113196)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-bot-channel-association-response (:body response113196))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113196 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113196)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113196}))])))))))
(clojure.spec.alpha/fdef get-bot-channel-association :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-bot-channel-association-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-bot-channel-association-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-bot-channel-association-response))

(clojure.core/defn put-slot-type [input113199] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/slottypes/{name}/versions/$LATEST"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/put-slot-type-request input113199)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113198] (clojure.core/let [errors__109313__auto__ {"ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception, "PreconditionFailedException" :portkey.aws.lex-models.-2017-04-19/precondition-failed-exception}] (if (clojure.core/= 200 (:status response113198)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/put-slot-type-response (:body response113198))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113198 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113198)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113198}))])))))))
(clojure.spec.alpha/fdef put-slot-type :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/put-slot-type-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/put-slot-type-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/put-slot-type-response))

(clojure.core/defn get-slot-type-versions [input113201] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/slottypes/{name}/versions/"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-slot-type-versions-request input113201)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name"}) (portkey.awsgen/params-to-querystring {"nextToken" "nextToken", "maxResults" "maxResults"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113200] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113200)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-slot-type-versions-response (:body response113200))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113200 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113200)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113200}))])))))))
(clojure.spec.alpha/fdef get-slot-type-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-slot-type-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-slot-type-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-slot-type-versions-response))

(clojure.core/defn delete-bot-version [input113203] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{name}/versions/{version}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/delete-bot-version-request input113203)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name", "version" "version"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113202] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception, "ResourceInUseException" :portkey.aws.lex-models.-2017-04-19/resource-in-use-exception}] (if (clojure.core/= 204 (:status response113202)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113202 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113202)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113202}))])))))))
(clojure.spec.alpha/fdef delete-bot-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-bot-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-bot-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn get-bot-aliases [input113205] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{botName}/aliases/"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-bot-aliases-request input113205)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"botName" "botName"}) (portkey.awsgen/params-to-querystring {"nextToken" "nextToken", "maxResults" "maxResults", "nameContains" "nameContains"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113204] (clojure.core/let [errors__109313__auto__ {"LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113204)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-bot-aliases-response (:body response113204))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113204 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113204)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113204}))])))))))
(clojure.spec.alpha/fdef get-bot-aliases :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-bot-aliases-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-bot-aliases-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-bot-aliases-response))

(clojure.core/defn get-bot-versions [input113207] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{name}/versions/"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-bot-versions-request input113207)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name"}) (portkey.awsgen/params-to-querystring {"nextToken" "nextToken", "maxResults" "maxResults"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113206] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113206)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-bot-versions-response (:body response113206))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113206 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113206)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113206}))])))))))
(clojure.spec.alpha/fdef get-bot-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-bot-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-bot-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-bot-versions-response))

(clojure.core/defn put-bot-alias [input113209] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{botName}/aliases/{name}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/put-bot-alias-request input113209)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name", "botName" "botName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113208] (clojure.core/let [errors__109313__auto__ {"ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception, "PreconditionFailedException" :portkey.aws.lex-models.-2017-04-19/precondition-failed-exception}] (if (clojure.core/= 200 (:status response113208)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/put-bot-alias-response (:body response113208))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113208 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113208)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113208}))])))))))
(clojure.spec.alpha/fdef put-bot-alias :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/put-bot-alias-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/put-bot-alias-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/put-bot-alias-response))

(clojure.core/defn get-bots [input113211] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-bots-request input113211)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"nextToken" "nextToken", "maxResults" "maxResults", "nameContains" "nameContains"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113210] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113210)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-bots-response (:body response113210))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113210 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113210)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113210}))])))))))
(clojure.spec.alpha/fdef get-bots :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-bots-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-bots-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-bots-response))

(clojure.core/defn get-bot [input113213] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{name}/versions/{versionoralias}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-bot-request input113213)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name", "versionoralias" "versionOrAlias"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113212] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception}] (if (clojure.core/= 200 (:status response113212)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/get-bot-response (:body response113212))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113212 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113212)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113212}))])))))))
(clojure.spec.alpha/fdef get-bot :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-bot-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/get-bot-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/get-bot-response))

(clojure.core/defn delete-slot-type-version [input113215] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/slottypes/{name}/version/{version}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/delete-slot-type-version-request input113215)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name", "version" "version"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113214] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception, "ResourceInUseException" :portkey.aws.lex-models.-2017-04-19/resource-in-use-exception}] (if (clojure.core/= 204 (:status response113214)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113214 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113214)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113214}))])))))))
(clojure.spec.alpha/fdef delete-slot-type-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-slot-type-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-slot-type-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn delete-bot [input113217] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{name}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/delete-bot-request input113217)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113216] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception, "ResourceInUseException" :portkey.aws.lex-models.-2017-04-19/resource-in-use-exception}] (if (clojure.core/= 204 (:status response113216)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113216 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113216)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113216}))])))))))
(clojure.spec.alpha/fdef delete-bot :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-bot-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-bot-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn put-bot [input113219] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{name}/versions/$LATEST"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/put-bot-request input113219)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113218] (clojure.core/let [errors__109313__auto__ {"ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception, "PreconditionFailedException" :portkey.aws.lex-models.-2017-04-19/precondition-failed-exception}] (if (clojure.core/= 200 (:status response113218)) [:result (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/put-bot-response (:body response113218))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113218 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113218)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113218}))])))))))
(clojure.spec.alpha/fdef put-bot :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/put-bot-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/put-bot-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.lex-models.-2017-04-19/put-bot-response))

(clojure.core/defn delete-bot-alias [input113221] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.lex-models.-2017-04-19/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/bots/{botName}/aliases/{name}"), :body (clojure.spec.alpha/unform :portkey.aws.lex-models.-2017-04-19/delete-bot-alias-request input113221)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"name" "name", "botName" "botName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113220] (clojure.core/let [errors__109313__auto__ {"NotFoundException" :portkey.aws.lex-models.-2017-04-19/not-found-exception, "ConflictException" :portkey.aws.lex-models.-2017-04-19/conflict-exception, "LimitExceededException" :portkey.aws.lex-models.-2017-04-19/limit-exceeded-exception, "InternalFailureException" :portkey.aws.lex-models.-2017-04-19/internal-failure-exception, "BadRequestException" :portkey.aws.lex-models.-2017-04-19/bad-request-exception, "ResourceInUseException" :portkey.aws.lex-models.-2017-04-19/resource-in-use-exception}] (if (clojure.core/= 204 (:status response113220)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113220 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113220)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113220}))])))))))
(clojure.spec.alpha/fdef delete-bot-alias :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-bot-alias-request) :async (clojure.spec.alpha/tuple :portkey.aws.lex-models.-2017-04-19/delete-bot-alias-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))
