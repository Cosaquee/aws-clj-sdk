(ns portkey.aws.clouddirectory.-2016-05-10 (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-rule-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-rule-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/IndexReference :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 64)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-directory-request/Name :portkey.aws.clouddirectory.-2016-05-10.create-directory-request/SchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-operation-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/Index :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/Type :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-parent-paths (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-incoming-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/get-object-information (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-policy-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-outgoing-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-attached-indices (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/lookup-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-successful-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectPolicies :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectParentPaths :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListIncomingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/GetObjectInformation :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListPolicyAttachments :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListOutgoingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListIndex :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectChildren :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListAttachedIndices :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/LookupPolicy]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/ranges-on-indexed-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-index/IndexReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-index/RangesOnIndexedValues :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/MaxResults :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-children-response/children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/link-name-to-object-identifier-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-children-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-children-response/Children :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.policy-attachment/policy-id (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-attachment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.policy-attachment/PolicyId :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier :portkey.aws.clouddirectory.-2016-05-10/PolicyType]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-not-detached-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-not-detached-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-not-detached-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/Arn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.schema-facet/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-facet (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.schema-facet/SchemaArn :portkey.aws.clouddirectory.-2016-05-10/FacetName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-index-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/SourceObjectReference :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/TargetObjectReference :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/TypedLinkFacet :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/Attributes] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/facet-filter (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/MaxResults :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/FacetFilter]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/attribute-definition (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-definition))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/attribute-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/required-behavior (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/required-attribute-behavior))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute/AttributeDefinition :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/AttributeReference :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/RequiredBehavior]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-update/object-attribute-key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-attribute-update/ObjectAttributeKey :portkey.aws.clouddirectory.-2016-05-10/ObjectAttributeAction]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-facet-update-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-facet-update-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-facet-update-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/string-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/string-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/binary-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/binary-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/boolean-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/boolean-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/number-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/datetime-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/datetime-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/StringValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/BinaryValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/BooleanValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/NumberValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/DatetimeValue]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/IndexReference :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/default-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/is-immutable (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/rules (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-definition (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/Type] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/DefaultValue :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/IsImmutable :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/Rules]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.validation-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/validation-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.validation-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-index-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-object-information-response/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-object-information-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.get-object-information-response/SchemaFacets :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-response/parents (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-to-link-name-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-parents-response/Parents :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/facet-attribute :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-directory-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/datetime-attribute-value clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-response/tags (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-response/Tags :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.get-facet-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies-response/attached-policy-ids (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies-response/AttachedPolicyIds :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-range/range (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value-range))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/AttributeKey :portkey.aws.clouddirectory.-2016-05-10.object-attribute-range/Range]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/PolicyReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-parent-paths (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-incoming-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/get-object-information (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-policy-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-outgoing-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-attached-indices (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/lookup-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectPolicies :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectParentPaths :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListIncomingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/GetObjectInformation :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListPolicyAttachments :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListOutgoingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListIndex :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectChildren :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListAttachedIndices :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/LookupPolicy]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/number-attribute-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/object-attribute-action-type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/object-attribute-update-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-action (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/ObjectAttributeActionType :portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/ObjectAttributeUpdateValue]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-not-enabled-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-not-enabled-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-children-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-response/facet-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-response/FacetNames :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 64)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/required-attribute-behavior (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"REQUIRED_ALWAYS" "REQUIRED_ALWAYS", :required-always "REQUIRED_ALWAYS", "NOT_REQUIRED" "NOT_REQUIRED", :not-required "NOT_REQUIRED"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/start-mode (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/range-mode))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/start-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/end-mode (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/range-mode))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/end-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value-range (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/StartMode :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/EndMode] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/StartValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/EndValue]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.unsupported-index-type-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/unsupported-index-type-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.unsupported-index-type-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-add-facet-to-object/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10.batch-add-facet-to-object/ObjectAttributeList :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/Facet]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/facet-filter (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/FacetFilter]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tags-number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/ResourceArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.publish-schema-response/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/publish-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.publish-schema-response/PublishedSchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/DirectoryArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-update-object-attributes/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference :portkey.aws.clouddirectory.-2016-05-10.batch-update-object-attributes/AttributeUpdates] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-directory-response/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-schema-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-schema-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.update-schema-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-schema-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/Type :portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-response/typed-link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-response/TypedLinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/SourceObjectReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/TargetObjectReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/TypedLinkFacet :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/Attributes] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/ordered-indexed-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/is-unique (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.create-index-request/OrderedIndexedAttributeList :portkey.aws.clouddirectory.-2016-05-10.create-index-request/IsUnique] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-index-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-request/operations (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.batch-read-request/Operations] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.enable-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/enable-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.enable-directory-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PathToObjectIdentifiersList :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference :portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/AttributeUpdates] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.attach-to-index-response/AttachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-schema-doc-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-schema-doc-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-schema-doc-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-action-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"CREATE_OR_UPDATE" "CREATE_OR_UPDATE", :create-or-update "CREATE_OR_UPDATE", "DELETE" "DELETE", :delete "DELETE"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:binary "BINARY", :number "NUMBER", "NUMBER" "NUMBER", :string "STRING", "STRING" "STRING", :datetime "DATETIME", "DATETIME" "DATETIME", :boolean "BOOLEAN", "BOOLEAN" "BOOLEAN", "BINARY" "BINARY"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/boolean-attribute-value clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.link-name-already-in-use-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.link-name-already-in-use-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/policy-attachment :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.limit-exceeded-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-in-use-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-in-use-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-in-use-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PathToObjectIdentifiersList :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-policy/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-policy/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-json-document (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:object-already-detached-exception "ObjectAlreadyDetachedException", :not-policy-exception "NotPolicyException", "ObjectNotDetachedException" "ObjectNotDetachedException", "ValidationException" "ValidationException", :internal-service-exception "InternalServiceException", :not-index-exception "NotIndexException", "DirectoryNotEnabledException" "DirectoryNotEnabledException", "UnsupportedIndexTypeException" "UnsupportedIndexTypeException", :resource-not-found-exception "ResourceNotFoundException", :limit-exceeded-exception "LimitExceededException", "LinkNameAlreadyInUseException" "LinkNameAlreadyInUseException", "LimitExceededException" "LimitExceededException", :object-not-detached-exception "ObjectNotDetachedException", "InvalidArnException" "InvalidArnException", "NotPolicyException" "NotPolicyException", "ResourceNotFoundException" "ResourceNotFoundException", "FacetValidationException" "FacetValidationException", "AccessDeniedException" "AccessDeniedException", :validation-exception "ValidationException", "NotIndexException" "NotIndexException", :indexed-attribute-missing-exception "IndexedAttributeMissingException", :facet-validation-exception "FacetValidationException", "IndexedAttributeMissingException" "IndexedAttributeMissingException", :directory-not-enabled-exception "DirectoryNotEnabledException", :access-denied-exception "AccessDeniedException", "InvalidAttachmentException" "InvalidAttachmentException", "ObjectAlreadyDetachedException" "ObjectAlreadyDetachedException", :still-contains-links-exception "StillContainsLinksException", :link-name-already-in-use-exception "LinkNameAlreadyInUseException", :unsupported-index-type-exception "UnsupportedIndexTypeException", "StillContainsLinksException" "StillContainsLinksException", "InternalServiceException" "InternalServiceException", :invalid-arn-exception "InvalidArnException", :invalid-attachment-exception "InvalidAttachmentException"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PolicyToPathList :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-tagging-request-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-tagging-request-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/selector-object-reference (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.detach-from-index-response/DetachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/rule-key :portkey.aws.clouddirectory.-2016-05-10/rule))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/create-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/create-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-from-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-to-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/add-facet-to-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/update-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/delete-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/remove-facet-from-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/CreateIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/CreateObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachFromIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachToIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AddFacetToObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/UpdateObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DeleteObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/RemoveFacetFromObject]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/arns (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/arn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index-response/AttachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/ObjectAttributeList]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-response/responses (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-response/Responses]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-not-disabled-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-not-disabled-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-not-disabled-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.remove-facet-from-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.remove-facet-from-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-parent-paths/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-parent-paths/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.detach-object-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-response/SchemaArns :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/next-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-resource-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-range/range (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value-range))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-range/Range] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/AttributeName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-next-token-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-next-token-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.update-schema-response/SchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-deleted-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-deleted-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory/state (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-state))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory/creation-date-time (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/date))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory/Name :portkey.aws.clouddirectory.-2016-05-10/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.directory/State :portkey.aws.clouddirectory.-2016-05-10.directory/CreationDateTime]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/identity-attribute-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/TypedLinkFacet :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/SourceObjectReference :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/TargetObjectReference :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/IdentityAttributeValues] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/SchemaArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/state (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-state))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-directories-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/state]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.policy-to-path/path (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/path-string))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.policy-to-path/policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/policy-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-to-path (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.policy-to-path/Path :portkey.aws.clouddirectory.-2016-05-10.policy-to-path/Policies]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-object-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.detach-object-response/DetachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/Name :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/Attributes :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/IdentityAttributeOrder] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-arn-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-arn-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-not-found-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.not-policy-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.not-policy-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/tags (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/ResourceArn :portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/Tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/Name :portkey.aws.clouddirectory.-2016-05-10/ObjectType] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-facet-request/Attributes]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.attach-object-response/AttachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-object-response/attachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/range-mode (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:exclusive "EXCLUSIVE", "LAST" "LAST", :inclusive "INCLUSIVE", :last-before-missing-values "LAST_BEFORE_MISSING_VALUES", "EXCLUSIVE" "EXCLUSIVE", :first "FIRST", "INCLUSIVE" "INCLUSIVE", :last "LAST", "FIRST" "FIRST", "LAST_BEFORE_MISSING_VALUES" "LAST_BEFORE_MISSING_VALUES"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/tag :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.cannot-list-parent-of-root-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/cannot-list-parent-of-root-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.cannot-list-parent-of-root-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-response/facet-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-names-response/FacetNames :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children-response/children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/link-name-to-object-identifier-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children-response/Children :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-key-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/tag-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-response/attached-policy-ids (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-policies-response/AttachedPolicyIds :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/binary-attribute-value (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.awsgen/base64-encode portkey.awsgen/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/TargetReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments-response/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments-response/ObjectIdentifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/path-to-object-identifiers-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/path-to-object-identifiers :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/Name :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/AttributeUpdates :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/IdentityAttributeOrder] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-schema-response/SchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-operation-index (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/applied-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/apply-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/AppliedSchemaArn :portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/DirectoryArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.resource-not-found-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-request/SchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/ranges-on-indexed-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.list-index-request/IndexReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-index-request/RangesOnIndexedValues :portkey.aws.clouddirectory.-2016-05-10.list-index-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.schema-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.schema-already-exists-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-validation-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-validation-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.schema-already-published-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-already-published-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.schema-already-published-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-name-and-value/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/AttributeName :portkey.aws.clouddirectory.-2016-05-10.attribute-name-and-value/Value] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/PolicyReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet/Name :portkey.aws.clouddirectory.-2016-05-10/ObjectType]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-response/link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-response/LinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/exception-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-reference/selector (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/selector-object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-reference (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-reference/Selector]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.update-facet-request/AttributeUpdates :portkey.aws.clouddirectory.-2016-05-10/ObjectType]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attribute-key/SchemaArn :portkey.aws.clouddirectory.-2016-05-10/FacetName :portkey.aws.clouddirectory.-2016-05-10.attribute-key/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/bool clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/IndexReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-reference-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/create-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/create-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-from-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-to-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/add-facet-to-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/update-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/delete-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/remove-facet-from-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/CreateIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/CreateObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachFromIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachToIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AddFacetToObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/UpdateObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DeleteObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/RemoveFacetFromObject]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/document (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-json-document))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/Document] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.access-denied-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.access-denied-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-identifier-to-link-name-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/object-identifier :portkey.aws.clouddirectory.-2016-05-10/link-name))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/development-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/publish-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/DevelopmentSchemaArn :portkey.aws.clouddirectory.-2016-05-10/Version] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/Name]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/IndexReference :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index-response/DetachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/attribute (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/action (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/Attribute :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/Action] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.delete-schema-response/SchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/Facet] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links-response/link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links-response/LinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/attribute (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/action (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/Attribute :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/Action]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.index-attachment/indexed-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/index-attachment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.index-attachment/IndexedAttributes :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.not-index-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/not-index-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.not-index-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/link-name-to-object-identifier-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/link-name :portkey.aws.clouddirectory.-2016-05-10/object-identifier))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-schema-and-facet-name/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-schema-and-facet-name/SchemaArn :portkey.aws.clouddirectory.-2016-05-10/TypedLinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-response/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-response/ObjectIdentifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/path-string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-request/operations (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.batch-write-request/Operations] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.rule/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.rule/parameters (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.rule/Type :portkey.aws.clouddirectory.-2016-05-10.rule/Parameters]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/child-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/ParentReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/ChildReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-to-path-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/policy-to-path :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/path (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/path-string))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/path-to-object-identifiers (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/Path :portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/ObjectIdentifiers]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-lookup-policy/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-lookup-policy/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-schema-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-schema-request/SchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/apply-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/PublishedSchemaArn :portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-object-information-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-object-information-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-object-information-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.not-node-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/not-node-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.not-node-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-response/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-response/IdentityAttributeOrder]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/ordered-indexed-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/is-unique (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-create-index/OrderedIndexedAttributeList :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/IsUnique] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-create-index/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName :portkey.aws.clouddirectory.-2016-05-10/BatchReferenceName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-identifier (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/directory :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:cannot-list-parent-of-root-exception "CannotListParentOfRootException", :not-policy-exception "NotPolicyException", "ValidationException" "ValidationException", :internal-service-exception "InternalServiceException", :not-index-exception "NotIndexException", "DirectoryNotEnabledException" "DirectoryNotEnabledException", :resource-not-found-exception "ResourceNotFoundException", :limit-exceeded-exception "LimitExceededException", "LimitExceededException" "LimitExceededException", "InvalidNextTokenException" "InvalidNextTokenException", "InvalidArnException" "InvalidArnException", "NotPolicyException" "NotPolicyException", "CannotListParentOfRootException" "CannotListParentOfRootException", "ResourceNotFoundException" "ResourceNotFoundException", "FacetValidationException" "FacetValidationException", "AccessDeniedException" "AccessDeniedException", :validation-exception "ValidationException", "NotIndexException" "NotIndexException", :facet-validation-exception "FacetValidationException", "NotNodeException" "NotNodeException", :invalid-next-token-exception "InvalidNextTokenException", :directory-not-enabled-exception "DirectoryNotEnabledException", :access-denied-exception "AccessDeniedException", :not-node-exception "NotNodeException", "InternalServiceException" "InternalServiceException", :invalid-arn-exception "InvalidArnException"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/link-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 64)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"[^\/\[\]\(\):\{\}#@!?\s\\;]+" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/number-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__30878__30879__auto__] (clojure.core/<= 1 p1__30878__30879__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-directories-response/directories (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-directories-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-directories-response/Directories] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.indexed-attribute-missing-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/indexed-attribute-missing-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.indexed-attribute-missing-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tags-number-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__30878__30879__auto__] (clojure.core/<= 50 p1__30878__30879__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-policy/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-policy/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-state (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"ENABLED" "ENABLED", :enabled "ENABLED", "DISABLED" "DISABLED", :disabled "DISABLED", "DELETED" "DELETED", :deleted "DELETED"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 64)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"NODE" "NODE", :node "NODE", "LEAF_NODE" "LEAF_NODE", :leaf-node "LEAF_NODE", "POLICY" "POLICY", :policy "POLICY", "INDEX" "INDEX", :index "INDEX"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/object-identifier :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.retryable-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.retryable-conflict-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/SchemaArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/consistency-level (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"SERIALIZABLE" "SERIALIZABLE", :serializable "SERIALIZABLE", "EVENTUAL" "EVENTUAL", :eventual "EVENTUAL"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 64)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag/key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.tag/Key :portkey.aws.clouddirectory.-2016-05-10.tag/Value]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.create-object-request/SchemaFacets] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-object-request/ObjectAttributeList :portkey.aws.clouddirectory.-2016-05-10.create-object-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/version (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 10)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/schema-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-create-object/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/ObjectAttributeList :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName :portkey.aws.clouddirectory.-2016-05-10/BatchReferenceName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-typed-link-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-typed-link-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-typed-link-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-already-exists-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.disable-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/disable-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.disable-directory-response/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-attachment-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-attachment-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-already-detached-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-already-detached-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-already-detached-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.disable-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/disable-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.disable-directory-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-response/responses (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-response/Responses]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-object/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName :portkey.aws.clouddirectory.-2016-05-10/BatchReferenceName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/successful-response (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-successful-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/exception-response (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/SuccessfulResponse :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/ExceptionResponse]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 32)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/default-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/is-immutable (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/rules (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/required-behavior (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/required-attribute-behavior))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/Name :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/Type :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/RequiredBehavior] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/DefaultValue :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/IsImmutable :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/Rules]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/string-attribute-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-key :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-value))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links-response/typed-link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links-response/TypedLinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-object-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-object-response/detachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/schema-facet :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/child-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/ChildReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/Key :portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/Value] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-response/SchemaArns :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/TargetReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.still-contains-links-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/still-contains-links-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.still-contains-links-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-already-exists-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/document (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-json-document))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/Name :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/Document]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.internal-service-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.internal-service-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-get-object-information-response/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-get-object-information-response/SchemaFacets :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/untag-resource-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/DirectoryArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/target-facet-name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/target-attribute-name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-reference (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/TargetFacetName :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/TargetAttributeName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/tag-keys (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/untag-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/ResourceArn :portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/TagKeys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/index-attachment :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PolicyToPathList :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-response/SchemaArns :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.enable-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/enable-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.enable-directory-response/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/facet-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/applied-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/Name :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/AppliedSchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/Directory] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"BINARY_LENGTH" "BINARY_LENGTH", :binary-length "BINARY_LENGTH", "NUMBER_COMPARISON" "NUMBER_COMPARISON", :number-comparison "NUMBER_COMPARISON", "STRING_FROM_SET" "STRING_FROM_SET", :string-from-set "STRING_FROM_SET", "STRING_LENGTH" "STRING_LENGTH", :string-length "STRING_LENGTH"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.core/defn tag-resource ([input__33752__auto__] (tag-resource input__33752__auto__ portkey.aws/*http-client*)) ([input34930 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/tags/add", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/TagResourceRequest input34930)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/tags/add", :body body__33756__auto__} (clojure.core/fn [response34929] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception}] (if (clojure.core/= 200 (:status response34929)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/tag-resource-response (:body response34929)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34929 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34929)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34929}))))))))))

(clojure.core/defn list-object-policies ([input__33752__auto__] (list-object-policies input__33752__auto__ portkey.aws/*http-client*)) ([input34932 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/policy", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListObjectPoliciesRequest input34932)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]] ["ConsistencyLevel" ["x-amz-consistency-level" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/policy", :body body__33756__auto__} (clojure.core/fn [response34931] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34931)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-response (:body response34931)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34931 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34931)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34931}))))))))))

(clojure.core/defn create-index ([input__33752__auto__] (create-index input__33752__auto__ portkey.aws/*http-client*)) ([input34934 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/CreateIndexRequest input34934)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index", :body body__33756__auto__} (clojure.core/fn [response34933] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "UnsupportedIndexTypeException" :portkey.aws.clouddirectory.-2016-05-10/unsupported-index-type-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34933)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-index-response (:body response34933)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34933 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34933)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34933}))))))))))

(clojure.core/defn list-object-parent-paths ([input__33752__auto__] (list-object-parent-paths input__33752__auto__ portkey.aws/*http-client*)) ([input34936 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/parentpaths", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListObjectParentPathsRequest input34936)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/parentpaths", :body body__33756__auto__} (clojure.core/fn [response34935] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34935)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-response (:body response34935)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34935 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34935)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34935}))))))))))

(clojure.core/defn put-schema-from-json ([input__33752__auto__] (put-schema-from-json input__33752__auto__ portkey.aws/*http-client*)) ([input34938 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/json", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/PutSchemaFromJsonRequest input34938)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/json", :body body__33756__auto__} (clojure.core/fn [response34937] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "InvalidSchemaDocException" :portkey.aws.clouddirectory.-2016-05-10/invalid-schema-doc-exception, "InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception}] (if (clojure.core/= 200 (:status response34937)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-response (:body response34937)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34937 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34937)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34937}))))))))))

(clojure.core/defn create-object ([input__33752__auto__] (create-object input__33752__auto__ portkey.aws/*http-client*)) ([input34940 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/CreateObjectRequest input34940)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object", :body body__33756__auto__} (clojure.core/fn [response34939] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "UnsupportedIndexTypeException" :portkey.aws.clouddirectory.-2016-05-10/unsupported-index-type-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34939)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-object-response (:body response34939)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34939 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34939)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34939}))))))))))

(clojure.core/defn detach-policy ([input__33752__auto__] (detach-policy input__33752__auto__ portkey.aws/*http-client*)) ([input34942 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/detach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DetachPolicyRequest input34942)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/detach", :body body__33756__auto__} (clojure.core/fn [response34941] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34941)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/detach-policy-response (:body response34941)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34941 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34941)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34941}))))))))))

(clojure.core/defn delete-directory ([input__33752__auto__] (delete-directory input__33752__auto__ portkey.aws/*http-client*)) ([input34944 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DeleteDirectoryRequest input34944)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory", :body body__33756__auto__} (clojure.core/fn [response34943] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "DirectoryNotDisabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-disabled-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34943)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-directory-response (:body response34943)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34943 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34943)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34943}))))))))))

(clojure.core/defn batch-write ([input__33752__auto__] (batch-write input__33752__auto__ portkey.aws/*http-client*)) ([input34946 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/batchwrite", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/BatchWriteRequest input34946)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/batchwrite", :body body__33756__auto__} (clojure.core/fn [response34945] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "BatchWriteException" :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception}] (if (clojure.core/= 200 (:status response34945)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/batch-write-response (:body response34945)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34945 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34945)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34945}))))))))))

(clojure.core/defn list-typed-link-facet-names ([input__33752__auto__] (list-typed-link-facet-names input__33752__auto__ portkey.aws/*http-client*)) ([input34948 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/list", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListTypedLinkFacetNamesRequest input34948)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/list", :body body__33756__auto__} (clojure.core/fn [response34947] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response34947)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-response (:body response34947)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34947 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34947)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34947}))))))))))

(clojure.core/defn batch-read ([input__33752__auto__] (batch-read input__33752__auto__ portkey.aws/*http-client*)) ([input34950 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/batchread", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/BatchReadRequest input34950)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]] ["ConsistencyLevel" ["x-amz-consistency-level" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/batchread", :body body__33756__auto__} (clojure.core/fn [response34949] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception}] (if (clojure.core/= 200 (:status response34949)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/batch-read-response (:body response34949)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34949 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34949)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34949}))))))))))

(clojure.core/defn list-incoming-typed-links ([input__33752__auto__] (list-incoming-typed-links input__33752__auto__ portkey.aws/*http-client*)) ([input34952 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/incoming", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListIncomingTypedLinksRequest input34952)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/incoming", :body body__33756__auto__} (clojure.core/fn [response34951] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34951)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-response (:body response34951)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34951 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34951)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34951}))))))))))

(clojure.core/defn list-development-schema-arns ([input__33752__auto__] (list-development-schema-arns input__33752__auto__ portkey.aws/*http-client*)) ([input34954 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/development", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListDevelopmentSchemaArnsRequest input34954)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/development", :body body__33756__auto__} (clojure.core/fn [response34953] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response34953)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-response (:body response34953)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34953 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34953)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34953}))))))))))

(clojure.core/defn delete-schema ([input__33752__auto__] (delete-schema input__33752__auto__ portkey.aws/*http-client*)) ([input34956 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DeleteSchemaRequest input34956)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema", :body body__33756__auto__} (clojure.core/fn [response34955] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "StillContainsLinksException" :portkey.aws.clouddirectory.-2016-05-10/still-contains-links-exception}] (if (clojure.core/= 200 (:status response34955)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-schema-response (:body response34955)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34955 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34955)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34955}))))))))))

(clojure.core/defn delete-typed-link-facet ([input__33752__auto__] (delete-typed-link-facet input__33752__auto__ portkey.aws/*http-client*)) ([input34958 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/delete", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DeleteTypedLinkFacetRequest input34958)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/delete", :body body__33756__auto__} (clojure.core/fn [response34957] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception}] (if (clojure.core/= 200 (:status response34957)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-response (:body response34957)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34957 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34957)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34957}))))))))))

(clojure.core/defn publish-schema ([input__33752__auto__] (publish-schema input__33752__auto__ portkey.aws/*http-client*)) ([input34960 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/publish", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/PublishSchemaRequest input34960)} (portkey.awsgen/params-to-header ["DevelopmentSchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/publish", :body body__33756__auto__} (clojure.core/fn [response34959] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "SchemaAlreadyPublishedException" :portkey.aws.clouddirectory.-2016-05-10/schema-already-published-exception}] (if (clojure.core/= 200 (:status response34959)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/publish-schema-response (:body response34959)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34959 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34959)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34959}))))))))))

(clojure.core/defn disable-directory ([input__33752__auto__] (disable-directory input__33752__auto__ portkey.aws/*http-client*)) ([input34962 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/disable", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DisableDirectoryRequest input34962)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/disable", :body body__33756__auto__} (clojure.core/fn [response34961] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception}] (if (clojure.core/= 200 (:status response34961)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/disable-directory-response (:body response34961)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34961 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34961)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34961}))))))))))

(clojure.core/defn create-typed-link-facet ([input__33752__auto__] (create-typed-link-facet input__33752__auto__ portkey.aws/*http-client*)) ([input34964 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/create", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/CreateTypedLinkFacetRequest input34964)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/create", :body body__33756__auto__} (clojure.core/fn [response34963] (clojure.core/let [errors__33757__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "FacetAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/facet-already-exists-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34963)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-response (:body response34963)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34963 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34963)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34963}))))))))))

(clojure.core/defn create-facet ([input__33752__auto__] (create-facet input__33752__auto__ portkey.aws/*http-client*)) ([input34966 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/create", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/CreateFacetRequest input34966)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/create", :body body__33756__auto__} (clojure.core/fn [response34965] (clojure.core/let [errors__33757__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "FacetAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/facet-already-exists-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34965)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-facet-response (:body response34965)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34965 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34965)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34965}))))))))))

(clojure.core/defn detach-object ([input__33752__auto__] (detach-object input__33752__auto__ portkey.aws/*http-client*)) ([input34968 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/detach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DetachObjectRequest input34968)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/detach", :body body__33756__auto__} (clojure.core/fn [response34967] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response34967)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/detach-object-response (:body response34967)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34967 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34967)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34967}))))))))))

(clojure.core/defn get-object-information ([input__33752__auto__] (get-object-information input__33752__auto__ portkey.aws/*http-client*)) ([input34970 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/information", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/GetObjectInformationRequest input34970)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]] ["ConsistencyLevel" ["x-amz-consistency-level" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/information", :body body__33756__auto__} (clojure.core/fn [response34969] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response34969)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-object-information-response (:body response34969)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34969 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34969)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34969}))))))))))

(clojure.core/defn list-facet-names ([input__33752__auto__] (list-facet-names input__33752__auto__ portkey.aws/*http-client*)) ([input34972 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/list", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListFacetNamesRequest input34972)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/list", :body body__33756__auto__} (clojure.core/fn [response34971] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response34971)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-response (:body response34971)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34971 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34971)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34971}))))))))))

(clojure.core/defn detach-from-index ([input__33752__auto__] (detach-from-index input__33752__auto__ portkey.aws/*http-client*)) ([input34974 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index/detach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DetachFromIndexRequest input34974)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index/detach", :body body__33756__auto__} (clojure.core/fn [response34973] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2016-05-10/not-index-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ObjectAlreadyDetachedException" :portkey.aws.clouddirectory.-2016-05-10/object-already-detached-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34973)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-response (:body response34973)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34973 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34973)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34973}))))))))))

(clojure.core/defn attach-object ([input__33752__auto__] (attach-object input__33752__auto__ portkey.aws/*http-client*)) ([input34976 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/attach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/AttachObjectRequest input34976)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/attach", :body body__33756__auto__} (clojure.core/fn [response34975] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34975)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-object-response (:body response34975)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34975 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34975)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34975}))))))))))

(clojure.core/defn list-tags-for-resource ([input__33752__auto__] (list-tags-for-resource input__33752__auto__ portkey.aws/*http-client*)) ([input34978 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/tags", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListTagsForResourceRequest input34978)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/tags", :body body__33756__auto__} (clojure.core/fn [response34977] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception}] (if (clojure.core/= 200 (:status response34977)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-response (:body response34977)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34977 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34977)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34977}))))))))))

(clojure.core/defn apply-schema ([input__33752__auto__] (apply-schema input__33752__auto__ portkey.aws/*http-client*)) ([input34980 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/apply", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ApplySchemaRequest input34980)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/apply", :body body__33756__auto__} (clojure.core/fn [response34979] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception}] (if (clojure.core/= 200 (:status response34979)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/apply-schema-response (:body response34979)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34979 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34979)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34979}))))))))))

(clojure.core/defn list-policy-attachments ([input__33752__auto__] (list-policy-attachments input__33752__auto__ portkey.aws/*http-client*)) ([input34982 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/attachment", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListPolicyAttachmentsRequest input34982)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]] ["ConsistencyLevel" ["x-amz-consistency-level" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/attachment", :body body__33756__auto__} (clojure.core/fn [response34981] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34981)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-response (:body response34981)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34981 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34981)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34981}))))))))))

(clojure.core/defn list-outgoing-typed-links ([input__33752__auto__] (list-outgoing-typed-links input__33752__auto__ portkey.aws/*http-client*)) ([input34984 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/outgoing", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListOutgoingTypedLinksRequest input34984)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/outgoing", :body body__33756__auto__} (clojure.core/fn [response34983] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34983)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-response (:body response34983)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34983 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34983)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34983}))))))))))

(clojure.core/defn get-facet ([input__33752__auto__] (get-facet input__33752__auto__ portkey.aws/*http-client*)) ([input34986 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/GetFacetRequest input34986)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet", :body body__33756__auto__} (clojure.core/fn [response34985] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception}] (if (clojure.core/= 200 (:status response34985)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-facet-response (:body response34985)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34985 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34985)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34985}))))))))))

(clojure.core/defn list-facet-attributes ([input__33752__auto__] (list-facet-attributes input__33752__auto__ portkey.aws/*http-client*)) ([input34988 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/attributes", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListFacetAttributesRequest input34988)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/attributes", :body body__33756__auto__} (clojure.core/fn [response34987] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34987)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-response (:body response34987)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34987 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34987)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34987}))))))))))

(clojure.core/defn attach-to-index ([input__33752__auto__] (attach-to-index input__33752__auto__ portkey.aws/*http-client*)) ([input34990 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index/attach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/AttachToIndexRequest input34990)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index/attach", :body body__33756__auto__} (clojure.core/fn [response34989] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2016-05-10/not-index-exception, "IndexedAttributeMissingException" :portkey.aws.clouddirectory.-2016-05-10/indexed-attribute-missing-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34989)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-response (:body response34989)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34989 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34989)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34989}))))))))))

(clojure.core/defn list-directories ([input__33752__auto__] (list-directories input__33752__auto__ portkey.aws/*http-client*)) ([input34992 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/list", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListDirectoriesRequest input34992)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/list", :body body__33756__auto__} (clojure.core/fn [response34991] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response34991)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-directories-response (:body response34991)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34991 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34991)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34991}))))))))))

(clojure.core/defn list-object-attributes ([input__33752__auto__] (list-object-attributes input__33752__auto__ portkey.aws/*http-client*)) ([input34994 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/attributes", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListObjectAttributesRequest input34994)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]] ["ConsistencyLevel" ["x-amz-consistency-level" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/attributes", :body body__33756__auto__} (clojure.core/fn [response34993] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34993)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-response (:body response34993)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34993 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34993)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34993}))))))))))

(clojure.core/defn list-index ([input__33752__auto__] (list-index input__33752__auto__ portkey.aws/*http-client*)) ([input34996 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index/targets", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListIndexRequest input34996)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]] ["ConsistencyLevel" ["x-amz-consistency-level" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index/targets", :body body__33756__auto__} (clojure.core/fn [response34995] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2016-05-10/not-index-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34995)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-index-response (:body response34995)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34995 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34995)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34995}))))))))))

(clojure.core/defn attach-typed-link ([input__33752__auto__] (attach-typed-link input__33752__auto__ portkey.aws/*http-client*)) ([input34998 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/attach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/AttachTypedLinkRequest input34998)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/attach", :body body__33756__auto__} (clojure.core/fn [response34997] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34997)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-response (:body response34997)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34997 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34997)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34997}))))))))))

(clojure.core/defn detach-typed-link ([input__33752__auto__] (detach-typed-link input__33752__auto__ portkey.aws/*http-client*)) ([input35000 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/detach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DetachTypedLinkRequest input35000)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/detach", :body body__33756__auto__} (clojure.core/fn [response34999] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response34999)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response34999 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response34999)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response34999}))))))))))

(clojure.core/defn list-object-children ([input__33752__auto__] (list-object-children input__33752__auto__ portkey.aws/*http-client*)) ([input35002 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/children", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListObjectChildrenRequest input35002)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]] ["ConsistencyLevel" ["x-amz-consistency-level" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/children", :body body__33756__auto__} (clojure.core/fn [response35001] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotNodeException" :portkey.aws.clouddirectory.-2016-05-10/not-node-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response35001)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-children-response (:body response35001)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35001 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35001)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35001}))))))))))

(clojure.core/defn update-typed-link-facet ([input__33752__auto__] (update-typed-link-facet input__33752__auto__ portkey.aws/*http-client*)) ([input35004 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/UpdateTypedLinkFacetRequest input35004)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet", :body body__33756__auto__} (clojure.core/fn [response35003] (clojure.core/let [errors__33757__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "InvalidFacetUpdateException" :portkey.aws.clouddirectory.-2016-05-10/invalid-facet-update-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response35003)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-response (:body response35003)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35003 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35003)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35003}))))))))))

(clojure.core/defn add-facet-to-object ([input__33752__auto__] (add-facet-to-object input__33752__auto__ portkey.aws/*http-client*)) ([input35006 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/facets", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/AddFacetToObjectRequest input35006)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/facets", :body body__33756__auto__} (clojure.core/fn [response35005] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response35005)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-response (:body response35005)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35005 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35005)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35005}))))))))))

(clojure.core/defn create-schema ([input__33752__auto__] (create-schema input__33752__auto__ portkey.aws/*http-client*)) ([input35008 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/create", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/CreateSchemaRequest input35008)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/create", :body body__33756__auto__} (clojure.core/fn [response35007] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "SchemaAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/schema-already-exists-exception}] (if (clojure.core/= 200 (:status response35007)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-schema-response (:body response35007)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35007 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35007)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35007}))))))))))

(clojure.core/defn update-object-attributes ([input__33752__auto__] (update-object-attributes input__33752__auto__ portkey.aws/*http-client*)) ([input35010 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/update", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/UpdateObjectAttributesRequest input35010)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/update", :body body__33756__auto__} (clojure.core/fn [response35009] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response35009)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-response (:body response35009)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35009 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35009)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35009}))))))))))

(clojure.core/defn delete-object ([input__33752__auto__] (delete-object input__33752__auto__ portkey.aws/*http-client*)) ([input35012 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/delete", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DeleteObjectRequest input35012)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/delete", :body body__33756__auto__} (clojure.core/fn [response35011] (clojure.core/let [errors__33757__auto__ {"ObjectNotDetachedException" :portkey.aws.clouddirectory.-2016-05-10/object-not-detached-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response35011)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-object-response (:body response35011)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35011 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35011)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35011}))))))))))

(clojure.core/defn list-object-parents ([input__33752__auto__] (list-object-parents input__33752__auto__ portkey.aws/*http-client*)) ([input35014 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/parent", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListObjectParentsRequest input35014)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]] ["ConsistencyLevel" ["x-amz-consistency-level" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/parent", :body body__33756__auto__} (clojure.core/fn [response35013] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "CannotListParentOfRootException" :portkey.aws.clouddirectory.-2016-05-10/cannot-list-parent-of-root-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response35013)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-response (:body response35013)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35013 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35013)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35013}))))))))))

(clojure.core/defn update-schema ([input__33752__auto__] (update-schema input__33752__auto__ portkey.aws/*http-client*)) ([input35016 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/update", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/UpdateSchemaRequest input35016)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/update", :body body__33756__auto__} (clojure.core/fn [response35015] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response35015)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-schema-response (:body response35015)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35015 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35015)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35015}))))))))))

(clojure.core/defn untag-resource ([input__33752__auto__] (untag-resource input__33752__auto__ portkey.aws/*http-client*)) ([input35018 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/tags/remove", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/UntagResourceRequest input35018)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/tags/remove", :body body__33756__auto__} (clojure.core/fn [response35017] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception}] (if (clojure.core/= 200 (:status response35017)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/untag-resource-response (:body response35017)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35017 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35017)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35017}))))))))))

(clojure.core/defn update-facet ([input__33752__auto__] (update-facet input__33752__auto__ portkey.aws/*http-client*)) ([input35020 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/UpdateFacetRequest input35020)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet", :body body__33756__auto__} (clojure.core/fn [response35019] (clojure.core/let [errors__33757__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "InvalidFacetUpdateException" :portkey.aws.clouddirectory.-2016-05-10/invalid-facet-update-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response35019)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-facet-response (:body response35019)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35019 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35019)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35019}))))))))))

(clojure.core/defn list-applied-schema-arns ([input__33752__auto__] (list-applied-schema-arns input__33752__auto__ portkey.aws/*http-client*)) ([input35022 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/applied", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListAppliedSchemaArnsRequest input35022)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/applied", :body body__33756__auto__} (clojure.core/fn [response35021] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response35021)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-response (:body response35021)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35021 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35021)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35021}))))))))))

(clojure.core/defn create-directory ([input__33752__auto__] (create-directory input__33752__auto__ portkey.aws/*http-client*)) ([input35024 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/create", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/CreateDirectoryRequest input35024)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/create", :body body__33756__auto__} (clojure.core/fn [response35023] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/directory-already-exists-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response35023)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-directory-response (:body response35023)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35023 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35023)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35023}))))))))))

(clojure.core/defn get-schema-as-json ([input__33752__auto__] (get-schema-as-json input__33752__auto__ portkey.aws/*http-client*)) ([input35026 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/json", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/GetSchemaAsJsonRequest input35026)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/json", :body body__33756__auto__} (clojure.core/fn [response35025] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response35025)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-response (:body response35025)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35025 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35025)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35025}))))))))))

(clojure.core/defn list-attached-indices ([input__33752__auto__] (list-attached-indices input__33752__auto__ portkey.aws/*http-client*)) ([input35028 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/indices", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListAttachedIndicesRequest input35028)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]] ["ConsistencyLevel" ["x-amz-consistency-level" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/indices", :body body__33756__auto__} (clojure.core/fn [response35027] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response35027)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-response (:body response35027)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35027 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35027)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35027}))))))))))

(clojure.core/defn attach-policy ([input__33752__auto__] (attach-policy input__33752__auto__ portkey.aws/*http-client*)) ([input35030 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/attach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/AttachPolicyRequest input35030)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/attach", :body body__33756__auto__} (clojure.core/fn [response35029] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response35029)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-policy-response (:body response35029)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35029 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35029)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35029}))))))))))

(clojure.core/defn get-typed-link-facet-information ([input__33752__auto__] (get-typed-link-facet-information input__33752__auto__ portkey.aws/*http-client*)) ([input35032 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/get", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/GetTypedLinkFacetInformationRequest input35032)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/get", :body body__33756__auto__} (clojure.core/fn [response35031] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response35031)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-response (:body response35031)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35031 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35031)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35031}))))))))))

(clojure.core/defn lookup-policy ([input__33752__auto__] (lookup-policy input__33752__auto__ portkey.aws/*http-client*)) ([input35034 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/lookup", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/LookupPolicyRequest input35034)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/lookup", :body body__33756__auto__} (clojure.core/fn [response35033] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response35033)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-response (:body response35033)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35033 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35033)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35033}))))))))))

(clojure.core/defn get-directory ([input__33752__auto__] (get-directory input__33752__auto__ portkey.aws/*http-client*)) ([input35036 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/get", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/GetDirectoryRequest input35036)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/get", :body body__33756__auto__} (clojure.core/fn [response35035] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception}] (if (clojure.core/= 200 (:status response35035)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-directory-response (:body response35035)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35035 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35035)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35035}))))))))))

(clojure.core/defn list-published-schema-arns ([input__33752__auto__] (list-published-schema-arns input__33752__auto__ portkey.aws/*http-client*)) ([input35038 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/published", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListPublishedSchemaArnsRequest input35038)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/published", :body body__33756__auto__} (clojure.core/fn [response35037] (clojure.core/let [errors__33757__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response35037)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-response (:body response35037)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35037 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35037)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35037}))))))))))

(clojure.core/defn list-typed-link-facet-attributes ([input__33752__auto__] (list-typed-link-facet-attributes input__33752__auto__ portkey.aws/*http-client*)) ([input35040 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/attributes", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListTypedLinkFacetAttributesRequest input35040)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/attributes", :body body__33756__auto__} (clojure.core/fn [response35039] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response35039)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-response (:body response35039)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35039 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35039)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35039}))))))))))

(clojure.core/defn enable-directory ([input__33752__auto__] (enable-directory input__33752__auto__ portkey.aws/*http-client*)) ([input35042 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/enable", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/EnableDirectoryRequest input35042)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/enable", :body body__33756__auto__} (clojure.core/fn [response35041] (clojure.core/let [errors__33757__auto__ {"ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception}] (if (clojure.core/= 200 (:status response35041)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/enable-directory-response (:body response35041)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35041 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35041)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35041}))))))))))

(clojure.core/defn delete-facet ([input__33752__auto__] (delete-facet input__33752__auto__ portkey.aws/*http-client*)) ([input35044 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/delete", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DeleteFacetRequest input35044)} (portkey.awsgen/params-to-header ["SchemaArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/delete", :body body__33756__auto__} (clojure.core/fn [response35043] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "FacetInUseException" :portkey.aws.clouddirectory.-2016-05-10/facet-in-use-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response35043)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-facet-response (:body response35043)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35043 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35043)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35043}))))))))))

(clojure.core/defn remove-facet-from-object ([input__33752__auto__] (remove-facet-from-object input__33752__auto__ portkey.aws/*http-client*)) ([input35046 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/facets/delete", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/RemoveFacetFromObjectRequest input35046)} (portkey.awsgen/params-to-header ["DirectoryArn" ["x-amz-data-partition" nil]]) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/facets/delete", :body body__33756__auto__} (clojure.core/fn [response35045] (clojure.core/let [errors__33757__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response35045)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-response (:body response35045)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35045 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35045)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35045}))))))))))
