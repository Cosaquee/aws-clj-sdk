(ns portkey.aws.clouddirectory.-2016-05-10 (:require [portkey.aws]))

(def
 endpoints
 '{"eu-west-1"
   {:credential-scope {:service "clouddirectory", :region "eu-west-1"},
    :ssl-common-name "clouddirectory.eu-west-1.amazonaws.com",
    :endpoint "https://clouddirectory.eu-west-1.amazonaws.com",
    :signature-version :v4},
   "us-east-2"
   {:credential-scope {:service "clouddirectory", :region "us-east-2"},
    :ssl-common-name "clouddirectory.us-east-2.amazonaws.com",
    :endpoint "https://clouddirectory.us-east-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-2"
   {:credential-scope
    {:service "clouddirectory", :region "ap-southeast-2"},
    :ssl-common-name "clouddirectory.ap-southeast-2.amazonaws.com",
    :endpoint "https://clouddirectory.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "ap-southeast-1"
   {:credential-scope
    {:service "clouddirectory", :region "ap-southeast-1"},
    :ssl-common-name "clouddirectory.ap-southeast-1.amazonaws.com",
    :endpoint "https://clouddirectory.ap-southeast-1.amazonaws.com",
    :signature-version :v4},
   "eu-west-2"
   {:credential-scope {:service "clouddirectory", :region "eu-west-2"},
    :ssl-common-name "clouddirectory.eu-west-2.amazonaws.com",
    :endpoint "https://clouddirectory.eu-west-2.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "clouddirectory", :region "us-west-2"},
    :ssl-common-name "clouddirectory.us-west-2.amazonaws.com",
    :endpoint "https://clouddirectory.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "clouddirectory", :region "us-east-1"},
    :ssl-common-name "clouddirectory.us-east-1.amazonaws.com",
    :endpoint "https://clouddirectory.us-east-1.amazonaws.com",
    :signature-version :v4}})

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-rule-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-rule-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/IndexReference :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 64)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-directory-request/Name :portkey.aws.clouddirectory.-2016-05-10.create-directory-request/SchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-operation-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/Index :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/Type :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-parent-paths (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-incoming-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/get-object-information (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-policy-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-outgoing-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-attached-indices (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/lookup-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-successful-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectPolicies :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectParentPaths :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListIncomingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/GetObjectInformation :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListPolicyAttachments :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListOutgoingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListIndex :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectChildren :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListAttachedIndices :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/LookupPolicy]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/ranges-on-indexed-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-index/IndexReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-index/RangesOnIndexedValues :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/MaxResults :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-children-response/children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/link-name-to-object-identifier-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-children-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-children-response/Children :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.policy-attachment/policy-id (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-attachment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.policy-attachment/PolicyId :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier :portkey.aws.clouddirectory.-2016-05-10/PolicyType]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-not-detached-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-not-detached-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-not-detached-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/Arn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.schema-facet/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-facet (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.schema-facet/SchemaArn :portkey.aws.clouddirectory.-2016-05-10/FacetName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-index-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/SourceObjectReference :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/TargetObjectReference :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/TypedLinkFacet :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/Attributes] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/facet-filter (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/MaxResults :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/FacetFilter]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/attribute-definition (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-definition))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/attribute-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/required-behavior (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/required-attribute-behavior))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute/AttributeDefinition :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/AttributeReference :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/RequiredBehavior]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-update/object-attribute-key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-attribute-update/ObjectAttributeKey :portkey.aws.clouddirectory.-2016-05-10/ObjectAttributeAction]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-facet-update-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-facet-update-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-facet-update-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/string-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/string-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/binary-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/binary-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/boolean-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/boolean-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/number-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/datetime-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/datetime-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/StringValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/BinaryValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/BooleanValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/NumberValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/DatetimeValue]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/IndexReference :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/default-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/is-immutable (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/rules (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-definition (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/Type] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/DefaultValue :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/IsImmutable :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/Rules]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.validation-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/validation-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.validation-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-index-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-object-information-response/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-object-information-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.get-object-information-response/SchemaFacets :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-response/parents (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-to-link-name-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-parents-response/Parents :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/facet-attribute :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-directory-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/datetime-attribute-value clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-response/tags (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-response/Tags :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.get-facet-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies-response/attached-policy-ids (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies-response/AttachedPolicyIds :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-range/range (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value-range))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/AttributeKey :portkey.aws.clouddirectory.-2016-05-10.object-attribute-range/Range]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/PolicyReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-parent-paths (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-incoming-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/get-object-information (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-policy-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-outgoing-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-attached-indices (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/lookup-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectPolicies :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectParentPaths :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListIncomingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/GetObjectInformation :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListPolicyAttachments :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListOutgoingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListIndex :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectChildren :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListAttachedIndices :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/LookupPolicy]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/number-attribute-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/object-attribute-action-type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/object-attribute-update-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-action (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/ObjectAttributeActionType :portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/ObjectAttributeUpdateValue]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-not-enabled-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-not-enabled-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-children-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-response/facet-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-response/FacetNames :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 64)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/required-attribute-behavior (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"REQUIRED_ALWAYS" "REQUIRED_ALWAYS", :required-always "REQUIRED_ALWAYS", "NOT_REQUIRED" "NOT_REQUIRED", :not-required "NOT_REQUIRED"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/start-mode (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/range-mode))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/start-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/end-mode (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/range-mode))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/end-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value-range (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/StartMode :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/EndMode] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/StartValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/EndValue]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.unsupported-index-type-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/unsupported-index-type-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.unsupported-index-type-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-add-facet-to-object/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10.batch-add-facet-to-object/ObjectAttributeList :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/Facet]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/facet-filter (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/FacetFilter]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tags-number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/ResourceArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.publish-schema-response/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/publish-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.publish-schema-response/PublishedSchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/DirectoryArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-update-object-attributes/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference :portkey.aws.clouddirectory.-2016-05-10.batch-update-object-attributes/AttributeUpdates] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-directory-response/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-schema-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-schema-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.update-schema-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-schema-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/Type :portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-response/typed-link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-response/TypedLinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/SourceObjectReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/TargetObjectReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/TypedLinkFacet :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/Attributes] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/ordered-indexed-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/is-unique (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.create-index-request/OrderedIndexedAttributeList :portkey.aws.clouddirectory.-2016-05-10.create-index-request/IsUnique] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-index-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-request/operations (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.batch-read-request/Operations] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.enable-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/enable-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.enable-directory-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PathToObjectIdentifiersList :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference :portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/AttributeUpdates] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.attach-to-index-response/AttachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-schema-doc-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-schema-doc-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-schema-doc-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-action-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"CREATE_OR_UPDATE" "CREATE_OR_UPDATE", :create-or-update "CREATE_OR_UPDATE", "DELETE" "DELETE", :delete "DELETE"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {:binary "BINARY", :number "NUMBER", "NUMBER" "NUMBER", :string "STRING", "STRING" "STRING", :datetime "DATETIME", "DATETIME" "DATETIME", :boolean "BOOLEAN", "BOOLEAN" "BOOLEAN", "BINARY" "BINARY"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/boolean-attribute-value clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.link-name-already-in-use-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.link-name-already-in-use-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/policy-attachment :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.limit-exceeded-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-in-use-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-in-use-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-in-use-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PathToObjectIdentifiersList :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-policy/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-policy/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-json-document (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {:object-already-detached-exception "ObjectAlreadyDetachedException", :not-policy-exception "NotPolicyException", "ObjectNotDetachedException" "ObjectNotDetachedException", "ValidationException" "ValidationException", :internal-service-exception "InternalServiceException", :not-index-exception "NotIndexException", "DirectoryNotEnabledException" "DirectoryNotEnabledException", "UnsupportedIndexTypeException" "UnsupportedIndexTypeException", :resource-not-found-exception "ResourceNotFoundException", :limit-exceeded-exception "LimitExceededException", "LinkNameAlreadyInUseException" "LinkNameAlreadyInUseException", "LimitExceededException" "LimitExceededException", :object-not-detached-exception "ObjectNotDetachedException", "InvalidArnException" "InvalidArnException", "NotPolicyException" "NotPolicyException", "ResourceNotFoundException" "ResourceNotFoundException", "FacetValidationException" "FacetValidationException", "AccessDeniedException" "AccessDeniedException", :validation-exception "ValidationException", "NotIndexException" "NotIndexException", :indexed-attribute-missing-exception "IndexedAttributeMissingException", :facet-validation-exception "FacetValidationException", "IndexedAttributeMissingException" "IndexedAttributeMissingException", :directory-not-enabled-exception "DirectoryNotEnabledException", :access-denied-exception "AccessDeniedException", "InvalidAttachmentException" "InvalidAttachmentException", "ObjectAlreadyDetachedException" "ObjectAlreadyDetachedException", :still-contains-links-exception "StillContainsLinksException", :link-name-already-in-use-exception "LinkNameAlreadyInUseException", :unsupported-index-type-exception "UnsupportedIndexTypeException", "StillContainsLinksException" "StillContainsLinksException", "InternalServiceException" "InternalServiceException", :invalid-arn-exception "InvalidArnException", :invalid-attachment-exception "InvalidAttachmentException"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PolicyToPathList :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-tagging-request-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-tagging-request-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/selector-object-reference (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.detach-from-index-response/DetachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/rule-key :portkey.aws.clouddirectory.-2016-05-10/rule))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/create-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/create-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-from-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-to-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/add-facet-to-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/update-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/delete-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/remove-facet-from-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/CreateIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/CreateObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachFromIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachToIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AddFacetToObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/UpdateObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DeleteObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/RemoveFacetFromObject]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/arns (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/arn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index-response/AttachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/ObjectAttributeList]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-response/responses (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-response/Responses]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-not-disabled-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-not-disabled-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-not-disabled-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.remove-facet-from-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.remove-facet-from-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-parent-paths/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-parent-paths/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.detach-object-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-response/SchemaArns :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/next-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-resource-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-range/range (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value-range))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-range/Range] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/AttributeName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-next-token-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-next-token-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.update-schema-response/SchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-deleted-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-deleted-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory/state (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-state))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory/creation-date-time (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/date))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory/Name :portkey.aws.clouddirectory.-2016-05-10/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.directory/State :portkey.aws.clouddirectory.-2016-05-10.directory/CreationDateTime]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/identity-attribute-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/TypedLinkFacet :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/SourceObjectReference :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/TargetObjectReference :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/IdentityAttributeValues] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/SchemaArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/state (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-state))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-directories-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/state]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.policy-to-path/path (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/path-string))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.policy-to-path/policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/policy-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-to-path (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.policy-to-path/Path :portkey.aws.clouddirectory.-2016-05-10.policy-to-path/Policies]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-object-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.detach-object-response/DetachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/Name :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/Attributes :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/IdentityAttributeOrder] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-arn-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-arn-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-not-found-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.not-policy-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.not-policy-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/tags (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/ResourceArn :portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/Tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/Name :portkey.aws.clouddirectory.-2016-05-10/ObjectType] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-facet-request/Attributes]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.attach-object-response/AttachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-object-response/attachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/range-mode (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {:exclusive "EXCLUSIVE", "LAST" "LAST", :inclusive "INCLUSIVE", :last-before-missing-values "LAST_BEFORE_MISSING_VALUES", "EXCLUSIVE" "EXCLUSIVE", :first "FIRST", "INCLUSIVE" "INCLUSIVE", :last "LAST", "FIRST" "FIRST", "LAST_BEFORE_MISSING_VALUES" "LAST_BEFORE_MISSING_VALUES"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/tag :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.cannot-list-parent-of-root-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/cannot-list-parent-of-root-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.cannot-list-parent-of-root-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-response/facet-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-names-response/FacetNames :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children-response/children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/link-name-to-object-identifier-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children-response/Children :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-key-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/tag-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-response/attached-policy-ids (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-policies-response/AttachedPolicyIds :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/binary-attribute-value (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.awsgen/base64-encode portkey.awsgen/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/TargetReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments-response/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments-response/ObjectIdentifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/path-to-object-identifiers-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/path-to-object-identifiers :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/Name :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/AttributeUpdates :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/IdentityAttributeOrder] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-schema-response/SchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-operation-index (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/applied-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/apply-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/AppliedSchemaArn :portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/DirectoryArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.resource-not-found-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-request/SchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/ranges-on-indexed-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.list-index-request/IndexReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-index-request/RangesOnIndexedValues :portkey.aws.clouddirectory.-2016-05-10.list-index-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.schema-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.schema-already-exists-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-validation-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-validation-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.schema-already-published-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-already-published-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.schema-already-published-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-name-and-value/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/AttributeName :portkey.aws.clouddirectory.-2016-05-10.attribute-name-and-value/Value] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/PolicyReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet/Name :portkey.aws.clouddirectory.-2016-05-10/ObjectType]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-response/link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-response/LinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/exception-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-reference/selector (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/selector-object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-reference (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-reference/Selector]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.update-facet-request/AttributeUpdates :portkey.aws.clouddirectory.-2016-05-10/ObjectType]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attribute-key/SchemaArn :portkey.aws.clouddirectory.-2016-05-10/FacetName :portkey.aws.clouddirectory.-2016-05-10.attribute-key/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/bool clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/IndexReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-reference-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/create-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/create-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-from-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-to-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/add-facet-to-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/update-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/delete-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/remove-facet-from-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/CreateIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/CreateObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachFromIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachToIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AddFacetToObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/UpdateObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DeleteObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/RemoveFacetFromObject]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/document (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-json-document))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/Document] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.access-denied-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.access-denied-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-identifier-to-link-name-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/object-identifier :portkey.aws.clouddirectory.-2016-05-10/link-name))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/development-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/publish-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/DevelopmentSchemaArn :portkey.aws.clouddirectory.-2016-05-10/Version] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/Name]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/IndexReference :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index-response/DetachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/attribute (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/action (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/Attribute :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/Action] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.delete-schema-response/SchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/Facet] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links-response/link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links-response/LinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/attribute (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/action (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/Attribute :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/Action]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.index-attachment/indexed-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/index-attachment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.index-attachment/IndexedAttributes :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.not-index-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/not-index-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.not-index-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/link-name-to-object-identifier-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/link-name :portkey.aws.clouddirectory.-2016-05-10/object-identifier))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-schema-and-facet-name/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-schema-and-facet-name/SchemaArn :portkey.aws.clouddirectory.-2016-05-10/TypedLinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-response/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-response/ObjectIdentifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/path-string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-request/operations (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.batch-write-request/Operations] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.rule/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.rule/parameters (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.rule/Type :portkey.aws.clouddirectory.-2016-05-10.rule/Parameters]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/child-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/ParentReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/ChildReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-to-path-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/policy-to-path :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/path (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/path-string))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/path-to-object-identifiers (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/Path :portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/ObjectIdentifiers]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-lookup-policy/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-lookup-policy/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-schema-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-schema-request/SchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/apply-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/PublishedSchemaArn :portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-object-information-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-object-information-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-object-information-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.not-node-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/not-node-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.not-node-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-response/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-response/IdentityAttributeOrder]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/ordered-indexed-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/is-unique (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-create-index/OrderedIndexedAttributeList :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/IsUnique] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-create-index/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName :portkey.aws.clouddirectory.-2016-05-10/BatchReferenceName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-identifier (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/directory :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {:cannot-list-parent-of-root-exception "CannotListParentOfRootException", :not-policy-exception "NotPolicyException", "ValidationException" "ValidationException", :internal-service-exception "InternalServiceException", :not-index-exception "NotIndexException", "DirectoryNotEnabledException" "DirectoryNotEnabledException", :resource-not-found-exception "ResourceNotFoundException", :limit-exceeded-exception "LimitExceededException", "LimitExceededException" "LimitExceededException", "InvalidNextTokenException" "InvalidNextTokenException", "InvalidArnException" "InvalidArnException", "NotPolicyException" "NotPolicyException", "CannotListParentOfRootException" "CannotListParentOfRootException", "ResourceNotFoundException" "ResourceNotFoundException", "FacetValidationException" "FacetValidationException", "AccessDeniedException" "AccessDeniedException", :validation-exception "ValidationException", "NotIndexException" "NotIndexException", :facet-validation-exception "FacetValidationException", "NotNodeException" "NotNodeException", :invalid-next-token-exception "InvalidNextTokenException", :directory-not-enabled-exception "DirectoryNotEnabledException", :access-denied-exception "AccessDeniedException", :not-node-exception "NotNodeException", "InternalServiceException" "InternalServiceException", :invalid-arn-exception "InvalidArnException"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/link-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 64)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"[^\/\[\]\(\):\{\}#@!?\s\\;]+" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/number-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__99566__99567__auto__] (clojure.core/<= 1 p1__99566__99567__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-directories-response/directories (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-directories-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-directories-response/Directories] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.indexed-attribute-missing-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/indexed-attribute-missing-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.indexed-attribute-missing-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tags-number-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__99566__99567__auto__] (clojure.core/<= 50 p1__99566__99567__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-policy/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-policy/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-state (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"ENABLED" "ENABLED", :enabled "ENABLED", "DISABLED" "DISABLED", :disabled "DISABLED", "DELETED" "DELETED", :deleted "DELETED"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 64)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"NODE" "NODE", :node "NODE", "LEAF_NODE" "LEAF_NODE", :leaf-node "LEAF_NODE", "POLICY" "POLICY", :policy "POLICY", "INDEX" "INDEX", :index "INDEX"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/object-identifier :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.retryable-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.retryable-conflict-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/SchemaArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/consistency-level (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"SERIALIZABLE" "SERIALIZABLE", :serializable "SERIALIZABLE", "EVENTUAL" "EVENTUAL", :eventual "EVENTUAL"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 64)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag/key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.tag/Key :portkey.aws.clouddirectory.-2016-05-10.tag/Value]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.create-object-request/SchemaFacets] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-object-request/ObjectAttributeList :portkey.aws.clouddirectory.-2016-05-10.create-object-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/version (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 10)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/schema-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-create-object/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/ObjectAttributeList :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName :portkey.aws.clouddirectory.-2016-05-10/BatchReferenceName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-typed-link-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-typed-link-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-typed-link-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-already-exists-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.disable-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/disable-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.disable-directory-response/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-attachment-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-attachment-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-already-detached-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-already-detached-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-already-detached-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.disable-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/disable-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.disable-directory-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-response/responses (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-response/Responses]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-object/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName :portkey.aws.clouddirectory.-2016-05-10/BatchReferenceName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/successful-response (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-successful-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/exception-response (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/SuccessfulResponse :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/ExceptionResponse]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__99525__auto__] (clojure.core/<= 1 (clojure.core/count s__99525__auto__))) (clojure.core/fn [s__99526__auto__] (clojure.core/< (clojure.core/count s__99526__auto__) 32)) (clojure.core/fn [s__99527__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__99527__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/default-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/is-immutable (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/rules (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/required-behavior (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/required-attribute-behavior))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/Name :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/Type :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/RequiredBehavior] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/DefaultValue :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/IsImmutable :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/Rules]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/string-attribute-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-key :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-value))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links-response/typed-link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links-response/TypedLinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-object-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-object-response/detachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/schema-facet :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/child-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/ChildReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/Key :portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/Value] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-response/SchemaArns :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/TargetReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.still-contains-links-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/still-contains-links-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.still-contains-links-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-already-exists-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/document (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-json-document))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/Name :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/Document]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.internal-service-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.internal-service-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-get-object-information-response/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-get-object-information-response/SchemaFacets :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/untag-resource-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/DirectoryArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/target-facet-name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/target-attribute-name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-reference (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/TargetFacetName :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/TargetAttributeName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/tag-keys (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/untag-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/ResourceArn :portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/TagKeys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/index-attachment :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PolicyToPathList :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-response/SchemaArns :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.enable-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/enable-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.enable-directory-response/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/facet-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/applied-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/Name :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/AppliedSchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/Directory] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"BINARY_LENGTH" "BINARY_LENGTH", :binary-length "BINARY_LENGTH", "NUMBER_COMPARISON" "NUMBER_COMPARISON", :number-comparison "NUMBER_COMPARISON", "STRING_FROM_SET" "STRING_FROM_SET", :string-from-set "STRING_FROM_SET", "STRING_LENGTH" "STRING_LENGTH", :string-length "STRING_LENGTH"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.core/defn tag-resource [input113901] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/tags/add"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/tag-resource-request input113901)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113900] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception}] (if (clojure.core/= 200 (:status response113900)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/tag-resource-response (:body response113900))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113900 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113900)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113900}))])))))))
(clojure.spec.alpha/fdef tag-resource :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/tag-resource-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/tag-resource-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-resource-response))

(clojure.core/defn list-object-policies [input113903] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/policy"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-request input113903)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113902] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113902)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-response (:body response113902))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113902 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113902)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113902}))])))))))
(clojure.spec.alpha/fdef list-object-policies :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-response))

(clojure.core/defn create-index [input113905] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/index"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-index-request input113905)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113904] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "UnsupportedIndexTypeException" :portkey.aws.clouddirectory.-2016-05-10/unsupported-index-type-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113904)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-index-response (:body response113904))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113904 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113904)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113904}))])))))))
(clojure.spec.alpha/fdef create-index :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-index-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-index-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/create-index-response))

(clojure.core/defn list-object-parent-paths [input113907] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/parentpaths"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-request input113907)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113906] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113906)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-response (:body response113906))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113906 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113906)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113906}))])))))))
(clojure.spec.alpha/fdef list-object-parent-paths :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-response))

(clojure.core/defn put-schema-from-json [input113909] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/json"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-request input113909)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113908] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "InvalidSchemaDocException" :portkey.aws.clouddirectory.-2016-05-10/invalid-schema-doc-exception, "InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception}] (if (clojure.core/= 200 (:status response113908)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-response (:body response113908))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113908 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113908)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113908}))])))))))
(clojure.spec.alpha/fdef put-schema-from-json :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-response))

(clojure.core/defn create-object [input113911] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-object-request input113911)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113910] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "UnsupportedIndexTypeException" :portkey.aws.clouddirectory.-2016-05-10/unsupported-index-type-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113910)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-object-response (:body response113910))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113910 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113910)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113910}))])))))))
(clojure.spec.alpha/fdef create-object :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-object-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-object-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/create-object-response))

(clojure.core/defn detach-policy [input113913] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/policy/detach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/detach-policy-request input113913)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113912] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113912)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/detach-policy-response (:body response113912))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113912 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113912)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113912}))])))))))
(clojure.spec.alpha/fdef detach-policy :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/detach-policy-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/detach-policy-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/detach-policy-response))

(clojure.core/defn delete-directory [input113915] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/directory"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-directory-request input113915)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113914] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "DirectoryNotDisabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-disabled-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113914)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-directory-response (:body response113914))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113914 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113914)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113914}))])))))))
(clojure.spec.alpha/fdef delete-directory :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-directory-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-directory-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/delete-directory-response))

(clojure.core/defn batch-write [input113917] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/batchwrite"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/batch-write-request input113917)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113916] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "BatchWriteException" :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception}] (if (clojure.core/= 200 (:status response113916)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/batch-write-response (:body response113916))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113916 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113916)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113916}))])))))))
(clojure.spec.alpha/fdef batch-write :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/batch-write-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/batch-write-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-write-response))

(clojure.core/defn list-typed-link-facet-names [input113919] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/facet/list"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-request input113919)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113918] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response113918)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-response (:body response113918))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113918 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113918)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113918}))])))))))
(clojure.spec.alpha/fdef list-typed-link-facet-names :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-response))

(clojure.core/defn batch-read [input113921] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/batchread"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/batch-read-request input113921)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113920] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception}] (if (clojure.core/= 200 (:status response113920)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/batch-read-response (:body response113920))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113920 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113920)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113920}))])))))))
(clojure.spec.alpha/fdef batch-read :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/batch-read-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/batch-read-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-response))

(clojure.core/defn list-incoming-typed-links [input113923] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/incoming"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-request input113923)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113922] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113922)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-response (:body response113922))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113922 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113922)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113922}))])))))))
(clojure.spec.alpha/fdef list-incoming-typed-links :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-response))

(clojure.core/defn list-development-schema-arns [input113925] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/development"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-request input113925)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113924] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response113924)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-response (:body response113924))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113924 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113924)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113924}))])))))))
(clojure.spec.alpha/fdef list-development-schema-arns :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-response))

(clojure.core/defn delete-schema [input113927] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-schema-request input113927)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113926] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "StillContainsLinksException" :portkey.aws.clouddirectory.-2016-05-10/still-contains-links-exception}] (if (clojure.core/= 200 (:status response113926)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-schema-response (:body response113926))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113926 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113926)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113926}))])))))))
(clojure.spec.alpha/fdef delete-schema :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-schema-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-schema-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/delete-schema-response))

(clojure.core/defn delete-typed-link-facet [input113929] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/facet/delete"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-request input113929)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113928] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception}] (if (clojure.core/= 200 (:status response113928)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-response (:body response113928))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113928 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113928)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113928}))])))))))
(clojure.spec.alpha/fdef delete-typed-link-facet :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-response))

(clojure.core/defn publish-schema [input113931] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/publish"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/publish-schema-request input113931)} (portkey.awsgen/params-to-header {"DevelopmentSchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113930] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "SchemaAlreadyPublishedException" :portkey.aws.clouddirectory.-2016-05-10/schema-already-published-exception}] (if (clojure.core/= 200 (:status response113930)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/publish-schema-response (:body response113930))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113930 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113930)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113930}))])))))))
(clojure.spec.alpha/fdef publish-schema :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/publish-schema-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/publish-schema-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/publish-schema-response))

(clojure.core/defn disable-directory [input113933] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/directory/disable"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/disable-directory-request input113933)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113932] (clojure.core/let [errors__109313__auto__ {"ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception}] (if (clojure.core/= 200 (:status response113932)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/disable-directory-response (:body response113932))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113932 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113932)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113932}))])))))))
(clojure.spec.alpha/fdef disable-directory :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/disable-directory-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/disable-directory-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/disable-directory-response))

(clojure.core/defn create-typed-link-facet [input113935] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/facet/create"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-request input113935)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113934] (clojure.core/let [errors__109313__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "FacetAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/facet-already-exists-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113934)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-response (:body response113934))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113934 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113934)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113934}))])))))))
(clojure.spec.alpha/fdef create-typed-link-facet :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-response))

(clojure.core/defn create-facet [input113937] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/facet/create"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-facet-request input113937)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113936] (clojure.core/let [errors__109313__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "FacetAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/facet-already-exists-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113936)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-facet-response (:body response113936))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113936 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113936)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113936}))])))))))
(clojure.spec.alpha/fdef create-facet :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-facet-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-facet-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/create-facet-response))

(clojure.core/defn detach-object [input113939] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/detach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/detach-object-request input113939)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113938] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response113938)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/detach-object-response (:body response113938))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113938 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113938)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113938}))])))))))
(clojure.spec.alpha/fdef detach-object :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/detach-object-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/detach-object-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/detach-object-response))

(clojure.core/defn get-object-information [input113941] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/information"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-object-information-request input113941)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113940] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response113940)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-object-information-response (:body response113940))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113940 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113940)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113940}))])))))))
(clojure.spec.alpha/fdef get-object-information :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-object-information-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-object-information-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/get-object-information-response))

(clojure.core/defn list-facet-names [input113943] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/facet/list"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-request input113943)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113942] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response113942)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-response (:body response113942))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113942 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113942)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113942}))])))))))
(clojure.spec.alpha/fdef list-facet-names :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-response))

(clojure.core/defn detach-from-index [input113945] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/index/detach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-request input113945)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113944] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2016-05-10/not-index-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ObjectAlreadyDetachedException" :portkey.aws.clouddirectory.-2016-05-10/object-already-detached-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113944)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-response (:body response113944))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113944 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113944)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113944}))])))))))
(clojure.spec.alpha/fdef detach-from-index :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-response))

(clojure.core/defn attach-object [input113947] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/attach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-object-request input113947)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113946] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113946)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-object-response (:body response113946))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113946 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113946)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113946}))])))))))
(clojure.spec.alpha/fdef attach-object :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/attach-object-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/attach-object-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attach-object-response))

(clojure.core/defn list-tags-for-resource [input113949] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/tags"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-request input113949)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113948] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception}] (if (clojure.core/= 200 (:status response113948)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-response (:body response113948))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113948 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113948)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113948}))])))))))
(clojure.spec.alpha/fdef list-tags-for-resource :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-response))

(clojure.core/defn apply-schema [input113951] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/apply"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/apply-schema-request input113951)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113950] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception}] (if (clojure.core/= 200 (:status response113950)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/apply-schema-response (:body response113950))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113950 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113950)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113950}))])))))))
(clojure.spec.alpha/fdef apply-schema :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/apply-schema-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/apply-schema-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/apply-schema-response))

(clojure.core/defn list-policy-attachments [input113953] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/policy/attachment"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-request input113953)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113952] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113952)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-response (:body response113952))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113952 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113952)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113952}))])))))))
(clojure.spec.alpha/fdef list-policy-attachments :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-response))

(clojure.core/defn list-outgoing-typed-links [input113955] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/outgoing"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-request input113955)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113954] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113954)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-response (:body response113954))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113954 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113954)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113954}))])))))))
(clojure.spec.alpha/fdef list-outgoing-typed-links :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-response))

(clojure.core/defn get-facet [input113957] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/facet"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-facet-request input113957)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113956] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception}] (if (clojure.core/= 200 (:status response113956)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-facet-response (:body response113956))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113956 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113956)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113956}))])))))))
(clojure.spec.alpha/fdef get-facet :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-facet-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-facet-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/get-facet-response))

(clojure.core/defn list-facet-attributes [input113959] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/facet/attributes"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-request input113959)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113958] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113958)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-response (:body response113958))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113958 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113958)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113958}))])))))))
(clojure.spec.alpha/fdef list-facet-attributes :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-response))

(clojure.core/defn attach-to-index [input113961] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/index/attach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-request input113961)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113960] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2016-05-10/not-index-exception, "IndexedAttributeMissingException" :portkey.aws.clouddirectory.-2016-05-10/indexed-attribute-missing-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113960)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-response (:body response113960))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113960 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113960)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113960}))])))))))
(clojure.spec.alpha/fdef attach-to-index :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-response))

(clojure.core/defn list-directories [input113963] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/directory/list"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-directories-request input113963)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113962] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response113962)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-directories-response (:body response113962))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113962 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113962)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113962}))])))))))
(clojure.spec.alpha/fdef list-directories :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-directories-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-directories-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-directories-response))

(clojure.core/defn list-object-attributes [input113965] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/attributes"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-request input113965)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113964] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113964)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-response (:body response113964))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113964 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113964)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113964}))])))))))
(clojure.spec.alpha/fdef list-object-attributes :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-response))

(clojure.core/defn list-index [input113967] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/index/targets"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-index-request input113967)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113966] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2016-05-10/not-index-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113966)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-index-response (:body response113966))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113966 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113966)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113966}))])))))))
(clojure.spec.alpha/fdef list-index :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-index-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-index-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-index-response))

(clojure.core/defn attach-typed-link [input113969] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/attach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-request input113969)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113968] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113968)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-response (:body response113968))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113968 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113968)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113968}))])))))))
(clojure.spec.alpha/fdef attach-typed-link :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-response))

(clojure.core/defn detach-typed-link [input113971] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/detach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/detach-typed-link-request input113971)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113970] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113970)) [:result true] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113970 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113970)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113970}))])))))))
(clojure.spec.alpha/fdef detach-typed-link :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/detach-typed-link-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/detach-typed-link-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))))

(clojure.core/defn list-object-children [input113973] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/children"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-children-request input113973)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113972] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotNodeException" :portkey.aws.clouddirectory.-2016-05-10/not-node-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113972)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-children-response (:body response113972))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113972 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113972)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113972}))])))))))
(clojure.spec.alpha/fdef list-object-children :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-children-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-children-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-object-children-response))

(clojure.core/defn update-typed-link-facet [input113975] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/facet"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-request input113975)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113974] (clojure.core/let [errors__109313__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "InvalidFacetUpdateException" :portkey.aws.clouddirectory.-2016-05-10/invalid-facet-update-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113974)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-response (:body response113974))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113974 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113974)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113974}))])))))))
(clojure.spec.alpha/fdef update-typed-link-facet :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-response))

(clojure.core/defn add-facet-to-object [input113977] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/facets"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-request input113977)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113976] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113976)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-response (:body response113976))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113976 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113976)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113976}))])))))))
(clojure.spec.alpha/fdef add-facet-to-object :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-response))

(clojure.core/defn create-schema [input113979] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/create"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-schema-request input113979)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113978] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "SchemaAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/schema-already-exists-exception}] (if (clojure.core/= 200 (:status response113978)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-schema-response (:body response113978))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113978 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113978)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113978}))])))))))
(clojure.spec.alpha/fdef create-schema :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-schema-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-schema-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/create-schema-response))

(clojure.core/defn update-object-attributes [input113981] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/update"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-request input113981)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113980] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113980)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-response (:body response113980))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113980 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113980)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113980}))])))))))
(clojure.spec.alpha/fdef update-object-attributes :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-response))

(clojure.core/defn delete-object [input113983] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/delete"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-object-request input113983)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113982] (clojure.core/let [errors__109313__auto__ {"ObjectNotDetachedException" :portkey.aws.clouddirectory.-2016-05-10/object-not-detached-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113982)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-object-response (:body response113982))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113982 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113982)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113982}))])))))))
(clojure.spec.alpha/fdef delete-object :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-object-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-object-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/delete-object-response))

(clojure.core/defn list-object-parents [input113985] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/parent"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-request input113985)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113984] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "CannotListParentOfRootException" :portkey.aws.clouddirectory.-2016-05-10/cannot-list-parent-of-root-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113984)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-response (:body response113984))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113984 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113984)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113984}))])))))))
(clojure.spec.alpha/fdef list-object-parents :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-response))

(clojure.core/defn update-schema [input113987] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/update"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-schema-request input113987)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113986] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response113986)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-schema-response (:body response113986))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113986 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113986)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113986}))])))))))
(clojure.spec.alpha/fdef update-schema :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/update-schema-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/update-schema-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-schema-response))

(clojure.core/defn untag-resource [input113989] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/tags/remove"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/untag-resource-request input113989)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113988] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception}] (if (clojure.core/= 200 (:status response113988)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/untag-resource-response (:body response113988))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113988 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113988)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113988}))])))))))
(clojure.spec.alpha/fdef untag-resource :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/untag-resource-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/untag-resource-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/untag-resource-response))

(clojure.core/defn update-facet [input113991] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/facet"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-facet-request input113991)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113990] (clojure.core/let [errors__109313__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "InvalidFacetUpdateException" :portkey.aws.clouddirectory.-2016-05-10/invalid-facet-update-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response113990)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-facet-response (:body response113990))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113990 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113990)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113990}))])))))))
(clojure.spec.alpha/fdef update-facet :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/update-facet-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/update-facet-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-facet-response))

(clojure.core/defn list-applied-schema-arns [input113993] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/applied"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-request input113993)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113992] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response113992)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-response (:body response113992))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113992 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113992)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113992}))])))))))
(clojure.spec.alpha/fdef list-applied-schema-arns :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-response))

(clojure.core/defn create-directory [input113995] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/directory/create"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-directory-request input113995)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113994] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/directory-already-exists-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response113994)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-directory-response (:body response113994))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113994 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113994)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113994}))])))))))
(clojure.spec.alpha/fdef create-directory :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-directory-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/create-directory-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/create-directory-response))

(clojure.core/defn get-schema-as-json [input113997] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/json"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-request input113997)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113996] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response113996)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-response (:body response113996))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113996 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113996)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113996}))])))))))
(clojure.spec.alpha/fdef get-schema-as-json :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-response))

(clojure.core/defn list-attached-indices [input113999] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/indices"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-request input113999)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113998] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response113998)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-response (:body response113998))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113998 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113998)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113998}))])))))))
(clojure.spec.alpha/fdef list-attached-indices :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-response))

(clojure.core/defn attach-policy [input114001] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/policy/attach"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-policy-request input114001)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114000] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response114000)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-policy-response (:body response114000))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114000 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114000)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114000}))])))))))
(clojure.spec.alpha/fdef attach-policy :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/attach-policy-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/attach-policy-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attach-policy-response))

(clojure.core/defn get-typed-link-facet-information [input114003] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/facet/get"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-request input114003)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114002] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response114002)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-response (:body response114002))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114002 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114002)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114002}))])))))))
(clojure.spec.alpha/fdef get-typed-link-facet-information :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-response))

(clojure.core/defn lookup-policy [input114005] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/policy/lookup"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-request input114005)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114004] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response114004)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-response (:body response114004))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114004 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114004)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114004}))])))))))
(clojure.spec.alpha/fdef lookup-policy :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-response))

(clojure.core/defn get-directory [input114007] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/directory/get"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-directory-request input114007)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114006] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception}] (if (clojure.core/= 200 (:status response114006)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-directory-response (:body response114006))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114006 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114006)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114006}))])))))))
(clojure.spec.alpha/fdef get-directory :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-directory-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/get-directory-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/get-directory-response))

(clojure.core/defn list-published-schema-arns [input114009] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/schema/published"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-request input114009)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114008] (clojure.core/let [errors__109313__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response114008)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-response (:body response114008))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114008 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114008)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114008}))])))))))
(clojure.spec.alpha/fdef list-published-schema-arns :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-response))

(clojure.core/defn list-typed-link-facet-attributes [input114011] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/typedlink/facet/attributes"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-request input114011)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114010] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response114010)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-response (:body response114010))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114010 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114010)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114010}))])))))))
(clojure.spec.alpha/fdef list-typed-link-facet-attributes :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-response))

(clojure.core/defn enable-directory [input114013] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/directory/enable"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/enable-directory-request input114013)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114012] (clojure.core/let [errors__109313__auto__ {"ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception}] (if (clojure.core/= 200 (:status response114012)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/enable-directory-response (:body response114012))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114012 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114012)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114012}))])))))))
(clojure.spec.alpha/fdef enable-directory :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/enable-directory-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/enable-directory-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/enable-directory-response))

(clojure.core/defn delete-facet [input114015] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/facet/delete"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-facet-request input114015)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114014] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "FacetInUseException" :portkey.aws.clouddirectory.-2016-05-10/facet-in-use-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response114014)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-facet-response (:body response114014))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114014 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114014)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114014}))])))))))
(clojure.spec.alpha/fdef delete-facet :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-facet-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/delete-facet-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/delete-facet-response))

(clojure.core/defn remove-facet-from-object [input114017] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.clouddirectory.-2016-05-10/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/amazonclouddirectory/2017-01-11/object/facets/delete"), :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-request input114017)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response114016] (clojure.core/let [errors__109313__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response114016)) [:result (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-response (:body response114016))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response114016 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response114016)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response114016}))])))))))
(clojure.spec.alpha/fdef remove-facet-from-object :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-request) :async (clojure.spec.alpha/tuple :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-response))
