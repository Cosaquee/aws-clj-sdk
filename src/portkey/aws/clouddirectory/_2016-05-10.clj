(ns portkey.aws.clouddirectory.-2016-05-10 (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-rule-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-rule-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/IndexReference :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-request/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 64)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-directory-request/Name :portkey.aws.clouddirectory.-2016-05-10.create-directory-request/SchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-operation-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/Index :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/Type :portkey.aws.clouddirectory.-2016-05-10.batch-write-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-parent-paths (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-incoming-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/get-object-information (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-policy-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-outgoing-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-object-children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/list-attached-indices (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/lookup-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-successful-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectPolicies :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectParentPaths :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListIncomingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/GetObjectInformation :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListPolicyAttachments :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListOutgoingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListIndex :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListObjectChildren :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/ListAttachedIndices :portkey.aws.clouddirectory.-2016-05-10.batch-read-successful-response/LookupPolicy]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/ranges-on-indexed-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-index/IndexReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-index/RangesOnIndexedValues :portkey.aws.clouddirectory.-2016-05-10.batch-list-index/MaxResults :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-children-response/children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/link-name-to-object-identifier-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-children-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-children-response/Children :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.policy-attachment/policy-id (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-attachment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.policy-attachment/PolicyId :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier :portkey.aws.clouddirectory.-2016-05-10/PolicyType]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-not-detached-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-not-detached-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-not-detached-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/Arn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.schema-facet/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-facet (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.schema-facet/SchemaArn :portkey.aws.clouddirectory.-2016-05-10/FacetName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-index-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-index-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/SourceObjectReference :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/TargetObjectReference :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/TypedLinkFacet :portkey.aws.clouddirectory.-2016-05-10.attach-typed-link-request/Attributes] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/facet-filter (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/MaxResults :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes/FacetFilter]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/attribute-definition (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-definition))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/attribute-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/required-behavior (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/required-attribute-behavior))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute/AttributeDefinition :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/AttributeReference :portkey.aws.clouddirectory.-2016-05-10.facet-attribute/RequiredBehavior]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-update/object-attribute-key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-attribute-update/ObjectAttributeKey :portkey.aws.clouddirectory.-2016-05-10/ObjectAttributeAction]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-facet-update-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-facet-update-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-facet-update-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/string-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/string-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/binary-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/binary-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/boolean-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/boolean-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/number-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/datetime-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/datetime-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/StringValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/BinaryValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/BooleanValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/NumberValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value/DatetimeValue]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/IndexReference :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-request/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/default-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/is-immutable (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/rules (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-definition (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/Type] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/DefaultValue :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/IsImmutable :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-definition/Rules]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.validation-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/validation-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.validation-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-index-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-object-information-response/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-object-information-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.get-object-information-response/SchemaFacets :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parents-response/parents (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-to-link-name-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-parents-response/Parents :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/facet-attribute :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-directory-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/datetime-attribute-value clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-response/tags (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-response/Tags :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.get-facet-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies-response/attached-policy-ids (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies-response/AttachedPolicyIds :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-range/range (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value-range))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/AttributeKey :portkey.aws.clouddirectory.-2016-05-10.object-attribute-range/Range]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/PolicyReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-parent-paths (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-incoming-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/get-object-information (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-policy-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-outgoing-typed-links (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-object-children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/list-attached-indices (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/lookup-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectPolicies :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectParentPaths :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListIncomingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/GetObjectInformation :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListPolicyAttachments :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListOutgoingTypedLinks :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListIndex :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListObjectChildren :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/ListAttachedIndices :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation/LookupPolicy]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/number-attribute-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/object-attribute-action-type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/object-attribute-update-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-action (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/ObjectAttributeActionType :portkey.aws.clouddirectory.-2016-05-10.object-attribute-action/ObjectAttributeUpdateValue]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-not-enabled-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-not-enabled-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-children-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-children-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-response/facet-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-response/FacetNames :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 64)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/required-attribute-behavior (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"REQUIRED_ALWAYS" "REQUIRED_ALWAYS", :required-always "REQUIRED_ALWAYS", "NOT_REQUIRED" "NOT_REQUIRED", :not-required "NOT_REQUIRED"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/start-mode (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/range-mode))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/start-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/end-mode (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/range-mode))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/end-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value-range (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/StartMode :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/EndMode] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/StartValue :portkey.aws.clouddirectory.-2016-05-10.typed-attribute-value-range/EndValue]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.unsupported-index-type-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/unsupported-index-type-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.unsupported-index-type-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-add-facet-to-object/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10.batch-add-facet-to-object/ObjectAttributeList :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/Facet]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/facet-filter (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-request/FacetFilter]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tags-number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/ResourceArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-tags-for-resource-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.publish-schema-response/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/publish-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.publish-schema-response/PublishedSchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.attach-policy-request/DirectoryArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-update-object-attributes/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference :portkey.aws.clouddirectory.-2016-05-10.batch-update-object-attributes/AttributeUpdates] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-directory-response/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-schema-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-schema-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.update-schema-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-schema-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-policies (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-policies/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/Type :portkey.aws.clouddirectory.-2016-05-10.batch-read-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-response/typed-link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-response/TypedLinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/SourceObjectReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/TargetObjectReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/TypedLinkFacet :portkey.aws.clouddirectory.-2016-05-10.batch-attach-typed-link/Attributes] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/ordered-indexed-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/is-unique (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-index-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.create-index-request/OrderedIndexedAttributeList :portkey.aws.clouddirectory.-2016-05-10.create-index-request/IsUnique] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-index-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-request/operations (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.batch-read-request/Operations] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.enable-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/enable-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.enable-directory-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PathToObjectIdentifiersList :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference :portkey.aws.clouddirectory.-2016-05-10.update-object-attributes-request/AttributeUpdates] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-to-index-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.attach-to-index-response/AttachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-schema-doc-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-schema-doc-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-schema-doc-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-action-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"CREATE_OR_UPDATE" "CREATE_OR_UPDATE", :create-or-update "CREATE_OR_UPDATE", "DELETE" "DELETE", :delete "DELETE"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {:binary "BINARY", :number "NUMBER", "NUMBER" "NUMBER", :string "STRING", "STRING" "STRING", :datetime "DATETIME", "DATETIME" "DATETIME", :boolean "BOOLEAN", "BOOLEAN" "BOOLEAN", "BINARY" "BINARY"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/boolean-attribute-value clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.link-name-already-in-use-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.link-name-already-in-use-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/policy-attachment :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.limit-exceeded-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-in-use-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-in-use-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-in-use-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PathToObjectIdentifiersList :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-policy/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-policy/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-json-document (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {:object-already-detached-exception "ObjectAlreadyDetachedException", :not-policy-exception "NotPolicyException", "ObjectNotDetachedException" "ObjectNotDetachedException", "ValidationException" "ValidationException", :internal-service-exception "InternalServiceException", :not-index-exception "NotIndexException", "DirectoryNotEnabledException" "DirectoryNotEnabledException", "UnsupportedIndexTypeException" "UnsupportedIndexTypeException", :resource-not-found-exception "ResourceNotFoundException", :limit-exceeded-exception "LimitExceededException", "LinkNameAlreadyInUseException" "LinkNameAlreadyInUseException", "LimitExceededException" "LimitExceededException", :object-not-detached-exception "ObjectNotDetachedException", "InvalidArnException" "InvalidArnException", "NotPolicyException" "NotPolicyException", "ResourceNotFoundException" "ResourceNotFoundException", "FacetValidationException" "FacetValidationException", "AccessDeniedException" "AccessDeniedException", :validation-exception "ValidationException", "NotIndexException" "NotIndexException", :indexed-attribute-missing-exception "IndexedAttributeMissingException", :facet-validation-exception "FacetValidationException", "IndexedAttributeMissingException" "IndexedAttributeMissingException", :directory-not-enabled-exception "DirectoryNotEnabledException", :access-denied-exception "AccessDeniedException", "InvalidAttachmentException" "InvalidAttachmentException", "ObjectAlreadyDetachedException" "ObjectAlreadyDetachedException", :still-contains-links-exception "StillContainsLinksException", :link-name-already-in-use-exception "LinkNameAlreadyInUseException", :unsupported-index-type-exception "UnsupportedIndexTypeException", "StillContainsLinksException" "StillContainsLinksException", "InternalServiceException" "InternalServiceException", :invalid-arn-exception "InvalidArnException", :invalid-attachment-exception "InvalidAttachmentException"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PolicyToPathList :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-tagging-request-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-tagging-request-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/selector-object-reference (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-from-index-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.detach-from-index-response/DetachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/rule-key :portkey.aws.clouddirectory.-2016-05-10/rule))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/create-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/create-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-from-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-to-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/detach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/add-facet-to-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/update-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/delete-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/attach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/remove-facet-from-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/CreateIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/CreateObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachFromIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachToIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DetachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AddFacetToObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/UpdateObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/DeleteObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/AttachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation-response/RemoveFacetFromObject]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/arns (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/arn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index-response/AttachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.add-facet-to-object-request/ObjectAttributeList]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-response/responses (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-response-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-response/Responses]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-not-disabled-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-not-disabled-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-not-disabled-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.remove-facet-from-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.remove-facet-from-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-parent-paths/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-parent-paths (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-parent-paths/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.detach-object-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-response/SchemaArns :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/next-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-resource-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-range/range (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value-range))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-range/Range] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/AttributeName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-next-token-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-next-token-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.update-schema-response/SchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/filter-attribute-ranges (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/filter-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/FilterAttributeRanges :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/FilterTypedLink :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-outgoing-typed-links-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-deleted-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-deleted-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory/state (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-state))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory/creation-date-time (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/date))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory/Name :portkey.aws.clouddirectory.-2016-05-10/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.directory/State :portkey.aws.clouddirectory.-2016-05-10.directory/CreationDateTime]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/typed-link-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/source-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/target-object-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/identity-attribute-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/TypedLinkFacet :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/SourceObjectReference :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/TargetObjectReference :portkey.aws.clouddirectory.-2016-05-10.typed-link-specifier/IdentityAttributeValues] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/SchemaArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/state (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-state))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-directories-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10.list-directories-request/state]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.policy-to-path/path (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/path-string))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.policy-to-path/policies (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/policy-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-to-path (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.policy-to-path/Path :portkey.aws.clouddirectory.-2016-05-10.policy-to-path/Policies]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-object-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.detach-object-response/DetachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/Name :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/Attributes :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet/IdentityAttributeOrder] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-arn-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-arn-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-not-found-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.not-policy-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.not-policy-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/tags (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/ResourceArn :portkey.aws.clouddirectory.-2016-05-10.tag-resource-request/Tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.create-facet-request/Name :portkey.aws.clouddirectory.-2016-05-10/ObjectType] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-facet-request/Attributes]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.attach-object-response/AttachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object-response/attached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-object-response/attachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/range-mode (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {:exclusive "EXCLUSIVE", "LAST" "LAST", :inclusive "INCLUSIVE", :last-before-missing-values "LAST_BEFORE_MISSING_VALUES", "EXCLUSIVE" "EXCLUSIVE", :first "FIRST", "INCLUSIVE" "INCLUSIVE", :last "LAST", "FIRST" "FIRST", "LAST_BEFORE_MISSING_VALUES" "LAST_BEFORE_MISSING_VALUES"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/tag :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.cannot-list-parent-of-root-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/cannot-list-parent-of-root-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.cannot-list-parent-of-root-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-names-response/facet-names (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-names-response/FacetNames :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children-response/children (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/link-name-to-object-identifier-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-children-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-object-children-response/Children :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-key-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/tag-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-response/attached-policy-ids (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-policies-response/AttachedPolicyIds :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/binary-attribute-value (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.awsgen/base64-encode portkey.awsgen/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/TargetReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments-response/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments-response/ObjectIdentifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/path-to-object-identifiers-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/path-to-object-identifiers :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/Name :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/AttributeUpdates :portkey.aws.clouddirectory.-2016-05-10.update-typed-link-facet-request/IdentityAttributeOrder] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-schema-response/SchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-operation-index (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/applied-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/apply-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/AppliedSchemaArn :portkey.aws.clouddirectory.-2016-05-10.apply-schema-response/DirectoryArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.resource-not-found-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/object-attribute-update :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.lookup-policy-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-request/SchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-policies-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/ranges-on-indexed-values (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-attribute-range-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-index-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-index-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-index-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.list-index-request/IndexReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-index-request/RangesOnIndexedValues :portkey.aws.clouddirectory.-2016-05-10.list-index-request/MaxResults :portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.schema-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.schema-already-exists-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-validation-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-validation-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.schema-already-published-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-already-published-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.schema-already-published-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-name-and-value/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name-and-value (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/AttributeName :portkey.aws.clouddirectory.-2016-05-10.attribute-name-and-value/Value] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-policy-attachments (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/PolicyReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-policy-attachments/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet/Name :portkey.aws.clouddirectory.-2016-05-10/ObjectType]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-response/link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-incoming-typed-links-response/LinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/exception-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-reference/selector (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/selector-object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-reference (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-reference/Selector]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/attribute-updates (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.update-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.update-facet-request/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.update-facet-request/AttributeUpdates :portkey.aws.clouddirectory.-2016-05-10/ObjectType]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attribute-key/SchemaArn :portkey.aws.clouddirectory.-2016-05-10/FacetName :portkey.aws.clouddirectory.-2016-05-10.attribute-key/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/bool clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/attribute-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/IndexReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-to-index/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-reference-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/create-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/create-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-create-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-from-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-to-index (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-to-index))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-typed-link))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/detach-typed-link (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/add-facet-to-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-add-facet-to-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/update-object-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-update-object-attributes))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/delete-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/attach-policy (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/remove-facet-from-object (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/CreateIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/CreateObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachFromIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachToIndex :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DetachTypedLink :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AddFacetToObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/UpdateObjectAttributes :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/DeleteObject :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/AttachPolicy :portkey.aws.clouddirectory.-2016-05-10.batch-write-operation/RemoveFacetFromObject]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/document (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-json-document))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.put-schema-from-json-request/Document] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-typed-link-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.access-denied-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.access-denied-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-response/index-attachments (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-attached-indices-response/IndexAttachments :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-development-schema-arns-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-identifier-to-link-name-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/object-identifier :portkey.aws.clouddirectory.-2016-05-10/link-name))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/development-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/publish-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/DevelopmentSchemaArn :portkey.aws.clouddirectory.-2016-05-10/Version] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.publish-schema-request/Name]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/index-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/IndexReference :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index/TargetReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-from-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-from-index-response/DetachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/attribute (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/action (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/Attribute :portkey.aws.clouddirectory.-2016-05-10.typed-link-facet-attribute-update/Action] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-schema-response/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-schema-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.delete-schema-response/SchemaArn]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.create-typed-link-facet-request/Facet] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-remove-facet-from-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links-response/link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-incoming-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-incoming-typed-links-response/LinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/attribute (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/action (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/update-action-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-update (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/Attribute :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-update/Action]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.index-attachment/indexed-attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/index-attachment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.index-attachment/IndexedAttributes :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.not-index-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/not-index-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.not-index-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/link-name-to-object-identifier-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/link-name :portkey.aws.clouddirectory.-2016-05-10/object-identifier))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-schema-and-facet-name/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-schema-and-facet-name (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-schema-and-facet-name/SchemaArn :portkey.aws.clouddirectory.-2016-05-10/TypedLinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-response/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-policy-attachments-response/ObjectIdentifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/path-string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-write-request/operations (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-write-operation-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-write-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-write-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.batch-write-request/Operations] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.rule/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.rule/parameters (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.rule/Type :portkey.aws.clouddirectory.-2016-05-10.rule/Parameters]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/child-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-attach-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/ParentReference :portkey.aws.clouddirectory.-2016-05-10.batch-attach-object/ChildReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-to-path-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/policy-to-path :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-delete-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/path (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/path-string))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/object-identifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/path-to-object-identifiers (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/Path :portkey.aws.clouddirectory.-2016-05-10.path-to-object-identifiers/ObjectIdentifiers]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-index-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-lookup-policy/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-lookup-policy/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/typed-link-facet-attribute-update :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-schema-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-schema-request/SchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/published-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/apply-schema-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/PublishedSchemaArn :portkey.aws.clouddirectory.-2016-05-10.apply-schema-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-object-information-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-object-information-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.get-object-information-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/ConsistencyLevel]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.not-node-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/not-node-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.not-node-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-response/identity-attribute-order (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.get-typed-link-facet-information-response/IdentityAttributeOrder]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.delete-typed-link-facet-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/ordered-indexed-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/is-unique (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-index (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-create-index/OrderedIndexedAttributeList :portkey.aws.clouddirectory.-2016-05-10.batch-create-index/IsUnique] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-create-index/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName :portkey.aws.clouddirectory.-2016-05-10/BatchReferenceName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-identifier (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/directory :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {:cannot-list-parent-of-root-exception "CannotListParentOfRootException", :not-policy-exception "NotPolicyException", "ValidationException" "ValidationException", :internal-service-exception "InternalServiceException", :not-index-exception "NotIndexException", "DirectoryNotEnabledException" "DirectoryNotEnabledException", :resource-not-found-exception "ResourceNotFoundException", :limit-exceeded-exception "LimitExceededException", "LimitExceededException" "LimitExceededException", "InvalidNextTokenException" "InvalidNextTokenException", "InvalidArnException" "InvalidArnException", "NotPolicyException" "NotPolicyException", "CannotListParentOfRootException" "CannotListParentOfRootException", "ResourceNotFoundException" "ResourceNotFoundException", "FacetValidationException" "FacetValidationException", "AccessDeniedException" "AccessDeniedException", :validation-exception "ValidationException", "NotIndexException" "NotIndexException", :facet-validation-exception "FacetValidationException", "NotNodeException" "NotNodeException", :invalid-next-token-exception "InvalidNextTokenException", :directory-not-enabled-exception "DirectoryNotEnabledException", :access-denied-exception "AccessDeniedException", :not-node-exception "NotNodeException", "InternalServiceException" "InternalServiceException", :invalid-arn-exception "InvalidArnException"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/link-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 64)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[^\/\[\]\(\):\{\}#@!?\s\\;]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/number-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__36568__36569__auto__] (clojure.core/<= 1 p1__36568__36569__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-directories-response/directories (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-directories-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-directories-response/Directories] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.indexed-attribute-missing-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/indexed-attribute-missing-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.indexed-attribute-missing-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tags-number-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__36568__36569__auto__] (clojure.core/<= 50 p1__36568__36569__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-policy/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-policy/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-state (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ENABLED" "ENABLED", :enabled "ENABLED", "DISABLED" "DISABLED", :disabled "DISABLED", "DELETED" "DELETED", :deleted "DELETED"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 64)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"NODE" "NODE", :node "NODE", "LEAF_NODE" "LEAF_NODE", :leaf-node "LEAF_NODE", "POLICY" "POLICY", :policy "POLICY", "INDEX" "INDEX", :index "INDEX"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-identifier-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/object-identifier :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.retryable-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.retryable-conflict-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/SchemaArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-names-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/consistency-level (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"SERIALIZABLE" "SERIALIZABLE", :serializable "SERIALIZABLE", "EVENTUAL" "EVENTUAL", :eventual "EVENTUAL"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 64)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/policy-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.detach-policy-request/PolicyReference :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag/key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.tag/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/tag (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.tag/Key :portkey.aws.clouddirectory.-2016-05-10.tag/Value]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.create-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.create-object-request/SchemaFacets] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.create-object-request/ObjectAttributeList :portkey.aws.clouddirectory.-2016-05-10.create-object-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/version (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 10)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/schema-facet (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/object-attribute-list (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-create-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-create-object/SchemaFacet :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/ObjectAttributeList :portkey.aws.clouddirectory.-2016-05-10.batch-create-object/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName :portkey.aws.clouddirectory.-2016-05-10/BatchReferenceName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.detach-typed-link-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-typed-link-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.detach-typed-link-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/TypedLinkSpecifier] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.directory-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/directory-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.directory-already-exists-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.disable-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/disable-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.disable-directory-response/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.invalid-attachment-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.invalid-attachment-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.object-already-detached-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/object-already-detached-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.object-already-detached-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.disable-directory-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/disable-directory-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.disable-directory-request/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-response/responses (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-response/Responses]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/Name] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-facet-attributes-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-object/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-object/ParentReference :portkey.aws.clouddirectory.-2016-05-10/LinkName :portkey.aws.clouddirectory.-2016-05-10/BatchReferenceName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/successful-response (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-successful-response))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/exception-response (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/batch-read-exception))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-read-operation-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/SuccessfulResponse :portkey.aws.clouddirectory.-2016-05-10.batch-read-operation-response/ExceptionResponse]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 32)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9._-]*$" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/type (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-type))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/default-value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/is-immutable (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/bool))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/rules (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/rule-map))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/required-behavior (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/required-attribute-behavior))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/Name :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/Type :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/RequiredBehavior] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/DefaultValue :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/IsImmutable :portkey.aws.clouddirectory.-2016-05-10.typed-link-attribute-definition/Rules]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/string-attribute-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-map (clojure.spec.alpha/map-of :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-key :portkey.aws.clouddirectory.-2016-05-10/rule-parameter-value))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links-response/typed-link-specifiers (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-specifier-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-outgoing-typed-links-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-outgoing-typed-links-response/TypedLinkSpecifiers :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-detach-object-response/detached-object-identifier (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-identifier))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-object-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-detach-object-response/detachedObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/schema-facet :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-detach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/parent-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/child-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attach-object-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attach-object-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/ParentReference :portkey.aws.clouddirectory.-2016-05-10.attach-object-request/ChildReference :portkey.aws.clouddirectory.-2016-05-10/LinkName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/key (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/value (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-attribute-value))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/Key :portkey.aws.clouddirectory.-2016-05-10.attribute-key-and-value/Value] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-response/SchemaArns :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/target-reference (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/object-reference))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-attached-indices (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/TargetReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.batch-list-attached-indices/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-key-and-value-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-list-object-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-list-object-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.still-contains-links-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/still-contains-links-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.still-contains-links-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/policy-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-object-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.facet-already-exists-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/document (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-json-document))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/Name :portkey.aws.clouddirectory.-2016-05-10.get-schema-as-json-response/Document]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.internal-service-exception/message (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/exception-message))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.internal-service-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.batch-get-object-information-response/schema-facets (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/schema-facet-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-get-object-information-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.batch-get-object-information-response/SchemaFacets :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-response/attributes (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/typed-link-attribute-definition-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-typed-link-facet-attributes-response/Attributes :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/untag-resource-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/delete-facet-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/SchemaArn :portkey.aws.clouddirectory.-2016-05-10.delete-facet-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/DirectoryArn] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-applied-schema-arns-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/max-results (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/number-results))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10/ObjectReference] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/NextToken :portkey.aws.clouddirectory.-2016-05-10.list-object-parent-paths-request/MaxResults]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/update-facet-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/target-facet-name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/facet-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/target-attribute-name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/attribute-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-attribute-reference (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/TargetFacetName :portkey.aws.clouddirectory.-2016-05-10.facet-attribute-reference/TargetAttributeName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/resource-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/tag-keys (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/untag-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/ResourceArn :portkey.aws.clouddirectory.-2016-05-10.untag-resource-request/TagKeys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/index-attachment-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/index-attachment :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/batch-lookup-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10/PolicyToPathList :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/detach-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-response/schema-arns (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arns))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.clouddirectory.-2016-05-10.list-published-schema-arns-response/SchemaArns :portkey.aws.clouddirectory.-2016-05-10/NextToken]))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.enable-directory-response/directory-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/enable-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10.enable-directory-response/DirectoryArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/facet-name-list (clojure.spec.alpha/coll-of :portkey.aws.clouddirectory.-2016-05-10/facet-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/name (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/directory-name))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/applied-schema-arn (clojure.spec.alpha/and :portkey.aws.clouddirectory.-2016-05-10/arn))
(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/create-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/DirectoryArn :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/Name :portkey.aws.clouddirectory.-2016-05-10/ObjectIdentifier :portkey.aws.clouddirectory.-2016-05-10.create-directory-response/AppliedSchemaArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/get-directory-response (portkey.awsgen/json-keys :req-un [:portkey.aws.clouddirectory.-2016-05-10/Directory] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.clouddirectory.-2016-05-10/rule-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"BINARY_LENGTH" "BINARY_LENGTH", :binary-length "BINARY_LENGTH", "NUMBER_COMPARISON" "NUMBER_COMPARISON", :number-comparison "NUMBER_COMPARISON", "STRING_FROM_SET" "STRING_FROM_SET", :string-from-set "STRING_FROM_SET", "STRING_LENGTH" "STRING_LENGTH", :string-length "STRING_LENGTH"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.core/defn tag-resource ([input__36693__auto__] (tag-resource input__36693__auto__ portkey.aws/*http-client*)) ([input38045 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/tags/add", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/TagResourceRequest input38045)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/tags/add", :body body__36697__auto__} (clojure.core/fn [response38044] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception}] (if (clojure.core/= 200 (:status response38044)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/tag-resource-response (:body response38044)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38044 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38044)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38044}))))))))))

(clojure.core/defn list-object-policies ([input__36693__auto__] (list-object-policies input__36693__auto__ portkey.aws/*http-client*)) ([input38047 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/policy", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListObjectPoliciesRequest input38047)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/policy", :body body__36697__auto__} (clojure.core/fn [response38046] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38046)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-policies-response (:body response38046)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38046 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38046)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38046}))))))))))

(clojure.core/defn create-index ([input__36693__auto__] (create-index input__36693__auto__ portkey.aws/*http-client*)) ([input38049 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/CreateIndexRequest input38049)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index", :body body__36697__auto__} (clojure.core/fn [response38048] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "UnsupportedIndexTypeException" :portkey.aws.clouddirectory.-2016-05-10/unsupported-index-type-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38048)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-index-response (:body response38048)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38048 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38048)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38048}))))))))))

(clojure.core/defn list-object-parent-paths ([input__36693__auto__] (list-object-parent-paths input__36693__auto__ portkey.aws/*http-client*)) ([input38051 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/parentpaths", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListObjectParentPathsRequest input38051)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/parentpaths", :body body__36697__auto__} (clojure.core/fn [response38050] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38050)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-parent-paths-response (:body response38050)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38050 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38050)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38050}))))))))))

(clojure.core/defn put-schema-from-json ([input__36693__auto__] (put-schema-from-json input__36693__auto__ portkey.aws/*http-client*)) ([input38053 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/json", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/PutSchemaFromJsonRequest input38053)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/json", :body body__36697__auto__} (clojure.core/fn [response38052] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "InvalidSchemaDocException" :portkey.aws.clouddirectory.-2016-05-10/invalid-schema-doc-exception, "InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception}] (if (clojure.core/= 200 (:status response38052)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/put-schema-from-json-response (:body response38052)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38052 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38052)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38052}))))))))))

(clojure.core/defn create-object ([input__36693__auto__] (create-object input__36693__auto__ portkey.aws/*http-client*)) ([input38055 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/CreateObjectRequest input38055)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object", :body body__36697__auto__} (clojure.core/fn [response38054] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "UnsupportedIndexTypeException" :portkey.aws.clouddirectory.-2016-05-10/unsupported-index-type-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38054)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-object-response (:body response38054)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38054 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38054)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38054}))))))))))

(clojure.core/defn detach-policy ([input__36693__auto__] (detach-policy input__36693__auto__ portkey.aws/*http-client*)) ([input38057 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/detach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DetachPolicyRequest input38057)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/detach", :body body__36697__auto__} (clojure.core/fn [response38056] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38056)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/detach-policy-response (:body response38056)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38056 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38056)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38056}))))))))))

(clojure.core/defn delete-directory ([input__36693__auto__] (delete-directory input__36693__auto__ portkey.aws/*http-client*)) ([input38059 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DeleteDirectoryRequest input38059)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory", :body body__36697__auto__} (clojure.core/fn [response38058] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "DirectoryNotDisabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-disabled-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38058)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-directory-response (:body response38058)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38058 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38058)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38058}))))))))))

(clojure.core/defn batch-write ([input__36693__auto__] (batch-write input__36693__auto__ portkey.aws/*http-client*)) ([input38061 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/batchwrite", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/BatchWriteRequest input38061)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/batchwrite", :body body__36697__auto__} (clojure.core/fn [response38060] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "BatchWriteException" :portkey.aws.clouddirectory.-2016-05-10/batch-write-exception}] (if (clojure.core/= 200 (:status response38060)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/batch-write-response (:body response38060)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38060 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38060)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38060}))))))))))

(clojure.core/defn list-typed-link-facet-names ([input__36693__auto__] (list-typed-link-facet-names input__36693__auto__ portkey.aws/*http-client*)) ([input38063 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/list", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListTypedLinkFacetNamesRequest input38063)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/list", :body body__36697__auto__} (clojure.core/fn [response38062] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response38062)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-names-response (:body response38062)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38062 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38062)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38062}))))))))))

(clojure.core/defn batch-read ([input__36693__auto__] (batch-read input__36693__auto__ portkey.aws/*http-client*)) ([input38065 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/batchread", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/BatchReadRequest input38065)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/batchread", :body body__36697__auto__} (clojure.core/fn [response38064] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception}] (if (clojure.core/= 200 (:status response38064)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/batch-read-response (:body response38064)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38064 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38064)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38064}))))))))))

(clojure.core/defn list-incoming-typed-links ([input__36693__auto__] (list-incoming-typed-links input__36693__auto__ portkey.aws/*http-client*)) ([input38067 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/incoming", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListIncomingTypedLinksRequest input38067)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/incoming", :body body__36697__auto__} (clojure.core/fn [response38066] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38066)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-incoming-typed-links-response (:body response38066)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38066 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38066)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38066}))))))))))

(clojure.core/defn list-development-schema-arns ([input__36693__auto__] (list-development-schema-arns input__36693__auto__ portkey.aws/*http-client*)) ([input38069 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/development", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListDevelopmentSchemaArnsRequest input38069)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/development", :body body__36697__auto__} (clojure.core/fn [response38068] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response38068)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-development-schema-arns-response (:body response38068)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38068 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38068)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38068}))))))))))

(clojure.core/defn delete-schema ([input__36693__auto__] (delete-schema input__36693__auto__ portkey.aws/*http-client*)) ([input38071 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DeleteSchemaRequest input38071)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema", :body body__36697__auto__} (clojure.core/fn [response38070] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "StillContainsLinksException" :portkey.aws.clouddirectory.-2016-05-10/still-contains-links-exception}] (if (clojure.core/= 200 (:status response38070)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-schema-response (:body response38070)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38070 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38070)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38070}))))))))))

(clojure.core/defn delete-typed-link-facet ([input__36693__auto__] (delete-typed-link-facet input__36693__auto__ portkey.aws/*http-client*)) ([input38073 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/delete", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DeleteTypedLinkFacetRequest input38073)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/delete", :body body__36697__auto__} (clojure.core/fn [response38072] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception}] (if (clojure.core/= 200 (:status response38072)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-typed-link-facet-response (:body response38072)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38072 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38072)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38072}))))))))))

(clojure.core/defn publish-schema ([input__36693__auto__] (publish-schema input__36693__auto__ portkey.aws/*http-client*)) ([input38075 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/publish", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/PublishSchemaRequest input38075)} (portkey.awsgen/params-to-header {"DevelopmentSchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/publish", :body body__36697__auto__} (clojure.core/fn [response38074] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "SchemaAlreadyPublishedException" :portkey.aws.clouddirectory.-2016-05-10/schema-already-published-exception}] (if (clojure.core/= 200 (:status response38074)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/publish-schema-response (:body response38074)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38074 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38074)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38074}))))))))))

(clojure.core/defn disable-directory ([input__36693__auto__] (disable-directory input__36693__auto__ portkey.aws/*http-client*)) ([input38077 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/disable", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DisableDirectoryRequest input38077)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/disable", :body body__36697__auto__} (clojure.core/fn [response38076] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception}] (if (clojure.core/= 200 (:status response38076)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/disable-directory-response (:body response38076)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38076 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38076)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38076}))))))))))

(clojure.core/defn create-typed-link-facet ([input__36693__auto__] (create-typed-link-facet input__36693__auto__ portkey.aws/*http-client*)) ([input38079 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/create", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/CreateTypedLinkFacetRequest input38079)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/create", :body body__36697__auto__} (clojure.core/fn [response38078] (clojure.core/let [errors__36698__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "FacetAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/facet-already-exists-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38078)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-typed-link-facet-response (:body response38078)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38078 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38078)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38078}))))))))))

(clojure.core/defn create-facet ([input__36693__auto__] (create-facet input__36693__auto__ portkey.aws/*http-client*)) ([input38081 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/create", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/CreateFacetRequest input38081)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/create", :body body__36697__auto__} (clojure.core/fn [response38080] (clojure.core/let [errors__36698__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "FacetAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/facet-already-exists-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38080)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-facet-response (:body response38080)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38080 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38080)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38080}))))))))))

(clojure.core/defn detach-object ([input__36693__auto__] (detach-object input__36693__auto__ portkey.aws/*http-client*)) ([input38083 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/detach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DetachObjectRequest input38083)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/detach", :body body__36697__auto__} (clojure.core/fn [response38082] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response38082)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/detach-object-response (:body response38082)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38082 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38082)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38082}))))))))))

(clojure.core/defn get-object-information ([input__36693__auto__] (get-object-information input__36693__auto__ portkey.aws/*http-client*)) ([input38085 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/information", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/GetObjectInformationRequest input38085)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/information", :body body__36697__auto__} (clojure.core/fn [response38084] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response38084)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-object-information-response (:body response38084)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38084 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38084)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38084}))))))))))

(clojure.core/defn list-facet-names ([input__36693__auto__] (list-facet-names input__36693__auto__ portkey.aws/*http-client*)) ([input38087 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/list", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListFacetNamesRequest input38087)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/list", :body body__36697__auto__} (clojure.core/fn [response38086] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response38086)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-facet-names-response (:body response38086)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38086 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38086)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38086}))))))))))

(clojure.core/defn detach-from-index ([input__36693__auto__] (detach-from-index input__36693__auto__ portkey.aws/*http-client*)) ([input38089 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index/detach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DetachFromIndexRequest input38089)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index/detach", :body body__36697__auto__} (clojure.core/fn [response38088] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2016-05-10/not-index-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ObjectAlreadyDetachedException" :portkey.aws.clouddirectory.-2016-05-10/object-already-detached-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38088)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/detach-from-index-response (:body response38088)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38088 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38088)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38088}))))))))))

(clojure.core/defn attach-object ([input__36693__auto__] (attach-object input__36693__auto__ portkey.aws/*http-client*)) ([input38091 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/attach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/AttachObjectRequest input38091)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/attach", :body body__36697__auto__} (clojure.core/fn [response38090] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38090)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-object-response (:body response38090)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38090 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38090)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38090}))))))))))

(clojure.core/defn list-tags-for-resource ([input__36693__auto__] (list-tags-for-resource input__36693__auto__ portkey.aws/*http-client*)) ([input38093 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/tags", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListTagsForResourceRequest input38093)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/tags", :body body__36697__auto__} (clojure.core/fn [response38092] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception}] (if (clojure.core/= 200 (:status response38092)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-tags-for-resource-response (:body response38092)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38092 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38092)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38092}))))))))))

(clojure.core/defn apply-schema ([input__36693__auto__] (apply-schema input__36693__auto__ portkey.aws/*http-client*)) ([input38095 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/apply", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ApplySchemaRequest input38095)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/apply", :body body__36697__auto__} (clojure.core/fn [response38094] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception}] (if (clojure.core/= 200 (:status response38094)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/apply-schema-response (:body response38094)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38094 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38094)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38094}))))))))))

(clojure.core/defn list-policy-attachments ([input__36693__auto__] (list-policy-attachments input__36693__auto__ portkey.aws/*http-client*)) ([input38097 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/attachment", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListPolicyAttachmentsRequest input38097)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/attachment", :body body__36697__auto__} (clojure.core/fn [response38096] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38096)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-policy-attachments-response (:body response38096)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38096 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38096)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38096}))))))))))

(clojure.core/defn list-outgoing-typed-links ([input__36693__auto__] (list-outgoing-typed-links input__36693__auto__ portkey.aws/*http-client*)) ([input38099 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/outgoing", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListOutgoingTypedLinksRequest input38099)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/outgoing", :body body__36697__auto__} (clojure.core/fn [response38098] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38098)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-outgoing-typed-links-response (:body response38098)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38098 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38098)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38098}))))))))))

(clojure.core/defn get-facet ([input__36693__auto__] (get-facet input__36693__auto__ portkey.aws/*http-client*)) ([input38101 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/GetFacetRequest input38101)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet", :body body__36697__auto__} (clojure.core/fn [response38100] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception}] (if (clojure.core/= 200 (:status response38100)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-facet-response (:body response38100)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38100 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38100)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38100}))))))))))

(clojure.core/defn list-facet-attributes ([input__36693__auto__] (list-facet-attributes input__36693__auto__ portkey.aws/*http-client*)) ([input38103 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/attributes", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListFacetAttributesRequest input38103)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/attributes", :body body__36697__auto__} (clojure.core/fn [response38102] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38102)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-facet-attributes-response (:body response38102)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38102 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38102)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38102}))))))))))

(clojure.core/defn attach-to-index ([input__36693__auto__] (attach-to-index input__36693__auto__ portkey.aws/*http-client*)) ([input38105 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index/attach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/AttachToIndexRequest input38105)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index/attach", :body body__36697__auto__} (clojure.core/fn [response38104] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LinkNameAlreadyInUseException" :portkey.aws.clouddirectory.-2016-05-10/link-name-already-in-use-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2016-05-10/not-index-exception, "IndexedAttributeMissingException" :portkey.aws.clouddirectory.-2016-05-10/indexed-attribute-missing-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38104)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-to-index-response (:body response38104)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38104 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38104)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38104}))))))))))

(clojure.core/defn list-directories ([input__36693__auto__] (list-directories input__36693__auto__ portkey.aws/*http-client*)) ([input38107 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/list", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListDirectoriesRequest input38107)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/list", :body body__36697__auto__} (clojure.core/fn [response38106] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response38106)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-directories-response (:body response38106)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38106 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38106)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38106}))))))))))

(clojure.core/defn list-object-attributes ([input__36693__auto__] (list-object-attributes input__36693__auto__ portkey.aws/*http-client*)) ([input38109 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/attributes", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListObjectAttributesRequest input38109)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/attributes", :body body__36697__auto__} (clojure.core/fn [response38108] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38108)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-attributes-response (:body response38108)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38108 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38108)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38108}))))))))))

(clojure.core/defn list-index ([input__36693__auto__] (list-index input__36693__auto__ portkey.aws/*http-client*)) ([input38111 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index/targets", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListIndexRequest input38111)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/index/targets", :body body__36697__auto__} (clojure.core/fn [response38110] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotIndexException" :portkey.aws.clouddirectory.-2016-05-10/not-index-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38110)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-index-response (:body response38110)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38110 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38110)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38110}))))))))))

(clojure.core/defn attach-typed-link ([input__36693__auto__] (attach-typed-link input__36693__auto__ portkey.aws/*http-client*)) ([input38113 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/attach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/AttachTypedLinkRequest input38113)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/attach", :body body__36697__auto__} (clojure.core/fn [response38112] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidAttachmentException" :portkey.aws.clouddirectory.-2016-05-10/invalid-attachment-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38112)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-typed-link-response (:body response38112)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38112 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38112)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38112}))))))))))

(clojure.core/defn detach-typed-link ([input__36693__auto__] (detach-typed-link input__36693__auto__ portkey.aws/*http-client*)) ([input38115 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/detach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DetachTypedLinkRequest input38115)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/detach", :body body__36697__auto__} (clojure.core/fn [response38114] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38114)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38114 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38114)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38114}))))))))))

(clojure.core/defn list-object-children ([input__36693__auto__] (list-object-children input__36693__auto__ portkey.aws/*http-client*)) ([input38117 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/children", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListObjectChildrenRequest input38117)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/children", :body body__36697__auto__} (clojure.core/fn [response38116] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "NotNodeException" :portkey.aws.clouddirectory.-2016-05-10/not-node-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38116)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-children-response (:body response38116)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38116 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38116)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38116}))))))))))

(clojure.core/defn update-typed-link-facet ([input__36693__auto__] (update-typed-link-facet input__36693__auto__ portkey.aws/*http-client*)) ([input38119 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/UpdateTypedLinkFacetRequest input38119)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet", :body body__36697__auto__} (clojure.core/fn [response38118] (clojure.core/let [errors__36698__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "InvalidFacetUpdateException" :portkey.aws.clouddirectory.-2016-05-10/invalid-facet-update-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38118)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-typed-link-facet-response (:body response38118)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38118 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38118)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38118}))))))))))

(clojure.core/defn add-facet-to-object ([input__36693__auto__] (add-facet-to-object input__36693__auto__ portkey.aws/*http-client*)) ([input38121 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/facets", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/AddFacetToObjectRequest input38121)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/facets", :body body__36697__auto__} (clojure.core/fn [response38120] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38120)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/add-facet-to-object-response (:body response38120)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38120 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38120)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38120}))))))))))

(clojure.core/defn create-schema ([input__36693__auto__] (create-schema input__36693__auto__ portkey.aws/*http-client*)) ([input38123 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/create", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/CreateSchemaRequest input38123)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/create", :body body__36697__auto__} (clojure.core/fn [response38122] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "SchemaAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/schema-already-exists-exception}] (if (clojure.core/= 200 (:status response38122)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-schema-response (:body response38122)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38122 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38122)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38122}))))))))))

(clojure.core/defn update-object-attributes ([input__36693__auto__] (update-object-attributes input__36693__auto__ portkey.aws/*http-client*)) ([input38125 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/update", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/UpdateObjectAttributesRequest input38125)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/update", :body body__36697__auto__} (clojure.core/fn [response38124] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38124)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-object-attributes-response (:body response38124)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38124 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38124)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38124}))))))))))

(clojure.core/defn delete-object ([input__36693__auto__] (delete-object input__36693__auto__ portkey.aws/*http-client*)) ([input38127 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/delete", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DeleteObjectRequest input38127)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/delete", :body body__36697__auto__} (clojure.core/fn [response38126] (clojure.core/let [errors__36698__auto__ {"ObjectNotDetachedException" :portkey.aws.clouddirectory.-2016-05-10/object-not-detached-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38126)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-object-response (:body response38126)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38126 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38126)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38126}))))))))))

(clojure.core/defn list-object-parents ([input__36693__auto__] (list-object-parents input__36693__auto__ portkey.aws/*http-client*)) ([input38129 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/parent", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListObjectParentsRequest input38129)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/parent", :body body__36697__auto__} (clojure.core/fn [response38128] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "CannotListParentOfRootException" :portkey.aws.clouddirectory.-2016-05-10/cannot-list-parent-of-root-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38128)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-object-parents-response (:body response38128)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38128 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38128)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38128}))))))))))

(clojure.core/defn update-schema ([input__36693__auto__] (update-schema input__36693__auto__ portkey.aws/*http-client*)) ([input38131 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/update", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/UpdateSchemaRequest input38131)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/update", :body body__36697__auto__} (clojure.core/fn [response38130] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response38130)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-schema-response (:body response38130)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38130 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38130)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38130}))))))))))

(clojure.core/defn untag-resource ([input__36693__auto__] (untag-resource input__36693__auto__ portkey.aws/*http-client*)) ([input38133 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/tags/remove", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/UntagResourceRequest input38133)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/tags/remove", :body body__36697__auto__} (clojure.core/fn [response38132] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidTaggingRequestException" :portkey.aws.clouddirectory.-2016-05-10/invalid-tagging-request-exception}] (if (clojure.core/= 200 (:status response38132)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/untag-resource-response (:body response38132)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38132 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38132)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38132}))))))))))

(clojure.core/defn update-facet ([input__36693__auto__] (update-facet input__36693__auto__ portkey.aws/*http-client*)) ([input38135 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/UpdateFacetRequest input38135)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet", :body body__36697__auto__} (clojure.core/fn [response38134] (clojure.core/let [errors__36698__auto__ {"InvalidRuleException" :portkey.aws.clouddirectory.-2016-05-10/invalid-rule-exception, "InvalidFacetUpdateException" :portkey.aws.clouddirectory.-2016-05-10/invalid-facet-update-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38134)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/update-facet-response (:body response38134)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38134 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38134)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38134}))))))))))

(clojure.core/defn list-applied-schema-arns ([input__36693__auto__] (list-applied-schema-arns input__36693__auto__ portkey.aws/*http-client*)) ([input38137 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/applied", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListAppliedSchemaArnsRequest input38137)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/applied", :body body__36697__auto__} (clojure.core/fn [response38136] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response38136)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-applied-schema-arns-response (:body response38136)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38136 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38136)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38136}))))))))))

(clojure.core/defn create-directory ([input__36693__auto__] (create-directory input__36693__auto__ portkey.aws/*http-client*)) ([input38139 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/create", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/CreateDirectoryRequest input38139)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/create", :body body__36697__auto__} (clojure.core/fn [response38138] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryAlreadyExistsException" :portkey.aws.clouddirectory.-2016-05-10/directory-already-exists-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response38138)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/create-directory-response (:body response38138)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38138 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38138)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38138}))))))))))

(clojure.core/defn get-schema-as-json ([input__36693__auto__] (get-schema-as-json input__36693__auto__ portkey.aws/*http-client*)) ([input38141 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/json", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/GetSchemaAsJsonRequest input38141)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/json", :body body__36697__auto__} (clojure.core/fn [response38140] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response38140)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-schema-as-json-response (:body response38140)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38140 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38140)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38140}))))))))))

(clojure.core/defn list-attached-indices ([input__36693__auto__] (list-attached-indices input__36693__auto__ portkey.aws/*http-client*)) ([input38143 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/indices", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListAttachedIndicesRequest input38143)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil], "ConsistencyLevel" ["x-amz-consistency-level" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/indices", :body body__36697__auto__} (clojure.core/fn [response38142] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception}] (if (clojure.core/= 200 (:status response38142)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-attached-indices-response (:body response38142)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38142 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38142)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38142}))))))))))

(clojure.core/defn attach-policy ([input__36693__auto__] (attach-policy input__36693__auto__ portkey.aws/*http-client*)) ([input38145 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/attach", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/AttachPolicyRequest input38145)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/attach", :body body__36697__auto__} (clojure.core/fn [response38144] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "NotPolicyException" :portkey.aws.clouddirectory.-2016-05-10/not-policy-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38144)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/attach-policy-response (:body response38144)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38144 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38144)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38144}))))))))))

(clojure.core/defn get-typed-link-facet-information ([input__36693__auto__] (get-typed-link-facet-information input__36693__auto__ portkey.aws/*http-client*)) ([input38147 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/get", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/GetTypedLinkFacetInformationRequest input38147)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/get", :body body__36697__auto__} (clojure.core/fn [response38146] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38146)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-typed-link-facet-information-response (:body response38146)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38146 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38146)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38146}))))))))))

(clojure.core/defn lookup-policy ([input__36693__auto__] (lookup-policy input__36693__auto__ portkey.aws/*http-client*)) ([input38149 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/lookup", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/LookupPolicyRequest input38149)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/policy/lookup", :body body__36697__auto__} (clojure.core/fn [response38148] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38148)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/lookup-policy-response (:body response38148)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38148 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38148)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38148}))))))))))

(clojure.core/defn get-directory ([input__36693__auto__] (get-directory input__36693__auto__ portkey.aws/*http-client*)) ([input38151 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/get", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/GetDirectoryRequest input38151)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/get", :body body__36697__auto__} (clojure.core/fn [response38150] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception}] (if (clojure.core/= 200 (:status response38150)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/get-directory-response (:body response38150)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38150 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38150)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38150}))))))))))

(clojure.core/defn list-published-schema-arns ([input__36693__auto__] (list-published-schema-arns input__36693__auto__ portkey.aws/*http-client*)) ([input38153 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/published", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListPublishedSchemaArnsRequest input38153)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/schema/published", :body body__36697__auto__} (clojure.core/fn [response38152] (clojure.core/let [errors__36698__auto__ {"InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception}] (if (clojure.core/= 200 (:status response38152)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-published-schema-arns-response (:body response38152)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38152 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38152)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38152}))))))))))

(clojure.core/defn list-typed-link-facet-attributes ([input__36693__auto__] (list-typed-link-facet-attributes input__36693__auto__ portkey.aws/*http-client*)) ([input38155 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/attributes", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/ListTypedLinkFacetAttributesRequest input38155)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/typedlink/facet/attributes", :body body__36697__auto__} (clojure.core/fn [response38154] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidNextTokenException" :portkey.aws.clouddirectory.-2016-05-10/invalid-next-token-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38154)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/list-typed-link-facet-attributes-response (:body response38154)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38154 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38154)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38154}))))))))))

(clojure.core/defn enable-directory ([input__36693__auto__] (enable-directory input__36693__auto__ portkey.aws/*http-client*)) ([input38157 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/enable", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/EnableDirectoryRequest input38157)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/directory/enable", :body body__36697__auto__} (clojure.core/fn [response38156] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "DirectoryDeletedException" :portkey.aws.clouddirectory.-2016-05-10/directory-deleted-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception, "ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception}] (if (clojure.core/= 200 (:status response38156)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/enable-directory-response (:body response38156)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38156 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38156)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38156}))))))))))

(clojure.core/defn delete-facet ([input__36693__auto__] (delete-facet input__36693__auto__ portkey.aws/*http-client*)) ([input38159 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/delete", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/DeleteFacetRequest input38159)} (portkey.awsgen/params-to-header {"SchemaArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/facet/delete", :body body__36697__auto__} (clojure.core/fn [response38158] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "FacetInUseException" :portkey.aws.clouddirectory.-2016-05-10/facet-in-use-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "FacetNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/facet-not-found-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38158)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/delete-facet-response (:body response38158)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38158 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38158)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38158}))))))))))

(clojure.core/defn remove-facet-from-object ([input__36693__auto__] (remove-facet-from-object input__36693__auto__ portkey.aws/*http-client*)) ([input38161 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/facets/delete", :body (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/RemoveFacetFromObjectRequest input38161)} (portkey.awsgen/params-to-header {"DirectoryArn" ["x-amz-data-partition" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/amazonclouddirectory/2017-01-11/object/facets/delete", :body body__36697__auto__} (clojure.core/fn [response38160] (clojure.core/let [errors__36698__auto__ {"ValidationException" :portkey.aws.clouddirectory.-2016-05-10/validation-exception, "DirectoryNotEnabledException" :portkey.aws.clouddirectory.-2016-05-10/directory-not-enabled-exception, "LimitExceededException" :portkey.aws.clouddirectory.-2016-05-10/limit-exceeded-exception, "InvalidArnException" :portkey.aws.clouddirectory.-2016-05-10/invalid-arn-exception, "ResourceNotFoundException" :portkey.aws.clouddirectory.-2016-05-10/resource-not-found-exception, "FacetValidationException" :portkey.aws.clouddirectory.-2016-05-10/facet-validation-exception, "AccessDeniedException" :portkey.aws.clouddirectory.-2016-05-10/access-denied-exception, "RetryableConflictException" :portkey.aws.clouddirectory.-2016-05-10/retryable-conflict-exception, "InternalServiceException" :portkey.aws.clouddirectory.-2016-05-10/internal-service-exception}] (if (clojure.core/= 200 (:status response38160)) (clojure.spec.alpha/unform :portkey.aws.clouddirectory.-2016-05-10/remove-facet-from-object-response (:body response38160)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38160 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38160)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38160}))))))))))
