(ns portkey.aws.apigateway (:require [portkey.aws]))

(def
 endpoints
 '{"ap-northeast-1"
   {:credentialScope
    {"service" "apigateway", "region" "ap-northeast-1"},
    :sslCommonName "apigateway.ap-northeast-1.amazonaws.com",
    :endpoint "https://apigateway.ap-northeast-1.amazonaws.com"},
   "eu-west-1"
   {:credentialScope {"service" "apigateway", "region" "eu-west-1"},
    :sslCommonName "apigateway.eu-west-1.amazonaws.com",
    :endpoint "https://apigateway.eu-west-1.amazonaws.com"},
   "us-east-2"
   {:credentialScope {"service" "apigateway", "region" "us-east-2"},
    :sslCommonName "apigateway.us-east-2.amazonaws.com",
    :endpoint "https://apigateway.us-east-2.amazonaws.com"},
   "ap-southeast-2"
   {:credentialScope
    {"service" "apigateway", "region" "ap-southeast-2"},
    :sslCommonName "apigateway.ap-southeast-2.amazonaws.com",
    :endpoint "https://apigateway.ap-southeast-2.amazonaws.com"},
   "sa-east-1"
   {:credentialScope {"service" "apigateway", "region" "sa-east-1"},
    :sslCommonName "apigateway.sa-east-1.amazonaws.com",
    :endpoint "https://apigateway.sa-east-1.amazonaws.com"},
   "ap-southeast-1"
   {:credentialScope
    {"service" "apigateway", "region" "ap-southeast-1"},
    :sslCommonName "apigateway.ap-southeast-1.amazonaws.com",
    :endpoint "https://apigateway.ap-southeast-1.amazonaws.com"},
   "ap-northeast-2"
   {:credentialScope
    {"service" "apigateway", "region" "ap-northeast-2"},
    :sslCommonName "apigateway.ap-northeast-2.amazonaws.com",
    :endpoint "https://apigateway.ap-northeast-2.amazonaws.com"},
   "ca-central-1"
   {:credentialScope {"service" "apigateway", "region" "ca-central-1"},
    :sslCommonName "apigateway.ca-central-1.amazonaws.com",
    :endpoint "https://apigateway.ca-central-1.amazonaws.com"},
   "eu-central-1"
   {:credentialScope {"service" "apigateway", "region" "eu-central-1"},
    :sslCommonName "apigateway.eu-central-1.amazonaws.com",
    :endpoint "https://apigateway.eu-central-1.amazonaws.com"},
   "eu-west-2"
   {:credentialScope {"service" "apigateway", "region" "eu-west-2"},
    :sslCommonName "apigateway.eu-west-2.amazonaws.com",
    :endpoint "https://apigateway.eu-west-2.amazonaws.com"},
   "us-gov-west-1"
   {:credentialScope
    {"service" "apigateway", "region" "us-gov-west-1"},
    :sslCommonName "apigateway.us-gov-west-1.amazonaws.com",
    :endpoint "https://apigateway.us-gov-west-1.amazonaws.com"},
   "us-west-2"
   {:credentialScope {"service" "apigateway", "region" "us-west-2"},
    :sslCommonName "apigateway.us-west-2.amazonaws.com",
    :endpoint "https://apigateway.us-west-2.amazonaws.com"},
   "us-east-1"
   {:credentialScope {"service" "apigateway", "region" "us-east-1"},
    :sslCommonName "apigateway.us-east-1.amazonaws.com",
    :endpoint "https://apigateway.us-east-1.amazonaws.com"},
   "us-west-1"
   {:credentialScope {"service" "apigateway", "region" "us-west-1"},
    :sslCommonName "apigateway.us-west-1.amazonaws.com",
    :endpoint "https://apigateway.us-west-1.amazonaws.com"},
   "ap-south-1"
   {:credentialScope {"service" "apigateway", "region" "ap-south-1"},
    :sslCommonName "apigateway.ap-south-1.amazonaws.com",
    :endpoint "https://apigateway.ap-south-1.amazonaws.com"}})

(clojure.spec.alpha/def :portkey.aws.apigateway.create-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-resource-request/parent-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-resource-request/path-part (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-resource-request/restApiId :portkey.aws.apigateway.create-resource-request/parentId :portkey.aws.apigateway.create-resource-request/pathPart] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-part-location-status-code (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44500__auto__] (clojure.core/re-matches #"^([1-5]\d\d|\*|\s*)$" s__44500__auto__))))

(clojure.spec.alpha/def :portkey.aws.apigateway.put-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-rest-api-request/mode (clojure.spec.alpha/and :portkey.aws.apigateway/put-mode))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-rest-api-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-rest-api-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-rest-api-request/body (clojure.spec.alpha/and :portkey.aws.apigateway/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway/put-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.put-rest-api-request/restApiId :portkey.aws.apigateway.put-rest-api-request/body] :opt-un [:portkey.aws.apigateway.put-rest-api-request/mode :portkey.aws.apigateway.put-rest-api-request/failOnWarnings :portkey.aws.apigateway.put-rest-api-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-stages-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-stages-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-stages-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-stages-request/restApiId] :opt-un [:portkey.aws.apigateway.get-stages-request/deploymentId]))

(clojure.spec.alpha/def :portkey.aws.apigateway.rest-api/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.rest-api/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.rest-api/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.rest-api/created-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.rest-api/version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.rest-api/warnings (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.rest-api/binary-media-types (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/rest-api (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.rest-api/id :portkey.aws.apigateway.rest-api/name :portkey.aws.apigateway.rest-api/description :portkey.aws.apigateway.rest-api/createdDate :portkey.aws.apigateway.rest-api/version :portkey.aws.apigateway.rest-api/warnings :portkey.aws.apigateway.rest-api/binaryMediaTypes]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-domain-name-request/domainName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-resource-request/restApiId :portkey.aws.apigateway.delete-resource-request/resourceId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-usage-plan-request/usagePlanId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.unauthorized-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/unauthorized-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.unauthorized-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-documentation-part (clojure.spec.alpha/coll-of :portkey.aws.apigateway/documentation-part :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-resources-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-resources-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-resources-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-resources-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-resources-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-resources-request/restApiId] :opt-un [:portkey.aws.apigateway.get-resources-request/position :portkey.aws.apigateway.get-resources-request/limit :portkey.aws.apigateway.get-resources-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.api-key-ids/ids (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key-ids/warnings (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/api-key-ids (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.api-key-ids/ids :portkey.aws.apigateway.api-key-ids/warnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-request/headers (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-request/path-with-query-string (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-request/body (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-request/stage-variables (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-request/additional-context (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/test-invoke-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.test-invoke-authorizer-request/restApiId :portkey.aws.apigateway.test-invoke-authorizer-request/authorizerId] :opt-un [:portkey.aws.apigateway.test-invoke-authorizer-request/headers :portkey.aws.apigateway.test-invoke-authorizer-request/pathWithQueryString :portkey.aws.apigateway.test-invoke-authorizer-request/body :portkey.aws.apigateway.test-invoke-authorizer-request/stageVariables :portkey.aws.apigateway.test-invoke-authorizer-request/additionalContext]))

(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/path-with-query-string (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/body (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/headers (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/stage-variables (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/test-invoke-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.test-invoke-method-request/restApiId :portkey.aws.apigateway.test-invoke-method-request/resourceId :portkey.aws.apigateway.test-invoke-method-request/httpMethod] :opt-un [:portkey.aws.apigateway.test-invoke-method-request/pathWithQueryString :portkey.aws.apigateway.test-invoke-method-request/body :portkey.aws.apigateway.test-invoke-method-request/headers :portkey.aws.apigateway.test-invoke-method-request/clientCertificateId :portkey.aws.apigateway.test-invoke-method-request/stageVariables]))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-method-snapshot (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/method-snapshot))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-sdk-type-request/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-sdk-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-sdk-type-request/id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.deployment/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.deployment/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.deployment/created-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.deployment/api-summary (clojure.spec.alpha/and :portkey.aws.apigateway/path-to-map-of-method-snapshot))
(clojure.spec.alpha/def :portkey.aws.apigateway/deployment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.deployment/id :portkey.aws.apigateway.deployment/description :portkey.aws.apigateway.deployment/createdDate :portkey.aws.apigateway.deployment/apiSummary]))

(clojure.spec.alpha/def :portkey.aws.apigateway/gateway-response-type (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {:integration-timeout "INTEGRATION_TIMEOUT", :default-4xx "DEFAULT_4XX", "REQUEST_TOO_LARGE" "REQUEST_TOO_LARGE", :unauthorized "UNAUTHORIZED", "INTEGRATION_TIMEOUT" "INTEGRATION_TIMEOUT", "RESOURCE_NOT_FOUND" "RESOURCE_NOT_FOUND", :invalid-api-key "INVALID_API_KEY", :integration-failure "INTEGRATION_FAILURE", "AUTHORIZER_CONFIGURATION_ERROR" "AUTHORIZER_CONFIGURATION_ERROR", "INTEGRATION_FAILURE" "INTEGRATION_FAILURE", "DEFAULT_5XX" "DEFAULT_5XX", "UNAUTHORIZED" "UNAUTHORIZED", :quota-exceeded "QUOTA_EXCEEDED", :invalid-signature "INVALID_SIGNATURE", :expired-token "EXPIRED_TOKEN", :bad-request-parameters "BAD_REQUEST_PARAMETERS", "AUTHORIZER_FAILURE" "AUTHORIZER_FAILURE", :unsupported-media-type "UNSUPPORTED_MEDIA_TYPE", "INVALID_API_KEY" "INVALID_API_KEY", "ACCESS_DENIED" "ACCESS_DENIED", "API_CONFIGURATION_ERROR" "API_CONFIGURATION_ERROR", "DEFAULT_4XX" "DEFAULT_4XX", "INVALID_SIGNATURE" "INVALID_SIGNATURE", :bad-request-body "BAD_REQUEST_BODY", :api-configuration-error "API_CONFIGURATION_ERROR", "EXPIRED_TOKEN" "EXPIRED_TOKEN", "UNSUPPORTED_MEDIA_TYPE" "UNSUPPORTED_MEDIA_TYPE", :authorizer-configuration-error "AUTHORIZER_CONFIGURATION_ERROR", :default-5xx "DEFAULT_5XX", :request-too-large "REQUEST_TOO_LARGE", :authorizer-failure "AUTHORIZER_FAILURE", :throttled "THROTTLED", "QUOTA_EXCEEDED" "QUOTA_EXCEEDED", "BAD_REQUEST_PARAMETERS" "BAD_REQUEST_PARAMETERS", "MISSING_AUTHENTICATION_TOKEN" "MISSING_AUTHENTICATION_TOKEN", :missing-authentication-token "MISSING_AUTHENTICATION_TOKEN", "BAD_REQUEST_BODY" "BAD_REQUEST_BODY", :resource-not-found "RESOURCE_NOT_FOUND", :access-denied "ACCESS_DENIED", "THROTTLED" "THROTTLED"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-client-certificate (clojure.spec.alpha/coll-of :portkey.aws.apigateway/client-certificate :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-sdk-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-sdk-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-sdk-request/sdk-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-sdk-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-sdk-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-sdk-request/restApiId :portkey.aws.apigateway.get-sdk-request/stageName :portkey.aws.apigateway.get-sdk-request/sdkType] :opt-un [:portkey.aws.apigateway.get-sdk-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/bad-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.bad-request-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-stage-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-stage-request/restApiId :portkey.aws.apigateway.update-stage-request/stageName] :opt-un [:portkey.aws.apigateway.update-stage-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-method-response-request/restApiId :portkey.aws.apigateway.get-method-response-request/resourceId :portkey.aws.apigateway.get-method-response-request/httpMethod :portkey.aws.apigateway.get-method-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-response/client-status (clojure.spec.alpha/and :portkey.aws.apigateway/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-response/log (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-response/latency (clojure.spec.alpha/and :portkey.aws.apigateway/long))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-response/principal-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-response/policy (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-response/authorization (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-list))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-response/claims (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/test-invoke-authorizer-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.test-invoke-authorizer-response/clientStatus :portkey.aws.apigateway.test-invoke-authorizer-response/log :portkey.aws.apigateway.test-invoke-authorizer-response/latency :portkey.aws.apigateway.test-invoke-authorizer-response/principalId :portkey.aws.apigateway.test-invoke-authorizer-response/policy :portkey.aws.apigateway.test-invoke-authorizer-response/authorization :portkey.aws.apigateway.test-invoke-authorizer-response/claims]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-stage-request/restApiId :portkey.aws.apigateway.delete-stage-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/logging-level (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/metrics-enabled (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/caching-enabled (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/throttling-rate-limit (clojure.spec.alpha/and :portkey.aws.apigateway/double))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/cache-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/unauthorized-cache-control-header-strategy (clojure.spec.alpha/and :portkey.aws.apigateway/unauthorized-cache-control-header-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/cache-data-encrypted (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/throttling-burst-limit (clojure.spec.alpha/and :portkey.aws.apigateway/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/require-authorization-for-cache-control (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/data-trace-enabled (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/method-setting (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.method-setting/loggingLevel :portkey.aws.apigateway.method-setting/metricsEnabled :portkey.aws.apigateway.method-setting/cachingEnabled :portkey.aws.apigateway.method-setting/throttlingRateLimit :portkey.aws.apigateway.method-setting/cacheTtlInSeconds :portkey.aws.apigateway.method-setting/unauthorizedCacheControlHeaderStrategy :portkey.aws.apigateway.method-setting/cacheDataEncrypted :portkey.aws.apigateway.method-setting/throttlingBurstLimit :portkey.aws.apigateway.method-setting/requireAuthorizationForCacheControl :portkey.aws.apigateway.method-setting/dataTraceEnabled]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-documentation-part-request/restApiId :portkey.aws.apigateway.delete-documentation-part-request/documentationPartId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/status-code (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44500__auto__] (clojure.core/re-matches #"[1-5]\d\d" s__44500__auto__))))

(clojure.spec.alpha/def :portkey.aws.apigateway.api-stage/api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-stage/stage (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/api-stage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.api-stage/apiId :portkey.aws.apigateway.api-stage/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-integration-response-request/restApiId :portkey.aws.apigateway.get-integration-response-request/resourceId :portkey.aws.apigateway.get-integration-response-request/httpMethod :portkey.aws.apigateway.get-integration-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-method (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/method))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-header-values (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/string))

(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part/location (clojure.spec.alpha/and :portkey.aws.apigateway/documentation-part-location))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part/properties (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-part (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.documentation-part/id :portkey.aws.apigateway.documentation-part/location :portkey.aws.apigateway.documentation-part/properties]))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-string-to-list (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/list-of-string))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-resource-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-resource-request/restApiId :portkey.aws.apigateway.get-resource-request/resourceId] :opt-un [:portkey.aws.apigateway.get-resource-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-request/start-date (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-request/end-date (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-usage-request/usagePlanId :portkey.aws.apigateway.get-usage-request/startDate :portkey.aws.apigateway.get-usage-request/endDate] :opt-un [:portkey.aws.apigateway.get-usage-request/keyId :portkey.aws.apigateway.get-usage-request/position :portkey.aws.apigateway.get-usage-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.method-snapshot/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-snapshot/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/method-snapshot (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.method-snapshot/authorizationType :portkey.aws.apigateway.method-snapshot/apiKeyRequired]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-base-path-mapping-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-base-path-mapping-request/domainName :portkey.aws.apigateway.update-base-path-mapping-request/basePath] :opt-un [:portkey.aws.apigateway.update-base-path-mapping-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-model (clojure.spec.alpha/coll-of :portkey.aws.apigateway/model :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-sdk-types-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-sdk-types-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-sdk-types-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.get-sdk-types-request/position :portkey.aws.apigateway.get-sdk-types-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.import-documentation-parts-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.import-documentation-parts-request/mode (clojure.spec.alpha/and :portkey.aws.apigateway/put-mode))
(clojure.spec.alpha/def :portkey.aws.apigateway.import-documentation-parts-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.import-documentation-parts-request/body (clojure.spec.alpha/and :portkey.aws.apigateway/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway/import-documentation-parts-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.import-documentation-parts-request/restApiId :portkey.aws.apigateway.import-documentation-parts-request/body] :opt-un [:portkey.aws.apigateway.import-documentation-parts-request/mode :portkey.aws.apigateway.import-documentation-parts-request/failOnWarnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.generate-client-certificate-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/generate-client-certificate-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.generate-client-certificate-request/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.rest-apis/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.rest-apis/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-rest-api))
(clojure.spec.alpha/def :portkey.aws.apigateway/rest-apis (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.rest-apis/position :portkey.aws.apigateway.rest-apis/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-sdk-configuration-property (clojure.spec.alpha/coll-of :portkey.aws.apigateway/sdk-configuration-property :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-client-certificate-request/clientCertificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.base-path-mappings/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.base-path-mappings/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-base-path-mapping))
(clojure.spec.alpha/def :portkey.aws.apigateway/base-path-mappings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.base-path-mappings/position :portkey.aws.apigateway.base-path-mappings/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-deployment-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-deployment-request/restApiId :portkey.aws.apigateway.update-deployment-request/deploymentId] :opt-un [:portkey.aws.apigateway.update-deployment-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-versions/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-versions/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-documentation-version))
(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-versions (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.documentation-versions/position :portkey.aws.apigateway.documentation-versions/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-string (clojure.spec.alpha/coll-of :portkey.aws.apigateway/string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/uri (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/integration-http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/request-templates (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/cache-namespace (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/passthrough-behavior (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/type (clojure.spec.alpha/and :portkey.aws.apigateway/integration-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/cache-key-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/credentials (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/put-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.put-integration-request/restApiId :portkey.aws.apigateway.put-integration-request/resourceId :portkey.aws.apigateway.put-integration-request/httpMethod :portkey.aws.apigateway.put-integration-request/type] :opt-un [:portkey.aws.apigateway.put-integration-request/uri :portkey.aws.apigateway.put-integration-request/integrationHttpMethod :portkey.aws.apigateway.put-integration-request/requestTemplates :portkey.aws.apigateway.put-integration-request/requestParameters :portkey.aws.apigateway.put-integration-request/cacheNamespace :portkey.aws.apigateway.put-integration-request/passthroughBehavior :portkey.aws.apigateway.put-integration-request/contentHandling :portkey.aws.apigateway.put-integration-request/cacheKeyParameters :portkey.aws.apigateway.put-integration-request/credentials]))

(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-part-type (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {:response "RESPONSE", "PATH_PARAMETER" "PATH_PARAMETER", :api "API", :response-header "RESPONSE_HEADER", :method "METHOD", "API" "API", "REQUEST_HEADER" "REQUEST_HEADER", :path-parameter "PATH_PARAMETER", "METHOD" "METHOD", :request-body "REQUEST_BODY", :resource "RESOURCE", :request-header "REQUEST_HEADER", "RESOURCE" "RESOURCE", :response-body "RESPONSE_BODY", :query-parameter "QUERY_PARAMETER", "RESPONSE_HEADER" "RESPONSE_HEADER", :authorizer "AUTHORIZER", "REQUEST_BODY" "REQUEST_BODY", "QUERY_PARAMETER" "QUERY_PARAMETER", "AUTHORIZER" "AUTHORIZER", "MODEL" "MODEL", "RESPONSE" "RESPONSE", "RESPONSE_BODY" "RESPONSE_BODY", :model "MODEL"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-usage-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-usage-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-usage-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-usage-request/usagePlanId :portkey.aws.apigateway.update-usage-request/keyId] :opt-un [:portkey.aws.apigateway.update-usage-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-api-key-request/apiKey] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-documentation-part-request/restApiId :portkey.aws.apigateway.get-documentation-part-request/documentationPartId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.patch-operation/op (clojure.spec.alpha/and :portkey.aws.apigateway/op))
(clojure.spec.alpha/def :portkey.aws.apigateway.patch-operation/path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.patch-operation/value (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.patch-operation/from (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/patch-operation (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.patch-operation/op :portkey.aws.apigateway.patch-operation/path :portkey.aws.apigateway.patch-operation/value :portkey.aws.apigateway.patch-operation/from]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-base-path-mappings-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-base-path-mappings-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-base-path-mappings-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-base-path-mappings-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-base-path-mappings-request/domainName] :opt-un [:portkey.aws.apigateway.get-base-path-mappings-request/position :portkey.aws.apigateway.get-base-path-mappings-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-rest-api-request/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-rest-api-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-rest-api-request/version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-rest-api-request/clone-from (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-rest-api-request/binary-media-types (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-rest-api-request/name] :opt-un [:portkey.aws.apigateway.create-rest-api-request/description :portkey.aws.apigateway.create-rest-api-request/version :portkey.aws.apigateway.create-rest-api-request/cloneFrom :portkey.aws.apigateway.create-rest-api-request/binaryMediaTypes]))

(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/selection-pattern (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway/put-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.put-integration-response-request/restApiId :portkey.aws.apigateway.put-integration-response-request/resourceId :portkey.aws.apigateway.put-integration-response-request/httpMethod :portkey.aws.apigateway.put-integration-response-request/statusCode] :opt-un [:portkey.aws.apigateway.put-integration-response-request/selectionPattern :portkey.aws.apigateway.put-integration-response-request/responseParameters :portkey.aws.apigateway.put-integration-response-request/responseTemplates :portkey.aws.apigateway.put-integration-response-request/contentHandling]))

(clojure.spec.alpha/def :portkey.aws.apigateway.stages/item (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway/stages (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.stages/item]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-request-validator (clojure.spec.alpha/coll-of :portkey.aws.apigateway/request-validator :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-gateway-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-gateway-response-request/restApiId :portkey.aws.apigateway.update-gateway-response-request/responseType] :opt-un [:portkey.aws.apigateway.update-gateway-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-authorizer-request/restApiId :portkey.aws.apigateway.get-authorizer-request/authorizerId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-rest-api (clojure.spec.alpha/coll-of :portkey.aws.apigateway/rest-api :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-usage-plan-key (clojure.spec.alpha/coll-of :portkey.aws.apigateway/usage-plan-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.template/value (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/template (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.template/value]))

(clojure.spec.alpha/def :portkey.aws.apigateway.limit-exceeded-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.limit-exceeded-exception/retryAfterSeconds :portkey.aws.apigateway.limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-export-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-export-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-export-request/export-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-export-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-export-request/accepts (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-export-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-export-request/restApiId :portkey.aws.apigateway.get-export-request/stageName :portkey.aws.apigateway.get-export-request/exportType] :opt-un [:portkey.aws.apigateway.get-export-request/parameters :portkey.aws.apigateway.get-export-request/accepts]))

(clojure.spec.alpha/def :portkey.aws.apigateway/nullable-boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-client-certificate-request/clientCertificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.method-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-response/response-models (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/method-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.method-response/statusCode :portkey.aws.apigateway.method-response/responseParameters :portkey.aws.apigateway.method-response/responseModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-deployment (clojure.spec.alpha/coll-of :portkey.aws.apigateway/deployment :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-model-request/flatten (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-model-request/restApiId :portkey.aws.apigateway.get-model-request/modelName] :opt-un [:portkey.aws.apigateway.get-model-request/flatten]))

(clojure.spec.alpha/def :portkey.aws.apigateway.request-validator/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.request-validator/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.request-validator/validate-request-body (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.request-validator/validate-request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/request-validator (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.request-validator/id :portkey.aws.apigateway.request-validator/name :portkey.aws.apigateway.request-validator/validateRequestBody :portkey.aws.apigateway.request-validator/validateRequestParameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-documentation-version-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-documentation-version-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-documentation-version-request/restApiId :portkey.aws.apigateway.create-documentation-version-request/documentationVersion] :opt-un [:portkey.aws.apigateway.create-documentation-version-request/stageName :portkey.aws.apigateway.create-documentation-version-request/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-request-validators-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-request-validators-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-request-validators-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-request-validators-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-request-validators-request/restApiId] :opt-un [:portkey.aws.apigateway.get-request-validators-request/position :portkey.aws.apigateway.get-request-validators-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-request/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-request/api-stages (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-api-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-request/throttle (clojure.spec.alpha/and :portkey.aws.apigateway/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-request/quota (clojure.spec.alpha/and :portkey.aws.apigateway/quota-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-usage-plan-request/name] :opt-un [:portkey.aws.apigateway.create-usage-plan-request/description :portkey.aws.apigateway.create-usage-plan-request/apiStages :portkey.aws.apigateway.create-usage-plan-request/throttle :portkey.aws.apigateway.create-usage-plan-request/quota]))

(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-type/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-type/friendly-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-type/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-type/configuration-properties (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-sdk-configuration-property))
(clojure.spec.alpha/def :portkey.aws.apigateway/sdk-type (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.sdk-type/id :portkey.aws.apigateway.sdk-type/friendlyName :portkey.aws.apigateway.sdk-type/description :portkey.aws.apigateway.sdk-type/configurationProperties]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.get-usage-plan-key-request/keyId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/cache-cluster-status (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"DELETE_IN_PROGRESS" "DELETE_IN_PROGRESS", "AVAILABLE" "AVAILABLE", :flush-in-progress "FLUSH_IN_PROGRESS", "CREATE_IN_PROGRESS" "CREATE_IN_PROGRESS", :delete-in-progress "DELETE_IN_PROGRESS", :create-in-progress "CREATE_IN_PROGRESS", "NOT_AVAILABLE" "NOT_AVAILABLE", "FLUSH_IN_PROGRESS" "FLUSH_IN_PROGRESS", :not-available "NOT_AVAILABLE", :available "AVAILABLE"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.service-unavailable-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.service-unavailable-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/service-unavailable-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.service-unavailable-exception/retryAfterSeconds :portkey.aws.apigateway.service-unavailable-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.client-certificates/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.client-certificates/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-client-certificate))
(clojure.spec.alpha/def :portkey.aws.apigateway/client-certificates (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.client-certificates/position :portkey.aws.apigateway.client-certificates/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.put-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-gateway-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-gateway-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-gateway-response-request/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/put-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.put-gateway-response-request/restApiId :portkey.aws.apigateway.put-gateway-response-request/responseType] :opt-un [:portkey.aws.apigateway.put-gateway-response-request/statusCode :portkey.aws.apigateway.put-gateway-response-request/responseParameters :portkey.aws.apigateway.put-gateway-response-request/responseTemplates]))

(clojure.spec.alpha/def :portkey.aws.apigateway.flush-stage-cache-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.flush-stage-cache-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/flush-stage-cache-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.flush-stage-cache-request/restApiId :portkey.aws.apigateway.flush-stage-cache-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-resource-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-resource-request/restApiId :portkey.aws.apigateway.update-resource-request/resourceId] :opt-un [:portkey.aws.apigateway.update-resource-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-gateway-response (clojure.spec.alpha/coll-of :portkey.aws.apigateway/gateway-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-string-to-boolean (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/nullable-boolean))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-method-settings (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/method-setting))

(clojure.spec.alpha/def :portkey.aws.apigateway/quota-period-type (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"DAY" "DAY", :day "DAY", "WEEK" "WEEK", :week "WEEK", "MONTH" "MONTH", :month "MONTH"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway/put-mode (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"merge" "merge", :merge "merge", "overwrite" "overwrite", :overwrite "overwrite"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.request-validators/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.request-validators/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-request-validator))
(clojure.spec.alpha/def :portkey.aws.apigateway/request-validators (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.request-validators/position :portkey.aws.apigateway.request-validators/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-method-response-request/restApiId :portkey.aws.apigateway.delete-method-response-request/resourceId :portkey.aws.apigateway.delete-method-response-request/httpMethod :portkey.aws.apigateway.delete-method-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-method-request/restApiId :portkey.aws.apigateway.get-method-request/resourceId :portkey.aws.apigateway.get-method-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan-keys/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan-keys/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-usage-plan-key))
(clojure.spec.alpha/def :portkey.aws.apigateway/usage-plan-keys (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.usage-plan-keys/position :portkey.aws.apigateway.usage-plan-keys/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan/api-stages (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-api-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan/throttle (clojure.spec.alpha/and :portkey.aws.apigateway/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan/quota (clojure.spec.alpha/and :portkey.aws.apigateway/quota-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan/product-code (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/usage-plan (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.usage-plan/id :portkey.aws.apigateway.usage-plan/name :portkey.aws.apigateway.usage-plan/description :portkey.aws.apigateway.usage-plan/apiStages :portkey.aws.apigateway.usage-plan/throttle :portkey.aws.apigateway.usage-plan/quota :portkey.aws.apigateway.usage-plan/productCode]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-long (clojure.spec.alpha/coll-of :portkey.aws.apigateway/long :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-model-request/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-model-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-model-request/schema (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-model-request/content-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-model-request/restApiId :portkey.aws.apigateway.create-model-request/name :portkey.aws.apigateway.create-model-request/contentType] :opt-un [:portkey.aws.apigateway.create-model-request/description :portkey.aws.apigateway.create-model-request/schema]))

(clojure.spec.alpha/def :portkey.aws.apigateway.too-many-requests-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/too-many-requests-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.too-many-requests-exception/retryAfterSeconds :portkey.aws.apigateway.too-many-requests-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-rest-api-request/restApiId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-account-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-account-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.update-account-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-rest-apis-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-rest-apis-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-rest-apis-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.get-rest-apis-request/position :portkey.aws.apigateway.get-rest-apis-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-model-request/restApiId :portkey.aws.apigateway.delete-model-request/modelName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.throttle-settings/burst-limit (clojure.spec.alpha/and :portkey.aws.apigateway/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.throttle-settings/rate-limit (clojure.spec.alpha/and :portkey.aws.apigateway/double))
(clojure.spec.alpha/def :portkey.aws.apigateway/throttle-settings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.throttle-settings/burstLimit :portkey.aws.apigateway.throttle-settings/rateLimit]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-sdk-type (clojure.spec.alpha/coll-of :portkey.aws.apigateway/sdk-type :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway/cache-cluster-size (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"118" "118", "237" "237", "1.6" "1.6", :118 "118", "0.5" "0.5", :28.4 "28.4", :13.5 "13.5", "28.4" "28.4", "58.2" "58.2", :1.6 "1.6", "6.1" "6.1", :58.2 "58.2", :6.1 "6.1", :237 "237", :0.5 "0.5", "13.5" "13.5"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.gateway-response/response-type (clojure.spec.alpha/and :portkey.aws.apigateway/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.gateway-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.gateway-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.gateway-response/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.gateway-response/default-response (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/gateway-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.gateway-response/responseType :portkey.aws.apigateway.gateway-response/statusCode :portkey.aws.apigateway.gateway-response/responseParameters :portkey.aws.apigateway.gateway-response/responseTemplates :portkey.aws.apigateway.gateway-response/defaultResponse]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-model-template-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-model-template-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-model-template-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-model-template-request/restApiId :portkey.aws.apigateway.get-model-template-request/modelName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-integration-response-request/restApiId :portkey.aws.apigateway.delete-integration-response-request/resourceId :portkey.aws.apigateway.delete-integration-response-request/httpMethod :portkey.aws.apigateway.delete-integration-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/integration-type (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {:aws "AWS", "AWS" "AWS", :aws-proxy "AWS_PROXY", "MOCK" "MOCK", "AWS_PROXY" "AWS_PROXY", "HTTP_PROXY" "HTTP_PROXY", :http "HTTP", :http-proxy "HTTP_PROXY", "HTTP" "HTTP", :mock "MOCK"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.base-path-mapping/base-path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.base-path-mapping/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.base-path-mapping/stage (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/base-path-mapping (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.base-path-mapping/basePath :portkey.aws.apigateway.base-path-mapping/restApiId :portkey.aws.apigateway.base-path-mapping/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-request-validator-request/restApiId :portkey.aws.apigateway.get-request-validator-request/requestValidatorId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-resource (clojure.spec.alpha/coll-of :portkey.aws.apigateway/resource :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway/op (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {:remove "remove", :copy "copy", "copy" "copy", :replace "replace", :move "move", "replace" "replace", "remove" "remove", "move" "move", "add" "add", :add "add", :test "test", "test" "test"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part-ids/ids (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part-ids/warnings (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-part-ids (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.documentation-part-ids/ids :portkey.aws.apigateway.documentation-part-ids/warnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-authorizers-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-authorizers-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-authorizers-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-authorizers-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-authorizers-request/restApiId] :opt-un [:portkey.aws.apigateway.get-authorizers-request/position :portkey.aws.apigateway.get-authorizers-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.model/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.model/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.model/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.model/schema (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.model/content-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/model (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.model/id :portkey.aws.apigateway.model/name :portkey.aws.apigateway.model/description :portkey.aws.apigateway.model/schema :portkey.aws.apigateway.model/contentType]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-domain-name-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-domain-name-request/domainName] :opt-un [:portkey.aws.apigateway.update-domain-name-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.delete-usage-plan-key-request/keyId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-base-path-mapping-request/domainName :portkey.aws.apigateway.get-base-path-mapping-request/basePath] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/authorizer-type (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"TOKEN" "TOKEN", :token "TOKEN", "COGNITO_USER_POOLS" "COGNITO_USER_POOLS", :cognito-user-pools "COGNITO_USER_POOLS"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-method-response-request/restApiId :portkey.aws.apigateway.update-method-response-request/resourceId :portkey.aws.apigateway.update-method-response-request/httpMethod :portkey.aws.apigateway.update-method-response-request/statusCode] :opt-un [:portkey.aws.apigateway.update-method-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-ofarns (clojure.spec.alpha/coll-of :portkey.aws.apigateway/providerarn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-api-stage (clojure.spec.alpha/coll-of :portkey.aws.apigateway/api-stage :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.domain-names/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.domain-names/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-domain-name))
(clojure.spec.alpha/def :portkey.aws.apigateway/domain-names (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.domain-names/position :portkey.aws.apigateway.domain-names/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-integration-response-request/restApiId :portkey.aws.apigateway.update-integration-response-request/resourceId :portkey.aws.apigateway.update-integration-response-request/httpMethod :portkey.aws.apigateway.update-integration-response-request/statusCode] :opt-un [:portkey.aws.apigateway.update-integration-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.conflict-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-response-request/response-models (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/put-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.put-method-response-request/restApiId :portkey.aws.apigateway.put-method-response-request/resourceId :portkey.aws.apigateway.put-method-response-request/httpMethod :portkey.aws.apigateway.put-method-response-request/statusCode] :opt-un [:portkey.aws.apigateway.put-method-response-request/responseParameters :portkey.aws.apigateway.put-method-response-request/responseModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-domain-name-request/domainName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.account/cloudwatch-role-arn (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.account/throttle-settings (clojure.spec.alpha/and :portkey.aws.apigateway/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.account/features (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.account/api-key-version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/account (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.account/cloudwatchRoleArn :portkey.aws.apigateway.account/throttleSettings :portkey.aws.apigateway.account/features :portkey.aws.apigateway.account/apiKeyVersion]))

(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-response/status (clojure.spec.alpha/and :portkey.aws.apigateway/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-response/body (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-response/headers (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-response/log (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-response/latency (clojure.spec.alpha/and :portkey.aws.apigateway/long))
(clojure.spec.alpha/def :portkey.aws.apigateway/test-invoke-method-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.test-invoke-method-response/status :portkey.aws.apigateway.test-invoke-method-response/body :portkey.aws.apigateway.test-invoke-method-response/headers :portkey.aws.apigateway.test-invoke-method-response/log :portkey.aws.apigateway.test-invoke-method-response/latency]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-usage-plan-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-usage-plan-request/usagePlanId] :opt-un [:portkey.aws.apigateway.update-usage-plan-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-gateway-responses-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-gateway-responses-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-gateway-responses-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-gateway-responses-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-gateway-responses-request/restApiId] :opt-un [:portkey.aws.apigateway.get-gateway-responses-request/position :portkey.aws.apigateway.get-gateway-responses-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.method/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/operation-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/request-models (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/method-integration (clojure.spec.alpha/and :portkey.aws.apigateway/integration))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/method-responses (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-method-response))
(clojure.spec.alpha/def :portkey.aws.apigateway/method (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.method/authorizerId :portkey.aws.apigateway.method/requestValidatorId :portkey.aws.apigateway.method/authorizationType :portkey.aws.apigateway.method/httpMethod :portkey.aws.apigateway.method/operationName :portkey.aws.apigateway.method/requestParameters :portkey.aws.apigateway.method/apiKeyRequired :portkey.aws.apigateway.method/requestModels :portkey.aws.apigateway.method/methodIntegration :portkey.aws.apigateway.method/methodResponses]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-stage (clojure.spec.alpha/coll-of :portkey.aws.apigateway/stage :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-deployment-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-deployment-request/stage-description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-deployment-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-deployment-request/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-deployment-request/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-deployment-request/variables (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-deployment-request/restApiId] :opt-un [:portkey.aws.apigateway.create-deployment-request/stageName :portkey.aws.apigateway.create-deployment-request/stageDescription :portkey.aws.apigateway.create-deployment-request/description :portkey.aws.apigateway.create-deployment-request/cacheClusterEnabled :portkey.aws.apigateway.create-deployment-request/cacheClusterSize :portkey.aws.apigateway.create-deployment-request/variables]))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-method-response (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/method-response))

(clojure.spec.alpha/def :portkey.aws.apigateway.resources/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.resources/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-resource))
(clojure.spec.alpha/def :portkey.aws.apigateway/resources (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.resources/position :portkey.aws.apigateway.resources/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-usage (clojure.spec.alpha/coll-of :portkey.aws.apigateway/list-of-long :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-request-validator-request/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-request-validator-request/validate-request-body (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-request-validator-request/validate-request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-request-validator-request/restApiId] :opt-un [:portkey.aws.apigateway.create-request-validator-request/name :portkey.aws.apigateway.create-request-validator-request/validateRequestBody :portkey.aws.apigateway.create-request-validator-request/validateRequestParameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-documentation-version-request/restApiId :portkey.aws.apigateway.get-documentation-version-request/documentationVersion] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.stage-key/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage-key/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/stage-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.stage-key/restApiId :portkey.aws.apigateway.stage-key/stageName]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-api-keys-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-api-keys-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-api-keys-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-api-keys-request/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-api-keys-request/include-values (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-api-keys-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.get-api-keys-request/position :portkey.aws.apigateway.get-api-keys-request/limit :portkey.aws.apigateway.get-api-keys-request/nameQuery :portkey.aws.apigateway.get-api-keys-request/customerId :portkey.aws.apigateway.get-api-keys-request/includeValues]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plan-keys-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plan-keys-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plan-keys-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plan-keys-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-usage-plan-keys-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-usage-plan-keys-request/usagePlanId] :opt-un [:portkey.aws.apigateway.get-usage-plan-keys-request/position :portkey.aws.apigateway.get-usage-plan-keys-request/limit :portkey.aws.apigateway.get-usage-plan-keys-request/nameQuery]))

(clojure.spec.alpha/def :portkey.aws.apigateway.not-found-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-client-certificate-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-client-certificate-request/clientCertificateId] :opt-un [:portkey.aws.apigateway.update-client-certificate-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-api-key-request/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-api-key-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-api-key-request/enabled (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-api-key-request/generate-distinct-id (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-api-key-request/value (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-api-key-request/stage-keys (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-stage-keys))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-api-key-request/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-api-key-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.create-api-key-request/name :portkey.aws.apigateway.create-api-key-request/description :portkey.aws.apigateway.create-api-key-request/enabled :portkey.aws.apigateway.create-api-key-request/generateDistinctId :portkey.aws.apigateway.create-api-key-request/value :portkey.aws.apigateway.create-api-key-request/stageKeys :portkey.aws.apigateway.create-api-key-request/customerId]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-deployment-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-deployment-request/restApiId :portkey.aws.apigateway.get-deployment-request/deploymentId] :opt-un [:portkey.aws.apigateway.get-deployment-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-types/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-types/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-sdk-type))
(clojure.spec.alpha/def :portkey.aws.apigateway/sdk-types (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.sdk-types/position :portkey.aws.apigateway.sdk-types/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-documentation-version-request/restApiId :portkey.aws.apigateway.delete-documentation-version-request/documentationVersion] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-client-certificates-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-client-certificates-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-client-certificates-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.get-client-certificates-request/position :portkey.aws.apigateway.get-client-certificates-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway/integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.apigateway/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-base-path-mapping-request/domainName :portkey.aws.apigateway.delete-base-path-mapping-request/basePath] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-documentation-version (clojure.spec.alpha/coll-of :portkey.aws.apigateway/documentation-version :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-model-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-model-request/restApiId :portkey.aws.apigateway.update-model-request/modelName] :opt-un [:portkey.aws.apigateway.update-model-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.quota-settings/limit (clojure.spec.alpha/and :portkey.aws.apigateway/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.quota-settings/offset (clojure.spec.alpha/and :portkey.aws.apigateway/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.quota-settings/period (clojure.spec.alpha/and :portkey.aws.apigateway/quota-period-type))
(clojure.spec.alpha/def :portkey.aws.apigateway/quota-settings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.quota-settings/limit :portkey.aws.apigateway.quota-settings/offset :portkey.aws.apigateway.quota-settings/period]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-documentation-version-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-documentation-version-request/restApiId :portkey.aws.apigateway.update-documentation-version-request/documentationVersion] :opt-un [:portkey.aws.apigateway.update-documentation-version-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-stage-request/restApiId :portkey.aws.apigateway.get-stage-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/providerarn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigateway/path-to-map-of-method-snapshot (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/map-of-method-snapshot))

(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan-key/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan-key/type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan-key/value (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan-key/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/usage-plan-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.usage-plan-key/id :portkey.aws.apigateway.usage-plan-key/type :portkey.aws.apigateway.usage-plan-key/value :portkey.aws.apigateway.usage-plan-key/name]))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-string-to-string (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/string))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/authorizer-credentials (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/type (clojure.spec.alpha/and :portkey.aws.apigateway/authorizer-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/auth-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/identity-source (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/providerarns (clojure.spec.alpha/and :portkey.aws.apigateway/list-ofarns))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-authorizer-request/restApiId :portkey.aws.apigateway.create-authorizer-request/name :portkey.aws.apigateway.create-authorizer-request/type :portkey.aws.apigateway.create-authorizer-request/identitySource] :opt-un [:portkey.aws.apigateway.create-authorizer-request/authorizerCredentials :portkey.aws.apigateway.create-authorizer-request/identityValidationExpression :portkey.aws.apigateway.create-authorizer-request/authorizerResultTtlInSeconds :portkey.aws.apigateway.create-authorizer-request/authorizerUri :portkey.aws.apigateway.create-authorizer-request/authType :portkey.aws.apigateway.create-authorizer-request/providerARNs]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-gateway-response-request/restApiId :portkey.aws.apigateway.delete-gateway-response-request/responseType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-gateway-response-request/restApiId :portkey.aws.apigateway.get-gateway-response-request/responseType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-domain-names-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-domain-names-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-domain-names-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.get-domain-names-request/position :portkey.aws.apigateway.get-domain-names-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part-location/type (clojure.spec.alpha/and :portkey.aws.apigateway/documentation-part-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part-location/path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part-location/method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part-location/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/documentation-part-location-status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part-location/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-part-location (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.documentation-part-location/type] :opt-un [:portkey.aws.apigateway.documentation-part-location/path :portkey.aws.apigateway.documentation-part-location/method :portkey.aws.apigateway.documentation-part-location/statusCode :portkey.aws.apigateway.documentation-part-location/name]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-base-path-mapping-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-base-path-mapping-request/stage (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-base-path-mapping-request/domainName :portkey.aws.apigateway.create-base-path-mapping-request/restApiId] :opt-un [:portkey.aws.apigateway.create-base-path-mapping-request/basePath :portkey.aws.apigateway.create-base-path-mapping-request/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.client-certificate/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.client-certificate/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.client-certificate/pem-encoded-certificate (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.client-certificate/created-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.client-certificate/expiration-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway/client-certificate (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.client-certificate/clientCertificateId :portkey.aws.apigateway.client-certificate/description :portkey.aws.apigateway.client-certificate/pemEncodedCertificate :portkey.aws.apigateway.client-certificate/createdDate :portkey.aws.apigateway.client-certificate/expirationDate]))

(clojure.spec.alpha/def :portkey.aws.apigateway.api-keys/warnings (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-keys/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-keys/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-api-key))
(clojure.spec.alpha/def :portkey.aws.apigateway/api-keys (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.api-keys/warnings :portkey.aws.apigateway.api-keys/position :portkey.aws.apigateway.api-keys/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plans/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plans/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-usage-plan))
(clojure.spec.alpha/def :portkey.aws.apigateway/usage-plans (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.usage-plans/position :portkey.aws.apigateway.usage-plans/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-key-usages (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/list-of-usage))

(clojure.spec.alpha/def :portkey.aws.apigateway/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-authorizer (clojure.spec.alpha/coll-of :portkey.aws.apigateway/authorizer :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/variables (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-stage-request/restApiId :portkey.aws.apigateway.create-stage-request/stageName :portkey.aws.apigateway.create-stage-request/deploymentId] :opt-un [:portkey.aws.apigateway.create-stage-request/description :portkey.aws.apigateway.create-stage-request/cacheClusterEnabled :portkey.aws.apigateway.create-stage-request/cacheClusterSize :portkey.aws.apigateway.create-stage-request/variables :portkey.aws.apigateway.create-stage-request/documentationVersion]))

(clojure.spec.alpha/def :portkey.aws.apigateway/timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.apigateway.authorizers/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizers/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-authorizer))
(clojure.spec.alpha/def :portkey.aws.apigateway/authorizers (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.authorizers/position :portkey.aws.apigateway.authorizers/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-models-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-models-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-models-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-models-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-models-request/restApiId] :opt-un [:portkey.aws.apigateway.get-models-request/position :portkey.aws.apigateway.get-models-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-api-key-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-api-key-request/apiKey] :opt-un [:portkey.aws.apigateway.update-api-key-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.usage/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage/start-date (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage/end-date (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage/items (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-key-usages))
(clojure.spec.alpha/def :portkey.aws.apigateway/usage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.usage/usagePlanId :portkey.aws.apigateway.usage/startDate :portkey.aws.apigateway.usage/endDate :portkey.aws.apigateway.usage/position :portkey.aws.apigateway.usage/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-rest-api-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-rest-api-request/restApiId] :opt-un [:portkey.aws.apigateway.update-rest-api-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway/api-keys-format (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"csv" "csv", :csv "csv"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-versions-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-versions-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-versions-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-documentation-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-documentation-versions-request/restApiId] :opt-un [:portkey.aws.apigateway.get-documentation-versions-request/position :portkey.aws.apigateway.get-documentation-versions-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-deployments-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-deployments-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-deployments-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-deployments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-deployments-request/restApiId] :opt-un [:portkey.aws.apigateway.get-deployments-request/position :portkey.aws.apigateway.get-deployments-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway/get-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-usage-plan (clojure.spec.alpha/coll-of :portkey.aws.apigateway/usage-plan :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.import-api-keys-request/body (clojure.spec.alpha/and :portkey.aws.apigateway/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.import-api-keys-request/format (clojure.spec.alpha/and :portkey.aws.apigateway/api-keys-format))
(clojure.spec.alpha/def :portkey.aws.apigateway.import-api-keys-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/import-api-keys-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.import-api-keys-request/body :portkey.aws.apigateway.import-api-keys-request/format] :opt-un [:portkey.aws.apigateway.import-api-keys-request/failOnWarnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.resource/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.resource/parent-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.resource/path-part (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.resource/path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.resource/resource-methods (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-method))
(clojure.spec.alpha/def :portkey.aws.apigateway/resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.resource/id :portkey.aws.apigateway.resource/parentId :portkey.aws.apigateway.resource/pathPart :portkey.aws.apigateway.resource/path :portkey.aws.apigateway.resource/resourceMethods]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-key-request/key-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.create-usage-plan-key-request/keyId :portkey.aws.apigateway.create-usage-plan-key-request/keyType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-patch-operation (clojure.spec.alpha/coll-of :portkey.aws.apigateway/patch-operation :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-configuration-property/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-configuration-property/friendly-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-configuration-property/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-configuration-property/required (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-configuration-property/default-value (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/sdk-configuration-property (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.sdk-configuration-property/name :portkey.aws.apigateway.sdk-configuration-property/friendlyName :portkey.aws.apigateway.sdk-configuration-property/description :portkey.aws.apigateway.sdk-configuration-property/required :portkey.aws.apigateway.sdk-configuration-property/defaultValue]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-integration-request/restApiId :portkey.aws.apigateway.delete-integration-request/resourceId :portkey.aws.apigateway.delete-integration-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-response/content-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-response/content-disposition (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-response/body (clojure.spec.alpha/and :portkey.aws.apigateway/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway/sdk-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.sdk-response/contentType :portkey.aws.apigateway.sdk-response/contentDisposition :portkey.aws.apigateway.sdk-response/body]))

(clojure.spec.alpha/def :portkey.aws.apigateway.import-rest-api-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.import-rest-api-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.import-rest-api-request/body (clojure.spec.alpha/and :portkey.aws.apigateway/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway/import-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.import-rest-api-request/body] :opt-un [:portkey.aws.apigateway.import-rest-api-request/failOnWarnings :portkey.aws.apigateway.import-rest-api-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-parts-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-parts-request/type (clojure.spec.alpha/and :portkey.aws.apigateway/documentation-part-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-parts-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-parts-request/path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-parts-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-parts-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-documentation-parts-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-documentation-parts-request/restApiId] :opt-un [:portkey.aws.apigateway.get-documentation-parts-request/type :portkey.aws.apigateway.get-documentation-parts-request/nameQuery :portkey.aws.apigateway.get-documentation-parts-request/path :portkey.aws.apigateway.get-documentation-parts-request/position :portkey.aws.apigateway.get-documentation-parts-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/created-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/enabled (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/stage-keys (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/value (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/last-updated-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/api-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.api-key/createdDate :portkey.aws.apigateway.api-key/enabled :portkey.aws.apigateway.api-key/id :portkey.aws.apigateway.api-key/stageKeys :portkey.aws.apigateway.api-key/customerId :portkey.aws.apigateway.api-key/name :portkey.aws.apigateway.api-key/value :portkey.aws.apigateway.api-key/lastUpdatedDate :portkey.aws.apigateway.api-key/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway/nullable-integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-method-request/restApiId :portkey.aws.apigateway.update-method-request/resourceId :portkey.aws.apigateway.update-method-request/httpMethod] :opt-un [:portkey.aws.apigateway.update-method-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.domain-name/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.domain-name/certificate-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.domain-name/certificate-arn (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.domain-name/certificate-upload-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.domain-name/distribution-domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/domain-name (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.domain-name/domainName :portkey.aws.apigateway.domain-name/certificateName :portkey.aws.apigateway.domain-name/certificateArn :portkey.aws.apigateway.domain-name/certificateUploadDate :portkey.aws.apigateway.domain-name/distributionDomainName]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-base-path-mapping (clojure.spec.alpha/coll-of :portkey.aws.apigateway/base-path-mapping :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway/blob (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.awsgen/base64-encode portkey.awsgen/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-integration-request/restApiId :portkey.aws.apigateway.get-integration-request/resourceId :portkey.aws.apigateway.get-integration-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-parts/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-parts/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-documentation-part))
(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-parts (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.documentation-parts/position :portkey.aws.apigateway.documentation-parts/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.export-response/content-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.export-response/content-disposition (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.export-response/body (clojure.spec.alpha/and :portkey.aws.apigateway/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway/export-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.export-response/contentType :portkey.aws.apigateway.export-response/contentDisposition :portkey.aws.apigateway.export-response/body]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-method-request/restApiId :portkey.aws.apigateway.delete-method-request/resourceId :portkey.aws.apigateway.delete-method-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-api-key-request/include-value (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-api-key-request/apiKey] :opt-un [:portkey.aws.apigateway.get-api-key-request/includeValue]))

(clojure.spec.alpha/def :portkey.aws.apigateway.gateway-responses/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.gateway-responses/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-gateway-response))
(clojure.spec.alpha/def :portkey.aws.apigateway/gateway-responses (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.gateway-responses/position :portkey.aws.apigateway.gateway-responses/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-domain-name-request/certificate-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-domain-name-request/certificate-body (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-domain-name-request/certificate-private-key (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-domain-name-request/certificate-chain (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-domain-name-request/certificate-arn (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-domain-name-request/domainName] :opt-un [:portkey.aws.apigateway.create-domain-name-request/certificateName :portkey.aws.apigateway.create-domain-name-request/certificateBody :portkey.aws.apigateway.create-domain-name-request/certificatePrivateKey :portkey.aws.apigateway.create-domain-name-request/certificateChain :portkey.aws.apigateway.create-domain-name-request/certificateArn]))

(clojure.spec.alpha/def :portkey.aws.apigateway.integration/integration-responses (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-integration-response))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/uri (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/request-templates (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/cache-namespace (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/passthrough-behavior (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/type (clojure.spec.alpha/and :portkey.aws.apigateway/integration-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/cache-key-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/credentials (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/integration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.integration/integrationResponses :portkey.aws.apigateway.integration/uri :portkey.aws.apigateway.integration/httpMethod :portkey.aws.apigateway.integration/requestTemplates :portkey.aws.apigateway.integration/requestParameters :portkey.aws.apigateway.integration/cacheNamespace :portkey.aws.apigateway.integration/passthroughBehavior :portkey.aws.apigateway.integration/type :portkey.aws.apigateway.integration/contentHandling :portkey.aws.apigateway.integration/cacheKeyParameters :portkey.aws.apigateway.integration/credentials]))

(clojure.spec.alpha/def :portkey.aws.apigateway.flush-stage-authorizers-cache-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.flush-stage-authorizers-cache-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/flush-stage-authorizers-cache-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.flush-stage-authorizers-cache-request/restApiId :portkey.aws.apigateway.flush-stage-authorizers-cache-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-version/version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-version/created-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-version/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.documentation-version/version :portkey.aws.apigateway.documentation-version/createdDate :portkey.aws.apigateway.documentation-version/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-usage-plan-request/usagePlanId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/unauthorized-cache-control-header-strategy (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"FAIL_WITH_403" "FAIL_WITH_403", :fail-with-403 "FAIL_WITH_403", "SUCCEED_WITH_RESPONSE_HEADER" "SUCCEED_WITH_RESPONSE_HEADER", :succeed-with-response-header "SUCCEED_WITH_RESPONSE_HEADER", "SUCCEED_WITHOUT_RESPONSE_HEADER" "SUCCEED_WITHOUT_RESPONSE_HEADER", :succeed-without-response-header "SUCCEED_WITHOUT_RESPONSE_HEADER"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-deployment-request/restApiId :portkey.aws.apigateway.delete-deployment-request/deploymentId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-api-key (clojure.spec.alpha/coll-of :portkey.aws.apigateway/api-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.integration-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration-response/selection-pattern (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration-response/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration-response/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway/integration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.integration-response/statusCode :portkey.aws.apigateway.integration-response/selectionPattern :portkey.aws.apigateway.integration-response/responseParameters :portkey.aws.apigateway.integration-response/responseTemplates :portkey.aws.apigateway.integration-response/contentHandling]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-domain-name (clojure.spec.alpha/coll-of :portkey.aws.apigateway/domain-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-rest-api-request/restApiId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-integration-request/restApiId :portkey.aws.apigateway.update-integration-request/resourceId :portkey.aws.apigateway.update-integration-request/httpMethod] :opt-un [:portkey.aws.apigateway.update-integration-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/operation-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/request-models (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/put-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.put-method-request/restApiId :portkey.aws.apigateway.put-method-request/resourceId :portkey.aws.apigateway.put-method-request/httpMethod :portkey.aws.apigateway.put-method-request/authorizationType] :opt-un [:portkey.aws.apigateway.put-method-request/authorizerId :portkey.aws.apigateway.put-method-request/requestValidatorId :portkey.aws.apigateway.put-method-request/operationName :portkey.aws.apigateway.put-method-request/requestParameters :portkey.aws.apigateway.put-method-request/apiKeyRequired :portkey.aws.apigateway.put-method-request/requestModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway.models/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.models/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-model))
(clojure.spec.alpha/def :portkey.aws.apigateway/models (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.models/position :portkey.aws.apigateway.models/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-authorizer-request/restApiId :portkey.aws.apigateway.delete-authorizer-request/authorizerId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.stage/cache-cluster-status (clojure.spec.alpha/and :portkey.aws.apigateway/cache-cluster-status))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/created-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/method-settings (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-method-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/last-updated-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/variables (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway/stage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.stage/cacheClusterStatus :portkey.aws.apigateway.stage/createdDate :portkey.aws.apigateway.stage/documentationVersion :portkey.aws.apigateway.stage/methodSettings :portkey.aws.apigateway.stage/deploymentId :portkey.aws.apigateway.stage/clientCertificateId :portkey.aws.apigateway.stage/lastUpdatedDate :portkey.aws.apigateway.stage/variables :portkey.aws.apigateway.stage/cacheClusterEnabled :portkey.aws.apigateway.stage/stageName :portkey.aws.apigateway.stage/description :portkey.aws.apigateway.stage/cacheClusterSize]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-authorizer-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-authorizer-request/restApiId :portkey.aws.apigateway.update-authorizer-request/authorizerId] :opt-un [:portkey.aws.apigateway.update-authorizer-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-stage-keys (clojure.spec.alpha/coll-of :portkey.aws.apigateway/stage-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway/content-handling-strategy (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"CONVERT_TO_BINARY" "CONVERT_TO_BINARY", :convert-to-binary "CONVERT_TO_BINARY", "CONVERT_TO_TEXT" "CONVERT_TO_TEXT", :convert-to-text "CONVERT_TO_TEXT"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-request-validator-request/restApiId :portkey.aws.apigateway.delete-request-validator-request/requestValidatorId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-documentation-part-request/location (clojure.spec.alpha/and :portkey.aws.apigateway/documentation-part-location))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-documentation-part-request/properties (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-documentation-part-request/restApiId :portkey.aws.apigateway.create-documentation-part-request/location :portkey.aws.apigateway.create-documentation-part-request/properties] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-request-validator-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-request-validator-request/restApiId :portkey.aws.apigateway.update-request-validator-request/requestValidatorId] :opt-un [:portkey.aws.apigateway.update-request-validator-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-integration-response (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/integration-response))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plans-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plans-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plans-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-usage-plans-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.get-usage-plans-request/position :portkey.aws.apigateway.get-usage-plans-request/keyId :portkey.aws.apigateway.get-usage-plans-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/authorizer-credentials (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/type (clojure.spec.alpha/and :portkey.aws.apigateway/authorizer-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/auth-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/identity-source (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/providerarns (clojure.spec.alpha/and :portkey.aws.apigateway/list-ofarns))
(clojure.spec.alpha/def :portkey.aws.apigateway/authorizer (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.authorizer/authorizerCredentials :portkey.aws.apigateway.authorizer/identityValidationExpression :portkey.aws.apigateway.authorizer/id :portkey.aws.apigateway.authorizer/name :portkey.aws.apigateway.authorizer/type :portkey.aws.apigateway.authorizer/authorizerResultTtlInSeconds :portkey.aws.apigateway.authorizer/authorizerUri :portkey.aws.apigateway.authorizer/authType :portkey.aws.apigateway.authorizer/identitySource :portkey.aws.apigateway.authorizer/providerARNs]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-documentation-part-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-documentation-part-request/restApiId :portkey.aws.apigateway.update-documentation-part-request/documentationPartId] :opt-un [:portkey.aws.apigateway.update-documentation-part-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.deployments/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.deployments/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-deployment))
(clojure.spec.alpha/def :portkey.aws.apigateway/deployments (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.deployments/position :portkey.aws.apigateway.deployments/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway/boolean clojure.core/boolean?)

(clojure.core/defn flush-stage-cache ([input__47307__auto__] (flush-stage-cache input__47307__auto__ portkey.aws/*http-client*)) ([input49191 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}/cache/data"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/FlushStageCacheRequest input49191)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49190] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49190)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49190 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49190)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49190}))))))))))

(clojure.core/defn get-usage-plan ([input__47307__auto__] (get-usage-plan input__47307__auto__ portkey.aws/*http-client*)) ([input49193 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetUsagePlanRequest input49193)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49192] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49192)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage-plan (:body response49192)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49192 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49192)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49192}))))))))))

(clojure.core/defn update-rest-api ([input__47307__auto__] (update-rest-api input__47307__auto__ portkey.aws/*http-client*)) ([input49195 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateRestApiRequest input49195)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49194] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49194)) (clojure.spec.alpha/unform :portkey.aws.apigateway/rest-api (:body response49194)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49194 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49194)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49194}))))))))))

(clojure.core/defn update-account ([input__47307__auto__] (update-account input__47307__auto__ portkey.aws/*http-client*)) ([input49197 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/account"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateAccountRequest input49197)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49196] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49196)) (clojure.spec.alpha/unform :portkey.aws.apigateway/account (:body response49196)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49196 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49196)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49196}))))))))))

(clojure.core/defn delete-rest-api ([input__47307__auto__] (delete-rest-api input__47307__auto__ portkey.aws/*http-client*)) ([input49199 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteRestApiRequest input49199)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49198] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception}] (if (clojure.core/= 202 (:status response49198)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49198 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49198)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49198}))))))))))

(clojure.core/defn delete-method ([input__47307__auto__] (delete-method input__47307__auto__ portkey.aws/*http-client*)) ([input49201 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteMethodRequest input49201)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49200] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 204 (:status response49200)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49200 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49200)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49200}))))))))))

(clojure.core/defn update-authorizer ([input__47307__auto__] (update-authorizer input__47307__auto__ portkey.aws/*http-client*)) ([input49203 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers/{authorizer_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateAuthorizerRequest input49203)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "authorizer_id" "authorizerId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49202] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49202)) (clojure.spec.alpha/unform :portkey.aws.apigateway/authorizer (:body response49202)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49202 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49202)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49202}))))))))))

(clojure.core/defn get-sdk-type ([input__47307__auto__] (get-sdk-type input__47307__auto__ portkey.aws/*http-client*)) ([input49205 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/sdktypes/{sdktype_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetSdkTypeRequest input49205)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"sdktype_id" "id"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49204] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49204)) (clojure.spec.alpha/unform :portkey.aws.apigateway/sdk-type (:body response49204)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49204 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49204)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49204}))))))))))

(clojure.core/defn update-domain-name ([input__47307__auto__] (update-domain-name input__47307__auto__ portkey.aws/*http-client*)) ([input49207 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateDomainNameRequest input49207)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49206] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49206)) (clojure.spec.alpha/unform :portkey.aws.apigateway/domain-name (:body response49206)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49206 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49206)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49206}))))))))))

(clojure.core/defn update-gateway-response ([input__47307__auto__] (update-gateway-response input__47307__auto__ portkey.aws/*http-client*)) ([input49209 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses/{response_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateGatewayResponseRequest input49209)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "response_type" "responseType"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49208] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49208)) (clojure.spec.alpha/unform :portkey.aws.apigateway/gateway-response (:body response49208)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49208 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49208)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49208}))))))))))

(clojure.core/defn get-rest-apis ([input__47307__auto__] (get-rest-apis input__47307__auto__ portkey.aws/*http-client*)) ([input49211 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetRestApisRequest input49211)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49210] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49210)) (clojure.spec.alpha/unform :portkey.aws.apigateway/rest-apis (:body response49210)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49210 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49210)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49210}))))))))))

(clojure.core/defn get-documentation-parts ([input__47307__auto__] (get-documentation-parts input__47307__auto__ portkey.aws/*http-client*)) ([input49213 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDocumentationPartsRequest input49213)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"type" "type", "name" "nameQuery", "path" "path", "position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49212] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49212)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-parts (:body response49212)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49212 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49212)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49212}))))))))))

(clojure.core/defn get-deployment ([input__47307__auto__] (get-deployment input__47307__auto__ portkey.aws/*http-client*)) ([input49215 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments/{deployment_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDeploymentRequest input49215)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "deployment_id" "deploymentId"}) (portkey.awsgen/params-to-querystring {"embed" "embed"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49214] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway/service-unavailable-exception}] (if (clojure.core/= nil (:status response49214)) (clojure.spec.alpha/unform :portkey.aws.apigateway/deployment (:body response49214)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49214 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49214)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49214}))))))))))

(clojure.core/defn create-resource ([input__47307__auto__] (create-resource input__47307__auto__ portkey.aws/*http-client*)) ([input49217 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{parent_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateResourceRequest input49217)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "parent_id" "parentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49216] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49216)) (clojure.spec.alpha/unform :portkey.aws.apigateway/resource (:body response49216)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49216 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49216)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49216}))))))))))

(clojure.core/defn delete-documentation-version ([input__47307__auto__] (delete-documentation-version input__47307__auto__ portkey.aws/*http-client*)) ([input49219 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions/{doc_version}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteDocumentationVersionRequest input49219)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "doc_version" "documentationVersion"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49218] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49218)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49218 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49218)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49218}))))))))))

(clojure.core/defn delete-usage-plan ([input__47307__auto__] (delete-usage-plan input__47307__auto__ portkey.aws/*http-client*)) ([input49221 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteUsagePlanRequest input49221)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49220] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception}] (if (clojure.core/= 202 (:status response49220)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49220 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49220)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49220}))))))))))

(clojure.core/defn get-stages ([input__47307__auto__] (get-stages input__47307__auto__ portkey.aws/*http-client*)) ([input49223 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetStagesRequest input49223)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"deploymentId" "deploymentId"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49222] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49222)) (clojure.spec.alpha/unform :portkey.aws.apigateway/stages (:body response49222)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49222 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49222)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49222}))))))))))

(clojure.core/defn get-resource ([input__47307__auto__] (get-resource input__47307__auto__ portkey.aws/*http-client*)) ([input49225 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetResourceRequest input49225)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId"}) (portkey.awsgen/params-to-querystring {"embed" "embed"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49224] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49224)) (clojure.spec.alpha/unform :portkey.aws.apigateway/resource (:body response49224)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49224 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49224)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49224}))))))))))

(clojure.core/defn update-documentation-part ([input__47307__auto__] (update-documentation-part input__47307__auto__ portkey.aws/*http-client*)) ([input49227 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts/{part_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateDocumentationPartRequest input49227)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "part_id" "documentationPartId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49226] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49226)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-part (:body response49226)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49226 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49226)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49226}))))))))))

(clojure.core/defn import-api-keys ([input__47307__auto__] (import-api-keys input__47307__auto__ portkey.aws/*http-client*)) ([input49229 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys?mode=import"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/ImportApiKeysRequest input49229)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"format" "format", "failonwarnings" "failOnWarnings"}) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49228] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 201 (:status response49228)) (clojure.spec.alpha/unform :portkey.aws.apigateway/api-key-ids (:body response49228)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49228 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49228)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49228}))))))))))

(clojure.core/defn get-client-certificate ([input__47307__auto__] (get-client-certificate input__47307__auto__ portkey.aws/*http-client*)) ([input49231 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates/{clientcertificate_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetClientCertificateRequest input49231)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"clientcertificate_id" "clientCertificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49230] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49230)) (clojure.spec.alpha/unform :portkey.aws.apigateway/client-certificate (:body response49230)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49230 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49230)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49230}))))))))))

(clojure.core/defn create-authorizer ([input__47307__auto__] (create-authorizer input__47307__auto__ portkey.aws/*http-client*)) ([input49233 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateAuthorizerRequest input49233)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49232] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49232)) (clojure.spec.alpha/unform :portkey.aws.apigateway/authorizer (:body response49232)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49232 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49232)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49232}))))))))))

(clojure.core/defn get-usage-plan-keys ([input__47307__auto__] (get-usage-plan-keys input__47307__auto__ portkey.aws/*http-client*)) ([input49235 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetUsagePlanKeysRequest input49235)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit", "name" "nameQuery"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49234] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49234)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage-plan-keys (:body response49234)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49234 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49234)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49234}))))))))))

(clojure.core/defn get-gateway-response ([input__47307__auto__] (get-gateway-response input__47307__auto__ portkey.aws/*http-client*)) ([input49237 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses/{response_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetGatewayResponseRequest input49237)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "response_type" "responseType"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49236] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49236)) (clojure.spec.alpha/unform :portkey.aws.apigateway/gateway-response (:body response49236)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49236 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49236)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49236}))))))))))

(clojure.core/defn get-deployments ([input__47307__auto__] (get-deployments input__47307__auto__ portkey.aws/*http-client*)) ([input49239 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDeploymentsRequest input49239)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49238] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway/service-unavailable-exception}] (if (clojure.core/= nil (:status response49238)) (clojure.spec.alpha/unform :portkey.aws.apigateway/deployments (:body response49238)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49238 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49238)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49238}))))))))))

(clojure.core/defn update-resource ([input__47307__auto__] (update-resource input__47307__auto__ portkey.aws/*http-client*)) ([input49241 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateResourceRequest input49241)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49240] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49240)) (clojure.spec.alpha/unform :portkey.aws.apigateway/resource (:body response49240)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49240 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49240)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49240}))))))))))

(clojure.core/defn get-authorizers ([input__47307__auto__] (get-authorizers input__47307__auto__ portkey.aws/*http-client*)) ([input49243 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetAuthorizersRequest input49243)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49242] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49242)) (clojure.spec.alpha/unform :portkey.aws.apigateway/authorizers (:body response49242)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49242 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49242)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49242}))))))))))

(clojure.core/defn get-base-path-mapping ([input__47307__auto__] (get-base-path-mapping input__47307__auto__ portkey.aws/*http-client*)) ([input49245 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings/{base_path}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetBasePathMappingRequest input49245)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName", "base_path" "basePath"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49244] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49244)) (clojure.spec.alpha/unform :portkey.aws.apigateway/base-path-mapping (:body response49244)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49244 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49244)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49244}))))))))))

(clojure.core/defn delete-integration ([input__47307__auto__] (delete-integration input__47307__auto__ portkey.aws/*http-client*)) ([input49247 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteIntegrationRequest input49247)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49246] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 204 (:status response49246)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49246 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49246)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49246}))))))))))

(clojure.core/defn get-request-validators ([input__47307__auto__] (get-request-validators input__47307__auto__ portkey.aws/*http-client*)) ([input49249 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetRequestValidatorsRequest input49249)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49248] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49248)) (clojure.spec.alpha/unform :portkey.aws.apigateway/request-validators (:body response49248)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49248 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49248)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49248}))))))))))

(clojure.core/defn create-domain-name ([input__47307__auto__] (create-domain-name input__47307__auto__ portkey.aws/*http-client*)) ([input49251 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateDomainNameRequest input49251)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49250] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49250)) (clojure.spec.alpha/unform :portkey.aws.apigateway/domain-name (:body response49250)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49250 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49250)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49250}))))))))))

(clojure.core/defn put-integration-response ([input__47307__auto__] (put-integration-response input__47307__auto__ portkey.aws/*http-client*)) ([input49253 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/PutIntegrationResponseRequest input49253)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49252] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 201 (:status response49252)) (clojure.spec.alpha/unform :portkey.aws.apigateway/integration-response (:body response49252)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49252 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49252)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49252}))))))))))

(clojure.core/defn create-usage-plan ([input__47307__auto__] (create-usage-plan input__47307__auto__ portkey.aws/*http-client*)) ([input49255 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateUsagePlanRequest input49255)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49254] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception}] (if (clojure.core/= 201 (:status response49254)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage-plan (:body response49254)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49254 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49254)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49254}))))))))))

(clojure.core/defn create-api-key ([input__47307__auto__] (create-api-key input__47307__auto__ portkey.aws/*http-client*)) ([input49257 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateApiKeyRequest input49257)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49256] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 201 (:status response49256)) (clojure.spec.alpha/unform :portkey.aws.apigateway/api-key (:body response49256)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49256 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49256)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49256}))))))))))

(clojure.core/defn import-rest-api ([input__47307__auto__] (import-rest-api input__47307__auto__ portkey.aws/*http-client*)) ([input49259 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis?mode=import"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/ImportRestApiRequest input49259)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"failonwarnings" "failOnWarnings", nil "parameters"}) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49258] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 201 (:status response49258)) (clojure.spec.alpha/unform :portkey.aws.apigateway/rest-api (:body response49258)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49258 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49258)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49258}))))))))))

(clojure.core/defn delete-api-key ([input__47307__auto__] (delete-api-key input__47307__auto__ portkey.aws/*http-client*)) ([input49261 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys/{api_Key}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteApiKeyRequest input49261)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"api_Key" "apiKey"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49260] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49260)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49260 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49260)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49260}))))))))))

(clojure.core/defn get-integration ([input__47307__auto__] (get-integration input__47307__auto__ portkey.aws/*http-client*)) ([input49263 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetIntegrationRequest input49263)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49262] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49262)) (clojure.spec.alpha/unform :portkey.aws.apigateway/integration (:body response49262)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49262 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49262)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49262}))))))))))

(clojure.core/defn get-export ([input__47307__auto__] (get-export input__47307__auto__ portkey.aws/*http-client*)) ([input49265 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetExportRequest input49265)} (portkey.awsgen/params-to-header {"accepts" ["Accept" nil]}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName", "export_type" "exportType"}) (portkey.awsgen/params-to-querystring {nil "parameters"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49264] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49264)) (clojure.spec.alpha/unform :portkey.aws.apigateway/export-response (:body response49264)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49264 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49264)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49264}))))))))))

(clojure.core/defn delete-stage ([input__47307__auto__] (delete-stage input__47307__auto__ portkey.aws/*http-client*)) ([input49267 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteStageRequest input49267)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49266] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception}] (if (clojure.core/= 202 (:status response49266)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49266 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49266)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49266}))))))))))

(clojure.core/defn delete-request-validator ([input__47307__auto__] (delete-request-validator input__47307__auto__ portkey.aws/*http-client*)) ([input49269 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteRequestValidatorRequest input49269)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "requestvalidator_id" "requestValidatorId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49268] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 202 (:status response49268)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49268 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49268)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49268}))))))))))

(clojure.core/defn get-gateway-responses ([input__47307__auto__] (get-gateway-responses input__47307__auto__ portkey.aws/*http-client*)) ([input49271 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetGatewayResponsesRequest input49271)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49270] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49270)) (clojure.spec.alpha/unform :portkey.aws.apigateway/gateway-responses (:body response49270)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49270 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49270)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49270}))))))))))

(clojure.core/defn put-method-response ([input__47307__auto__] (put-method-response input__47307__auto__ portkey.aws/*http-client*)) ([input49273 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/PutMethodResponseRequest input49273)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49272] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49272)) (clojure.spec.alpha/unform :portkey.aws.apigateway/method-response (:body response49272)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49272 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49272)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49272}))))))))))

(clojure.core/defn get-model ([input__47307__auto__] (get-model input__47307__auto__ portkey.aws/*http-client*)) ([input49275 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models/{model_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetModelRequest input49275)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "model_name" "modelName"}) (portkey.awsgen/params-to-querystring {"flatten" "flatten"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49274] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49274)) (clojure.spec.alpha/unform :portkey.aws.apigateway/model (:body response49274)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49274 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49274)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49274}))))))))))

(clojure.core/defn create-model ([input__47307__auto__] (create-model input__47307__auto__ portkey.aws/*http-client*)) ([input49277 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateModelRequest input49277)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49276] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49276)) (clojure.spec.alpha/unform :portkey.aws.apigateway/model (:body response49276)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49276 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49276)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49276}))))))))))

(clojure.core/defn update-api-key ([input__47307__auto__] (update-api-key input__47307__auto__ portkey.aws/*http-client*)) ([input49279 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys/{api_Key}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateApiKeyRequest input49279)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"api_Key" "apiKey"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49278] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= nil (:status response49278)) (clojure.spec.alpha/unform :portkey.aws.apigateway/api-key (:body response49278)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49278 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49278)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49278}))))))))))

(clojure.core/defn create-deployment ([input__47307__auto__] (create-deployment input__47307__auto__ portkey.aws/*http-client*)) ([input49281 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateDeploymentRequest input49281)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49280] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway/service-unavailable-exception}] (if (clojure.core/= 201 (:status response49280)) (clojure.spec.alpha/unform :portkey.aws.apigateway/deployment (:body response49280)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49280 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49280)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49280}))))))))))

(clojure.core/defn update-method ([input__47307__auto__] (update-method input__47307__auto__ portkey.aws/*http-client*)) ([input49283 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateMethodRequest input49283)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49282] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49282)) (clojure.spec.alpha/unform :portkey.aws.apigateway/method (:body response49282)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49282 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49282)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49282}))))))))))

(clojure.core/defn test-invoke-authorizer ([input__47307__auto__] (test-invoke-authorizer input__47307__auto__ portkey.aws/*http-client*)) ([input49285 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers/{authorizer_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/TestInvokeAuthorizerRequest input49285)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "authorizer_id" "authorizerId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49284] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49284)) (clojure.spec.alpha/unform :portkey.aws.apigateway/test-invoke-authorizer-response (:body response49284)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49284 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49284)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49284}))))))))))

(clojure.core/defn create-documentation-part ([input__47307__auto__] (create-documentation-part input__47307__auto__ portkey.aws/*http-client*)) ([input49287 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateDocumentationPartRequest input49287)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49286] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49286)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-part (:body response49286)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49286 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49286)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49286}))))))))))

(clojure.core/defn update-stage ([input__47307__auto__] (update-stage input__47307__auto__ portkey.aws/*http-client*)) ([input49289 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateStageRequest input49289)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49288] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49288)) (clojure.spec.alpha/unform :portkey.aws.apigateway/stage (:body response49288)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49288 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49288)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49288}))))))))))

(clojure.core/defn update-request-validator ([input__47307__auto__] (update-request-validator input__47307__auto__ portkey.aws/*http-client*)) ([input49291 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateRequestValidatorRequest input49291)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "requestvalidator_id" "requestValidatorId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49290] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49290)) (clojure.spec.alpha/unform :portkey.aws.apigateway/request-validator (:body response49290)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49290 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49290)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49290}))))))))))

(clojure.core/defn get-sdk-types ([input__47307__auto__] (get-sdk-types input__47307__auto__ portkey.aws/*http-client*)) ([input49293 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/sdktypes"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetSdkTypesRequest input49293)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49292] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49292)) (clojure.spec.alpha/unform :portkey.aws.apigateway/sdk-types (:body response49292)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49292 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49292)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49292}))))))))))

(clojure.core/defn update-client-certificate ([input__47307__auto__] (update-client-certificate input__47307__auto__ portkey.aws/*http-client*)) ([input49295 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates/{clientcertificate_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateClientCertificateRequest input49295)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"clientcertificate_id" "clientCertificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49294] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception}] (if (clojure.core/= nil (:status response49294)) (clojure.spec.alpha/unform :portkey.aws.apigateway/client-certificate (:body response49294)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49294 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49294)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49294}))))))))))

(clojure.core/defn update-model ([input__47307__auto__] (update-model input__47307__auto__ portkey.aws/*http-client*)) ([input49297 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models/{model_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateModelRequest input49297)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "model_name" "modelName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49296] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49296)) (clojure.spec.alpha/unform :portkey.aws.apigateway/model (:body response49296)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49296 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49296)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49296}))))))))))

(clojure.core/defn get-documentation-versions ([input__47307__auto__] (get-documentation-versions input__47307__auto__ portkey.aws/*http-client*)) ([input49299 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDocumentationVersionsRequest input49299)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49298] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49298)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-versions (:body response49298)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49298 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49298)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49298}))))))))))

(clojure.core/defn update-usage ([input__47307__auto__] (update-usage input__47307__auto__ portkey.aws/*http-client*)) ([input49301 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys/{keyId}/usage"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateUsageRequest input49301)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId", "keyId" "keyId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49300] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception}] (if (clojure.core/= nil (:status response49300)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage (:body response49300)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49300 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49300)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49300}))))))))))

(clojure.core/defn create-usage-plan-key ([input__47307__auto__] (create-usage-plan-key input__47307__auto__ portkey.aws/*http-client*)) ([input49303 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateUsagePlanKeyRequest input49303)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49302] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49302)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage-plan-key (:body response49302)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49302 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49302)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49302}))))))))))

(clojure.core/defn put-integration ([input__47307__auto__] (put-integration input__47307__auto__ portkey.aws/*http-client*)) ([input49305 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/PutIntegrationRequest input49305)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"resource_id" "resourceId", "http_method" "httpMethod", "restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49304] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49304)) (clojure.spec.alpha/unform :portkey.aws.apigateway/integration (:body response49304)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49304 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49304)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49304}))))))))))

(clojure.core/defn get-usage ([input__47307__auto__] (get-usage input__47307__auto__ portkey.aws/*http-client*)) ([input49307 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/usage"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetUsageRequest input49307)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {"keyId" "keyId", "startDate" "startDate", "endDate" "endDate", "position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49306] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49306)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage (:body response49306)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49306 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49306)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49306}))))))))))

(clojure.core/defn update-documentation-version ([input__47307__auto__] (update-documentation-version input__47307__auto__ portkey.aws/*http-client*)) ([input49309 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions/{doc_version}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateDocumentationVersionRequest input49309)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "doc_version" "documentationVersion"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49308] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49308)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-version (:body response49308)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49308 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49308)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49308}))))))))))

(clojure.core/defn get-stage ([input__47307__auto__] (get-stage input__47307__auto__ portkey.aws/*http-client*)) ([input49311 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetStageRequest input49311)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49310] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49310)) (clojure.spec.alpha/unform :portkey.aws.apigateway/stage (:body response49310)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49310 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49310)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49310}))))))))))

(clojure.core/defn update-method-response ([input__47307__auto__] (update-method-response input__47307__auto__ portkey.aws/*http-client*)) ([input49313 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateMethodResponseRequest input49313)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49312] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49312)) (clojure.spec.alpha/unform :portkey.aws.apigateway/method-response (:body response49312)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49312 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49312)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49312}))))))))))

(clojure.core/defn create-base-path-mapping ([input__47307__auto__] (create-base-path-mapping input__47307__auto__ portkey.aws/*http-client*)) ([input49315 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateBasePathMappingRequest input49315)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49314] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49314)) (clojure.spec.alpha/unform :portkey.aws.apigateway/base-path-mapping (:body response49314)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49314 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49314)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49314}))))))))))

(clojure.core/defn get-documentation-part ([input__47307__auto__] (get-documentation-part input__47307__auto__ portkey.aws/*http-client*)) ([input49317 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts/{part_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDocumentationPartRequest input49317)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "part_id" "documentationPartId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49316] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49316)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-part (:body response49316)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49316 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49316)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49316}))))))))))

(clojure.core/defn delete-model ([input__47307__auto__] (delete-model input__47307__auto__ portkey.aws/*http-client*)) ([input49319 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models/{model_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteModelRequest input49319)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "model_name" "modelName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49318] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 202 (:status response49318)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49318 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49318)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49318}))))))))))

(clojure.core/defn import-documentation-parts ([input__47307__auto__] (import-documentation-parts input__47307__auto__ portkey.aws/*http-client*)) ([input49321 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/ImportDocumentationPartsRequest input49321)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"mode" "mode", "failonwarnings" "failOnWarnings"}) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49320] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49320)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-part-ids (:body response49320)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49320 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49320)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49320}))))))))))

(clojure.core/defn delete-method-response ([input__47307__auto__] (delete-method-response input__47307__auto__ portkey.aws/*http-client*)) ([input49323 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteMethodResponseRequest input49323)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49322] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 204 (:status response49322)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49322 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49322)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49322}))))))))))

(clojure.core/defn get-client-certificates ([input__47307__auto__] (get-client-certificates input__47307__auto__ portkey.aws/*http-client*)) ([input49325 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetClientCertificatesRequest input49325)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49324] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49324)) (clojure.spec.alpha/unform :portkey.aws.apigateway/client-certificates (:body response49324)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49324 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49324)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49324}))))))))))

(clojure.core/defn get-api-keys ([input__47307__auto__] (get-api-keys input__47307__auto__ portkey.aws/*http-client*)) ([input49327 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetApiKeysRequest input49327)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit", "name" "nameQuery", "customerId" "customerId", "includeValues" "includeValues"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49326] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49326)) (clojure.spec.alpha/unform :portkey.aws.apigateway/api-keys (:body response49326)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49326 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49326)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49326}))))))))))

(clojure.core/defn update-deployment ([input__47307__auto__] (update-deployment input__47307__auto__ portkey.aws/*http-client*)) ([input49329 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments/{deployment_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateDeploymentRequest input49329)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "deployment_id" "deploymentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49328] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway/service-unavailable-exception}] (if (clojure.core/= nil (:status response49328)) (clojure.spec.alpha/unform :portkey.aws.apigateway/deployment (:body response49328)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49328 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49328)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49328}))))))))))

(clojure.core/defn delete-domain-name ([input__47307__auto__] (delete-domain-name input__47307__auto__ portkey.aws/*http-client*)) ([input49331 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteDomainNameRequest input49331)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49330] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49330)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49330 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49330)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49330}))))))))))

(clojure.core/defn create-rest-api ([input__47307__auto__] (create-rest-api input__47307__auto__ portkey.aws/*http-client*)) ([input49333 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateRestApiRequest input49333)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49332] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49332)) (clojure.spec.alpha/unform :portkey.aws.apigateway/rest-api (:body response49332)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49332 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49332)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49332}))))))))))

(clojure.core/defn delete-authorizer ([input__47307__auto__] (delete-authorizer input__47307__auto__ portkey.aws/*http-client*)) ([input49335 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers/{authorizer_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteAuthorizerRequest input49335)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "authorizer_id" "authorizerId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49334] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 202 (:status response49334)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49334 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49334)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49334}))))))))))

(clojure.core/defn get-usage-plan-key ([input__47307__auto__] (get-usage-plan-key input__47307__auto__ portkey.aws/*http-client*)) ([input49337 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys/{keyId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetUsagePlanKeyRequest input49337)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId", "keyId" "keyId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49336] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49336)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage-plan-key (:body response49336)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49336 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49336)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49336}))))))))))

(clojure.core/defn delete-resource ([input__47307__auto__] (delete-resource input__47307__auto__ portkey.aws/*http-client*)) ([input49339 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteResourceRequest input49339)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49338] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49338)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49338 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49338)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49338}))))))))))

(clojure.core/defn test-invoke-method ([input__47307__auto__] (test-invoke-method input__47307__auto__ portkey.aws/*http-client*)) ([input49341 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/TestInvokeMethodRequest input49341)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49340] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49340)) (clojure.spec.alpha/unform :portkey.aws.apigateway/test-invoke-method-response (:body response49340)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49340 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49340)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49340}))))))))))

(clojure.core/defn get-method-response ([input__47307__auto__] (get-method-response input__47307__auto__ portkey.aws/*http-client*)) ([input49343 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetMethodResponseRequest input49343)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49342] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49342)) (clojure.spec.alpha/unform :portkey.aws.apigateway/method-response (:body response49342)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49342 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49342)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49342}))))))))))

(clojure.core/defn get-request-validator ([input__47307__auto__] (get-request-validator input__47307__auto__ portkey.aws/*http-client*)) ([input49345 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetRequestValidatorRequest input49345)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "requestvalidator_id" "requestValidatorId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49344] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49344)) (clojure.spec.alpha/unform :portkey.aws.apigateway/request-validator (:body response49344)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49344 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49344)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49344}))))))))))

(clojure.core/defn get-authorizer ([input__47307__auto__] (get-authorizer input__47307__auto__ portkey.aws/*http-client*)) ([input49347 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/authorizers/{authorizer_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetAuthorizerRequest input49347)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "authorizer_id" "authorizerId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49346] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49346)) (clojure.spec.alpha/unform :portkey.aws.apigateway/authorizer (:body response49346)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49346 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49346)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49346}))))))))))

(clojure.core/defn get-base-path-mappings ([input__47307__auto__] (get-base-path-mappings input__47307__auto__ portkey.aws/*http-client*)) ([input49349 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetBasePathMappingsRequest input49349)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49348] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49348)) (clojure.spec.alpha/unform :portkey.aws.apigateway/base-path-mappings (:body response49348)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49348 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49348)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49348}))))))))))

(clojure.core/defn delete-base-path-mapping ([input__47307__auto__] (delete-base-path-mapping input__47307__auto__ portkey.aws/*http-client*)) ([input49351 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings/{base_path}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteBasePathMappingRequest input49351)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName", "base_path" "basePath"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49350] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49350)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49350 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49350)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49350}))))))))))

(clojure.core/defn get-account ([input__47307__auto__] (get-account input__47307__auto__ portkey.aws/*http-client*)) ([input49353 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/account"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetAccountRequest input49353)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49352] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49352)) (clojure.spec.alpha/unform :portkey.aws.apigateway/account (:body response49352)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49352 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49352)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49352}))))))))))

(clojure.core/defn get-integration-response ([input__47307__auto__] (get-integration-response input__47307__auto__ portkey.aws/*http-client*)) ([input49355 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetIntegrationResponseRequest input49355)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49354] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49354)) (clojure.spec.alpha/unform :portkey.aws.apigateway/integration-response (:body response49354)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49354 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49354)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49354}))))))))))

(clojure.core/defn get-model-template ([input__47307__auto__] (get-model-template input__47307__auto__ portkey.aws/*http-client*)) ([input49357 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models/{model_name}/default_template"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetModelTemplateRequest input49357)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "model_name" "modelName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49356] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49356)) (clojure.spec.alpha/unform :portkey.aws.apigateway/template (:body response49356)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49356 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49356)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49356}))))))))))

(clojure.core/defn get-rest-api ([input__47307__auto__] (get-rest-api input__47307__auto__ portkey.aws/*http-client*)) ([input49359 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetRestApiRequest input49359)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49358] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49358)) (clojure.spec.alpha/unform :portkey.aws.apigateway/rest-api (:body response49358)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49358 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49358)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49358}))))))))))

(clojure.core/defn delete-integration-response ([input__47307__auto__] (delete-integration-response input__47307__auto__ portkey.aws/*http-client*)) ([input49361 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteIntegrationResponseRequest input49361)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49360] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 204 (:status response49360)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49360 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49360)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49360}))))))))))

(clojure.core/defn delete-usage-plan-key ([input__47307__auto__] (delete-usage-plan-key input__47307__auto__ portkey.aws/*http-client*)) ([input49363 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}/keys/{keyId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteUsagePlanKeyRequest input49363)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId", "keyId" "keyId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49362] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49362)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49362 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49362)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49362}))))))))))

(clojure.core/defn delete-documentation-part ([input__47307__auto__] (delete-documentation-part input__47307__auto__ portkey.aws/*http-client*)) ([input49365 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/parts/{part_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteDocumentationPartRequest input49365)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "part_id" "documentationPartId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49364] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception}] (if (clojure.core/= 202 (:status response49364)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49364 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49364)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49364}))))))))))

(clojure.core/defn generate-client-certificate ([input__47307__auto__] (generate-client-certificate input__47307__auto__ portkey.aws/*http-client*)) ([input49367 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GenerateClientCertificateRequest input49367)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49366] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception}] (if (clojure.core/= 201 (:status response49366)) (clojure.spec.alpha/unform :portkey.aws.apigateway/client-certificate (:body response49366)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49366 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49366)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49366}))))))))))

(clojure.core/defn get-method ([input__47307__auto__] (get-method input__47307__auto__ portkey.aws/*http-client*)) ([input49369 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetMethodRequest input49369)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49368] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49368)) (clojure.spec.alpha/unform :portkey.aws.apigateway/method (:body response49368)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49368 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49368)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49368}))))))))))

(clojure.core/defn get-models ([input__47307__auto__] (get-models input__47307__auto__ portkey.aws/*http-client*)) ([input49371 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/models"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetModelsRequest input49371)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49370] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49370)) (clojure.spec.alpha/unform :portkey.aws.apigateway/models (:body response49370)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49370 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49370)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49370}))))))))))

(clojure.core/defn get-documentation-version ([input__47307__auto__] (get-documentation-version input__47307__auto__ portkey.aws/*http-client*)) ([input49373 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions/{doc_version}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDocumentationVersionRequest input49373)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "doc_version" "documentationVersion"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49372] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49372)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-version (:body response49372)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49372 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49372)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49372}))))))))))

(clojure.core/defn create-documentation-version ([input__47307__auto__] (create-documentation-version input__47307__auto__ portkey.aws/*http-client*)) ([input49375 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/documentation/versions"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateDocumentationVersionRequest input49375)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49374] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49374)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-version (:body response49374)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49374 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49374)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49374}))))))))))

(clojure.core/defn get-resources ([input__47307__auto__] (get-resources input__47307__auto__ portkey.aws/*http-client*)) ([input49377 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetResourcesRequest input49377)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit", "embed" "embed"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49376] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49376)) (clojure.spec.alpha/unform :portkey.aws.apigateway/resources (:body response49376)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49376 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49376)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49376}))))))))))

(clojure.core/defn get-api-key ([input__47307__auto__] (get-api-key input__47307__auto__ portkey.aws/*http-client*)) ([input49379 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/apikeys/{api_Key}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetApiKeyRequest input49379)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"api_Key" "apiKey"}) (portkey.awsgen/params-to-querystring {"includeValue" "includeValue"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49378] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49378)) (clojure.spec.alpha/unform :portkey.aws.apigateway/api-key (:body response49378)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49378 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49378)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49378}))))))))))

(clojure.core/defn create-stage ([input__47307__auto__] (create-stage input__47307__auto__ portkey.aws/*http-client*)) ([input49381 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateStageRequest input49381)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49380] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49380)) (clojure.spec.alpha/unform :portkey.aws.apigateway/stage (:body response49380)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49380 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49380)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49380}))))))))))

(clojure.core/defn delete-gateway-response ([input__47307__auto__] (delete-gateway-response input__47307__auto__ portkey.aws/*http-client*)) ([input49383 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses/{response_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteGatewayResponseRequest input49383)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "response_type" "responseType"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49382] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 202 (:status response49382)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49382 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49382)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49382}))))))))))

(clojure.core/defn update-integration ([input__47307__auto__] (update-integration input__47307__auto__ portkey.aws/*http-client*)) ([input49385 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateIntegrationRequest input49385)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49384] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= nil (:status response49384)) (clojure.spec.alpha/unform :portkey.aws.apigateway/integration (:body response49384)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49384 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49384)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49384}))))))))))

(clojure.core/defn flush-stage-authorizers-cache ([input__47307__auto__] (flush-stage-authorizers-cache input__47307__auto__ portkey.aws/*http-client*)) ([input49387 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/FlushStageAuthorizersCacheRequest input49387)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49386] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49386)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49386 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49386)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49386}))))))))))

(clojure.core/defn delete-client-certificate ([input__47307__auto__] (delete-client-certificate input__47307__auto__ portkey.aws/*http-client*)) ([input49389 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/clientcertificates/{clientcertificate_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteClientCertificateRequest input49389)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"clientcertificate_id" "clientCertificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49388] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception}] (if (clojure.core/= 202 (:status response49388)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49388 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49388)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49388}))))))))))

(clojure.core/defn put-gateway-response ([input__47307__auto__] (put-gateway-response input__47307__auto__ portkey.aws/*http-client*)) ([input49391 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/gatewayresponses/{response_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/PutGatewayResponseRequest input49391)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "response_type" "responseType"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49390] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49390)) (clojure.spec.alpha/unform :portkey.aws.apigateway/gateway-response (:body response49390)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49390 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49390)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49390}))))))))))

(clojure.core/defn get-domain-name ([input__47307__auto__] (get-domain-name input__47307__auto__ portkey.aws/*http-client*)) ([input49393 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDomainNameRequest input49393)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49392] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ServiceUnavailableException" :portkey.aws.apigateway/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49392)) (clojure.spec.alpha/unform :portkey.aws.apigateway/domain-name (:body response49392)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49392 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49392)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49392}))))))))))

(clojure.core/defn update-base-path-mapping ([input__47307__auto__] (update-base-path-mapping input__47307__auto__ portkey.aws/*http-client*)) ([input49395 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames/{domain_name}/basepathmappings/{base_path}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateBasePathMappingRequest input49395)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"domain_name" "domainName", "base_path" "basePath"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49394] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49394)) (clojure.spec.alpha/unform :portkey.aws.apigateway/base-path-mapping (:body response49394)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49394 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49394)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49394}))))))))))

(clojure.core/defn get-usage-plans ([input__47307__auto__] (get-usage-plans input__47307__auto__ portkey.aws/*http-client*)) ([input49397 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetUsagePlansRequest input49397)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "keyId" "keyId", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49396] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception}] (if (clojure.core/= nil (:status response49396)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage-plans (:body response49396)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49396 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49396)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49396}))))))))))

(clojure.core/defn update-usage-plan ([input__47307__auto__] (update-usage-plan input__47307__auto__ portkey.aws/*http-client*)) ([input49399 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/usageplans/{usageplanId}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateUsagePlanRequest input49399)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"usageplanId" "usagePlanId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49398] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= nil (:status response49398)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage-plan (:body response49398)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49398 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49398)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49398}))))))))))

(clojure.core/defn get-sdk ([input__47307__auto__] (get-sdk input__47307__auto__ portkey.aws/*http-client*)) ([input49401 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetSdkRequest input49401)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "stage_name" "stageName", "sdk_type" "sdkType"}) (portkey.awsgen/params-to-querystring {nil "parameters"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49400] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 200 (:status response49400)) (clojure.spec.alpha/unform :portkey.aws.apigateway/sdk-response (:body response49400)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49400 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49400)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49400}))))))))))

(clojure.core/defn put-method ([input__47307__auto__] (put-method input__47307__auto__ portkey.aws/*http-client*)) ([input49403 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/PutMethodRequest input49403)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"resource_id" "resourceId", "http_method" "httpMethod", "restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49402] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49402)) (clojure.spec.alpha/unform :portkey.aws.apigateway/method (:body response49402)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49402 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49402)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49402}))))))))))

(clojure.core/defn update-integration-response ([input__47307__auto__] (update-integration-response input__47307__auto__ portkey.aws/*http-client*)) ([input49405 http-client__47308__auto__] (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateIntegrationResponseRequest input49405)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "resource_id" "resourceId", "http_method" "httpMethod", "status_code" "statusCode"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49404] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49404)) (clojure.spec.alpha/unform :portkey.aws.apigateway/integration-response (:body response49404)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49404 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49404)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49404}))))))))))

(clojure.core/defn get-domain-names ([input__47307__auto__] (get-domain-names input__47307__auto__ portkey.aws/*http-client*)) ([input49407 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/domainnames"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDomainNamesRequest input49407)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"position" "position", "limit" "limit"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49406] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response49406)) (clojure.spec.alpha/unform :portkey.aws.apigateway/domain-names (:body response49406)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49406 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49406)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49406}))))))))))

(clojure.core/defn put-rest-api ([input__47307__auto__] (put-rest-api input__47307__auto__ portkey.aws/*http-client*)) ([input49409 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/PutRestApiRequest input49409)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {"mode" "mode", "failonwarnings" "failOnWarnings", nil "parameters"}) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49408] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= nil (:status response49408)) (clojure.spec.alpha/unform :portkey.aws.apigateway/rest-api (:body response49408)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49408 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49408)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49408}))))))))))

(clojure.core/defn create-request-validator ([input__47307__auto__] (create-request-validator input__47307__auto__ portkey.aws/*http-client*)) ([input49411 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/requestvalidators"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateRequestValidatorRequest input49411)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49410] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response49410)) (clojure.spec.alpha/unform :portkey.aws.apigateway/request-validator (:body response49410)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49410 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49410)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49410}))))))))))

(clojure.core/defn delete-deployment ([input__47307__auto__] (delete-deployment input__47307__auto__ portkey.aws/*http-client*)) ([input49413 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/restapis/{restapi_id}/deployments/{deployment_id}"), :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteDeploymentRequest input49413)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"restapi_id" "restApiId", "deployment_id" "deploymentId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response49412] (clojure.core/let [errors__47310__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response49412)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response49412 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response49412)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response49412}))))))))))
