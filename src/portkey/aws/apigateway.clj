(ns portkey.aws.apigateway (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-resource-request/parent-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-resource-request/path-part (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-resource-request/restApiId :portkey.aws.apigateway.create-resource-request/parentId :portkey.aws.apigateway.create-resource-request/pathPart] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-part-location-status-code (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"^([1-5]\d\d|\*|\s*)$" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.apigateway.put-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-rest-api-request/mode (clojure.spec.alpha/and :portkey.aws.apigateway/put-mode))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-rest-api-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-rest-api-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-rest-api-request/body (clojure.spec.alpha/and :portkey.aws.apigateway/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway/put-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.put-rest-api-request/restApiId :portkey.aws.apigateway.put-rest-api-request/body] :opt-un [:portkey.aws.apigateway.put-rest-api-request/mode :portkey.aws.apigateway.put-rest-api-request/failOnWarnings :portkey.aws.apigateway.put-rest-api-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-stages-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-stages-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-stages-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-stages-request/restApiId] :opt-un [:portkey.aws.apigateway.get-stages-request/deploymentId]))

(clojure.spec.alpha/def :portkey.aws.apigateway.rest-api/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.rest-api/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.rest-api/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.rest-api/created-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.rest-api/version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.rest-api/warnings (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.rest-api/binary-media-types (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/rest-api (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.rest-api/id :portkey.aws.apigateway.rest-api/name :portkey.aws.apigateway.rest-api/description :portkey.aws.apigateway.rest-api/createdDate :portkey.aws.apigateway.rest-api/version :portkey.aws.apigateway.rest-api/warnings :portkey.aws.apigateway.rest-api/binaryMediaTypes]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-domain-name-request/domainName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-resource-request/restApiId :portkey.aws.apigateway.delete-resource-request/resourceId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-usage-plan-request/usagePlanId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.unauthorized-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/unauthorized-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.unauthorized-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway/double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-documentation-part (clojure.spec.alpha/coll-of :portkey.aws.apigateway/documentation-part :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-resources-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-resources-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-resources-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-resources-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-resources-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-resources-request/restApiId] :opt-un [:portkey.aws.apigateway.get-resources-request/position :portkey.aws.apigateway.get-resources-request/limit :portkey.aws.apigateway.get-resources-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.api-key-ids/ids (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key-ids/warnings (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/api-key-ids (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.api-key-ids/ids :portkey.aws.apigateway.api-key-ids/warnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-request/headers (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-request/path-with-query-string (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-request/body (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-request/stage-variables (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-request/additional-context (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/test-invoke-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.test-invoke-authorizer-request/restApiId :portkey.aws.apigateway.test-invoke-authorizer-request/authorizerId] :opt-un [:portkey.aws.apigateway.test-invoke-authorizer-request/headers :portkey.aws.apigateway.test-invoke-authorizer-request/pathWithQueryString :portkey.aws.apigateway.test-invoke-authorizer-request/body :portkey.aws.apigateway.test-invoke-authorizer-request/stageVariables :portkey.aws.apigateway.test-invoke-authorizer-request/additionalContext]))

(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/path-with-query-string (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/body (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/headers (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-request/stage-variables (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/test-invoke-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.test-invoke-method-request/restApiId :portkey.aws.apigateway.test-invoke-method-request/resourceId :portkey.aws.apigateway.test-invoke-method-request/httpMethod] :opt-un [:portkey.aws.apigateway.test-invoke-method-request/pathWithQueryString :portkey.aws.apigateway.test-invoke-method-request/body :portkey.aws.apigateway.test-invoke-method-request/headers :portkey.aws.apigateway.test-invoke-method-request/clientCertificateId :portkey.aws.apigateway.test-invoke-method-request/stageVariables]))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-method-snapshot (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/method-snapshot))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-sdk-type-request/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-sdk-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-sdk-type-request/id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.deployment/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.deployment/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.deployment/created-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.deployment/api-summary (clojure.spec.alpha/and :portkey.aws.apigateway/path-to-map-of-method-snapshot))
(clojure.spec.alpha/def :portkey.aws.apigateway/deployment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.deployment/id :portkey.aws.apigateway.deployment/description :portkey.aws.apigateway.deployment/createdDate :portkey.aws.apigateway.deployment/apiSummary]))

(clojure.spec.alpha/def :portkey.aws.apigateway/gateway-response-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:integration-timeout "INTEGRATION_TIMEOUT", :default-4xx "DEFAULT_4XX", "REQUEST_TOO_LARGE" "REQUEST_TOO_LARGE", :unauthorized "UNAUTHORIZED", "INTEGRATION_TIMEOUT" "INTEGRATION_TIMEOUT", "RESOURCE_NOT_FOUND" "RESOURCE_NOT_FOUND", :invalid-api-key "INVALID_API_KEY", :integration-failure "INTEGRATION_FAILURE", "AUTHORIZER_CONFIGURATION_ERROR" "AUTHORIZER_CONFIGURATION_ERROR", "INTEGRATION_FAILURE" "INTEGRATION_FAILURE", "DEFAULT_5XX" "DEFAULT_5XX", "UNAUTHORIZED" "UNAUTHORIZED", :quota-exceeded "QUOTA_EXCEEDED", :invalid-signature "INVALID_SIGNATURE", :expired-token "EXPIRED_TOKEN", :bad-request-parameters "BAD_REQUEST_PARAMETERS", "AUTHORIZER_FAILURE" "AUTHORIZER_FAILURE", :unsupported-media-type "UNSUPPORTED_MEDIA_TYPE", "INVALID_API_KEY" "INVALID_API_KEY", "ACCESS_DENIED" "ACCESS_DENIED", "API_CONFIGURATION_ERROR" "API_CONFIGURATION_ERROR", "DEFAULT_4XX" "DEFAULT_4XX", "INVALID_SIGNATURE" "INVALID_SIGNATURE", :bad-request-body "BAD_REQUEST_BODY", :api-configuration-error "API_CONFIGURATION_ERROR", "EXPIRED_TOKEN" "EXPIRED_TOKEN", "UNSUPPORTED_MEDIA_TYPE" "UNSUPPORTED_MEDIA_TYPE", :authorizer-configuration-error "AUTHORIZER_CONFIGURATION_ERROR", :default-5xx "DEFAULT_5XX", :request-too-large "REQUEST_TOO_LARGE", :authorizer-failure "AUTHORIZER_FAILURE", :throttled "THROTTLED", "QUOTA_EXCEEDED" "QUOTA_EXCEEDED", "BAD_REQUEST_PARAMETERS" "BAD_REQUEST_PARAMETERS", "MISSING_AUTHENTICATION_TOKEN" "MISSING_AUTHENTICATION_TOKEN", :missing-authentication-token "MISSING_AUTHENTICATION_TOKEN", "BAD_REQUEST_BODY" "BAD_REQUEST_BODY", :resource-not-found "RESOURCE_NOT_FOUND", :access-denied "ACCESS_DENIED", "THROTTLED" "THROTTLED"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-client-certificate (clojure.spec.alpha/coll-of :portkey.aws.apigateway/client-certificate :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-sdk-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-sdk-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-sdk-request/sdk-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-sdk-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-sdk-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-sdk-request/restApiId :portkey.aws.apigateway.get-sdk-request/stageName :portkey.aws.apigateway.get-sdk-request/sdkType] :opt-un [:portkey.aws.apigateway.get-sdk-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/bad-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.bad-request-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-stage-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-stage-request/restApiId :portkey.aws.apigateway.update-stage-request/stageName] :opt-un [:portkey.aws.apigateway.update-stage-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-method-response-request/restApiId :portkey.aws.apigateway.get-method-response-request/resourceId :portkey.aws.apigateway.get-method-response-request/httpMethod :portkey.aws.apigateway.get-method-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-response/client-status (clojure.spec.alpha/and :portkey.aws.apigateway/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-response/log (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-response/latency (clojure.spec.alpha/and :portkey.aws.apigateway/long))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-response/principal-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-response/policy (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-response/authorization (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-list))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-authorizer-response/claims (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/test-invoke-authorizer-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.test-invoke-authorizer-response/clientStatus :portkey.aws.apigateway.test-invoke-authorizer-response/log :portkey.aws.apigateway.test-invoke-authorizer-response/latency :portkey.aws.apigateway.test-invoke-authorizer-response/principalId :portkey.aws.apigateway.test-invoke-authorizer-response/policy :portkey.aws.apigateway.test-invoke-authorizer-response/authorization :portkey.aws.apigateway.test-invoke-authorizer-response/claims]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-stage-request/restApiId :portkey.aws.apigateway.delete-stage-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/logging-level (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/metrics-enabled (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/caching-enabled (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/throttling-rate-limit (clojure.spec.alpha/and :portkey.aws.apigateway/double))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/cache-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/unauthorized-cache-control-header-strategy (clojure.spec.alpha/and :portkey.aws.apigateway/unauthorized-cache-control-header-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/cache-data-encrypted (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/throttling-burst-limit (clojure.spec.alpha/and :portkey.aws.apigateway/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/require-authorization-for-cache-control (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-setting/data-trace-enabled (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/method-setting (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.method-setting/loggingLevel :portkey.aws.apigateway.method-setting/metricsEnabled :portkey.aws.apigateway.method-setting/cachingEnabled :portkey.aws.apigateway.method-setting/throttlingRateLimit :portkey.aws.apigateway.method-setting/cacheTtlInSeconds :portkey.aws.apigateway.method-setting/unauthorizedCacheControlHeaderStrategy :portkey.aws.apigateway.method-setting/cacheDataEncrypted :portkey.aws.apigateway.method-setting/throttlingBurstLimit :portkey.aws.apigateway.method-setting/requireAuthorizationForCacheControl :portkey.aws.apigateway.method-setting/dataTraceEnabled]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-documentation-part-request/restApiId :portkey.aws.apigateway.delete-documentation-part-request/documentationPartId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/status-code (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"[1-5]\d\d" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.apigateway.api-stage/api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-stage/stage (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/api-stage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.api-stage/apiId :portkey.aws.apigateway.api-stage/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-integration-response-request/restApiId :portkey.aws.apigateway.get-integration-response-request/resourceId :portkey.aws.apigateway.get-integration-response-request/httpMethod :portkey.aws.apigateway.get-integration-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-method (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/method))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-header-values (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/string))

(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part/location (clojure.spec.alpha/and :portkey.aws.apigateway/documentation-part-location))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part/properties (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-part (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.documentation-part/id :portkey.aws.apigateway.documentation-part/location :portkey.aws.apigateway.documentation-part/properties]))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-string-to-list (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/list-of-string))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-resource-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-resource-request/restApiId :portkey.aws.apigateway.get-resource-request/resourceId] :opt-un [:portkey.aws.apigateway.get-resource-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-request/start-date (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-request/end-date (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-usage-request/usagePlanId :portkey.aws.apigateway.get-usage-request/startDate :portkey.aws.apigateway.get-usage-request/endDate] :opt-un [:portkey.aws.apigateway.get-usage-request/keyId :portkey.aws.apigateway.get-usage-request/position :portkey.aws.apigateway.get-usage-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.method-snapshot/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-snapshot/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/method-snapshot (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.method-snapshot/authorizationType :portkey.aws.apigateway.method-snapshot/apiKeyRequired]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-base-path-mapping-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-base-path-mapping-request/domainName :portkey.aws.apigateway.update-base-path-mapping-request/basePath] :opt-un [:portkey.aws.apigateway.update-base-path-mapping-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-model (clojure.spec.alpha/coll-of :portkey.aws.apigateway/model :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-sdk-types-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-sdk-types-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-sdk-types-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.get-sdk-types-request/position :portkey.aws.apigateway.get-sdk-types-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.import-documentation-parts-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.import-documentation-parts-request/mode (clojure.spec.alpha/and :portkey.aws.apigateway/put-mode))
(clojure.spec.alpha/def :portkey.aws.apigateway.import-documentation-parts-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.import-documentation-parts-request/body (clojure.spec.alpha/and :portkey.aws.apigateway/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway/import-documentation-parts-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.import-documentation-parts-request/restApiId :portkey.aws.apigateway.import-documentation-parts-request/body] :opt-un [:portkey.aws.apigateway.import-documentation-parts-request/mode :portkey.aws.apigateway.import-documentation-parts-request/failOnWarnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.generate-client-certificate-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/generate-client-certificate-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.generate-client-certificate-request/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.rest-apis/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.rest-apis/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-rest-api))
(clojure.spec.alpha/def :portkey.aws.apigateway/rest-apis (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.rest-apis/position :portkey.aws.apigateway.rest-apis/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-sdk-configuration-property (clojure.spec.alpha/coll-of :portkey.aws.apigateway/sdk-configuration-property :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-client-certificate-request/clientCertificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.base-path-mappings/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.base-path-mappings/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-base-path-mapping))
(clojure.spec.alpha/def :portkey.aws.apigateway/base-path-mappings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.base-path-mappings/position :portkey.aws.apigateway.base-path-mappings/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-deployment-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-deployment-request/restApiId :portkey.aws.apigateway.update-deployment-request/deploymentId] :opt-un [:portkey.aws.apigateway.update-deployment-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-versions/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-versions/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-documentation-version))
(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-versions (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.documentation-versions/position :portkey.aws.apigateway.documentation-versions/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-string (clojure.spec.alpha/coll-of :portkey.aws.apigateway/string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/uri (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/integration-http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/request-templates (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/cache-namespace (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/passthrough-behavior (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/type (clojure.spec.alpha/and :portkey.aws.apigateway/integration-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/cache-key-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-request/credentials (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/put-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.put-integration-request/restApiId :portkey.aws.apigateway.put-integration-request/resourceId :portkey.aws.apigateway.put-integration-request/httpMethod :portkey.aws.apigateway.put-integration-request/type] :opt-un [:portkey.aws.apigateway.put-integration-request/uri :portkey.aws.apigateway.put-integration-request/integrationHttpMethod :portkey.aws.apigateway.put-integration-request/requestTemplates :portkey.aws.apigateway.put-integration-request/requestParameters :portkey.aws.apigateway.put-integration-request/cacheNamespace :portkey.aws.apigateway.put-integration-request/passthroughBehavior :portkey.aws.apigateway.put-integration-request/contentHandling :portkey.aws.apigateway.put-integration-request/cacheKeyParameters :portkey.aws.apigateway.put-integration-request/credentials]))

(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-part-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:response "RESPONSE", "PATH_PARAMETER" "PATH_PARAMETER", :api "API", :response-header "RESPONSE_HEADER", :method "METHOD", "API" "API", "REQUEST_HEADER" "REQUEST_HEADER", :path-parameter "PATH_PARAMETER", "METHOD" "METHOD", :request-body "REQUEST_BODY", :resource "RESOURCE", :request-header "REQUEST_HEADER", "RESOURCE" "RESOURCE", :response-body "RESPONSE_BODY", :query-parameter "QUERY_PARAMETER", "RESPONSE_HEADER" "RESPONSE_HEADER", :authorizer "AUTHORIZER", "REQUEST_BODY" "REQUEST_BODY", "QUERY_PARAMETER" "QUERY_PARAMETER", "AUTHORIZER" "AUTHORIZER", "MODEL" "MODEL", "RESPONSE" "RESPONSE", "RESPONSE_BODY" "RESPONSE_BODY", :model "MODEL"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-usage-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-usage-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-usage-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-usage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-usage-request/usagePlanId :portkey.aws.apigateway.update-usage-request/keyId] :opt-un [:portkey.aws.apigateway.update-usage-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-api-key-request/apiKey] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-documentation-part-request/restApiId :portkey.aws.apigateway.get-documentation-part-request/documentationPartId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.patch-operation/op (clojure.spec.alpha/and :portkey.aws.apigateway/op))
(clojure.spec.alpha/def :portkey.aws.apigateway.patch-operation/path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.patch-operation/value (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.patch-operation/from (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/patch-operation (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.patch-operation/op :portkey.aws.apigateway.patch-operation/path :portkey.aws.apigateway.patch-operation/value :portkey.aws.apigateway.patch-operation/from]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-base-path-mappings-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-base-path-mappings-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-base-path-mappings-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-base-path-mappings-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-base-path-mappings-request/domainName] :opt-un [:portkey.aws.apigateway.get-base-path-mappings-request/position :portkey.aws.apigateway.get-base-path-mappings-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-rest-api-request/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-rest-api-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-rest-api-request/version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-rest-api-request/clone-from (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-rest-api-request/binary-media-types (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-rest-api-request/name] :opt-un [:portkey.aws.apigateway.create-rest-api-request/description :portkey.aws.apigateway.create-rest-api-request/version :portkey.aws.apigateway.create-rest-api-request/cloneFrom :portkey.aws.apigateway.create-rest-api-request/binaryMediaTypes]))

(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/selection-pattern (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-integration-response-request/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway/put-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.put-integration-response-request/restApiId :portkey.aws.apigateway.put-integration-response-request/resourceId :portkey.aws.apigateway.put-integration-response-request/httpMethod :portkey.aws.apigateway.put-integration-response-request/statusCode] :opt-un [:portkey.aws.apigateway.put-integration-response-request/selectionPattern :portkey.aws.apigateway.put-integration-response-request/responseParameters :portkey.aws.apigateway.put-integration-response-request/responseTemplates :portkey.aws.apigateway.put-integration-response-request/contentHandling]))

(clojure.spec.alpha/def :portkey.aws.apigateway.stages/item (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway/stages (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.stages/item]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-request-validator (clojure.spec.alpha/coll-of :portkey.aws.apigateway/request-validator :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-gateway-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-gateway-response-request/restApiId :portkey.aws.apigateway.update-gateway-response-request/responseType] :opt-un [:portkey.aws.apigateway.update-gateway-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-authorizer-request/restApiId :portkey.aws.apigateway.get-authorizer-request/authorizerId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-rest-api (clojure.spec.alpha/coll-of :portkey.aws.apigateway/rest-api :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-usage-plan-key (clojure.spec.alpha/coll-of :portkey.aws.apigateway/usage-plan-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.template/value (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/template (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.template/value]))

(clojure.spec.alpha/def :portkey.aws.apigateway.limit-exceeded-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.limit-exceeded-exception/retryAfterSeconds :portkey.aws.apigateway.limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-export-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-export-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-export-request/export-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-export-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-export-request/accepts (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-export-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-export-request/restApiId :portkey.aws.apigateway.get-export-request/stageName :portkey.aws.apigateway.get-export-request/exportType] :opt-un [:portkey.aws.apigateway.get-export-request/parameters :portkey.aws.apigateway.get-export-request/accepts]))

(clojure.spec.alpha/def :portkey.aws.apigateway/nullable-boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-client-certificate-request/clientCertificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.method-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.method-response/response-models (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/method-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.method-response/statusCode :portkey.aws.apigateway.method-response/responseParameters :portkey.aws.apigateway.method-response/responseModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-deployment (clojure.spec.alpha/coll-of :portkey.aws.apigateway/deployment :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-model-request/flatten (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-model-request/restApiId :portkey.aws.apigateway.get-model-request/modelName] :opt-un [:portkey.aws.apigateway.get-model-request/flatten]))

(clojure.spec.alpha/def :portkey.aws.apigateway.request-validator/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.request-validator/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.request-validator/validate-request-body (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.request-validator/validate-request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/request-validator (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.request-validator/id :portkey.aws.apigateway.request-validator/name :portkey.aws.apigateway.request-validator/validateRequestBody :portkey.aws.apigateway.request-validator/validateRequestParameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-documentation-version-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-documentation-version-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-documentation-version-request/restApiId :portkey.aws.apigateway.create-documentation-version-request/documentationVersion] :opt-un [:portkey.aws.apigateway.create-documentation-version-request/stageName :portkey.aws.apigateway.create-documentation-version-request/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-request-validators-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-request-validators-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-request-validators-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-request-validators-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-request-validators-request/restApiId] :opt-un [:portkey.aws.apigateway.get-request-validators-request/position :portkey.aws.apigateway.get-request-validators-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-request/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-request/api-stages (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-api-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-request/throttle (clojure.spec.alpha/and :portkey.aws.apigateway/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-request/quota (clojure.spec.alpha/and :portkey.aws.apigateway/quota-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-usage-plan-request/name] :opt-un [:portkey.aws.apigateway.create-usage-plan-request/description :portkey.aws.apigateway.create-usage-plan-request/apiStages :portkey.aws.apigateway.create-usage-plan-request/throttle :portkey.aws.apigateway.create-usage-plan-request/quota]))

(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-type/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-type/friendly-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-type/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-type/configuration-properties (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-sdk-configuration-property))
(clojure.spec.alpha/def :portkey.aws.apigateway/sdk-type (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.sdk-type/id :portkey.aws.apigateway.sdk-type/friendlyName :portkey.aws.apigateway.sdk-type/description :portkey.aws.apigateway.sdk-type/configurationProperties]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.get-usage-plan-key-request/keyId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/cache-cluster-status (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"DELETE_IN_PROGRESS" "DELETE_IN_PROGRESS", "AVAILABLE" "AVAILABLE", :flush-in-progress "FLUSH_IN_PROGRESS", "CREATE_IN_PROGRESS" "CREATE_IN_PROGRESS", :delete-in-progress "DELETE_IN_PROGRESS", :create-in-progress "CREATE_IN_PROGRESS", "NOT_AVAILABLE" "NOT_AVAILABLE", "FLUSH_IN_PROGRESS" "FLUSH_IN_PROGRESS", :not-available "NOT_AVAILABLE", :available "AVAILABLE"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.service-unavailable-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.service-unavailable-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/service-unavailable-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.service-unavailable-exception/retryAfterSeconds :portkey.aws.apigateway.service-unavailable-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.client-certificates/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.client-certificates/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-client-certificate))
(clojure.spec.alpha/def :portkey.aws.apigateway/client-certificates (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.client-certificates/position :portkey.aws.apigateway.client-certificates/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.put-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-gateway-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-gateway-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-gateway-response-request/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/put-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.put-gateway-response-request/restApiId :portkey.aws.apigateway.put-gateway-response-request/responseType] :opt-un [:portkey.aws.apigateway.put-gateway-response-request/statusCode :portkey.aws.apigateway.put-gateway-response-request/responseParameters :portkey.aws.apigateway.put-gateway-response-request/responseTemplates]))

(clojure.spec.alpha/def :portkey.aws.apigateway.flush-stage-cache-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.flush-stage-cache-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/flush-stage-cache-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.flush-stage-cache-request/restApiId :portkey.aws.apigateway.flush-stage-cache-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-resource-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-resource-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-resource-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-resource-request/restApiId :portkey.aws.apigateway.update-resource-request/resourceId] :opt-un [:portkey.aws.apigateway.update-resource-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-gateway-response (clojure.spec.alpha/coll-of :portkey.aws.apigateway/gateway-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-string-to-boolean (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/nullable-boolean))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-method-settings (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/method-setting))

(clojure.spec.alpha/def :portkey.aws.apigateway/quota-period-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"DAY" "DAY", :day "DAY", "WEEK" "WEEK", :week "WEEK", "MONTH" "MONTH", :month "MONTH"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway/put-mode (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"merge" "merge", :merge "merge", "overwrite" "overwrite", :overwrite "overwrite"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.request-validators/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.request-validators/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-request-validator))
(clojure.spec.alpha/def :portkey.aws.apigateway/request-validators (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.request-validators/position :portkey.aws.apigateway.request-validators/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-method-response-request/restApiId :portkey.aws.apigateway.delete-method-response-request/resourceId :portkey.aws.apigateway.delete-method-response-request/httpMethod :portkey.aws.apigateway.delete-method-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-method-request/restApiId :portkey.aws.apigateway.get-method-request/resourceId :portkey.aws.apigateway.get-method-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan-keys/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan-keys/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-usage-plan-key))
(clojure.spec.alpha/def :portkey.aws.apigateway/usage-plan-keys (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.usage-plan-keys/position :portkey.aws.apigateway.usage-plan-keys/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan/api-stages (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-api-stage))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan/throttle (clojure.spec.alpha/and :portkey.aws.apigateway/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan/quota (clojure.spec.alpha/and :portkey.aws.apigateway/quota-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan/product-code (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/usage-plan (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.usage-plan/id :portkey.aws.apigateway.usage-plan/name :portkey.aws.apigateway.usage-plan/description :portkey.aws.apigateway.usage-plan/apiStages :portkey.aws.apigateway.usage-plan/throttle :portkey.aws.apigateway.usage-plan/quota :portkey.aws.apigateway.usage-plan/productCode]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-long (clojure.spec.alpha/coll-of :portkey.aws.apigateway/long :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-model-request/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-model-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-model-request/schema (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-model-request/content-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-model-request/restApiId :portkey.aws.apigateway.create-model-request/name :portkey.aws.apigateway.create-model-request/contentType] :opt-un [:portkey.aws.apigateway.create-model-request/description :portkey.aws.apigateway.create-model-request/schema]))

(clojure.spec.alpha/def :portkey.aws.apigateway.too-many-requests-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/too-many-requests-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.too-many-requests-exception/retryAfterSeconds :portkey.aws.apigateway.too-many-requests-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-rest-api-request/restApiId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-account-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-account-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.update-account-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-rest-apis-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-rest-apis-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-rest-apis-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.get-rest-apis-request/position :portkey.aws.apigateway.get-rest-apis-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-model-request/restApiId :portkey.aws.apigateway.delete-model-request/modelName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.throttle-settings/burst-limit (clojure.spec.alpha/and :portkey.aws.apigateway/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.throttle-settings/rate-limit (clojure.spec.alpha/and :portkey.aws.apigateway/double))
(clojure.spec.alpha/def :portkey.aws.apigateway/throttle-settings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.throttle-settings/burstLimit :portkey.aws.apigateway.throttle-settings/rateLimit]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-sdk-type (clojure.spec.alpha/coll-of :portkey.aws.apigateway/sdk-type :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway/cache-cluster-size (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"118" "118", "237" "237", "1.6" "1.6", :118 "118", "0.5" "0.5", :28.4 "28.4", :13.5 "13.5", "28.4" "28.4", "58.2" "58.2", :1.6 "1.6", "6.1" "6.1", :58.2 "58.2", :6.1 "6.1", :237 "237", :0.5 "0.5", "13.5" "13.5"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.gateway-response/response-type (clojure.spec.alpha/and :portkey.aws.apigateway/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.gateway-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.gateway-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.gateway-response/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.gateway-response/default-response (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/gateway-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.gateway-response/responseType :portkey.aws.apigateway.gateway-response/statusCode :portkey.aws.apigateway.gateway-response/responseParameters :portkey.aws.apigateway.gateway-response/responseTemplates :portkey.aws.apigateway.gateway-response/defaultResponse]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-model-template-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-model-template-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-model-template-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-model-template-request/restApiId :portkey.aws.apigateway.get-model-template-request/modelName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-integration-response-request/restApiId :portkey.aws.apigateway.delete-integration-response-request/resourceId :portkey.aws.apigateway.delete-integration-response-request/httpMethod :portkey.aws.apigateway.delete-integration-response-request/statusCode] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/integration-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:aws "AWS", "AWS" "AWS", :aws-proxy "AWS_PROXY", "MOCK" "MOCK", "AWS_PROXY" "AWS_PROXY", "HTTP_PROXY" "HTTP_PROXY", :http "HTTP", :http-proxy "HTTP_PROXY", "HTTP" "HTTP", :mock "MOCK"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.base-path-mapping/base-path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.base-path-mapping/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.base-path-mapping/stage (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/base-path-mapping (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.base-path-mapping/basePath :portkey.aws.apigateway.base-path-mapping/restApiId :portkey.aws.apigateway.base-path-mapping/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-request-validator-request/restApiId :portkey.aws.apigateway.get-request-validator-request/requestValidatorId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-resource (clojure.spec.alpha/coll-of :portkey.aws.apigateway/resource :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway/op (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:remove "remove", :copy "copy", "copy" "copy", :replace "replace", :move "move", "replace" "replace", "remove" "remove", "move" "move", "add" "add", :add "add", :test "test", "test" "test"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part-ids/ids (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part-ids/warnings (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-part-ids (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.documentation-part-ids/ids :portkey.aws.apigateway.documentation-part-ids/warnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-authorizers-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-authorizers-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-authorizers-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-authorizers-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-authorizers-request/restApiId] :opt-un [:portkey.aws.apigateway.get-authorizers-request/position :portkey.aws.apigateway.get-authorizers-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.model/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.model/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.model/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.model/schema (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.model/content-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/model (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.model/id :portkey.aws.apigateway.model/name :portkey.aws.apigateway.model/description :portkey.aws.apigateway.model/schema :portkey.aws.apigateway.model/contentType]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-domain-name-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-domain-name-request/domainName] :opt-un [:portkey.aws.apigateway.update-domain-name-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.delete-usage-plan-key-request/keyId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-base-path-mapping-request/domainName :portkey.aws.apigateway.get-base-path-mapping-request/basePath] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/authorizer-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"TOKEN" "TOKEN", :token "TOKEN", "COGNITO_USER_POOLS" "COGNITO_USER_POOLS", :cognito-user-pools "COGNITO_USER_POOLS"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-method-response-request/restApiId :portkey.aws.apigateway.update-method-response-request/resourceId :portkey.aws.apigateway.update-method-response-request/httpMethod :portkey.aws.apigateway.update-method-response-request/statusCode] :opt-un [:portkey.aws.apigateway.update-method-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-ofarns (clojure.spec.alpha/coll-of :portkey.aws.apigateway/providerarn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-api-stage (clojure.spec.alpha/coll-of :portkey.aws.apigateway/api-stage :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.domain-names/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.domain-names/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-domain-name))
(clojure.spec.alpha/def :portkey.aws.apigateway/domain-names (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.domain-names/position :portkey.aws.apigateway.domain-names/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-response-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-integration-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-integration-response-request/restApiId :portkey.aws.apigateway.update-integration-response-request/resourceId :portkey.aws.apigateway.update-integration-response-request/httpMethod :portkey.aws.apigateway.update-integration-response-request/statusCode] :opt-un [:portkey.aws.apigateway.update-integration-response-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.conflict-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-response-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-response-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-response-request/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-response-request/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-response-request/response-models (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/put-method-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.put-method-response-request/restApiId :portkey.aws.apigateway.put-method-response-request/resourceId :portkey.aws.apigateway.put-method-response-request/httpMethod :portkey.aws.apigateway.put-method-response-request/statusCode] :opt-un [:portkey.aws.apigateway.put-method-response-request/responseParameters :portkey.aws.apigateway.put-method-response-request/responseModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-domain-name-request/domainName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.account/cloudwatch-role-arn (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.account/throttle-settings (clojure.spec.alpha/and :portkey.aws.apigateway/throttle-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.account/features (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.account/api-key-version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/account (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.account/cloudwatchRoleArn :portkey.aws.apigateway.account/throttleSettings :portkey.aws.apigateway.account/features :portkey.aws.apigateway.account/apiKeyVersion]))

(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-response/status (clojure.spec.alpha/and :portkey.aws.apigateway/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-response/body (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-response/headers (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-header-values))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-response/log (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.test-invoke-method-response/latency (clojure.spec.alpha/and :portkey.aws.apigateway/long))
(clojure.spec.alpha/def :portkey.aws.apigateway/test-invoke-method-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.test-invoke-method-response/status :portkey.aws.apigateway.test-invoke-method-response/body :portkey.aws.apigateway.test-invoke-method-response/headers :portkey.aws.apigateway.test-invoke-method-response/log :portkey.aws.apigateway.test-invoke-method-response/latency]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-usage-plan-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-usage-plan-request/usagePlanId] :opt-un [:portkey.aws.apigateway.update-usage-plan-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-gateway-responses-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-gateway-responses-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-gateway-responses-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-gateway-responses-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-gateway-responses-request/restApiId] :opt-un [:portkey.aws.apigateway.get-gateway-responses-request/position :portkey.aws.apigateway.get-gateway-responses-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.method/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/operation-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/request-models (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/method-integration (clojure.spec.alpha/and :portkey.aws.apigateway/integration))
(clojure.spec.alpha/def :portkey.aws.apigateway.method/method-responses (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-method-response))
(clojure.spec.alpha/def :portkey.aws.apigateway/method (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.method/authorizerId :portkey.aws.apigateway.method/requestValidatorId :portkey.aws.apigateway.method/authorizationType :portkey.aws.apigateway.method/httpMethod :portkey.aws.apigateway.method/operationName :portkey.aws.apigateway.method/requestParameters :portkey.aws.apigateway.method/apiKeyRequired :portkey.aws.apigateway.method/requestModels :portkey.aws.apigateway.method/methodIntegration :portkey.aws.apigateway.method/methodResponses]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-stage (clojure.spec.alpha/coll-of :portkey.aws.apigateway/stage :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-deployment-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-deployment-request/stage-description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-deployment-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-deployment-request/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-deployment-request/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-deployment-request/variables (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-deployment-request/restApiId] :opt-un [:portkey.aws.apigateway.create-deployment-request/stageName :portkey.aws.apigateway.create-deployment-request/stageDescription :portkey.aws.apigateway.create-deployment-request/description :portkey.aws.apigateway.create-deployment-request/cacheClusterEnabled :portkey.aws.apigateway.create-deployment-request/cacheClusterSize :portkey.aws.apigateway.create-deployment-request/variables]))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-method-response (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/method-response))

(clojure.spec.alpha/def :portkey.aws.apigateway.resources/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.resources/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-resource))
(clojure.spec.alpha/def :portkey.aws.apigateway/resources (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.resources/position :portkey.aws.apigateway.resources/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-usage (clojure.spec.alpha/coll-of :portkey.aws.apigateway/list-of-long :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-request-validator-request/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-request-validator-request/validate-request-body (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-request-validator-request/validate-request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-request-validator-request/restApiId] :opt-un [:portkey.aws.apigateway.create-request-validator-request/name :portkey.aws.apigateway.create-request-validator-request/validateRequestBody :portkey.aws.apigateway.create-request-validator-request/validateRequestParameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-documentation-version-request/restApiId :portkey.aws.apigateway.get-documentation-version-request/documentationVersion] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.stage-key/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage-key/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/stage-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.stage-key/restApiId :portkey.aws.apigateway.stage-key/stageName]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-api-keys-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-api-keys-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-api-keys-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-api-keys-request/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-api-keys-request/include-values (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-api-keys-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.get-api-keys-request/position :portkey.aws.apigateway.get-api-keys-request/limit :portkey.aws.apigateway.get-api-keys-request/nameQuery :portkey.aws.apigateway.get-api-keys-request/customerId :portkey.aws.apigateway.get-api-keys-request/includeValues]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plan-keys-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plan-keys-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plan-keys-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plan-keys-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-usage-plan-keys-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-usage-plan-keys-request/usagePlanId] :opt-un [:portkey.aws.apigateway.get-usage-plan-keys-request/position :portkey.aws.apigateway.get-usage-plan-keys-request/limit :portkey.aws.apigateway.get-usage-plan-keys-request/nameQuery]))

(clojure.spec.alpha/def :portkey.aws.apigateway.not-found-exception/message (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-client-certificate-request/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-client-certificate-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-client-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-client-certificate-request/clientCertificateId] :opt-un [:portkey.aws.apigateway.update-client-certificate-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-api-key-request/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-api-key-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-api-key-request/enabled (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-api-key-request/generate-distinct-id (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-api-key-request/value (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-api-key-request/stage-keys (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-stage-keys))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-api-key-request/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-api-key-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.create-api-key-request/name :portkey.aws.apigateway.create-api-key-request/description :portkey.aws.apigateway.create-api-key-request/enabled :portkey.aws.apigateway.create-api-key-request/generateDistinctId :portkey.aws.apigateway.create-api-key-request/value :portkey.aws.apigateway.create-api-key-request/stageKeys :portkey.aws.apigateway.create-api-key-request/customerId]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-deployment-request/embed (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-deployment-request/restApiId :portkey.aws.apigateway.get-deployment-request/deploymentId] :opt-un [:portkey.aws.apigateway.get-deployment-request/embed]))

(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-types/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-types/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-sdk-type))
(clojure.spec.alpha/def :portkey.aws.apigateway/sdk-types (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.sdk-types/position :portkey.aws.apigateway.sdk-types/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-documentation-version-request/restApiId :portkey.aws.apigateway.delete-documentation-version-request/documentationVersion] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-client-certificates-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-client-certificates-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-client-certificates-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.get-client-certificates-request/position :portkey.aws.apigateway.get-client-certificates-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway/integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.apigateway/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-base-path-mapping-request/domainName :portkey.aws.apigateway.delete-base-path-mapping-request/basePath] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-documentation-version (clojure.spec.alpha/coll-of :portkey.aws.apigateway/documentation-version :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-model-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-model-request/model-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-model-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-model-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-model-request/restApiId :portkey.aws.apigateway.update-model-request/modelName] :opt-un [:portkey.aws.apigateway.update-model-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.quota-settings/limit (clojure.spec.alpha/and :portkey.aws.apigateway/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.quota-settings/offset (clojure.spec.alpha/and :portkey.aws.apigateway/integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.quota-settings/period (clojure.spec.alpha/and :portkey.aws.apigateway/quota-period-type))
(clojure.spec.alpha/def :portkey.aws.apigateway/quota-settings (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.quota-settings/limit :portkey.aws.apigateway.quota-settings/offset :portkey.aws.apigateway.quota-settings/period]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-documentation-version-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-documentation-version-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-documentation-version-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-documentation-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-documentation-version-request/restApiId :portkey.aws.apigateway.update-documentation-version-request/documentationVersion] :opt-un [:portkey.aws.apigateway.update-documentation-version-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-stage-request/restApiId :portkey.aws.apigateway.get-stage-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/providerarn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.apigateway/path-to-map-of-method-snapshot (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/map-of-method-snapshot))

(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan-key/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan-key/type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan-key/value (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plan-key/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/usage-plan-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.usage-plan-key/id :portkey.aws.apigateway.usage-plan-key/type :portkey.aws.apigateway.usage-plan-key/value :portkey.aws.apigateway.usage-plan-key/name]))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-string-to-string (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/string))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/authorizer-credentials (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/type (clojure.spec.alpha/and :portkey.aws.apigateway/authorizer-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/auth-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/identity-source (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-authorizer-request/providerarns (clojure.spec.alpha/and :portkey.aws.apigateway/list-ofarns))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-authorizer-request/restApiId :portkey.aws.apigateway.create-authorizer-request/name :portkey.aws.apigateway.create-authorizer-request/type :portkey.aws.apigateway.create-authorizer-request/identitySource] :opt-un [:portkey.aws.apigateway.create-authorizer-request/authorizerCredentials :portkey.aws.apigateway.create-authorizer-request/identityValidationExpression :portkey.aws.apigateway.create-authorizer-request/authorizerResultTtlInSeconds :portkey.aws.apigateway.create-authorizer-request/authorizerUri :portkey.aws.apigateway.create-authorizer-request/authType :portkey.aws.apigateway.create-authorizer-request/providerARNs]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-gateway-response-request/restApiId :portkey.aws.apigateway.delete-gateway-response-request/responseType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-gateway-response-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-gateway-response-request/response-type (clojure.spec.alpha/and :portkey.aws.apigateway/gateway-response-type))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-gateway-response-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-gateway-response-request/restApiId :portkey.aws.apigateway.get-gateway-response-request/responseType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-domain-names-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-domain-names-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-domain-names-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.get-domain-names-request/position :portkey.aws.apigateway.get-domain-names-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part-location/type (clojure.spec.alpha/and :portkey.aws.apigateway/documentation-part-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part-location/path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part-location/method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part-location/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/documentation-part-location-status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-part-location/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-part-location (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.documentation-part-location/type] :opt-un [:portkey.aws.apigateway.documentation-part-location/path :portkey.aws.apigateway.documentation-part-location/method :portkey.aws.apigateway.documentation-part-location/statusCode :portkey.aws.apigateway.documentation-part-location/name]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-base-path-mapping-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-base-path-mapping-request/base-path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-base-path-mapping-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-base-path-mapping-request/stage (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-base-path-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-base-path-mapping-request/domainName :portkey.aws.apigateway.create-base-path-mapping-request/restApiId] :opt-un [:portkey.aws.apigateway.create-base-path-mapping-request/basePath :portkey.aws.apigateway.create-base-path-mapping-request/stage]))

(clojure.spec.alpha/def :portkey.aws.apigateway.client-certificate/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.client-certificate/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.client-certificate/pem-encoded-certificate (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.client-certificate/created-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.client-certificate/expiration-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway/client-certificate (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.client-certificate/clientCertificateId :portkey.aws.apigateway.client-certificate/description :portkey.aws.apigateway.client-certificate/pemEncodedCertificate :portkey.aws.apigateway.client-certificate/createdDate :portkey.aws.apigateway.client-certificate/expirationDate]))

(clojure.spec.alpha/def :portkey.aws.apigateway.api-keys/warnings (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-keys/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-keys/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-api-key))
(clojure.spec.alpha/def :portkey.aws.apigateway/api-keys (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.api-keys/warnings :portkey.aws.apigateway.api-keys/position :portkey.aws.apigateway.api-keys/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plans/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage-plans/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-usage-plan))
(clojure.spec.alpha/def :portkey.aws.apigateway/usage-plans (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.usage-plans/position :portkey.aws.apigateway.usage-plans/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-key-usages (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/list-of-usage))

(clojure.spec.alpha/def :portkey.aws.apigateway/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-authorizer (clojure.spec.alpha/coll-of :portkey.aws.apigateway/authorizer :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/variables (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-stage-request/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-stage-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-stage-request/restApiId :portkey.aws.apigateway.create-stage-request/stageName :portkey.aws.apigateway.create-stage-request/deploymentId] :opt-un [:portkey.aws.apigateway.create-stage-request/description :portkey.aws.apigateway.create-stage-request/cacheClusterEnabled :portkey.aws.apigateway.create-stage-request/cacheClusterSize :portkey.aws.apigateway.create-stage-request/variables :portkey.aws.apigateway.create-stage-request/documentationVersion]))

(clojure.spec.alpha/def :portkey.aws.apigateway/timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.apigateway.authorizers/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizers/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-authorizer))
(clojure.spec.alpha/def :portkey.aws.apigateway/authorizers (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.authorizers/position :portkey.aws.apigateway.authorizers/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-models-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-models-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-models-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-models-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-models-request/restApiId] :opt-un [:portkey.aws.apigateway.get-models-request/position :portkey.aws.apigateway.get-models-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-api-key-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-api-key-request/apiKey] :opt-un [:portkey.aws.apigateway.update-api-key-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.usage/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage/start-date (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage/end-date (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.usage/items (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-key-usages))
(clojure.spec.alpha/def :portkey.aws.apigateway/usage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.usage/usagePlanId :portkey.aws.apigateway.usage/startDate :portkey.aws.apigateway.usage/endDate :portkey.aws.apigateway.usage/position :portkey.aws.apigateway.usage/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-rest-api-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-rest-api-request/restApiId] :opt-un [:portkey.aws.apigateway.update-rest-api-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway/api-keys-format (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"csv" "csv", :csv "csv"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-versions-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-versions-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-versions-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-documentation-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-documentation-versions-request/restApiId] :opt-un [:portkey.aws.apigateway.get-documentation-versions-request/position :portkey.aws.apigateway.get-documentation-versions-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-deployments-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-deployments-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-deployments-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-deployments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-deployments-request/restApiId] :opt-un [:portkey.aws.apigateway.get-deployments-request/position :portkey.aws.apigateway.get-deployments-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway/get-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-usage-plan (clojure.spec.alpha/coll-of :portkey.aws.apigateway/usage-plan :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.import-api-keys-request/body (clojure.spec.alpha/and :portkey.aws.apigateway/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway.import-api-keys-request/format (clojure.spec.alpha/and :portkey.aws.apigateway/api-keys-format))
(clojure.spec.alpha/def :portkey.aws.apigateway.import-api-keys-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/import-api-keys-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.import-api-keys-request/body :portkey.aws.apigateway.import-api-keys-request/format] :opt-un [:portkey.aws.apigateway.import-api-keys-request/failOnWarnings]))

(clojure.spec.alpha/def :portkey.aws.apigateway.resource/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.resource/parent-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.resource/path-part (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.resource/path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.resource/resource-methods (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-method))
(clojure.spec.alpha/def :portkey.aws.apigateway/resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.resource/id :portkey.aws.apigateway.resource/parentId :portkey.aws.apigateway.resource/pathPart :portkey.aws.apigateway.resource/path :portkey.aws.apigateway.resource/resourceMethods]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-key-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-key-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-usage-plan-key-request/key-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-usage-plan-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-usage-plan-key-request/usagePlanId :portkey.aws.apigateway.create-usage-plan-key-request/keyId :portkey.aws.apigateway.create-usage-plan-key-request/keyType] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-patch-operation (clojure.spec.alpha/coll-of :portkey.aws.apigateway/patch-operation :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-configuration-property/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-configuration-property/friendly-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-configuration-property/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-configuration-property/required (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-configuration-property/default-value (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/sdk-configuration-property (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.sdk-configuration-property/name :portkey.aws.apigateway.sdk-configuration-property/friendlyName :portkey.aws.apigateway.sdk-configuration-property/description :portkey.aws.apigateway.sdk-configuration-property/required :portkey.aws.apigateway.sdk-configuration-property/defaultValue]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-integration-request/restApiId :portkey.aws.apigateway.delete-integration-request/resourceId :portkey.aws.apigateway.delete-integration-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-response/content-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-response/content-disposition (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.sdk-response/body (clojure.spec.alpha/and :portkey.aws.apigateway/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway/sdk-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.sdk-response/contentType :portkey.aws.apigateway.sdk-response/contentDisposition :portkey.aws.apigateway.sdk-response/body]))

(clojure.spec.alpha/def :portkey.aws.apigateway.import-rest-api-request/fail-on-warnings (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.import-rest-api-request/parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.import-rest-api-request/body (clojure.spec.alpha/and :portkey.aws.apigateway/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway/import-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.import-rest-api-request/body] :opt-un [:portkey.aws.apigateway.import-rest-api-request/failOnWarnings :portkey.aws.apigateway.import-rest-api-request/parameters]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-parts-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-parts-request/type (clojure.spec.alpha/and :portkey.aws.apigateway/documentation-part-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-parts-request/name-query (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-parts-request/path (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-parts-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-documentation-parts-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-documentation-parts-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-documentation-parts-request/restApiId] :opt-un [:portkey.aws.apigateway.get-documentation-parts-request/type :portkey.aws.apigateway.get-documentation-parts-request/nameQuery :portkey.aws.apigateway.get-documentation-parts-request/path :portkey.aws.apigateway.get-documentation-parts-request/position :portkey.aws.apigateway.get-documentation-parts-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/created-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/enabled (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/stage-keys (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/customer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/value (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/last-updated-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.api-key/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/api-key (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.api-key/createdDate :portkey.aws.apigateway.api-key/enabled :portkey.aws.apigateway.api-key/id :portkey.aws.apigateway.api-key/stageKeys :portkey.aws.apigateway.api-key/customerId :portkey.aws.apigateway.api-key/name :portkey.aws.apigateway.api-key/value :portkey.aws.apigateway.api-key/lastUpdatedDate :portkey.aws.apigateway.api-key/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway/nullable-integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-method-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-method-request/restApiId :portkey.aws.apigateway.update-method-request/resourceId :portkey.aws.apigateway.update-method-request/httpMethod] :opt-un [:portkey.aws.apigateway.update-method-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.domain-name/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.domain-name/certificate-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.domain-name/certificate-arn (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.domain-name/certificate-upload-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.domain-name/distribution-domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/domain-name (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.domain-name/domainName :portkey.aws.apigateway.domain-name/certificateName :portkey.aws.apigateway.domain-name/certificateArn :portkey.aws.apigateway.domain-name/certificateUploadDate :portkey.aws.apigateway.domain-name/distributionDomainName]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-base-path-mapping (clojure.spec.alpha/coll-of :portkey.aws.apigateway/base-path-mapping :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway/blob (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.awsgen/base64-encode portkey.awsgen/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-integration-request/restApiId :portkey.aws.apigateway.get-integration-request/resourceId :portkey.aws.apigateway.get-integration-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-parts/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-parts/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-documentation-part))
(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-parts (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.documentation-parts/position :portkey.aws.apigateway.documentation-parts/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.export-response/content-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.export-response/content-disposition (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.export-response/body (clojure.spec.alpha/and :portkey.aws.apigateway/blob))
(clojure.spec.alpha/def :portkey.aws.apigateway/export-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.export-response/contentType :portkey.aws.apigateway.export-response/contentDisposition :portkey.aws.apigateway.export-response/body]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-method-request/restApiId :portkey.aws.apigateway.delete-method-request/resourceId :portkey.aws.apigateway.delete-method-request/httpMethod] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-api-key-request/api-key (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-api-key-request/include-value (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-api-key-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-api-key-request/apiKey] :opt-un [:portkey.aws.apigateway.get-api-key-request/includeValue]))

(clojure.spec.alpha/def :portkey.aws.apigateway.gateway-responses/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.gateway-responses/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-gateway-response))
(clojure.spec.alpha/def :portkey.aws.apigateway/gateway-responses (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.gateway-responses/position :portkey.aws.apigateway.gateway-responses/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-domain-name-request/domain-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-domain-name-request/certificate-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-domain-name-request/certificate-body (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-domain-name-request/certificate-private-key (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-domain-name-request/certificate-chain (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-domain-name-request/certificate-arn (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-domain-name-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-domain-name-request/domainName] :opt-un [:portkey.aws.apigateway.create-domain-name-request/certificateName :portkey.aws.apigateway.create-domain-name-request/certificateBody :portkey.aws.apigateway.create-domain-name-request/certificatePrivateKey :portkey.aws.apigateway.create-domain-name-request/certificateChain :portkey.aws.apigateway.create-domain-name-request/certificateArn]))

(clojure.spec.alpha/def :portkey.aws.apigateway.integration/integration-responses (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-integration-response))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/uri (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/request-templates (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/cache-namespace (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/passthrough-behavior (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/type (clojure.spec.alpha/and :portkey.aws.apigateway/integration-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/cache-key-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration/credentials (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/integration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.integration/integrationResponses :portkey.aws.apigateway.integration/uri :portkey.aws.apigateway.integration/httpMethod :portkey.aws.apigateway.integration/requestTemplates :portkey.aws.apigateway.integration/requestParameters :portkey.aws.apigateway.integration/cacheNamespace :portkey.aws.apigateway.integration/passthroughBehavior :portkey.aws.apigateway.integration/type :portkey.aws.apigateway.integration/contentHandling :portkey.aws.apigateway.integration/cacheKeyParameters :portkey.aws.apigateway.integration/credentials]))

(clojure.spec.alpha/def :portkey.aws.apigateway.flush-stage-authorizers-cache-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.flush-stage-authorizers-cache-request/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/flush-stage-authorizers-cache-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.flush-stage-authorizers-cache-request/restApiId :portkey.aws.apigateway.flush-stage-authorizers-cache-request/stageName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-version/version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-version/created-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.documentation-version/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/documentation-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.documentation-version/version :portkey.aws.apigateway.documentation-version/createdDate :portkey.aws.apigateway.documentation-version/description]))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plan-request/usage-plan-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-usage-plan-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-usage-plan-request/usagePlanId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/unauthorized-cache-control-header-strategy (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"FAIL_WITH_403" "FAIL_WITH_403", :fail-with-403 "FAIL_WITH_403", "SUCCEED_WITH_RESPONSE_HEADER" "SUCCEED_WITH_RESPONSE_HEADER", :succeed-with-response-header "SUCCEED_WITH_RESPONSE_HEADER", "SUCCEED_WITHOUT_RESPONSE_HEADER" "SUCCEED_WITHOUT_RESPONSE_HEADER", :succeed-without-response-header "SUCCEED_WITHOUT_RESPONSE_HEADER"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-deployment-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-deployment-request/restApiId :portkey.aws.apigateway.delete-deployment-request/deploymentId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-api-key (clojure.spec.alpha/coll-of :portkey.aws.apigateway/api-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.integration-response/status-code (clojure.spec.alpha/and :portkey.aws.apigateway/status-code))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration-response/selection-pattern (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration-response/response-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration-response/response-templates (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.integration-response/content-handling (clojure.spec.alpha/and :portkey.aws.apigateway/content-handling-strategy))
(clojure.spec.alpha/def :portkey.aws.apigateway/integration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.integration-response/statusCode :portkey.aws.apigateway.integration-response/selectionPattern :portkey.aws.apigateway.integration-response/responseParameters :portkey.aws.apigateway.integration-response/responseTemplates :portkey.aws.apigateway.integration-response/contentHandling]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-domain-name (clojure.spec.alpha/coll-of :portkey.aws.apigateway/domain-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-rest-api-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-rest-api-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.get-rest-api-request/restApiId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-integration-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-integration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-integration-request/restApiId :portkey.aws.apigateway.update-integration-request/resourceId :portkey.aws.apigateway.update-integration-request/httpMethod] :opt-un [:portkey.aws.apigateway.update-integration-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/resource-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/authorization-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/http-method (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/operation-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/request-parameters (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/api-key-required (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.put-method-request/request-models (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway/put-method-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.put-method-request/restApiId :portkey.aws.apigateway.put-method-request/resourceId :portkey.aws.apigateway.put-method-request/httpMethod :portkey.aws.apigateway.put-method-request/authorizationType] :opt-un [:portkey.aws.apigateway.put-method-request/authorizerId :portkey.aws.apigateway.put-method-request/requestValidatorId :portkey.aws.apigateway.put-method-request/operationName :portkey.aws.apigateway.put-method-request/requestParameters :portkey.aws.apigateway.put-method-request/apiKeyRequired :portkey.aws.apigateway.put-method-request/requestModels]))

(clojure.spec.alpha/def :portkey.aws.apigateway.models/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.models/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-model))
(clojure.spec.alpha/def :portkey.aws.apigateway/models (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.models/position :portkey.aws.apigateway.models/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-authorizer-request/restApiId :portkey.aws.apigateway.delete-authorizer-request/authorizerId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.stage/cache-cluster-status (clojure.spec.alpha/and :portkey.aws.apigateway/cache-cluster-status))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/created-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/documentation-version (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/method-settings (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-method-settings))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/deployment-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/client-certificate-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/last-updated-date (clojure.spec.alpha/and :portkey.aws.apigateway/timestamp))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/variables (clojure.spec.alpha/and :portkey.aws.apigateway/map-of-string-to-string))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/cache-cluster-enabled (clojure.spec.alpha/and :portkey.aws.apigateway/boolean))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/stage-name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/description (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.stage/cache-cluster-size (clojure.spec.alpha/and :portkey.aws.apigateway/cache-cluster-size))
(clojure.spec.alpha/def :portkey.aws.apigateway/stage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.stage/cacheClusterStatus :portkey.aws.apigateway.stage/createdDate :portkey.aws.apigateway.stage/documentationVersion :portkey.aws.apigateway.stage/methodSettings :portkey.aws.apigateway.stage/deploymentId :portkey.aws.apigateway.stage/clientCertificateId :portkey.aws.apigateway.stage/lastUpdatedDate :portkey.aws.apigateway.stage/variables :portkey.aws.apigateway.stage/cacheClusterEnabled :portkey.aws.apigateway.stage/stageName :portkey.aws.apigateway.stage/description :portkey.aws.apigateway.stage/cacheClusterSize]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-authorizer-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-authorizer-request/authorizer-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-authorizer-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-authorizer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-authorizer-request/restApiId :portkey.aws.apigateway.update-authorizer-request/authorizerId] :opt-un [:portkey.aws.apigateway.update-authorizer-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway/list-of-stage-keys (clojure.spec.alpha/coll-of :portkey.aws.apigateway/stage-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.apigateway/content-handling-strategy (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"CONVERT_TO_BINARY" "CONVERT_TO_BINARY", :convert-to-binary "CONVERT_TO_BINARY", "CONVERT_TO_TEXT" "CONVERT_TO_TEXT", :convert-to-text "CONVERT_TO_TEXT"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.apigateway.delete-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.delete-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/delete-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.delete-request-validator-request/restApiId :portkey.aws.apigateway.delete-request-validator-request/requestValidatorId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.create-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-documentation-part-request/location (clojure.spec.alpha/and :portkey.aws.apigateway/documentation-part-location))
(clojure.spec.alpha/def :portkey.aws.apigateway.create-documentation-part-request/properties (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway/create-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.create-documentation-part-request/restApiId :portkey.aws.apigateway.create-documentation-part-request/location :portkey.aws.apigateway.create-documentation-part-request/properties] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-request-validator-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-request-validator-request/request-validator-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-request-validator-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-request-validator-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-request-validator-request/restApiId :portkey.aws.apigateway.update-request-validator-request/requestValidatorId] :opt-un [:portkey.aws.apigateway.update-request-validator-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway/map-of-integration-response (clojure.spec.alpha/map-of :portkey.aws.apigateway/string :portkey.aws.apigateway/integration-response))

(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plans-request/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plans-request/key-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.get-usage-plans-request/limit (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway/get-usage-plans-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.get-usage-plans-request/position :portkey.aws.apigateway.get-usage-plans-request/keyId :portkey.aws.apigateway.get-usage-plans-request/limit]))

(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/authorizer-credentials (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/identity-validation-expression (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/name (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/type (clojure.spec.alpha/and :portkey.aws.apigateway/authorizer-type))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/authorizer-result-ttl-in-seconds (clojure.spec.alpha/and :portkey.aws.apigateway/nullable-integer))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/authorizer-uri (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/auth-type (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/identity-source (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.authorizer/providerarns (clojure.spec.alpha/and :portkey.aws.apigateway/list-ofarns))
(clojure.spec.alpha/def :portkey.aws.apigateway/authorizer (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.authorizer/authorizerCredentials :portkey.aws.apigateway.authorizer/identityValidationExpression :portkey.aws.apigateway.authorizer/id :portkey.aws.apigateway.authorizer/name :portkey.aws.apigateway.authorizer/type :portkey.aws.apigateway.authorizer/authorizerResultTtlInSeconds :portkey.aws.apigateway.authorizer/authorizerUri :portkey.aws.apigateway.authorizer/authType :portkey.aws.apigateway.authorizer/identitySource :portkey.aws.apigateway.authorizer/providerARNs]))

(clojure.spec.alpha/def :portkey.aws.apigateway.update-documentation-part-request/rest-api-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-documentation-part-request/documentation-part-id (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.update-documentation-part-request/patch-operations (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-patch-operation))
(clojure.spec.alpha/def :portkey.aws.apigateway/update-documentation-part-request (portkey.awsgen/json-keys :req-un [:portkey.aws.apigateway.update-documentation-part-request/restApiId :portkey.aws.apigateway.update-documentation-part-request/documentationPartId] :opt-un [:portkey.aws.apigateway.update-documentation-part-request/patchOperations]))

(clojure.spec.alpha/def :portkey.aws.apigateway.deployments/position (clojure.spec.alpha/and :portkey.aws.apigateway/string))
(clojure.spec.alpha/def :portkey.aws.apigateway.deployments/items (clojure.spec.alpha/and :portkey.aws.apigateway/list-of-deployment))
(clojure.spec.alpha/def :portkey.aws.apigateway/deployments (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.apigateway.deployments/position :portkey.aws.apigateway.deployments/items]))

(clojure.spec.alpha/def :portkey.aws.apigateway/boolean clojure.core/boolean?)

(clojure.core/defn flush-stage-cache ([input__33752__auto__] (flush-stage-cache input__33752__auto__ portkey.aws/*http-client*)) ([input35638 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/cache/data", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/FlushStageCacheRequest input35638)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["stage_name" "stageName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/cache/data", :body body__33756__auto__} (clojure.core/fn [response35637] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response35637)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35637 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35637)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35637}))))))))))

(clojure.core/defn get-usage-plan ([input__33752__auto__] (get-usage-plan input__33752__auto__ portkey.aws/*http-client*)) ([input35640 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetUsagePlanRequest input35640)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}", :body body__33756__auto__} (clojure.core/fn [response35639] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35639)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage-plan (:body response35639)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35639 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35639)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35639}))))))))))

(clojure.core/defn update-rest-api ([input__33752__auto__] (update-rest-api input__33752__auto__ portkey.aws/*http-client*)) ([input35642 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateRestApiRequest input35642)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body body__33756__auto__} (clojure.core/fn [response35641] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35641)) (clojure.spec.alpha/unform :portkey.aws.apigateway/rest-api (:body response35641)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35641 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35641)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35641}))))))))))

(clojure.core/defn update-account ([input__33752__auto__] (update-account input__33752__auto__ portkey.aws/*http-client*)) ([input35644 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/account", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateAccountRequest input35644)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/account", :body body__33756__auto__} (clojure.core/fn [response35643] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35643)) (clojure.spec.alpha/unform :portkey.aws.apigateway/account (:body response35643)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35643 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35643)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35643}))))))))))

(clojure.core/defn delete-rest-api ([input__33752__auto__] (delete-rest-api input__33752__auto__ portkey.aws/*http-client*)) ([input35646 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteRestApiRequest input35646)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body body__33756__auto__} (clojure.core/fn [response35645] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception}] (if (clojure.core/= 202 (:status response35645)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35645 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35645)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35645}))))))))))

(clojure.core/defn delete-method ([input__33752__auto__] (delete-method input__33752__auto__ portkey.aws/*http-client*)) ([input35648 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteMethodRequest input35648)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body body__33756__auto__} (clojure.core/fn [response35647] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 204 (:status response35647)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35647 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35647)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35647}))))))))))

(clojure.core/defn update-authorizer ([input__33752__auto__] (update-authorizer input__33752__auto__ portkey.aws/*http-client*)) ([input35650 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateAuthorizerRequest input35650)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["authorizer_id" "authorizerId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body body__33756__auto__} (clojure.core/fn [response35649] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35649)) (clojure.spec.alpha/unform :portkey.aws.apigateway/authorizer (:body response35649)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35649 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35649)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35649}))))))))))

(clojure.core/defn get-sdk-type ([input__33752__auto__] (get-sdk-type input__33752__auto__ portkey.aws/*http-client*)) ([input35652 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/sdktypes/{sdktype_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetSdkTypeRequest input35652)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["sdktype_id" "id"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/sdktypes/{sdktype_id}", :body body__33756__auto__} (clojure.core/fn [response35651] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35651)) (clojure.spec.alpha/unform :portkey.aws.apigateway/sdk-type (:body response35651)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35651 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35651)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35651}))))))))))

(clojure.core/defn update-domain-name ([input__33752__auto__] (update-domain-name input__33752__auto__ portkey.aws/*http-client*)) ([input35654 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateDomainNameRequest input35654)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}", :body body__33756__auto__} (clojure.core/fn [response35653] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35653)) (clojure.spec.alpha/unform :portkey.aws.apigateway/domain-name (:body response35653)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35653 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35653)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35653}))))))))))

(clojure.core/defn update-gateway-response ([input__33752__auto__] (update-gateway-response input__33752__auto__ portkey.aws/*http-client*)) ([input35656 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateGatewayResponseRequest input35656)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["response_type" "responseType"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body body__33756__auto__} (clojure.core/fn [response35655] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35655)) (clojure.spec.alpha/unform :portkey.aws.apigateway/gateway-response (:body response35655)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35655 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35655)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35655}))))))))))

(clojure.core/defn get-rest-apis ([input__33752__auto__] (get-rest-apis input__33752__auto__ portkey.aws/*http-client*)) ([input35658 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetRestApisRequest input35658)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis", :body body__33756__auto__} (clojure.core/fn [response35657] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35657)) (clojure.spec.alpha/unform :portkey.aws.apigateway/rest-apis (:body response35657)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35657 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35657)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35657}))))))))))

(clojure.core/defn get-documentation-parts ([input__33752__auto__] (get-documentation-parts input__33752__auto__ portkey.aws/*http-client*)) ([input35660 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDocumentationPartsRequest input35660)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["type" "type"] ["name" "nameQuery"] ["path" "path"] ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts", :body body__33756__auto__} (clojure.core/fn [response35659] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35659)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-parts (:body response35659)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35659 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35659)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35659}))))))))))

(clojure.core/defn get-deployment ([input__33752__auto__] (get-deployment input__33752__auto__ portkey.aws/*http-client*)) ([input35662 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments/{deployment_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDeploymentRequest input35662)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["deployment_id" "deploymentId"]) (portkey.awsgen/params-to-querystring ["embed" "embed"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments/{deployment_id}", :body body__33756__auto__} (clojure.core/fn [response35661] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway/service-unavailable-exception}] (if (clojure.core/= nil (:status response35661)) (clojure.spec.alpha/unform :portkey.aws.apigateway/deployment (:body response35661)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35661 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35661)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35661}))))))))))

(clojure.core/defn create-resource ([input__33752__auto__] (create-resource input__33752__auto__ portkey.aws/*http-client*)) ([input35664 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{parent_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateResourceRequest input35664)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["parent_id" "parentId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{parent_id}", :body body__33756__auto__} (clojure.core/fn [response35663] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35663)) (clojure.spec.alpha/unform :portkey.aws.apigateway/resource (:body response35663)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35663 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35663)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35663}))))))))))

(clojure.core/defn delete-documentation-version ([input__33752__auto__] (delete-documentation-version input__33752__auto__ portkey.aws/*http-client*)) ([input35666 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions/{doc_version}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteDocumentationVersionRequest input35666)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["doc_version" "documentationVersion"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions/{doc_version}", :body body__33756__auto__} (clojure.core/fn [response35665] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response35665)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35665 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35665)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35665}))))))))))

(clojure.core/defn delete-usage-plan ([input__33752__auto__] (delete-usage-plan input__33752__auto__ portkey.aws/*http-client*)) ([input35668 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteUsagePlanRequest input35668)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}", :body body__33756__auto__} (clojure.core/fn [response35667] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception}] (if (clojure.core/= 202 (:status response35667)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35667 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35667)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35667}))))))))))

(clojure.core/defn get-stages ([input__33752__auto__] (get-stages input__33752__auto__ portkey.aws/*http-client*)) ([input35670 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetStagesRequest input35670)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["deploymentId" "deploymentId"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages", :body body__33756__auto__} (clojure.core/fn [response35669] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35669)) (clojure.spec.alpha/unform :portkey.aws.apigateway/stages (:body response35669)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35669 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35669)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35669}))))))))))

(clojure.core/defn get-resource ([input__33752__auto__] (get-resource input__33752__auto__ portkey.aws/*http-client*)) ([input35672 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetResourceRequest input35672)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"]) (portkey.awsgen/params-to-querystring ["embed" "embed"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}", :body body__33756__auto__} (clojure.core/fn [response35671] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35671)) (clojure.spec.alpha/unform :portkey.aws.apigateway/resource (:body response35671)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35671 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35671)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35671}))))))))))

(clojure.core/defn update-documentation-part ([input__33752__auto__] (update-documentation-part input__33752__auto__ portkey.aws/*http-client*)) ([input35674 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts/{part_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateDocumentationPartRequest input35674)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["part_id" "documentationPartId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts/{part_id}", :body body__33756__auto__} (clojure.core/fn [response35673] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35673)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-part (:body response35673)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35673 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35673)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35673}))))))))))

(clojure.core/defn import-api-keys ([input__33752__auto__] (import-api-keys input__33752__auto__ portkey.aws/*http-client*)) ([input35676 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys?mode=import", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/ImportApiKeysRequest input35676)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["format" "format"] ["failonwarnings" "failOnWarnings"]) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys?mode=import", :body body__33756__auto__} (clojure.core/fn [response35675] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 201 (:status response35675)) (clojure.spec.alpha/unform :portkey.aws.apigateway/api-key-ids (:body response35675)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35675 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35675)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35675}))))))))))

(clojure.core/defn get-client-certificate ([input__33752__auto__] (get-client-certificate input__33752__auto__ portkey.aws/*http-client*)) ([input35678 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates/{clientcertificate_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetClientCertificateRequest input35678)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["clientcertificate_id" "clientCertificateId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates/{clientcertificate_id}", :body body__33756__auto__} (clojure.core/fn [response35677] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35677)) (clojure.spec.alpha/unform :portkey.aws.apigateway/client-certificate (:body response35677)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35677 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35677)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35677}))))))))))

(clojure.core/defn create-authorizer ([input__33752__auto__] (create-authorizer input__33752__auto__ portkey.aws/*http-client*)) ([input35680 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateAuthorizerRequest input35680)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers", :body body__33756__auto__} (clojure.core/fn [response35679] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35679)) (clojure.spec.alpha/unform :portkey.aws.apigateway/authorizer (:body response35679)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35679 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35679)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35679}))))))))))

(clojure.core/defn get-usage-plan-keys ([input__33752__auto__] (get-usage-plan-keys input__33752__auto__ portkey.aws/*http-client*)) ([input35682 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetUsagePlanKeysRequest input35682)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"] ["name" "nameQuery"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys", :body body__33756__auto__} (clojure.core/fn [response35681] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35681)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage-plan-keys (:body response35681)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35681 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35681)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35681}))))))))))

(clojure.core/defn get-gateway-response ([input__33752__auto__] (get-gateway-response input__33752__auto__ portkey.aws/*http-client*)) ([input35684 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetGatewayResponseRequest input35684)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["response_type" "responseType"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body body__33756__auto__} (clojure.core/fn [response35683] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35683)) (clojure.spec.alpha/unform :portkey.aws.apigateway/gateway-response (:body response35683)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35683 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35683)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35683}))))))))))

(clojure.core/defn get-deployments ([input__33752__auto__] (get-deployments input__33752__auto__ portkey.aws/*http-client*)) ([input35686 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDeploymentsRequest input35686)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments", :body body__33756__auto__} (clojure.core/fn [response35685] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway/service-unavailable-exception}] (if (clojure.core/= nil (:status response35685)) (clojure.spec.alpha/unform :portkey.aws.apigateway/deployments (:body response35685)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35685 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35685)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35685}))))))))))

(clojure.core/defn update-resource ([input__33752__auto__] (update-resource input__33752__auto__ portkey.aws/*http-client*)) ([input35688 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateResourceRequest input35688)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}", :body body__33756__auto__} (clojure.core/fn [response35687] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35687)) (clojure.spec.alpha/unform :portkey.aws.apigateway/resource (:body response35687)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35687 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35687)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35687}))))))))))

(clojure.core/defn get-authorizers ([input__33752__auto__] (get-authorizers input__33752__auto__ portkey.aws/*http-client*)) ([input35690 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetAuthorizersRequest input35690)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers", :body body__33756__auto__} (clojure.core/fn [response35689] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35689)) (clojure.spec.alpha/unform :portkey.aws.apigateway/authorizers (:body response35689)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35689 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35689)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35689}))))))))))

(clojure.core/defn get-base-path-mapping ([input__33752__auto__] (get-base-path-mapping input__33752__auto__ portkey.aws/*http-client*)) ([input35692 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings/{base_path}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetBasePathMappingRequest input35692)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"] ["base_path" "basePath"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings/{base_path}", :body body__33756__auto__} (clojure.core/fn [response35691] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35691)) (clojure.spec.alpha/unform :portkey.aws.apigateway/base-path-mapping (:body response35691)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35691 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35691)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35691}))))))))))

(clojure.core/defn delete-integration ([input__33752__auto__] (delete-integration input__33752__auto__ portkey.aws/*http-client*)) ([input35694 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteIntegrationRequest input35694)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body body__33756__auto__} (clojure.core/fn [response35693] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 204 (:status response35693)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35693 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35693)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35693}))))))))))

(clojure.core/defn get-request-validators ([input__33752__auto__] (get-request-validators input__33752__auto__ portkey.aws/*http-client*)) ([input35696 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetRequestValidatorsRequest input35696)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators", :body body__33756__auto__} (clojure.core/fn [response35695] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35695)) (clojure.spec.alpha/unform :portkey.aws.apigateway/request-validators (:body response35695)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35695 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35695)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35695}))))))))))

(clojure.core/defn create-domain-name ([input__33752__auto__] (create-domain-name input__33752__auto__ portkey.aws/*http-client*)) ([input35698 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateDomainNameRequest input35698)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames", :body body__33756__auto__} (clojure.core/fn [response35697] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35697)) (clojure.spec.alpha/unform :portkey.aws.apigateway/domain-name (:body response35697)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35697 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35697)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35697}))))))))))

(clojure.core/defn put-integration-response ([input__33752__auto__] (put-integration-response input__33752__auto__ portkey.aws/*http-client*)) ([input35700 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/PutIntegrationResponseRequest input35700)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response35699] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 201 (:status response35699)) (clojure.spec.alpha/unform :portkey.aws.apigateway/integration-response (:body response35699)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35699 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35699)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35699}))))))))))

(clojure.core/defn create-usage-plan ([input__33752__auto__] (create-usage-plan input__33752__auto__ portkey.aws/*http-client*)) ([input35702 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateUsagePlanRequest input35702)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans", :body body__33756__auto__} (clojure.core/fn [response35701] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception}] (if (clojure.core/= 201 (:status response35701)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage-plan (:body response35701)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35701 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35701)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35701}))))))))))

(clojure.core/defn create-api-key ([input__33752__auto__] (create-api-key input__33752__auto__ portkey.aws/*http-client*)) ([input35704 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateApiKeyRequest input35704)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys", :body body__33756__auto__} (clojure.core/fn [response35703] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 201 (:status response35703)) (clojure.spec.alpha/unform :portkey.aws.apigateway/api-key (:body response35703)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35703 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35703)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35703}))))))))))

(clojure.core/defn import-rest-api ([input__33752__auto__] (import-rest-api input__33752__auto__ portkey.aws/*http-client*)) ([input35706 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis?mode=import", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/ImportRestApiRequest input35706)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["failonwarnings" "failOnWarnings"] [nil "parameters"]) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis?mode=import", :body body__33756__auto__} (clojure.core/fn [response35705] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 201 (:status response35705)) (clojure.spec.alpha/unform :portkey.aws.apigateway/rest-api (:body response35705)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35705 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35705)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35705}))))))))))

(clojure.core/defn delete-api-key ([input__33752__auto__] (delete-api-key input__33752__auto__ portkey.aws/*http-client*)) ([input35708 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys/{api_Key}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteApiKeyRequest input35708)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["api_Key" "apiKey"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys/{api_Key}", :body body__33756__auto__} (clojure.core/fn [response35707] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response35707)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35707 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35707)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35707}))))))))))

(clojure.core/defn get-integration ([input__33752__auto__] (get-integration input__33752__auto__ portkey.aws/*http-client*)) ([input35710 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetIntegrationRequest input35710)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body body__33756__auto__} (clojure.core/fn [response35709] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35709)) (clojure.spec.alpha/unform :portkey.aws.apigateway/integration (:body response35709)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35709 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35709)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35709}))))))))))

(clojure.core/defn get-export ([input__33752__auto__] (get-export input__33752__auto__ portkey.aws/*http-client*)) ([input35712 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetExportRequest input35712)} (portkey.awsgen/params-to-header ["accepts" ["Accept" nil]]) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["stage_name" "stageName"] ["export_type" "exportType"]) (portkey.awsgen/params-to-querystring [nil "parameters"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/exports/{export_type}", :body body__33756__auto__} (clojure.core/fn [response35711] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35711)) (clojure.spec.alpha/unform :portkey.aws.apigateway/export-response (:body response35711)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35711 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35711)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35711}))))))))))

(clojure.core/defn delete-stage ([input__33752__auto__] (delete-stage input__33752__auto__ portkey.aws/*http-client*)) ([input35714 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteStageRequest input35714)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["stage_name" "stageName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}", :body body__33756__auto__} (clojure.core/fn [response35713] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception}] (if (clojure.core/= 202 (:status response35713)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35713 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35713)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35713}))))))))))

(clojure.core/defn delete-request-validator ([input__33752__auto__] (delete-request-validator input__33752__auto__ portkey.aws/*http-client*)) ([input35716 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteRequestValidatorRequest input35716)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["requestvalidator_id" "requestValidatorId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}", :body body__33756__auto__} (clojure.core/fn [response35715] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 202 (:status response35715)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35715 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35715)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35715}))))))))))

(clojure.core/defn get-gateway-responses ([input__33752__auto__] (get-gateway-responses input__33752__auto__ portkey.aws/*http-client*)) ([input35718 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetGatewayResponsesRequest input35718)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses", :body body__33756__auto__} (clojure.core/fn [response35717] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35717)) (clojure.spec.alpha/unform :portkey.aws.apigateway/gateway-responses (:body response35717)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35717 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35717)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35717}))))))))))

(clojure.core/defn put-method-response ([input__33752__auto__] (put-method-response input__33752__auto__ portkey.aws/*http-client*)) ([input35720 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/PutMethodResponseRequest input35720)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response35719] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35719)) (clojure.spec.alpha/unform :portkey.aws.apigateway/method-response (:body response35719)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35719 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35719)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35719}))))))))))

(clojure.core/defn get-model ([input__33752__auto__] (get-model input__33752__auto__ portkey.aws/*http-client*)) ([input35722 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetModelRequest input35722)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["model_name" "modelName"]) (portkey.awsgen/params-to-querystring ["flatten" "flatten"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}", :body body__33756__auto__} (clojure.core/fn [response35721] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35721)) (clojure.spec.alpha/unform :portkey.aws.apigateway/model (:body response35721)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35721 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35721)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35721}))))))))))

(clojure.core/defn create-model ([input__33752__auto__] (create-model input__33752__auto__ portkey.aws/*http-client*)) ([input35724 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateModelRequest input35724)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models", :body body__33756__auto__} (clojure.core/fn [response35723] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35723)) (clojure.spec.alpha/unform :portkey.aws.apigateway/model (:body response35723)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35723 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35723)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35723}))))))))))

(clojure.core/defn update-api-key ([input__33752__auto__] (update-api-key input__33752__auto__ portkey.aws/*http-client*)) ([input35726 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys/{api_Key}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateApiKeyRequest input35726)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["api_Key" "apiKey"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys/{api_Key}", :body body__33756__auto__} (clojure.core/fn [response35725] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= nil (:status response35725)) (clojure.spec.alpha/unform :portkey.aws.apigateway/api-key (:body response35725)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35725 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35725)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35725}))))))))))

(clojure.core/defn create-deployment ([input__33752__auto__] (create-deployment input__33752__auto__ portkey.aws/*http-client*)) ([input35728 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateDeploymentRequest input35728)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments", :body body__33756__auto__} (clojure.core/fn [response35727] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway/service-unavailable-exception}] (if (clojure.core/= 201 (:status response35727)) (clojure.spec.alpha/unform :portkey.aws.apigateway/deployment (:body response35727)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35727 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35727)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35727}))))))))))

(clojure.core/defn update-method ([input__33752__auto__] (update-method input__33752__auto__ portkey.aws/*http-client*)) ([input35730 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateMethodRequest input35730)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body body__33756__auto__} (clojure.core/fn [response35729] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35729)) (clojure.spec.alpha/unform :portkey.aws.apigateway/method (:body response35729)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35729 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35729)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35729}))))))))))

(clojure.core/defn test-invoke-authorizer ([input__33752__auto__] (test-invoke-authorizer input__33752__auto__ portkey.aws/*http-client*)) ([input35732 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/TestInvokeAuthorizerRequest input35732)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["authorizer_id" "authorizerId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body body__33756__auto__} (clojure.core/fn [response35731] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35731)) (clojure.spec.alpha/unform :portkey.aws.apigateway/test-invoke-authorizer-response (:body response35731)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35731 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35731)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35731}))))))))))

(clojure.core/defn create-documentation-part ([input__33752__auto__] (create-documentation-part input__33752__auto__ portkey.aws/*http-client*)) ([input35734 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateDocumentationPartRequest input35734)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts", :body body__33756__auto__} (clojure.core/fn [response35733] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35733)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-part (:body response35733)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35733 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35733)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35733}))))))))))

(clojure.core/defn update-stage ([input__33752__auto__] (update-stage input__33752__auto__ portkey.aws/*http-client*)) ([input35736 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateStageRequest input35736)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["stage_name" "stageName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}", :body body__33756__auto__} (clojure.core/fn [response35735] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35735)) (clojure.spec.alpha/unform :portkey.aws.apigateway/stage (:body response35735)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35735 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35735)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35735}))))))))))

(clojure.core/defn update-request-validator ([input__33752__auto__] (update-request-validator input__33752__auto__ portkey.aws/*http-client*)) ([input35738 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateRequestValidatorRequest input35738)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["requestvalidator_id" "requestValidatorId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}", :body body__33756__auto__} (clojure.core/fn [response35737] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35737)) (clojure.spec.alpha/unform :portkey.aws.apigateway/request-validator (:body response35737)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35737 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35737)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35737}))))))))))

(clojure.core/defn get-sdk-types ([input__33752__auto__] (get-sdk-types input__33752__auto__ portkey.aws/*http-client*)) ([input35740 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/sdktypes", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetSdkTypesRequest input35740)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/sdktypes", :body body__33756__auto__} (clojure.core/fn [response35739] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35739)) (clojure.spec.alpha/unform :portkey.aws.apigateway/sdk-types (:body response35739)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35739 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35739)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35739}))))))))))

(clojure.core/defn update-client-certificate ([input__33752__auto__] (update-client-certificate input__33752__auto__ portkey.aws/*http-client*)) ([input35742 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates/{clientcertificate_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateClientCertificateRequest input35742)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["clientcertificate_id" "clientCertificateId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates/{clientcertificate_id}", :body body__33756__auto__} (clojure.core/fn [response35741] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception}] (if (clojure.core/= nil (:status response35741)) (clojure.spec.alpha/unform :portkey.aws.apigateway/client-certificate (:body response35741)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35741 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35741)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35741}))))))))))

(clojure.core/defn update-model ([input__33752__auto__] (update-model input__33752__auto__ portkey.aws/*http-client*)) ([input35744 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateModelRequest input35744)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["model_name" "modelName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}", :body body__33756__auto__} (clojure.core/fn [response35743] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35743)) (clojure.spec.alpha/unform :portkey.aws.apigateway/model (:body response35743)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35743 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35743)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35743}))))))))))

(clojure.core/defn get-documentation-versions ([input__33752__auto__] (get-documentation-versions input__33752__auto__ portkey.aws/*http-client*)) ([input35746 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDocumentationVersionsRequest input35746)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions", :body body__33756__auto__} (clojure.core/fn [response35745] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35745)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-versions (:body response35745)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35745 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35745)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35745}))))))))))

(clojure.core/defn update-usage ([input__33752__auto__] (update-usage input__33752__auto__ portkey.aws/*http-client*)) ([input35748 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys/{keyId}/usage", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateUsageRequest input35748)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"] ["keyId" "keyId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys/{keyId}/usage", :body body__33756__auto__} (clojure.core/fn [response35747] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception}] (if (clojure.core/= nil (:status response35747)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage (:body response35747)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35747 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35747)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35747}))))))))))

(clojure.core/defn create-usage-plan-key ([input__33752__auto__] (create-usage-plan-key input__33752__auto__ portkey.aws/*http-client*)) ([input35750 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateUsagePlanKeyRequest input35750)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys", :body body__33756__auto__} (clojure.core/fn [response35749] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35749)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage-plan-key (:body response35749)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35749 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35749)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35749}))))))))))

(clojure.core/defn put-integration ([input__33752__auto__] (put-integration input__33752__auto__ portkey.aws/*http-client*)) ([input35752 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/PutIntegrationRequest input35752)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body body__33756__auto__} (clojure.core/fn [response35751] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35751)) (clojure.spec.alpha/unform :portkey.aws.apigateway/integration (:body response35751)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35751 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35751)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35751}))))))))))

(clojure.core/defn get-usage ([input__33752__auto__] (get-usage input__33752__auto__ portkey.aws/*http-client*)) ([input35754 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/usage", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetUsageRequest input35754)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"]) (portkey.awsgen/params-to-querystring ["keyId" "keyId"] ["startDate" "startDate"] ["endDate" "endDate"] ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/usage", :body body__33756__auto__} (clojure.core/fn [response35753] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35753)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage (:body response35753)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35753 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35753)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35753}))))))))))

(clojure.core/defn update-documentation-version ([input__33752__auto__] (update-documentation-version input__33752__auto__ portkey.aws/*http-client*)) ([input35756 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions/{doc_version}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateDocumentationVersionRequest input35756)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["doc_version" "documentationVersion"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions/{doc_version}", :body body__33756__auto__} (clojure.core/fn [response35755] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35755)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-version (:body response35755)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35755 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35755)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35755}))))))))))

(clojure.core/defn get-stage ([input__33752__auto__] (get-stage input__33752__auto__ portkey.aws/*http-client*)) ([input35758 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetStageRequest input35758)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["stage_name" "stageName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}", :body body__33756__auto__} (clojure.core/fn [response35757] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35757)) (clojure.spec.alpha/unform :portkey.aws.apigateway/stage (:body response35757)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35757 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35757)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35757}))))))))))

(clojure.core/defn update-method-response ([input__33752__auto__] (update-method-response input__33752__auto__ portkey.aws/*http-client*)) ([input35760 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateMethodResponseRequest input35760)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response35759] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35759)) (clojure.spec.alpha/unform :portkey.aws.apigateway/method-response (:body response35759)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35759 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35759)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35759}))))))))))

(clojure.core/defn create-base-path-mapping ([input__33752__auto__] (create-base-path-mapping input__33752__auto__ portkey.aws/*http-client*)) ([input35762 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateBasePathMappingRequest input35762)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings", :body body__33756__auto__} (clojure.core/fn [response35761] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35761)) (clojure.spec.alpha/unform :portkey.aws.apigateway/base-path-mapping (:body response35761)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35761 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35761)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35761}))))))))))

(clojure.core/defn get-documentation-part ([input__33752__auto__] (get-documentation-part input__33752__auto__ portkey.aws/*http-client*)) ([input35764 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts/{part_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDocumentationPartRequest input35764)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["part_id" "documentationPartId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts/{part_id}", :body body__33756__auto__} (clojure.core/fn [response35763] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35763)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-part (:body response35763)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35763 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35763)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35763}))))))))))

(clojure.core/defn delete-model ([input__33752__auto__] (delete-model input__33752__auto__ portkey.aws/*http-client*)) ([input35766 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteModelRequest input35766)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["model_name" "modelName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}", :body body__33756__auto__} (clojure.core/fn [response35765] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 202 (:status response35765)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35765 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35765)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35765}))))))))))

(clojure.core/defn import-documentation-parts ([input__33752__auto__] (import-documentation-parts input__33752__auto__ portkey.aws/*http-client*)) ([input35768 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/ImportDocumentationPartsRequest input35768)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["mode" "mode"] ["failonwarnings" "failOnWarnings"]) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts", :body body__33756__auto__} (clojure.core/fn [response35767] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35767)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-part-ids (:body response35767)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35767 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35767)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35767}))))))))))

(clojure.core/defn delete-method-response ([input__33752__auto__] (delete-method-response input__33752__auto__ portkey.aws/*http-client*)) ([input35770 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteMethodResponseRequest input35770)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response35769] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 204 (:status response35769)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35769 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35769)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35769}))))))))))

(clojure.core/defn get-client-certificates ([input__33752__auto__] (get-client-certificates input__33752__auto__ portkey.aws/*http-client*)) ([input35772 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetClientCertificatesRequest input35772)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates", :body body__33756__auto__} (clojure.core/fn [response35771] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35771)) (clojure.spec.alpha/unform :portkey.aws.apigateway/client-certificates (:body response35771)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35771 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35771)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35771}))))))))))

(clojure.core/defn get-api-keys ([input__33752__auto__] (get-api-keys input__33752__auto__ portkey.aws/*http-client*)) ([input35774 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetApiKeysRequest input35774)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"] ["name" "nameQuery"] ["customerId" "customerId"] ["includeValues" "includeValues"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys", :body body__33756__auto__} (clojure.core/fn [response35773] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35773)) (clojure.spec.alpha/unform :portkey.aws.apigateway/api-keys (:body response35773)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35773 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35773)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35773}))))))))))

(clojure.core/defn update-deployment ([input__33752__auto__] (update-deployment input__33752__auto__ portkey.aws/*http-client*)) ([input35776 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments/{deployment_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateDeploymentRequest input35776)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["deployment_id" "deploymentId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments/{deployment_id}", :body body__33756__auto__} (clojure.core/fn [response35775] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ServiceUnavailableException" :portkey.aws.apigateway/service-unavailable-exception}] (if (clojure.core/= nil (:status response35775)) (clojure.spec.alpha/unform :portkey.aws.apigateway/deployment (:body response35775)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35775 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35775)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35775}))))))))))

(clojure.core/defn delete-domain-name ([input__33752__auto__] (delete-domain-name input__33752__auto__ portkey.aws/*http-client*)) ([input35778 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteDomainNameRequest input35778)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}", :body body__33756__auto__} (clojure.core/fn [response35777] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response35777)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35777 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35777)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35777}))))))))))

(clojure.core/defn create-rest-api ([input__33752__auto__] (create-rest-api input__33752__auto__ portkey.aws/*http-client*)) ([input35780 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateRestApiRequest input35780)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis", :body body__33756__auto__} (clojure.core/fn [response35779] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35779)) (clojure.spec.alpha/unform :portkey.aws.apigateway/rest-api (:body response35779)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35779 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35779)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35779}))))))))))

(clojure.core/defn delete-authorizer ([input__33752__auto__] (delete-authorizer input__33752__auto__ portkey.aws/*http-client*)) ([input35782 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteAuthorizerRequest input35782)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["authorizer_id" "authorizerId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body body__33756__auto__} (clojure.core/fn [response35781] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 202 (:status response35781)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35781 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35781)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35781}))))))))))

(clojure.core/defn get-usage-plan-key ([input__33752__auto__] (get-usage-plan-key input__33752__auto__ portkey.aws/*http-client*)) ([input35784 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys/{keyId}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetUsagePlanKeyRequest input35784)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"] ["keyId" "keyId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys/{keyId}", :body body__33756__auto__} (clojure.core/fn [response35783] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35783)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage-plan-key (:body response35783)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35783 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35783)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35783}))))))))))

(clojure.core/defn delete-resource ([input__33752__auto__] (delete-resource input__33752__auto__ portkey.aws/*http-client*)) ([input35786 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteResourceRequest input35786)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}", :body body__33756__auto__} (clojure.core/fn [response35785] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response35785)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35785 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35785)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35785}))))))))))

(clojure.core/defn test-invoke-method ([input__33752__auto__] (test-invoke-method input__33752__auto__ portkey.aws/*http-client*)) ([input35788 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/TestInvokeMethodRequest input35788)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body body__33756__auto__} (clojure.core/fn [response35787] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35787)) (clojure.spec.alpha/unform :portkey.aws.apigateway/test-invoke-method-response (:body response35787)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35787 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35787)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35787}))))))))))

(clojure.core/defn get-method-response ([input__33752__auto__] (get-method-response input__33752__auto__ portkey.aws/*http-client*)) ([input35790 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetMethodResponseRequest input35790)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response35789] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35789)) (clojure.spec.alpha/unform :portkey.aws.apigateway/method-response (:body response35789)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35789 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35789)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35789}))))))))))

(clojure.core/defn get-request-validator ([input__33752__auto__] (get-request-validator input__33752__auto__ portkey.aws/*http-client*)) ([input35792 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetRequestValidatorRequest input35792)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["requestvalidator_id" "requestValidatorId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators/{requestvalidator_id}", :body body__33756__auto__} (clojure.core/fn [response35791] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35791)) (clojure.spec.alpha/unform :portkey.aws.apigateway/request-validator (:body response35791)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35791 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35791)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35791}))))))))))

(clojure.core/defn get-authorizer ([input__33752__auto__] (get-authorizer input__33752__auto__ portkey.aws/*http-client*)) ([input35794 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetAuthorizerRequest input35794)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["authorizer_id" "authorizerId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/authorizers/{authorizer_id}", :body body__33756__auto__} (clojure.core/fn [response35793] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35793)) (clojure.spec.alpha/unform :portkey.aws.apigateway/authorizer (:body response35793)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35793 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35793)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35793}))))))))))

(clojure.core/defn get-base-path-mappings ([input__33752__auto__] (get-base-path-mappings input__33752__auto__ portkey.aws/*http-client*)) ([input35796 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetBasePathMappingsRequest input35796)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings", :body body__33756__auto__} (clojure.core/fn [response35795] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35795)) (clojure.spec.alpha/unform :portkey.aws.apigateway/base-path-mappings (:body response35795)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35795 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35795)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35795}))))))))))

(clojure.core/defn delete-base-path-mapping ([input__33752__auto__] (delete-base-path-mapping input__33752__auto__ portkey.aws/*http-client*)) ([input35798 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings/{base_path}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteBasePathMappingRequest input35798)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"] ["base_path" "basePath"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings/{base_path}", :body body__33756__auto__} (clojure.core/fn [response35797] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response35797)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35797 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35797)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35797}))))))))))

(clojure.core/defn get-account ([input__33752__auto__] (get-account input__33752__auto__ portkey.aws/*http-client*)) ([input35800 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/account", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetAccountRequest input35800)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/account", :body body__33756__auto__} (clojure.core/fn [response35799] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35799)) (clojure.spec.alpha/unform :portkey.aws.apigateway/account (:body response35799)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35799 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35799)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35799}))))))))))

(clojure.core/defn get-integration-response ([input__33752__auto__] (get-integration-response input__33752__auto__ portkey.aws/*http-client*)) ([input35802 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetIntegrationResponseRequest input35802)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response35801] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35801)) (clojure.spec.alpha/unform :portkey.aws.apigateway/integration-response (:body response35801)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35801 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35801)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35801}))))))))))

(clojure.core/defn get-model-template ([input__33752__auto__] (get-model-template input__33752__auto__ portkey.aws/*http-client*)) ([input35804 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}/default_template", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetModelTemplateRequest input35804)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["model_name" "modelName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models/{model_name}/default_template", :body body__33756__auto__} (clojure.core/fn [response35803] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35803)) (clojure.spec.alpha/unform :portkey.aws.apigateway/template (:body response35803)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35803 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35803)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35803}))))))))))

(clojure.core/defn get-rest-api ([input__33752__auto__] (get-rest-api input__33752__auto__ portkey.aws/*http-client*)) ([input35806 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetRestApiRequest input35806)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body body__33756__auto__} (clojure.core/fn [response35805] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35805)) (clojure.spec.alpha/unform :portkey.aws.apigateway/rest-api (:body response35805)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35805 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35805)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35805}))))))))))

(clojure.core/defn delete-integration-response ([input__33752__auto__] (delete-integration-response input__33752__auto__ portkey.aws/*http-client*)) ([input35808 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteIntegrationResponseRequest input35808)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response35807] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 204 (:status response35807)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35807 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35807)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35807}))))))))))

(clojure.core/defn delete-usage-plan-key ([input__33752__auto__] (delete-usage-plan-key input__33752__auto__ portkey.aws/*http-client*)) ([input35810 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys/{keyId}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteUsagePlanKeyRequest input35810)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"] ["keyId" "keyId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}/keys/{keyId}", :body body__33756__auto__} (clojure.core/fn [response35809] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response35809)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35809 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35809)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35809}))))))))))

(clojure.core/defn delete-documentation-part ([input__33752__auto__] (delete-documentation-part input__33752__auto__ portkey.aws/*http-client*)) ([input35812 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts/{part_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteDocumentationPartRequest input35812)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["part_id" "documentationPartId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/parts/{part_id}", :body body__33756__auto__} (clojure.core/fn [response35811] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception}] (if (clojure.core/= 202 (:status response35811)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35811 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35811)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35811}))))))))))

(clojure.core/defn generate-client-certificate ([input__33752__auto__] (generate-client-certificate input__33752__auto__ portkey.aws/*http-client*)) ([input35814 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GenerateClientCertificateRequest input35814)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates", :body body__33756__auto__} (clojure.core/fn [response35813] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception}] (if (clojure.core/= 201 (:status response35813)) (clojure.spec.alpha/unform :portkey.aws.apigateway/client-certificate (:body response35813)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35813 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35813)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35813}))))))))))

(clojure.core/defn get-method ([input__33752__auto__] (get-method input__33752__auto__ portkey.aws/*http-client*)) ([input35816 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetMethodRequest input35816)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body body__33756__auto__} (clojure.core/fn [response35815] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35815)) (clojure.spec.alpha/unform :portkey.aws.apigateway/method (:body response35815)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35815 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35815)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35815}))))))))))

(clojure.core/defn get-models ([input__33752__auto__] (get-models input__33752__auto__ portkey.aws/*http-client*)) ([input35818 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetModelsRequest input35818)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/models", :body body__33756__auto__} (clojure.core/fn [response35817] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35817)) (clojure.spec.alpha/unform :portkey.aws.apigateway/models (:body response35817)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35817 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35817)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35817}))))))))))

(clojure.core/defn get-documentation-version ([input__33752__auto__] (get-documentation-version input__33752__auto__ portkey.aws/*http-client*)) ([input35820 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions/{doc_version}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDocumentationVersionRequest input35820)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["doc_version" "documentationVersion"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions/{doc_version}", :body body__33756__auto__} (clojure.core/fn [response35819] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35819)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-version (:body response35819)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35819 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35819)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35819}))))))))))

(clojure.core/defn create-documentation-version ([input__33752__auto__] (create-documentation-version input__33752__auto__ portkey.aws/*http-client*)) ([input35822 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateDocumentationVersionRequest input35822)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/documentation/versions", :body body__33756__auto__} (clojure.core/fn [response35821] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35821)) (clojure.spec.alpha/unform :portkey.aws.apigateway/documentation-version (:body response35821)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35821 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35821)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35821}))))))))))

(clojure.core/defn get-resources ([input__33752__auto__] (get-resources input__33752__auto__ portkey.aws/*http-client*)) ([input35824 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetResourcesRequest input35824)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"] ["embed" "embed"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources", :body body__33756__auto__} (clojure.core/fn [response35823] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35823)) (clojure.spec.alpha/unform :portkey.aws.apigateway/resources (:body response35823)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35823 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35823)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35823}))))))))))

(clojure.core/defn get-api-key ([input__33752__auto__] (get-api-key input__33752__auto__ portkey.aws/*http-client*)) ([input35826 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys/{api_Key}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetApiKeyRequest input35826)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["api_Key" "apiKey"]) (portkey.awsgen/params-to-querystring ["includeValue" "includeValue"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/apikeys/{api_Key}", :body body__33756__auto__} (clojure.core/fn [response35825] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35825)) (clojure.spec.alpha/unform :portkey.aws.apigateway/api-key (:body response35825)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35825 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35825)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35825}))))))))))

(clojure.core/defn create-stage ([input__33752__auto__] (create-stage input__33752__auto__ portkey.aws/*http-client*)) ([input35828 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateStageRequest input35828)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages", :body body__33756__auto__} (clojure.core/fn [response35827] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35827)) (clojure.spec.alpha/unform :portkey.aws.apigateway/stage (:body response35827)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35827 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35827)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35827}))))))))))

(clojure.core/defn delete-gateway-response ([input__33752__auto__] (delete-gateway-response input__33752__auto__ portkey.aws/*http-client*)) ([input35830 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteGatewayResponseRequest input35830)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["response_type" "responseType"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body body__33756__auto__} (clojure.core/fn [response35829] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= 202 (:status response35829)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35829 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35829)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35829}))))))))))

(clojure.core/defn update-integration ([input__33752__auto__] (update-integration input__33752__auto__ portkey.aws/*http-client*)) ([input35832 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateIntegrationRequest input35832)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration", :body body__33756__auto__} (clojure.core/fn [response35831] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= nil (:status response35831)) (clojure.spec.alpha/unform :portkey.aws.apigateway/integration (:body response35831)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35831 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35831)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35831}))))))))))

(clojure.core/defn flush-stage-authorizers-cache ([input__33752__auto__] (flush-stage-authorizers-cache input__33752__auto__ portkey.aws/*http-client*)) ([input35834 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/FlushStageAuthorizersCacheRequest input35834)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["stage_name" "stageName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/cache/authorizers", :body body__33756__auto__} (clojure.core/fn [response35833] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response35833)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35833 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35833)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35833}))))))))))

(clojure.core/defn delete-client-certificate ([input__33752__auto__] (delete-client-certificate input__33752__auto__ portkey.aws/*http-client*)) ([input35836 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates/{clientcertificate_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteClientCertificateRequest input35836)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["clientcertificate_id" "clientCertificateId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/clientcertificates/{clientcertificate_id}", :body body__33756__auto__} (clojure.core/fn [response35835] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception}] (if (clojure.core/= 202 (:status response35835)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35835 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35835)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35835}))))))))))

(clojure.core/defn put-gateway-response ([input__33752__auto__] (put-gateway-response input__33752__auto__ portkey.aws/*http-client*)) ([input35838 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/PutGatewayResponseRequest input35838)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["response_type" "responseType"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/gatewayresponses/{response_type}", :body body__33756__auto__} (clojure.core/fn [response35837] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35837)) (clojure.spec.alpha/unform :portkey.aws.apigateway/gateway-response (:body response35837)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35837 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35837)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35837}))))))))))

(clojure.core/defn get-domain-name ([input__33752__auto__] (get-domain-name input__33752__auto__ portkey.aws/*http-client*)) ([input35840 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDomainNameRequest input35840)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}", :body body__33756__auto__} (clojure.core/fn [response35839] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ServiceUnavailableException" :portkey.aws.apigateway/service-unavailable-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35839)) (clojure.spec.alpha/unform :portkey.aws.apigateway/domain-name (:body response35839)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35839 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35839)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35839}))))))))))

(clojure.core/defn update-base-path-mapping ([input__33752__auto__] (update-base-path-mapping input__33752__auto__ portkey.aws/*http-client*)) ([input35842 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings/{base_path}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateBasePathMappingRequest input35842)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["domain_name" "domainName"] ["base_path" "basePath"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames/{domain_name}/basepathmappings/{base_path}", :body body__33756__auto__} (clojure.core/fn [response35841] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35841)) (clojure.spec.alpha/unform :portkey.aws.apigateway/base-path-mapping (:body response35841)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35841 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35841)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35841}))))))))))

(clojure.core/defn get-usage-plans ([input__33752__auto__] (get-usage-plans input__33752__auto__ portkey.aws/*http-client*)) ([input35844 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetUsagePlansRequest input35844)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["position" "position"] ["keyId" "keyId"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans", :body body__33756__auto__} (clojure.core/fn [response35843] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception}] (if (clojure.core/= nil (:status response35843)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage-plans (:body response35843)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35843 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35843)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35843}))))))))))

(clojure.core/defn update-usage-plan ([input__33752__auto__] (update-usage-plan input__33752__auto__ portkey.aws/*http-client*)) ([input35846 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateUsagePlanRequest input35846)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["usageplanId" "usagePlanId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/usageplans/{usageplanId}", :body body__33756__auto__} (clojure.core/fn [response35845] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= nil (:status response35845)) (clojure.spec.alpha/unform :portkey.aws.apigateway/usage-plan (:body response35845)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35845 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35845)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35845}))))))))))

(clojure.core/defn get-sdk ([input__33752__auto__] (get-sdk input__33752__auto__ portkey.aws/*http-client*)) ([input35848 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetSdkRequest input35848)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["stage_name" "stageName"] ["sdk_type" "sdkType"]) (portkey.awsgen/params-to-querystring [nil "parameters"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/stages/{stage_name}/sdks/{sdk_type}", :body body__33756__auto__} (clojure.core/fn [response35847] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35847)) (clojure.spec.alpha/unform :portkey.aws.apigateway/sdk-response (:body response35847)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35847 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35847)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35847}))))))))))

(clojure.core/defn put-method ([input__33752__auto__] (put-method input__33752__auto__ portkey.aws/*http-client*)) ([input35850 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/PutMethodRequest input35850)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}", :body body__33756__auto__} (clojure.core/fn [response35849] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35849)) (clojure.spec.alpha/unform :portkey.aws.apigateway/method (:body response35849)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35849 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35849)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35849}))))))))))

(clojure.core/defn update-integration-response ([input__33752__auto__] (update-integration-response input__33752__auto__ portkey.aws/*http-client*)) ([input35852 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/UpdateIntegrationResponseRequest input35852)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["resource_id" "resourceId"] ["http_method" "httpMethod"] ["status_code" "statusCode"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/resources/{resource_id}/methods/{http_method}/integration/responses/{status_code}", :body body__33756__auto__} (clojure.core/fn [response35851] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35851)) (clojure.spec.alpha/unform :portkey.aws.apigateway/integration-response (:body response35851)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35851 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35851)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35851}))))))))))

(clojure.core/defn get-domain-names ([input__33752__auto__] (get-domain-names input__33752__auto__ portkey.aws/*http-client*)) ([input35854 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/GetDomainNamesRequest input35854)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["position" "position"] ["limit" "limit"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/domainnames", :body body__33756__auto__} (clojure.core/fn [response35853] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= nil (:status response35853)) (clojure.spec.alpha/unform :portkey.aws.apigateway/domain-names (:body response35853)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35853 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35853)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35853}))))))))))

(clojure.core/defn put-rest-api ([input__33752__auto__] (put-rest-api input__33752__auto__ portkey.aws/*http-client*)) ([input35856 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/PutRestApiRequest input35856)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring ["mode" "mode"] ["failonwarnings" "failOnWarnings"] [nil "parameters"]) (portkey.awsgen/params-to-payload "body") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}", :body body__33756__auto__} (clojure.core/fn [response35855] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception, "ConflictException" :portkey.aws.apigateway/conflict-exception}] (if (clojure.core/= nil (:status response35855)) (clojure.spec.alpha/unform :portkey.aws.apigateway/rest-api (:body response35855)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35855 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35855)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35855}))))))))))

(clojure.core/defn create-request-validator ([input__33752__auto__] (create-request-validator input__33752__auto__ portkey.aws/*http-client*)) ([input35858 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/CreateRequestValidatorRequest input35858)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/requestvalidators", :body body__33756__auto__} (clojure.core/fn [response35857] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.apigateway/bad-request-exception, "UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "LimitExceededException" :portkey.aws.apigateway/limit-exceeded-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35857)) (clojure.spec.alpha/unform :portkey.aws.apigateway/request-validator (:body response35857)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35857 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35857)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35857}))))))))))

(clojure.core/defn delete-deployment ([input__33752__auto__] (delete-deployment input__33752__auto__ portkey.aws/*http-client*)) ([input35860 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments/{deployment_id}", :body (clojure.spec.alpha/unform :portkey.aws.apigateway/DeleteDeploymentRequest input35860)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["restapi_id" "restApiId"] ["deployment_id" "deploymentId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/restapis/{restapi_id}/deployments/{deployment_id}", :body body__33756__auto__} (clojure.core/fn [response35859] (clojure.core/let [errors__33757__auto__ {"UnauthorizedException" :portkey.aws.apigateway/unauthorized-exception, "NotFoundException" :portkey.aws.apigateway/not-found-exception, "BadRequestException" :portkey.aws.apigateway/bad-request-exception, "TooManyRequestsException" :portkey.aws.apigateway/too-many-requests-exception}] (if (clojure.core/= 202 (:status response35859)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35859 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35859)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35859}))))))))))
