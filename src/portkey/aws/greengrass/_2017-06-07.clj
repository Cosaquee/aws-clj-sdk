(ns portkey.aws.greengrass.-2017-06-07 (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device-definition-version/devices (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/device-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.device-definition-version/Devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-function-definition-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-function-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.internal-server-error-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/ErrorDetails :portkey.aws.greengrass.-2017-06-07.internal-server-error-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-certificate-authority-properties (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/GroupCertificateAuthorityArn :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/GroupCertificateAuthorityId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/empty (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/definition-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.definition-information/Arn :portkey.aws.greengrass.-2017-06-07.definition-information/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.definition-information/Id :portkey.aws.greengrass.-2017-06-07.definition-information/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.definition-information/LatestVersion :portkey.aws.greengrass.-2017-06-07.definition-information/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.definition-information/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/deployment-status (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/error-message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/updated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-deployment-status-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/DeploymentStatus :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/ErrorMessage :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/UpdatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-device (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/device :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/cores (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/Cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/loggers (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/Loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/devices (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/Devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/created-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/group-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.deployment/CreatedAt :portkey.aws.greengrass.-2017-06-07.deployment/DeploymentArn :portkey.aws.greengrass.-2017-06-07.deployment/DeploymentId :portkey.aws.greengrass.-2017-06-07.deployment/GroupArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/bad-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/ErrorDetails :portkey.aws.greengrass.-2017-06-07.bad-request-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployment-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"NewDeployment" "NewDeployment", :new-deployment "NewDeployment", "Redeployment" "Redeployment", :redeployment "Redeployment"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-level (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {:warn "WARN", "WARN" "WARN", :debug "DEBUG", "ERROR" "ERROR", :fatal "FATAL", "DEBUG" "DEBUG", "FATAL" "FATAL", :info "INFO", :error "ERROR", "INFO" "INFO"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/host-address (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/metadata (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/port-number (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/connectivity-info (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.connectivity-info/HostAddress :portkey.aws.greengrass.-2017-06-07.connectivity-info/Id :portkey.aws.greengrass.-2017-06-07.connectivity-info/Metadata :portkey.aws.greengrass.-2017-06-07.connectivity-info/PortNumber]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-request/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/subscription-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/SubscriptionDefinitionId :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/SubscriptionDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"FileSystem" "FileSystem", :file-system "FileSystem", "AWSCloudWatch" "AWSCloudWatch", :awscloud-watch "AWSCloudWatch"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-response/AssociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-associated-role-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-associated-role-response/AssociatedAt :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/AmznClientToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-group-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/group-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/pem-encoded-certificate (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/GroupCertificateAuthorityArn :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/GroupCertificateAuthorityId :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/PemEncodedCertificate]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-core (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/core :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-response/DisassociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/function-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/FunctionDefinitionId :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/FunctionDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-associated-role-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-associated-role-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-definition-version/functions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-definition-version/Functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger-definition-version/loggers (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.logger-definition-version/Loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-request/SubscriptionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/device-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/DeviceDefinitionVersionId :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-response/Arn :portkey.aws.greengrass.-2017-06-07.get-group-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-group-response/Id :portkey.aws.greengrass.-2017-06-07.get-group-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-group-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-group-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-group-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/CertificateExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-response/groups (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-group-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-groups-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-groups-response/Groups :portkey.aws.greengrass.-2017-06-07.list-groups-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-certificate-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/CertificateExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-group-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-response/AssociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/ThingName] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/ConnectivityInfo]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-version-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/version-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/version-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.version-information/Arn :portkey.aws.greengrass.-2017-06-07.version-information/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.version-information/Id :portkey.aws.greengrass.-2017-06-07.version-information/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-version/CoreDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/DeviceDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/FunctionDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/LoggerDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/SubscriptionDefinitionVersionArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-information/Arn :portkey.aws.greengrass.-2017-06-07.group-information/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.group-information/Id :portkey.aws.greengrass.-2017-06-07.group-information/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.group-information/LatestVersion :portkey.aws.greengrass.-2017-06-07.group-information/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.group-information/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-function-definition-request/FunctionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.error-detail/detailed-error-code (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.error-detail/detailed-error-message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/error-detail (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.error-detail/DetailedErrorCode :portkey.aws.greengrass.-2017-06-07.error-detail/DetailedErrorMessage]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/logger-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/LoggerDefinitionVersionId :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/AssociatedAt :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/CertificateExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/ConnectivityInfo :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-deployments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-deployments-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-deployments-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-deployments-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-definition-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/definition-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-service-role-from-account-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.disassociate-service-role-from-account-response/DisassociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-response/group-certificate-authorities (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-group-certificate-authority-properties))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-response/GroupCertificateAuthorities]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core-definition-version/cores (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/core-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.core-definition-version/Cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-deployment-request/DeploymentId :portkey.aws.greengrass.-2017-06-07/DeploymentType :portkey.aws.greengrass.-2017-06-07.create-deployment-request/GroupVersionId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription-definition-version/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/subscription-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.subscription-definition-version/Subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-subscription-definition-request/SubscriptionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-response/GroupCertificateAuthorityArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-core-definition-request/CoreDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/CertificateExpiryInMilliseconds]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-deployment-status-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/GroupId :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/DeploymentId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-group-version-request/CoreDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/DeviceDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/FunctionDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/LoggerDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/SubscriptionDefinitionVersionArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-core-definition-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-core-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-group-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-group-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-group-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-group-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/core-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/CoreDefinitionId :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/CoreDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/environment (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-configuration-environment))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/exec-args (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/executable (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/memory-size (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/pinned (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/timeout (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-configuration/Environment :portkey.aws.greengrass.-2017-06-07.function-configuration/ExecArgs :portkey.aws.greengrass.-2017-06-07.function-configuration/Executable :portkey.aws.greengrass.-2017-06-07.function-configuration/MemorySize :portkey.aws.greengrass.-2017-06-07.function-configuration/Pinned :portkey.aws.greengrass.-2017-06-07.function-configuration/Timeout]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-groups-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-groups-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-groups-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration-environment/variables (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/map-of--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-configuration-environment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-configuration-environment/Variables]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-response/Arn :portkey.aws.greengrass.-2017-06-07.create-group-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-group-response/Id :portkey.aws.greengrass.-2017-06-07.create-group-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-group-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-group-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/error-details (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/error-detail :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/source (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/subject (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/target (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/subscription (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.subscription/Id :portkey.aws.greengrass.-2017-06-07.subscription/Source :portkey.aws.greengrass.-2017-06-07.subscription/Subject :portkey.aws.greengrass.-2017-06-07.subscription/Target]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-group-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-group-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/core (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.core/CertificateArn :portkey.aws.greengrass.-2017-06-07.core/Id :portkey.aws.greengrass.-2017-06-07.core/SyncShadow :portkey.aws.greengrass.-2017-06-07.core/ThingArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-version-request/GroupVersionId :portkey.aws.greengrass.-2017-06-07.get-group-version-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/Subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-deployments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/Deployments :portkey.aws.greengrass.-2017-06-07.list-deployments-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-subscription (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/subscription :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/functions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/Functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function/function-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function/FunctionArn :portkey.aws.greengrass.-2017-06-07/FunctionConfiguration :portkey.aws.greengrass.-2017-06-07.function/Id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-response/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-response/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-deployment-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-response/DeploymentArn :portkey.aws.greengrass.-2017-06-07.create-deployment-response/DeploymentId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-logger-definition-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-device-definition-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-device-definition-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-device-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-request/CoreDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/CertificateAuthorityId :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/device (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.device/CertificateArn :portkey.aws.greengrass.-2017-06-07.device/Id :portkey.aws.greengrass.-2017-06-07.device/SyncShadow :portkey.aws.greengrass.-2017-06-07.device/ThingArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-component (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"GreengrassSystem" "GreengrassSystem", :greengrass-system "GreengrassSystem", "Lambda" "Lambda", :lambda "Lambda"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-request/FunctionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/connectivity-info :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-group-certificate-authority-properties (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/group-certificate-authority-properties :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-connectivity-info-request/ThingName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-group-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-group-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-group-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.general-error/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/general-error (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/ErrorDetails :portkey.aws.greengrass.-2017-06-07.general-error/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-function (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/function :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/Message :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-group-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-logger (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/logger :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/map-of--string (clojure.spec.alpha/map-of :portkey.aws.greengrass.-2017-06-07/--string :portkey.aws.greengrass.-2017-06-07/--string))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/component (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-component))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/level (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-level))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/space (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/type (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-type))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.logger/Component :portkey.aws.greengrass.-2017-06-07.logger/Id :portkey.aws.greengrass.-2017-06-07.logger/Level :portkey.aws.greengrass.-2017-06-07.logger/Space :portkey.aws.greengrass.-2017-06-07.logger/Type]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployments (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/deployment :max-count nil))

(clojure.core/defn create-device-definition ([input__36693__auto__] (create-device-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37107 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateDeviceDefinitionRequest input37107)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices", :body body__36697__auto__} (clojure.core/fn [response37106] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37106)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-device-definition-response (:body response37106)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37106 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37106)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37106}))))))))))

(clojure.core/defn get-function-definition ([input__36693__auto__] (get-function-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37109 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions/{FunctionDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetFunctionDefinitionRequest input37109)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions/{FunctionDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37108] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37108)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-function-definition-response (:body response37108)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37108 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37108)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37108}))))))))))

(clojure.core/defn delete-group ([input__36693__auto__] (delete-group input__36693__auto__ portkey.aws/*http-client*)) ([input37111 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteGroupRequest input37111)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}", :body body__36697__auto__} (clojure.core/fn [response37110] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37110)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-group-response (:body response37110)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37110 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37110)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37110}))))))))))

(clojure.core/defn create-device-definition-version ([input__36693__auto__] (create-device-definition-version input__36693__auto__ portkey.aws/*http-client*)) ([input37113 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices/{DeviceDefinitionId}/versions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateDeviceDefinitionVersionRequest input37113)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices/{DeviceDefinitionId}/versions", :body body__36697__auto__} (clojure.core/fn [response37112] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37112)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-response (:body response37112)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37112 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37112)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37112}))))))))))

(clojure.core/defn list-logger-definitions ([input__36693__auto__] (list-logger-definitions input__36693__auto__ portkey.aws/*http-client*)) ([input37115 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListLoggerDefinitionsRequest input37115)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers", :body body__36697__auto__} (clojure.core/fn [response37114] (clojure.core/let [errors__36698__auto__ {}] (if (clojure.core/= 200 (:status response37114)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-response (:body response37114)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37114 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37114)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37114}))))))))))

(clojure.core/defn list-function-definitions ([input__36693__auto__] (list-function-definitions input__36693__auto__ portkey.aws/*http-client*)) ([input37117 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListFunctionDefinitionsRequest input37117)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions", :body body__36697__auto__} (clojure.core/fn [response37116] (clojure.core/let [errors__36698__auto__ {}] (if (clojure.core/= 200 (:status response37116)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-function-definitions-response (:body response37116)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37116 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37116)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37116}))))))))))

(clojure.core/defn create-function-definition ([input__36693__auto__] (create-function-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37119 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateFunctionDefinitionRequest input37119)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions", :body body__36697__auto__} (clojure.core/fn [response37118] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37118)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-function-definition-response (:body response37118)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37118 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37118)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37118}))))))))))

(clojure.core/defn create-core-definition ([input__36693__auto__] (create-core-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37121 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateCoreDefinitionRequest input37121)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores", :body body__36697__auto__} (clojure.core/fn [response37120] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37120)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-core-definition-response (:body response37120)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37120 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37120)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37120}))))))))))

(clojure.core/defn list-groups ([input__36693__auto__] (list-groups input__36693__auto__ portkey.aws/*http-client*)) ([input37123 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListGroupsRequest input37123)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups", :body body__36697__auto__} (clojure.core/fn [response37122] (clojure.core/let [errors__36698__auto__ {}] (if (clojure.core/= 200 (:status response37122)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-groups-response (:body response37122)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37122 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37122)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37122}))))))))))

(clojure.core/defn create-logger-definition ([input__36693__auto__] (create-logger-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37125 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateLoggerDefinitionRequest input37125)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers", :body body__36697__auto__} (clojure.core/fn [response37124] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37124)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-logger-definition-response (:body response37124)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37124 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37124)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37124}))))))))))

(clojure.core/defn get-subscription-definition-version ([input__36693__auto__] (get-subscription-definition-version input__36693__auto__ portkey.aws/*http-client*)) ([input37127 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetSubscriptionDefinitionVersionRequest input37127)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId", "SubscriptionDefinitionVersionId" "SubscriptionDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}", :body body__36697__auto__} (clojure.core/fn [response37126] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37126)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-response (:body response37126)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37126 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37126)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37126}))))))))))

(clojure.core/defn list-function-definition-versions ([input__36693__auto__] (list-function-definition-versions input__36693__auto__ portkey.aws/*http-client*)) ([input37129 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions/{FunctionDefinitionId}/versions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListFunctionDefinitionVersionsRequest input37129)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions/{FunctionDefinitionId}/versions", :body body__36697__auto__} (clojure.core/fn [response37128] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37128)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-response (:body response37128)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37128 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37128)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37128}))))))))))

(clojure.core/defn update-logger-definition ([input__36693__auto__] (update-logger-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37131 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers/{LoggerDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateLoggerDefinitionRequest input37131)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers/{LoggerDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37130] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37130)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-logger-definition-response (:body response37130)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37130 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37130)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37130}))))))))))

(clojure.core/defn disassociate-service-role-from-account ([input__36693__auto__] (disassociate-service-role-from-account input__36693__auto__ portkey.aws/*http-client*)) ([input37133 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/servicerole", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DisassociateServiceRoleFromAccountRequest input37133)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/servicerole", :body body__36697__auto__} (clojure.core/fn [response37132] (clojure.core/let [errors__36698__auto__ {"InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response37132)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-response (:body response37132)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37132 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37132)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37132}))))))))))

(clojure.core/defn create-subscription-definition-version ([input__36693__auto__] (create-subscription-definition-version input__36693__auto__ portkey.aws/*http-client*)) ([input37135 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateSubscriptionDefinitionVersionRequest input37135)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions", :body body__36697__auto__} (clojure.core/fn [response37134] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37134)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-response (:body response37134)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37134 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37134)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37134}))))))))))

(clojure.core/defn delete-subscription-definition ([input__36693__auto__] (delete-subscription-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37137 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions/{SubscriptionDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteSubscriptionDefinitionRequest input37137)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions/{SubscriptionDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37136] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37136)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-response (:body response37136)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37136 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37136)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37136}))))))))))

(clojure.core/defn create-logger-definition-version ([input__36693__auto__] (create-logger-definition-version input__36693__auto__ portkey.aws/*http-client*)) ([input37139 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers/{LoggerDefinitionId}/versions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateLoggerDefinitionVersionRequest input37139)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers/{LoggerDefinitionId}/versions", :body body__36697__auto__} (clojure.core/fn [response37138] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37138)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-response (:body response37138)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37138 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37138)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37138}))))))))))

(clojure.core/defn delete-logger-definition ([input__36693__auto__] (delete-logger-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37141 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers/{LoggerDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteLoggerDefinitionRequest input37141)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers/{LoggerDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37140] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37140)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-response (:body response37140)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37140 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37140)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37140}))))))))))

(clojure.core/defn get-subscription-definition ([input__36693__auto__] (get-subscription-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37143 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions/{SubscriptionDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetSubscriptionDefinitionRequest input37143)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions/{SubscriptionDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37142] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37142)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-response (:body response37142)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37142 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37142)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37142}))))))))))

(clojure.core/defn update-group-certificate-configuration ([input__36693__auto__] (update-group-certificate-configuration input__36693__auto__ portkey.aws/*http-client*)) ([input37145 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateGroupCertificateConfigurationRequest input37145)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry", :body body__36697__auto__} (clojure.core/fn [response37144] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response37144)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-response (:body response37144)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37144 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37144)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37144}))))))))))

(clojure.core/defn create-deployment ([input__36693__auto__] (create-deployment input__36693__auto__ portkey.aws/*http-client*)) ([input37147 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/deployments", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateDeploymentRequest input37147)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/deployments", :body body__36697__auto__} (clojure.core/fn [response37146] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37146)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-deployment-response (:body response37146)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37146 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37146)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37146}))))))))))

(clojure.core/defn delete-device-definition ([input__36693__auto__] (delete-device-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37149 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices/{DeviceDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteDeviceDefinitionRequest input37149)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices/{DeviceDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37148] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37148)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-device-definition-response (:body response37148)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37148 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37148)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37148}))))))))))

(clojure.core/defn list-subscription-definitions ([input__36693__auto__] (list-subscription-definitions input__36693__auto__ portkey.aws/*http-client*)) ([input37151 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListSubscriptionDefinitionsRequest input37151)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions", :body body__36697__auto__} (clojure.core/fn [response37150] (clojure.core/let [errors__36698__auto__ {}] (if (clojure.core/= 200 (:status response37150)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-response (:body response37150)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37150 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37150)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37150}))))))))))

(clojure.core/defn list-group-versions ([input__36693__auto__] (list-group-versions input__36693__auto__ portkey.aws/*http-client*)) ([input37153 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/versions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListGroupVersionsRequest input37153)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/versions", :body body__36697__auto__} (clojure.core/fn [response37152] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37152)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-group-versions-response (:body response37152)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37152 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37152)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37152}))))))))))

(clojure.core/defn list-subscription-definition-versions ([input__36693__auto__] (list-subscription-definition-versions input__36693__auto__ portkey.aws/*http-client*)) ([input37155 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListSubscriptionDefinitionVersionsRequest input37155)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions", :body body__36697__auto__} (clojure.core/fn [response37154] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37154)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-response (:body response37154)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37154 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37154)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37154}))))))))))

(clojure.core/defn list-logger-definition-versions ([input__36693__auto__] (list-logger-definition-versions input__36693__auto__ portkey.aws/*http-client*)) ([input37157 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers/{LoggerDefinitionId}/versions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListLoggerDefinitionVersionsRequest input37157)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers/{LoggerDefinitionId}/versions", :body body__36697__auto__} (clojure.core/fn [response37156] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37156)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-response (:body response37156)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37156 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37156)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37156}))))))))))

(clojure.core/defn get-associated-role ([input__36693__auto__] (get-associated-role input__36693__auto__ portkey.aws/*http-client*)) ([input37159 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/role", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetAssociatedRoleRequest input37159)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/role", :body body__36697__auto__} (clojure.core/fn [response37158] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response37158)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-associated-role-response (:body response37158)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37158 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37158)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37158}))))))))))

(clojure.core/defn get-group ([input__36693__auto__] (get-group input__36693__auto__ portkey.aws/*http-client*)) ([input37161 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetGroupRequest input37161)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}", :body body__36697__auto__} (clojure.core/fn [response37160] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37160)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-response (:body response37160)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37160 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37160)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37160}))))))))))

(clojure.core/defn update-group ([input__36693__auto__] (update-group input__36693__auto__ portkey.aws/*http-client*)) ([input37163 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateGroupRequest input37163)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}", :body body__36697__auto__} (clojure.core/fn [response37162] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37162)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-group-response (:body response37162)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37162 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37162)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37162}))))))))))

(clojure.core/defn get-group-certificate-authority ([input__36693__auto__] (get-group-certificate-authority input__36693__auto__ portkey.aws/*http-client*)) ([input37165 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetGroupCertificateAuthorityRequest input37165)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CertificateAuthorityId" "CertificateAuthorityId", "GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}", :body body__36697__auto__} (clojure.core/fn [response37164] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response37164)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-response (:body response37164)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37164 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37164)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37164}))))))))))

(clojure.core/defn get-core-definition ([input__36693__auto__] (get-core-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37167 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores/{CoreDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetCoreDefinitionRequest input37167)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores/{CoreDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37166] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37166)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-core-definition-response (:body response37166)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37166 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37166)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37166}))))))))))

(clojure.core/defn list-core-definitions ([input__36693__auto__] (list-core-definitions input__36693__auto__ portkey.aws/*http-client*)) ([input37169 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListCoreDefinitionsRequest input37169)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores", :body body__36697__auto__} (clojure.core/fn [response37168] (clojure.core/let [errors__36698__auto__ {}] (if (clojure.core/= 200 (:status response37168)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-core-definitions-response (:body response37168)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37168 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37168)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37168}))))))))))

(clojure.core/defn get-deployment-status ([input__36693__auto__] (get-deployment-status input__36693__auto__ portkey.aws/*http-client*)) ([input37171 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetDeploymentStatusRequest input37171)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeploymentId" "DeploymentId", "GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status", :body body__36697__auto__} (clojure.core/fn [response37170] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37170)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-deployment-status-response (:body response37170)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37170 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37170)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37170}))))))))))

(clojure.core/defn get-connectivity-info ([input__36693__auto__] (get-connectivity-info input__36693__auto__ portkey.aws/*http-client*)) ([input37173 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/things/{ThingName}/connectivityInfo", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetConnectivityInfoRequest input37173)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ThingName" "ThingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/things/{ThingName}/connectivityInfo", :body body__36697__auto__} (clojure.core/fn [response37172] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response37172)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-response (:body response37172)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37172 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37172)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37172}))))))))))

(clojure.core/defn get-device-definition ([input__36693__auto__] (get-device-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37175 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices/{DeviceDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetDeviceDefinitionRequest input37175)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices/{DeviceDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37174] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37174)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-device-definition-response (:body response37174)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37174 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37174)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37174}))))))))))

(clojure.core/defn list-deployments ([input__36693__auto__] (list-deployments input__36693__auto__ portkey.aws/*http-client*)) ([input37177 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/deployments", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListDeploymentsRequest input37177)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/deployments", :body body__36697__auto__} (clojure.core/fn [response37176] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37176)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-deployments-response (:body response37176)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37176 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37176)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37176}))))))))))

(clojure.core/defn create-group-version ([input__36693__auto__] (create-group-version input__36693__auto__ portkey.aws/*http-client*)) ([input37179 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/versions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateGroupVersionRequest input37179)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/versions", :body body__36697__auto__} (clojure.core/fn [response37178] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37178)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-version-response (:body response37178)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37178 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37178)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37178}))))))))))

(clojure.core/defn get-device-definition-version ([input__36693__auto__] (get-device-definition-version input__36693__auto__ portkey.aws/*http-client*)) ([input37181 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetDeviceDefinitionVersionRequest input37181)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId", "DeviceDefinitionVersionId" "DeviceDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}", :body body__36697__auto__} (clojure.core/fn [response37180] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37180)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-response (:body response37180)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37180 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37180)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37180}))))))))))

(clojure.core/defn update-function-definition ([input__36693__auto__] (update-function-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37183 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions/{FunctionDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateFunctionDefinitionRequest input37183)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions/{FunctionDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37182] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37182)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-function-definition-response (:body response37182)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37182 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37182)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37182}))))))))))

(clojure.core/defn delete-function-definition ([input__36693__auto__] (delete-function-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37185 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions/{FunctionDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteFunctionDefinitionRequest input37185)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions/{FunctionDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37184] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37184)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-function-definition-response (:body response37184)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37184 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37184)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37184}))))))))))

(clojure.core/defn list-core-definition-versions ([input__36693__auto__] (list-core-definition-versions input__36693__auto__ portkey.aws/*http-client*)) ([input37187 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores/{CoreDefinitionId}/versions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListCoreDefinitionVersionsRequest input37187)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores/{CoreDefinitionId}/versions", :body body__36697__auto__} (clojure.core/fn [response37186] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37186)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-response (:body response37186)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37186 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37186)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37186}))))))))))

(clojure.core/defn list-group-certificate-authorities ([input__36693__auto__] (list-group-certificate-authorities input__36693__auto__ portkey.aws/*http-client*)) ([input37189 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/certificateauthorities", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListGroupCertificateAuthoritiesRequest input37189)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/certificateauthorities", :body body__36697__auto__} (clojure.core/fn [response37188] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response37188)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-response (:body response37188)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37188 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37188)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37188}))))))))))

(clojure.core/defn get-logger-definition ([input__36693__auto__] (get-logger-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37191 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers/{LoggerDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetLoggerDefinitionRequest input37191)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers/{LoggerDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37190] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37190)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-logger-definition-response (:body response37190)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37190 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37190)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37190}))))))))))

(clojure.core/defn update-device-definition ([input__36693__auto__] (update-device-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37193 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices/{DeviceDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateDeviceDefinitionRequest input37193)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices/{DeviceDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37192] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37192)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-device-definition-response (:body response37192)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37192 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37192)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37192}))))))))))

(clojure.core/defn create-group-certificate-authority ([input__36693__auto__] (create-group-certificate-authority input__36693__auto__ portkey.aws/*http-client*)) ([input37195 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/certificateauthorities", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateGroupCertificateAuthorityRequest input37195)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/certificateauthorities", :body body__36697__auto__} (clojure.core/fn [response37194] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response37194)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-response (:body response37194)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37194 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37194)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37194}))))))))))

(clojure.core/defn create-function-definition-version ([input__36693__auto__] (create-function-definition-version input__36693__auto__ portkey.aws/*http-client*)) ([input37197 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions/{FunctionDefinitionId}/versions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateFunctionDefinitionVersionRequest input37197)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions/{FunctionDefinitionId}/versions", :body body__36697__auto__} (clojure.core/fn [response37196] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37196)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-response (:body response37196)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37196 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37196)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37196}))))))))))

(clojure.core/defn get-core-definition-version ([input__36693__auto__] (get-core-definition-version input__36693__auto__ portkey.aws/*http-client*)) ([input37199 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetCoreDefinitionVersionRequest input37199)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId", "CoreDefinitionVersionId" "CoreDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}", :body body__36697__auto__} (clojure.core/fn [response37198] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37198)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-response (:body response37198)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37198 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37198)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37198}))))))))))

(clojure.core/defn get-function-definition-version ([input__36693__auto__] (get-function-definition-version input__36693__auto__ portkey.aws/*http-client*)) ([input37201 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetFunctionDefinitionVersionRequest input37201)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId", "FunctionDefinitionVersionId" "FunctionDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}", :body body__36697__auto__} (clojure.core/fn [response37200] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37200)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-response (:body response37200)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37200 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37200)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37200}))))))))))

(clojure.core/defn update-core-definition ([input__36693__auto__] (update-core-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37203 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores/{CoreDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateCoreDefinitionRequest input37203)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores/{CoreDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37202] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37202)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-core-definition-response (:body response37202)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37202 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37202)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37202}))))))))))

(clojure.core/defn associate-role-to-group ([input__36693__auto__] (associate-role-to-group input__36693__auto__ portkey.aws/*http-client*)) ([input37205 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/role", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/AssociateRoleToGroupRequest input37205)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/role", :body body__36697__auto__} (clojure.core/fn [response37204] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response37204)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-response (:body response37204)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37204 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37204)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37204}))))))))))

(clojure.core/defn associate-service-role-to-account ([input__36693__auto__] (associate-service-role-to-account input__36693__auto__ portkey.aws/*http-client*)) ([input37207 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/servicerole", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/AssociateServiceRoleToAccountRequest input37207)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/servicerole", :body body__36697__auto__} (clojure.core/fn [response37206] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response37206)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-response (:body response37206)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37206 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37206)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37206}))))))))))

(clojure.core/defn update-subscription-definition ([input__36693__auto__] (update-subscription-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37209 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions/{SubscriptionDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateSubscriptionDefinitionRequest input37209)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions/{SubscriptionDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37208] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37208)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-response (:body response37208)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37208 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37208)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37208}))))))))))

(clojure.core/defn update-connectivity-info ([input__36693__auto__] (update-connectivity-info input__36693__auto__ portkey.aws/*http-client*)) ([input37211 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/things/{ThingName}/connectivityInfo", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateConnectivityInfoRequest input37211)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ThingName" "ThingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/things/{ThingName}/connectivityInfo", :body body__36697__auto__} (clojure.core/fn [response37210] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response37210)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-response (:body response37210)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37210 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37210)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37210}))))))))))

(clojure.core/defn create-group ([input__36693__auto__] (create-group input__36693__auto__ portkey.aws/*http-client*)) ([input37213 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateGroupRequest input37213)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups", :body body__36697__auto__} (clojure.core/fn [response37212] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37212)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-response (:body response37212)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37212 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37212)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37212}))))))))))

(clojure.core/defn create-subscription-definition ([input__36693__auto__] (create-subscription-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37215 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateSubscriptionDefinitionRequest input37215)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/subscriptions", :body body__36697__auto__} (clojure.core/fn [response37214] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37214)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-response (:body response37214)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37214 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37214)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37214}))))))))))

(clojure.core/defn get-group-version ([input__36693__auto__] (get-group-version input__36693__auto__ portkey.aws/*http-client*)) ([input37217 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/versions/{GroupVersionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetGroupVersionRequest input37217)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId", "GroupVersionId" "GroupVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/versions/{GroupVersionId}", :body body__36697__auto__} (clojure.core/fn [response37216] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37216)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-version-response (:body response37216)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37216 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37216)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37216}))))))))))

(clojure.core/defn get-service-role-for-account ([input__36693__auto__] (get-service-role-for-account input__36693__auto__ portkey.aws/*http-client*)) ([input37219 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/servicerole", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetServiceRoleForAccountRequest input37219)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/servicerole", :body body__36697__auto__} (clojure.core/fn [response37218] (clojure.core/let [errors__36698__auto__ {"InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response37218)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-response (:body response37218)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37218 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37218)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37218}))))))))))

(clojure.core/defn get-group-certificate-configuration ([input__36693__auto__] (get-group-certificate-configuration input__36693__auto__ portkey.aws/*http-client*)) ([input37221 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetGroupCertificateConfigurationRequest input37221)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry", :body body__36697__auto__} (clojure.core/fn [response37220] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response37220)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-response (:body response37220)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37220 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37220)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37220}))))))))))

(clojure.core/defn delete-core-definition ([input__36693__auto__] (delete-core-definition input__36693__auto__ portkey.aws/*http-client*)) ([input37223 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores/{CoreDefinitionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteCoreDefinitionRequest input37223)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores/{CoreDefinitionId}", :body body__36697__auto__} (clojure.core/fn [response37222] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37222)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-core-definition-response (:body response37222)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37222 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37222)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37222}))))))))))

(clojure.core/defn get-logger-definition-version ([input__36693__auto__] (get-logger-definition-version input__36693__auto__ portkey.aws/*http-client*)) ([input37225 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetLoggerDefinitionVersionRequest input37225)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId", "LoggerDefinitionVersionId" "LoggerDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}", :body body__36697__auto__} (clojure.core/fn [response37224] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37224)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-response (:body response37224)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37224 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37224)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37224}))))))))))

(clojure.core/defn list-device-definition-versions ([input__36693__auto__] (list-device-definition-versions input__36693__auto__ portkey.aws/*http-client*)) ([input37227 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices/{DeviceDefinitionId}/versions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListDeviceDefinitionVersionsRequest input37227)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices/{DeviceDefinitionId}/versions", :body body__36697__auto__} (clojure.core/fn [response37226] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37226)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-response (:body response37226)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37226 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37226)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37226}))))))))))

(clojure.core/defn create-core-definition-version ([input__36693__auto__] (create-core-definition-version input__36693__auto__ portkey.aws/*http-client*)) ([input37229 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores/{CoreDefinitionId}/versions", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateCoreDefinitionVersionRequest input37229)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/cores/{CoreDefinitionId}/versions", :body body__36697__auto__} (clojure.core/fn [response37228] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response37228)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-response (:body response37228)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37228 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37228)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37228}))))))))))

(clojure.core/defn disassociate-role-from-group ([input__36693__auto__] (disassociate-role-from-group input__36693__auto__ portkey.aws/*http-client*)) ([input37231 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/role", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DisassociateRoleFromGroupRequest input37231)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/groups/{GroupId}/role", :body body__36697__auto__} (clojure.core/fn [response37230] (clojure.core/let [errors__36698__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response37230)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-response (:body response37230)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37230 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37230)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37230}))))))))))

(clojure.core/defn list-device-definitions ([input__36693__auto__] (list-device-definitions input__36693__auto__ portkey.aws/*http-client*)) ([input37233 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices", :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListDeviceDefinitionsRequest input37233)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/greengrass/definition/devices", :body body__36697__auto__} (clojure.core/fn [response37232] (clojure.core/let [errors__36698__auto__ {}] (if (clojure.core/= 200 (:status response37232)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-device-definitions-response (:body response37232)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37232 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37232)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37232}))))))))))
