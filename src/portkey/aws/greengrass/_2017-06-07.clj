(ns portkey.aws.greengrass.-2017-06-07 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-southeast-2"
   {:credentialScope
    {"service" "greengrass", "region" "ap-southeast-2"},
    :sslCommonName "greengrass.ap-southeast-2.amazonaws.com",
    :endpoint "https://greengrass.ap-southeast-2.amazonaws.com"},
   "eu-central-1"
   {:credentialScope {"service" "greengrass", "region" "eu-central-1"},
    :sslCommonName "greengrass.eu-central-1.amazonaws.com",
    :endpoint "https://greengrass.eu-central-1.amazonaws.com"},
   "us-west-2"
   {:credentialScope {"service" "greengrass", "region" "us-west-2"},
    :sslCommonName "greengrass.us-west-2.amazonaws.com",
    :endpoint "https://greengrass.us-west-2.amazonaws.com"},
   "us-east-1"
   {:credentialScope {"service" "greengrass", "region" "us-east-1"},
    :sslCommonName "greengrass.us-east-1.amazonaws.com",
    :endpoint "https://greengrass.us-east-1.amazonaws.com"}})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device-definition-version/devices (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/device-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.device-definition-version/Devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-function-definition-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-function-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.internal-server-error-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/ErrorDetails :portkey.aws.greengrass.-2017-06-07.internal-server-error-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-certificate-authority-properties (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/GroupCertificateAuthorityArn :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/GroupCertificateAuthorityId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/empty (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/definition-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.definition-information/Arn :portkey.aws.greengrass.-2017-06-07.definition-information/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.definition-information/Id :portkey.aws.greengrass.-2017-06-07.definition-information/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.definition-information/LatestVersion :portkey.aws.greengrass.-2017-06-07.definition-information/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.definition-information/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/deployment-status (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/error-message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/updated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-deployment-status-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/DeploymentStatus :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/ErrorMessage :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/UpdatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-device (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/device :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/cores (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/Cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/loggers (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/Loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/devices (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/Devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/created-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/group-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.deployment/CreatedAt :portkey.aws.greengrass.-2017-06-07.deployment/DeploymentArn :portkey.aws.greengrass.-2017-06-07.deployment/DeploymentId :portkey.aws.greengrass.-2017-06-07.deployment/GroupArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/bad-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/ErrorDetails :portkey.aws.greengrass.-2017-06-07.bad-request-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployment-type (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"NewDeployment" "NewDeployment", :new-deployment "NewDeployment", "Redeployment" "Redeployment", :redeployment "Redeployment"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-level (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {:warn "WARN", "WARN" "WARN", :debug "DEBUG", "ERROR" "ERROR", :fatal "FATAL", "DEBUG" "DEBUG", "FATAL" "FATAL", :info "INFO", :error "ERROR", "INFO" "INFO"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/host-address (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/metadata (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/port-number (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/connectivity-info (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.connectivity-info/HostAddress :portkey.aws.greengrass.-2017-06-07.connectivity-info/Id :portkey.aws.greengrass.-2017-06-07.connectivity-info/Metadata :portkey.aws.greengrass.-2017-06-07.connectivity-info/PortNumber]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-request/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/subscription-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/SubscriptionDefinitionId :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/SubscriptionDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-type (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"FileSystem" "FileSystem", :file-system "FileSystem", "AWSCloudWatch" "AWSCloudWatch", :awscloud-watch "AWSCloudWatch"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-response/AssociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-associated-role-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-associated-role-response/AssociatedAt :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/AmznClientToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-group-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/group-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/pem-encoded-certificate (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/GroupCertificateAuthorityArn :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/GroupCertificateAuthorityId :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/PemEncodedCertificate]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-core (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/core :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-response/DisassociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/function-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/FunctionDefinitionId :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/FunctionDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-associated-role-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-associated-role-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-definition-version/functions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-definition-version/Functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger-definition-version/loggers (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.logger-definition-version/Loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-request/SubscriptionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/device-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/DeviceDefinitionVersionId :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-response/Arn :portkey.aws.greengrass.-2017-06-07.get-group-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-group-response/Id :portkey.aws.greengrass.-2017-06-07.get-group-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-group-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-group-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-group-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/CertificateExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-response/groups (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-group-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-groups-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-groups-response/Groups :portkey.aws.greengrass.-2017-06-07.list-groups-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-certificate-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/CertificateExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-group-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-response/AssociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/ThingName] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/ConnectivityInfo]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-version-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/version-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/version-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.version-information/Arn :portkey.aws.greengrass.-2017-06-07.version-information/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.version-information/Id :portkey.aws.greengrass.-2017-06-07.version-information/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-version/CoreDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/DeviceDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/FunctionDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/LoggerDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/SubscriptionDefinitionVersionArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-information/Arn :portkey.aws.greengrass.-2017-06-07.group-information/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.group-information/Id :portkey.aws.greengrass.-2017-06-07.group-information/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.group-information/LatestVersion :portkey.aws.greengrass.-2017-06-07.group-information/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.group-information/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-function-definition-request/FunctionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.error-detail/detailed-error-code (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.error-detail/detailed-error-message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/error-detail (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.error-detail/DetailedErrorCode :portkey.aws.greengrass.-2017-06-07.error-detail/DetailedErrorMessage]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/logger-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/LoggerDefinitionVersionId :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/AssociatedAt :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/CertificateExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/ConnectivityInfo :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-deployments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-deployments-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-deployments-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-deployments-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-definition-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/definition-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-service-role-from-account-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.disassociate-service-role-from-account-response/DisassociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-response/group-certificate-authorities (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-group-certificate-authority-properties))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-response/GroupCertificateAuthorities]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core-definition-version/cores (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/core-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.core-definition-version/Cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-deployment-request/DeploymentId :portkey.aws.greengrass.-2017-06-07/DeploymentType :portkey.aws.greengrass.-2017-06-07.create-deployment-request/GroupVersionId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription-definition-version/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/subscription-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.subscription-definition-version/Subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-subscription-definition-request/SubscriptionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-response/GroupCertificateAuthorityArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-core-definition-request/CoreDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/CertificateExpiryInMilliseconds]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-deployment-status-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/GroupId :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/DeploymentId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-group-version-request/CoreDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/DeviceDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/FunctionDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/LoggerDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/SubscriptionDefinitionVersionArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-core-definition-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-core-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-group-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-group-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-group-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-group-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/core-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/CoreDefinitionId :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/CoreDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/environment (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-configuration-environment))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/exec-args (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/executable (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/memory-size (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/pinned (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/timeout (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-configuration/Environment :portkey.aws.greengrass.-2017-06-07.function-configuration/ExecArgs :portkey.aws.greengrass.-2017-06-07.function-configuration/Executable :portkey.aws.greengrass.-2017-06-07.function-configuration/MemorySize :portkey.aws.greengrass.-2017-06-07.function-configuration/Pinned :portkey.aws.greengrass.-2017-06-07.function-configuration/Timeout]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-groups-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-groups-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-groups-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration-environment/variables (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/map-of--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-configuration-environment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-configuration-environment/Variables]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-response/Arn :portkey.aws.greengrass.-2017-06-07.create-group-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-group-response/Id :portkey.aws.greengrass.-2017-06-07.create-group-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-group-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-group-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/error-details (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/error-detail :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/source (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/subject (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/target (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/subscription (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.subscription/Id :portkey.aws.greengrass.-2017-06-07.subscription/Source :portkey.aws.greengrass.-2017-06-07.subscription/Subject :portkey.aws.greengrass.-2017-06-07.subscription/Target]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-group-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-group-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/core (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.core/CertificateArn :portkey.aws.greengrass.-2017-06-07.core/Id :portkey.aws.greengrass.-2017-06-07.core/SyncShadow :portkey.aws.greengrass.-2017-06-07.core/ThingArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-version-request/GroupVersionId :portkey.aws.greengrass.-2017-06-07.get-group-version-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/Subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-deployments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/Deployments :portkey.aws.greengrass.-2017-06-07.list-deployments-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-subscription (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/subscription :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/functions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/Functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function/function-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function/FunctionArn :portkey.aws.greengrass.-2017-06-07/FunctionConfiguration :portkey.aws.greengrass.-2017-06-07.function/Id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-response/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-response/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-deployment-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-response/DeploymentArn :portkey.aws.greengrass.-2017-06-07.create-deployment-response/DeploymentId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-logger-definition-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-device-definition-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-device-definition-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-device-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-request/CoreDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/CertificateAuthorityId :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/device (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.device/CertificateArn :portkey.aws.greengrass.-2017-06-07.device/Id :portkey.aws.greengrass.-2017-06-07.device/SyncShadow :portkey.aws.greengrass.-2017-06-07.device/ThingArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-component (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"GreengrassSystem" "GreengrassSystem", :greengrass-system "GreengrassSystem", "Lambda" "Lambda", :lambda "Lambda"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-request/FunctionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/connectivity-info :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-group-certificate-authority-properties (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/group-certificate-authority-properties :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-connectivity-info-request/ThingName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-group-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-group-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-group-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.general-error/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/general-error (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/ErrorDetails :portkey.aws.greengrass.-2017-06-07.general-error/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-function (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/function :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/Message :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-group-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-logger (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/logger :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/map-of--string (clojure.spec.alpha/map-of :portkey.aws.greengrass.-2017-06-07/--string :portkey.aws.greengrass.-2017-06-07/--string))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/component (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-component))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/level (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-level))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/space (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/type (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-type))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.logger/Component :portkey.aws.greengrass.-2017-06-07.logger/Id :portkey.aws.greengrass.-2017-06-07.logger/Level :portkey.aws.greengrass.-2017-06-07.logger/Space :portkey.aws.greengrass.-2017-06-07.logger/Type]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployments (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/deployment :max-count nil))

(clojure.core/defn create-device-definition ([input__47307__auto__] (create-device-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47545 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateDeviceDefinitionRequest input47545)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47544] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47544)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-device-definition-response (:body response47544)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47544 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47544)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47544}))))))))))

(clojure.core/defn get-function-definition ([input__47307__auto__] (get-function-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47547 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetFunctionDefinitionRequest input47547)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47546] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47546)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-function-definition-response (:body response47546)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47546 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47546)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47546}))))))))))

(clojure.core/defn delete-group ([input__47307__auto__] (delete-group input__47307__auto__ portkey.aws/*http-client*)) ([input47549 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteGroupRequest input47549)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47548] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47548)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-group-response (:body response47548)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47548 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47548)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47548}))))))))))

(clojure.core/defn create-device-definition-version ([input__47307__auto__] (create-device-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47551 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateDeviceDefinitionVersionRequest input47551)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47550] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47550)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-response (:body response47550)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47550 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47550)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47550}))))))))))

(clojure.core/defn list-logger-definitions ([input__47307__auto__] (list-logger-definitions input__47307__auto__ portkey.aws/*http-client*)) ([input47553 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListLoggerDefinitionsRequest input47553)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47552] (clojure.core/let [errors__47310__auto__ {}] (if (clojure.core/= 200 (:status response47552)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-response (:body response47552)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47552 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47552)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47552}))))))))))

(clojure.core/defn list-function-definitions ([input__47307__auto__] (list-function-definitions input__47307__auto__ portkey.aws/*http-client*)) ([input47555 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListFunctionDefinitionsRequest input47555)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47554] (clojure.core/let [errors__47310__auto__ {}] (if (clojure.core/= 200 (:status response47554)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-function-definitions-response (:body response47554)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47554 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47554)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47554}))))))))))

(clojure.core/defn create-function-definition ([input__47307__auto__] (create-function-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47557 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateFunctionDefinitionRequest input47557)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47556] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47556)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-function-definition-response (:body response47556)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47556 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47556)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47556}))))))))))

(clojure.core/defn create-core-definition ([input__47307__auto__] (create-core-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47559 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateCoreDefinitionRequest input47559)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47558] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47558)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-core-definition-response (:body response47558)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47558 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47558)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47558}))))))))))

(clojure.core/defn list-groups ([input__47307__auto__] (list-groups input__47307__auto__ portkey.aws/*http-client*)) ([input47561 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListGroupsRequest input47561)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47560] (clojure.core/let [errors__47310__auto__ {}] (if (clojure.core/= 200 (:status response47560)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-groups-response (:body response47560)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47560 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47560)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47560}))))))))))

(clojure.core/defn create-logger-definition ([input__47307__auto__] (create-logger-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47563 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateLoggerDefinitionRequest input47563)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47562] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47562)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-logger-definition-response (:body response47562)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47562 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47562)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47562}))))))))))

(clojure.core/defn get-subscription-definition-version ([input__47307__auto__] (get-subscription-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47565 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetSubscriptionDefinitionVersionRequest input47565)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId", "SubscriptionDefinitionVersionId" "SubscriptionDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47564] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47564)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-response (:body response47564)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47564 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47564)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47564}))))))))))

(clojure.core/defn list-function-definition-versions ([input__47307__auto__] (list-function-definition-versions input__47307__auto__ portkey.aws/*http-client*)) ([input47567 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListFunctionDefinitionVersionsRequest input47567)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47566] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47566)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-response (:body response47566)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47566 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47566)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47566}))))))))))

(clojure.core/defn update-logger-definition ([input__47307__auto__] (update-logger-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47569 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateLoggerDefinitionRequest input47569)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47568] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47568)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-logger-definition-response (:body response47568)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47568 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47568)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47568}))))))))))

(clojure.core/defn disassociate-service-role-from-account ([input__47307__auto__] (disassociate-service-role-from-account input__47307__auto__ portkey.aws/*http-client*)) ([input47571 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DisassociateServiceRoleFromAccountRequest input47571)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47570] (clojure.core/let [errors__47310__auto__ {"InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47570)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-response (:body response47570)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47570 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47570)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47570}))))))))))

(clojure.core/defn create-subscription-definition-version ([input__47307__auto__] (create-subscription-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47573 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateSubscriptionDefinitionVersionRequest input47573)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47572] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47572)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-response (:body response47572)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47572 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47572)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47572}))))))))))

(clojure.core/defn delete-subscription-definition ([input__47307__auto__] (delete-subscription-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47575 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteSubscriptionDefinitionRequest input47575)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47574] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47574)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-response (:body response47574)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47574 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47574)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47574}))))))))))

(clojure.core/defn create-logger-definition-version ([input__47307__auto__] (create-logger-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47577 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateLoggerDefinitionVersionRequest input47577)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47576] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47576)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-response (:body response47576)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47576 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47576)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47576}))))))))))

(clojure.core/defn delete-logger-definition ([input__47307__auto__] (delete-logger-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47579 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteLoggerDefinitionRequest input47579)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47578] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47578)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-response (:body response47578)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47578 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47578)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47578}))))))))))

(clojure.core/defn get-subscription-definition ([input__47307__auto__] (get-subscription-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47581 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetSubscriptionDefinitionRequest input47581)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47580] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47580)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-response (:body response47580)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47580 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47580)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47580}))))))))))

(clojure.core/defn update-group-certificate-configuration ([input__47307__auto__] (update-group-certificate-configuration input__47307__auto__ portkey.aws/*http-client*)) ([input47583 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateGroupCertificateConfigurationRequest input47583)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47582] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47582)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-response (:body response47582)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47582 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47582)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47582}))))))))))

(clojure.core/defn create-deployment ([input__47307__auto__] (create-deployment input__47307__auto__ portkey.aws/*http-client*)) ([input47585 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateDeploymentRequest input47585)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47584] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47584)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-deployment-response (:body response47584)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47584 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47584)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47584}))))))))))

(clojure.core/defn delete-device-definition ([input__47307__auto__] (delete-device-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47587 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteDeviceDefinitionRequest input47587)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47586] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47586)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-device-definition-response (:body response47586)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47586 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47586)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47586}))))))))))

(clojure.core/defn list-subscription-definitions ([input__47307__auto__] (list-subscription-definitions input__47307__auto__ portkey.aws/*http-client*)) ([input47589 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListSubscriptionDefinitionsRequest input47589)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47588] (clojure.core/let [errors__47310__auto__ {}] (if (clojure.core/= 200 (:status response47588)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-response (:body response47588)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47588 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47588)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47588}))))))))))

(clojure.core/defn list-group-versions ([input__47307__auto__] (list-group-versions input__47307__auto__ portkey.aws/*http-client*)) ([input47591 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListGroupVersionsRequest input47591)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47590] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47590)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-group-versions-response (:body response47590)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47590 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47590)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47590}))))))))))

(clojure.core/defn list-subscription-definition-versions ([input__47307__auto__] (list-subscription-definition-versions input__47307__auto__ portkey.aws/*http-client*)) ([input47593 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListSubscriptionDefinitionVersionsRequest input47593)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47592] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47592)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-response (:body response47592)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47592 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47592)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47592}))))))))))

(clojure.core/defn list-logger-definition-versions ([input__47307__auto__] (list-logger-definition-versions input__47307__auto__ portkey.aws/*http-client*)) ([input47595 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListLoggerDefinitionVersionsRequest input47595)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47594] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47594)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-response (:body response47594)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47594 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47594)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47594}))))))))))

(clojure.core/defn get-associated-role ([input__47307__auto__] (get-associated-role input__47307__auto__ portkey.aws/*http-client*)) ([input47597 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetAssociatedRoleRequest input47597)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47596] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47596)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-associated-role-response (:body response47596)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47596 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47596)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47596}))))))))))

(clojure.core/defn get-group ([input__47307__auto__] (get-group input__47307__auto__ portkey.aws/*http-client*)) ([input47599 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetGroupRequest input47599)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47598] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47598)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-response (:body response47598)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47598 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47598)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47598}))))))))))

(clojure.core/defn update-group ([input__47307__auto__] (update-group input__47307__auto__ portkey.aws/*http-client*)) ([input47601 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateGroupRequest input47601)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47600] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47600)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-group-response (:body response47600)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47600 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47600)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47600}))))))))))

(clojure.core/defn get-group-certificate-authority ([input__47307__auto__] (get-group-certificate-authority input__47307__auto__ portkey.aws/*http-client*)) ([input47603 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetGroupCertificateAuthorityRequest input47603)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CertificateAuthorityId" "CertificateAuthorityId", "GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47602] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47602)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-response (:body response47602)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47602 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47602)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47602}))))))))))

(clojure.core/defn get-core-definition ([input__47307__auto__] (get-core-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47605 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetCoreDefinitionRequest input47605)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47604] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47604)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-core-definition-response (:body response47604)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47604 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47604)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47604}))))))))))

(clojure.core/defn list-core-definitions ([input__47307__auto__] (list-core-definitions input__47307__auto__ portkey.aws/*http-client*)) ([input47607 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListCoreDefinitionsRequest input47607)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47606] (clojure.core/let [errors__47310__auto__ {}] (if (clojure.core/= 200 (:status response47606)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-core-definitions-response (:body response47606)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47606 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47606)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47606}))))))))))

(clojure.core/defn get-deployment-status ([input__47307__auto__] (get-deployment-status input__47307__auto__ portkey.aws/*http-client*)) ([input47609 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetDeploymentStatusRequest input47609)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeploymentId" "DeploymentId", "GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47608] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47608)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-deployment-status-response (:body response47608)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47608 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47608)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47608}))))))))))

(clojure.core/defn get-connectivity-info ([input__47307__auto__] (get-connectivity-info input__47307__auto__ portkey.aws/*http-client*)) ([input47611 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/things/{ThingName}/connectivityInfo"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetConnectivityInfoRequest input47611)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ThingName" "ThingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47610] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47610)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-response (:body response47610)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47610 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47610)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47610}))))))))))

(clojure.core/defn get-device-definition ([input__47307__auto__] (get-device-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47613 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetDeviceDefinitionRequest input47613)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47612] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47612)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-device-definition-response (:body response47612)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47612 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47612)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47612}))))))))))

(clojure.core/defn list-deployments ([input__47307__auto__] (list-deployments input__47307__auto__ portkey.aws/*http-client*)) ([input47615 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListDeploymentsRequest input47615)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47614] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47614)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-deployments-response (:body response47614)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47614 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47614)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47614}))))))))))

(clojure.core/defn create-group-version ([input__47307__auto__] (create-group-version input__47307__auto__ portkey.aws/*http-client*)) ([input47617 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateGroupVersionRequest input47617)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47616] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47616)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-version-response (:body response47616)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47616 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47616)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47616}))))))))))

(clojure.core/defn get-device-definition-version ([input__47307__auto__] (get-device-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47619 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetDeviceDefinitionVersionRequest input47619)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId", "DeviceDefinitionVersionId" "DeviceDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47618] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47618)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-response (:body response47618)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47618 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47618)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47618}))))))))))

(clojure.core/defn update-function-definition ([input__47307__auto__] (update-function-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47621 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateFunctionDefinitionRequest input47621)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47620] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47620)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-function-definition-response (:body response47620)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47620 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47620)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47620}))))))))))

(clojure.core/defn delete-function-definition ([input__47307__auto__] (delete-function-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47623 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteFunctionDefinitionRequest input47623)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47622] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47622)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-function-definition-response (:body response47622)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47622 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47622)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47622}))))))))))

(clojure.core/defn list-core-definition-versions ([input__47307__auto__] (list-core-definition-versions input__47307__auto__ portkey.aws/*http-client*)) ([input47625 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListCoreDefinitionVersionsRequest input47625)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47624] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47624)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-response (:body response47624)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47624 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47624)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47624}))))))))))

(clojure.core/defn list-group-certificate-authorities ([input__47307__auto__] (list-group-certificate-authorities input__47307__auto__ portkey.aws/*http-client*)) ([input47627 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListGroupCertificateAuthoritiesRequest input47627)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47626] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47626)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-response (:body response47626)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47626 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47626)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47626}))))))))))

(clojure.core/defn get-logger-definition ([input__47307__auto__] (get-logger-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47629 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetLoggerDefinitionRequest input47629)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47628] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47628)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-logger-definition-response (:body response47628)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47628 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47628)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47628}))))))))))

(clojure.core/defn update-device-definition ([input__47307__auto__] (update-device-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47631 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateDeviceDefinitionRequest input47631)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47630] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47630)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-device-definition-response (:body response47630)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47630 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47630)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47630}))))))))))

(clojure.core/defn create-group-certificate-authority ([input__47307__auto__] (create-group-certificate-authority input__47307__auto__ portkey.aws/*http-client*)) ([input47633 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateGroupCertificateAuthorityRequest input47633)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47632] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47632)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-response (:body response47632)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47632 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47632)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47632}))))))))))

(clojure.core/defn create-function-definition-version ([input__47307__auto__] (create-function-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47635 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateFunctionDefinitionVersionRequest input47635)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47634] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47634)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-response (:body response47634)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47634 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47634)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47634}))))))))))

(clojure.core/defn get-core-definition-version ([input__47307__auto__] (get-core-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47637 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetCoreDefinitionVersionRequest input47637)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId", "CoreDefinitionVersionId" "CoreDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47636] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47636)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-response (:body response47636)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47636 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47636)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47636}))))))))))

(clojure.core/defn get-function-definition-version ([input__47307__auto__] (get-function-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47639 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetFunctionDefinitionVersionRequest input47639)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId", "FunctionDefinitionVersionId" "FunctionDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47638] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47638)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-response (:body response47638)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47638 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47638)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47638}))))))))))

(clojure.core/defn update-core-definition ([input__47307__auto__] (update-core-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47641 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateCoreDefinitionRequest input47641)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47640] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47640)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-core-definition-response (:body response47640)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47640 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47640)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47640}))))))))))

(clojure.core/defn associate-role-to-group ([input__47307__auto__] (associate-role-to-group input__47307__auto__ portkey.aws/*http-client*)) ([input47643 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/AssociateRoleToGroupRequest input47643)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47642] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47642)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-response (:body response47642)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47642 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47642)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47642}))))))))))

(clojure.core/defn associate-service-role-to-account ([input__47307__auto__] (associate-service-role-to-account input__47307__auto__ portkey.aws/*http-client*)) ([input47645 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/AssociateServiceRoleToAccountRequest input47645)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47644] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47644)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-response (:body response47644)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47644 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47644)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47644}))))))))))

(clojure.core/defn update-subscription-definition ([input__47307__auto__] (update-subscription-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47647 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateSubscriptionDefinitionRequest input47647)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47646] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47646)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-response (:body response47646)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47646 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47646)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47646}))))))))))

(clojure.core/defn update-connectivity-info ([input__47307__auto__] (update-connectivity-info input__47307__auto__ portkey.aws/*http-client*)) ([input47649 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/things/{ThingName}/connectivityInfo"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateConnectivityInfoRequest input47649)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ThingName" "ThingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47648] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47648)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-response (:body response47648)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47648 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47648)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47648}))))))))))

(clojure.core/defn create-group ([input__47307__auto__] (create-group input__47307__auto__ portkey.aws/*http-client*)) ([input47651 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateGroupRequest input47651)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47650] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47650)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-response (:body response47650)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47650 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47650)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47650}))))))))))

(clojure.core/defn create-subscription-definition ([input__47307__auto__] (create-subscription-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47653 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateSubscriptionDefinitionRequest input47653)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47652] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47652)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-response (:body response47652)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47652 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47652)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47652}))))))))))

(clojure.core/defn get-group-version ([input__47307__auto__] (get-group-version input__47307__auto__ portkey.aws/*http-client*)) ([input47655 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions/{GroupVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetGroupVersionRequest input47655)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId", "GroupVersionId" "GroupVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47654] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47654)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-version-response (:body response47654)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47654 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47654)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47654}))))))))))

(clojure.core/defn get-service-role-for-account ([input__47307__auto__] (get-service-role-for-account input__47307__auto__ portkey.aws/*http-client*)) ([input47657 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetServiceRoleForAccountRequest input47657)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47656] (clojure.core/let [errors__47310__auto__ {"InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47656)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-response (:body response47656)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47656 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47656)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47656}))))))))))

(clojure.core/defn get-group-certificate-configuration ([input__47307__auto__] (get-group-certificate-configuration input__47307__auto__ portkey.aws/*http-client*)) ([input47659 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetGroupCertificateConfigurationRequest input47659)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47658] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47658)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-response (:body response47658)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47658 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47658)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47658}))))))))))

(clojure.core/defn delete-core-definition ([input__47307__auto__] (delete-core-definition input__47307__auto__ portkey.aws/*http-client*)) ([input47661 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteCoreDefinitionRequest input47661)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47660] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47660)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-core-definition-response (:body response47660)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47660 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47660)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47660}))))))))))

(clojure.core/defn get-logger-definition-version ([input__47307__auto__] (get-logger-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47663 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetLoggerDefinitionVersionRequest input47663)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId", "LoggerDefinitionVersionId" "LoggerDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47662] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47662)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-response (:body response47662)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47662 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47662)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47662}))))))))))

(clojure.core/defn list-device-definition-versions ([input__47307__auto__] (list-device-definition-versions input__47307__auto__ portkey.aws/*http-client*)) ([input47665 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListDeviceDefinitionVersionsRequest input47665)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47664] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47664)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-response (:body response47664)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47664 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47664)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47664}))))))))))

(clojure.core/defn create-core-definition-version ([input__47307__auto__] (create-core-definition-version input__47307__auto__ portkey.aws/*http-client*)) ([input47667 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateCoreDefinitionVersionRequest input47667)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47666] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response47666)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-response (:body response47666)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47666 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47666)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47666}))))))))))

(clojure.core/defn disassociate-role-from-group ([input__47307__auto__] (disassociate-role-from-group input__47307__auto__ portkey.aws/*http-client*)) ([input47669 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DisassociateRoleFromGroupRequest input47669)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47668] (clojure.core/let [errors__47310__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response47668)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-response (:body response47668)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47668 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47668)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47668}))))))))))

(clojure.core/defn list-device-definitions ([input__47307__auto__] (list-device-definitions input__47307__auto__ portkey.aws/*http-client*)) ([input47671 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListDeviceDefinitionsRequest input47671)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response47670] (clojure.core/let [errors__47310__auto__ {}] (if (clojure.core/= 200 (:status response47670)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-device-definitions-response (:body response47670)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response47670 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response47670)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response47670}))))))))))
