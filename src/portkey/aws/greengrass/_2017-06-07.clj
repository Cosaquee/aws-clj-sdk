(ns portkey.aws.greengrass.-2017-06-07 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-southeast-2"
   {:credential-scope
    {:service "greengrass", :region "ap-southeast-2"},
    :ssl-common-name "greengrass.ap-southeast-2.amazonaws.com",
    :endpoint "https://greengrass.ap-southeast-2.amazonaws.com"},
   "eu-central-1"
   {:credential-scope {:service "greengrass", :region "eu-central-1"},
    :ssl-common-name "greengrass.eu-central-1.amazonaws.com",
    :endpoint "https://greengrass.eu-central-1.amazonaws.com"},
   "us-west-2"
   {:credential-scope {:service "greengrass", :region "us-west-2"},
    :ssl-common-name "greengrass.us-west-2.amazonaws.com",
    :endpoint "https://greengrass.us-west-2.amazonaws.com"},
   "us-east-1"
   {:credential-scope {:service "greengrass", :region "us-east-1"},
    :ssl-common-name "greengrass.us-east-1.amazonaws.com",
    :endpoint "https://greengrass.us-east-1.amazonaws.com"}})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device-definition-version/devices (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/device-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.device-definition-version/Devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-function-definition-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-function-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.internal-server-error-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/ErrorDetails :portkey.aws.greengrass.-2017-06-07.internal-server-error-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-certificate-authority-properties (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/GroupCertificateAuthorityArn :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/GroupCertificateAuthorityId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/empty (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/definition-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.definition-information/Arn :portkey.aws.greengrass.-2017-06-07.definition-information/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.definition-information/Id :portkey.aws.greengrass.-2017-06-07.definition-information/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.definition-information/LatestVersion :portkey.aws.greengrass.-2017-06-07.definition-information/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.definition-information/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/deployment-status (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/error-message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/updated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-deployment-status-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/DeploymentStatus :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/ErrorMessage :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/UpdatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-device (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/device :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/cores (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/Cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/loggers (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/Loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/devices (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/Devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/created-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/group-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.deployment/CreatedAt :portkey.aws.greengrass.-2017-06-07.deployment/DeploymentArn :portkey.aws.greengrass.-2017-06-07.deployment/DeploymentId :portkey.aws.greengrass.-2017-06-07.deployment/GroupArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/bad-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/ErrorDetails :portkey.aws.greengrass.-2017-06-07.bad-request-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployment-type (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"NewDeployment" "NewDeployment", :new-deployment "NewDeployment", "Redeployment" "Redeployment", :redeployment "Redeployment"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-level (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {:warn "WARN", "WARN" "WARN", :debug "DEBUG", "ERROR" "ERROR", :fatal "FATAL", "DEBUG" "DEBUG", "FATAL" "FATAL", :info "INFO", :error "ERROR", "INFO" "INFO"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/host-address (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/metadata (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/port-number (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/connectivity-info (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.connectivity-info/HostAddress :portkey.aws.greengrass.-2017-06-07.connectivity-info/Id :portkey.aws.greengrass.-2017-06-07.connectivity-info/Metadata :portkey.aws.greengrass.-2017-06-07.connectivity-info/PortNumber]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-request/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/subscription-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/SubscriptionDefinitionId :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/SubscriptionDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-type (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"FileSystem" "FileSystem", :file-system "FileSystem", "AWSCloudWatch" "AWSCloudWatch", :awscloud-watch "AWSCloudWatch"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-response/AssociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-associated-role-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-associated-role-response/AssociatedAt :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/AmznClientToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-group-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/group-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/pem-encoded-certificate (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/GroupCertificateAuthorityArn :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/GroupCertificateAuthorityId :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/PemEncodedCertificate]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-core (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/core :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-response/DisassociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/function-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/FunctionDefinitionId :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/FunctionDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-associated-role-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-associated-role-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-definition-version/functions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-definition-version/Functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger-definition-version/loggers (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.logger-definition-version/Loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-request/SubscriptionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/device-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/DeviceDefinitionVersionId :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-response/Arn :portkey.aws.greengrass.-2017-06-07.get-group-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-group-response/Id :portkey.aws.greengrass.-2017-06-07.get-group-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-group-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-group-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-group-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/CertificateExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-response/groups (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-group-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-groups-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-groups-response/Groups :portkey.aws.greengrass.-2017-06-07.list-groups-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-certificate-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/CertificateExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-group-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-response/AssociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/ThingName] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/ConnectivityInfo]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-version-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/version-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/version-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.version-information/Arn :portkey.aws.greengrass.-2017-06-07.version-information/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.version-information/Id :portkey.aws.greengrass.-2017-06-07.version-information/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-version/CoreDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/DeviceDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/FunctionDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/LoggerDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/SubscriptionDefinitionVersionArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-information/Arn :portkey.aws.greengrass.-2017-06-07.group-information/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.group-information/Id :portkey.aws.greengrass.-2017-06-07.group-information/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.group-information/LatestVersion :portkey.aws.greengrass.-2017-06-07.group-information/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.group-information/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-function-definition-request/FunctionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.error-detail/detailed-error-code (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.error-detail/detailed-error-message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/error-detail (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.error-detail/DetailedErrorCode :portkey.aws.greengrass.-2017-06-07.error-detail/DetailedErrorMessage]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/logger-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/LoggerDefinitionVersionId :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/AssociatedAt :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/CertificateExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/ConnectivityInfo :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-deployments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-deployments-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-deployments-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-deployments-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-definition-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/definition-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-service-role-from-account-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.disassociate-service-role-from-account-response/DisassociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-response/group-certificate-authorities (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-group-certificate-authority-properties))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-response/GroupCertificateAuthorities]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core-definition-version/cores (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/core-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.core-definition-version/Cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-deployment-request/DeploymentId :portkey.aws.greengrass.-2017-06-07/DeploymentType :portkey.aws.greengrass.-2017-06-07.create-deployment-request/GroupVersionId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription-definition-version/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/subscription-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.subscription-definition-version/Subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-subscription-definition-request/SubscriptionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-response/GroupCertificateAuthorityArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-core-definition-request/CoreDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/CertificateExpiryInMilliseconds]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-deployment-status-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/GroupId :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/DeploymentId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-group-version-request/CoreDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/DeviceDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/FunctionDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/LoggerDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/SubscriptionDefinitionVersionArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-core-definition-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-core-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-group-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-group-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-group-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-group-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/core-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/CoreDefinitionId :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/CoreDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/environment (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-configuration-environment))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/exec-args (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/executable (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/memory-size (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/pinned (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/timeout (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-configuration/Environment :portkey.aws.greengrass.-2017-06-07.function-configuration/ExecArgs :portkey.aws.greengrass.-2017-06-07.function-configuration/Executable :portkey.aws.greengrass.-2017-06-07.function-configuration/MemorySize :portkey.aws.greengrass.-2017-06-07.function-configuration/Pinned :portkey.aws.greengrass.-2017-06-07.function-configuration/Timeout]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-groups-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-groups-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-groups-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration-environment/variables (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/map-of--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-configuration-environment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-configuration-environment/Variables]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-response/Arn :portkey.aws.greengrass.-2017-06-07.create-group-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-group-response/Id :portkey.aws.greengrass.-2017-06-07.create-group-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-group-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-group-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/error-details (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/error-detail :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/source (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/subject (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/target (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/subscription (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.subscription/Id :portkey.aws.greengrass.-2017-06-07.subscription/Source :portkey.aws.greengrass.-2017-06-07.subscription/Subject :portkey.aws.greengrass.-2017-06-07.subscription/Target]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-group-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-group-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/core (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.core/CertificateArn :portkey.aws.greengrass.-2017-06-07.core/Id :portkey.aws.greengrass.-2017-06-07.core/SyncShadow :portkey.aws.greengrass.-2017-06-07.core/ThingArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-version-request/GroupVersionId :portkey.aws.greengrass.-2017-06-07.get-group-version-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/Subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-deployments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/Deployments :portkey.aws.greengrass.-2017-06-07.list-deployments-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-subscription (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/subscription :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/functions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/Functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function/function-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function/FunctionArn :portkey.aws.greengrass.-2017-06-07/FunctionConfiguration :portkey.aws.greengrass.-2017-06-07.function/Id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-response/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-response/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-deployment-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-response/DeploymentArn :portkey.aws.greengrass.-2017-06-07.create-deployment-response/DeploymentId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-logger-definition-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-device-definition-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-device-definition-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-device-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-request/CoreDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/CertificateAuthorityId :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/device (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.device/CertificateArn :portkey.aws.greengrass.-2017-06-07.device/Id :portkey.aws.greengrass.-2017-06-07.device/SyncShadow :portkey.aws.greengrass.-2017-06-07.device/ThingArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-component (clojure.spec.alpha/conformer (clojure.core/let [m__56599__auto__ {"GreengrassSystem" "GreengrassSystem", :greengrass-system "GreengrassSystem", "Lambda" "Lambda", :lambda "Lambda"}] (clojure.core/fn [s__56600__auto__] (m__56599__auto__ s__56600__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-request/FunctionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/connectivity-info :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-group-certificate-authority-properties (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/group-certificate-authority-properties :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-connectivity-info-request/ThingName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-group-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-group-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-group-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.general-error/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/general-error (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/ErrorDetails :portkey.aws.greengrass.-2017-06-07.general-error/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-function (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/function :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/Message :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-group-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-logger (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/logger :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/map-of--string (clojure.spec.alpha/map-of :portkey.aws.greengrass.-2017-06-07/--string :portkey.aws.greengrass.-2017-06-07/--string))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/component (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-component))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/level (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-level))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/space (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/type (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-type))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.logger/Component :portkey.aws.greengrass.-2017-06-07.logger/Id :portkey.aws.greengrass.-2017-06-07.logger/Level :portkey.aws.greengrass.-2017-06-07.logger/Space :portkey.aws.greengrass.-2017-06-07.logger/Type]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployments (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/deployment :max-count nil))

(clojure.core/defn create-device-definition ([input__56767__auto__] (create-device-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57270 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateDeviceDefinitionRequest input57270)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57269] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57269)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-device-definition-response (:body response57269)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57269 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57269)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57269})))))))))))

(clojure.core/defn get-function-definition ([input__56767__auto__] (get-function-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57272 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetFunctionDefinitionRequest input57272)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57271] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57271)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-function-definition-response (:body response57271)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57271 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57271)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57271})))))))))))

(clojure.core/defn delete-group ([input__56767__auto__] (delete-group input__56767__auto__ portkey.aws/*http-client*)) ([input57274 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteGroupRequest input57274)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57273] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57273)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-group-response (:body response57273)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57273 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57273)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57273})))))))))))

(clojure.core/defn create-device-definition-version ([input__56767__auto__] (create-device-definition-version input__56767__auto__ portkey.aws/*http-client*)) ([input57276 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateDeviceDefinitionVersionRequest input57276)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57275] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57275)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-response (:body response57275)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57275 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57275)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57275})))))))))))

(clojure.core/defn list-logger-definitions ([input__56767__auto__] (list-logger-definitions input__56767__auto__ portkey.aws/*http-client*)) ([input57278 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListLoggerDefinitionsRequest input57278)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57277] (clojure.core/let [errors__56772__auto__ {}] (if (clojure.core/= 200 (:status response57277)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-response (:body response57277)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57277 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57277)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57277})))))))))))

(clojure.core/defn list-function-definitions ([input__56767__auto__] (list-function-definitions input__56767__auto__ portkey.aws/*http-client*)) ([input57280 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListFunctionDefinitionsRequest input57280)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57279] (clojure.core/let [errors__56772__auto__ {}] (if (clojure.core/= 200 (:status response57279)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-function-definitions-response (:body response57279)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57279 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57279)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57279})))))))))))

(clojure.core/defn create-function-definition ([input__56767__auto__] (create-function-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57282 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateFunctionDefinitionRequest input57282)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57281] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57281)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-function-definition-response (:body response57281)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57281 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57281)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57281})))))))))))

(clojure.core/defn create-core-definition ([input__56767__auto__] (create-core-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57284 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateCoreDefinitionRequest input57284)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57283] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57283)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-core-definition-response (:body response57283)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57283 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57283)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57283})))))))))))

(clojure.core/defn list-groups ([input__56767__auto__] (list-groups input__56767__auto__ portkey.aws/*http-client*)) ([input57286 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListGroupsRequest input57286)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57285] (clojure.core/let [errors__56772__auto__ {}] (if (clojure.core/= 200 (:status response57285)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-groups-response (:body response57285)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57285 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57285)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57285})))))))))))

(clojure.core/defn create-logger-definition ([input__56767__auto__] (create-logger-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57288 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateLoggerDefinitionRequest input57288)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57287] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57287)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-logger-definition-response (:body response57287)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57287 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57287)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57287})))))))))))

(clojure.core/defn get-subscription-definition-version ([input__56767__auto__] (get-subscription-definition-version input__56767__auto__ portkey.aws/*http-client*)) ([input57290 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetSubscriptionDefinitionVersionRequest input57290)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId", "SubscriptionDefinitionVersionId" "SubscriptionDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57289] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57289)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-response (:body response57289)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57289 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57289)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57289})))))))))))

(clojure.core/defn list-function-definition-versions ([input__56767__auto__] (list-function-definition-versions input__56767__auto__ portkey.aws/*http-client*)) ([input57292 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListFunctionDefinitionVersionsRequest input57292)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57291] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57291)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-response (:body response57291)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57291 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57291)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57291})))))))))))

(clojure.core/defn update-logger-definition ([input__56767__auto__] (update-logger-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57294 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateLoggerDefinitionRequest input57294)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57293] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57293)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-logger-definition-response (:body response57293)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57293 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57293)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57293})))))))))))

(clojure.core/defn disassociate-service-role-from-account ([input__56767__auto__] (disassociate-service-role-from-account input__56767__auto__ portkey.aws/*http-client*)) ([input57296 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DisassociateServiceRoleFromAccountRequest input57296)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57295] (clojure.core/let [errors__56772__auto__ {"InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response57295)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-response (:body response57295)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57295 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57295)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57295})))))))))))

(clojure.core/defn create-subscription-definition-version ([input__56767__auto__] (create-subscription-definition-version input__56767__auto__ portkey.aws/*http-client*)) ([input57298 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateSubscriptionDefinitionVersionRequest input57298)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57297] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57297)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-response (:body response57297)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57297 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57297)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57297})))))))))))

(clojure.core/defn delete-subscription-definition ([input__56767__auto__] (delete-subscription-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57300 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteSubscriptionDefinitionRequest input57300)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57299] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57299)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-response (:body response57299)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57299 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57299)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57299})))))))))))

(clojure.core/defn create-logger-definition-version ([input__56767__auto__] (create-logger-definition-version input__56767__auto__ portkey.aws/*http-client*)) ([input57302 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateLoggerDefinitionVersionRequest input57302)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57301] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57301)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-response (:body response57301)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57301 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57301)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57301})))))))))))

(clojure.core/defn delete-logger-definition ([input__56767__auto__] (delete-logger-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57304 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteLoggerDefinitionRequest input57304)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57303] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57303)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-response (:body response57303)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57303 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57303)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57303})))))))))))

(clojure.core/defn get-subscription-definition ([input__56767__auto__] (get-subscription-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57306 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetSubscriptionDefinitionRequest input57306)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57305] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57305)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-response (:body response57305)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57305 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57305)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57305})))))))))))

(clojure.core/defn update-group-certificate-configuration ([input__56767__auto__] (update-group-certificate-configuration input__56767__auto__ portkey.aws/*http-client*)) ([input57308 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateGroupCertificateConfigurationRequest input57308)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57307] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response57307)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-response (:body response57307)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57307 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57307)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57307})))))))))))

(clojure.core/defn create-deployment ([input__56767__auto__] (create-deployment input__56767__auto__ portkey.aws/*http-client*)) ([input57310 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateDeploymentRequest input57310)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57309] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57309)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-deployment-response (:body response57309)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57309 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57309)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57309})))))))))))

(clojure.core/defn delete-device-definition ([input__56767__auto__] (delete-device-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57312 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteDeviceDefinitionRequest input57312)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57311] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57311)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-device-definition-response (:body response57311)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57311 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57311)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57311})))))))))))

(clojure.core/defn list-subscription-definitions ([input__56767__auto__] (list-subscription-definitions input__56767__auto__ portkey.aws/*http-client*)) ([input57314 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListSubscriptionDefinitionsRequest input57314)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57313] (clojure.core/let [errors__56772__auto__ {}] (if (clojure.core/= 200 (:status response57313)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-response (:body response57313)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57313 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57313)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57313})))))))))))

(clojure.core/defn list-group-versions ([input__56767__auto__] (list-group-versions input__56767__auto__ portkey.aws/*http-client*)) ([input57316 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListGroupVersionsRequest input57316)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57315] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57315)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-group-versions-response (:body response57315)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57315 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57315)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57315})))))))))))

(clojure.core/defn list-subscription-definition-versions ([input__56767__auto__] (list-subscription-definition-versions input__56767__auto__ portkey.aws/*http-client*)) ([input57318 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListSubscriptionDefinitionVersionsRequest input57318)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57317] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57317)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-response (:body response57317)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57317 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57317)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57317})))))))))))

(clojure.core/defn list-logger-definition-versions ([input__56767__auto__] (list-logger-definition-versions input__56767__auto__ portkey.aws/*http-client*)) ([input57320 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListLoggerDefinitionVersionsRequest input57320)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57319] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57319)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-response (:body response57319)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57319 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57319)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57319})))))))))))

(clojure.core/defn get-associated-role ([input__56767__auto__] (get-associated-role input__56767__auto__ portkey.aws/*http-client*)) ([input57322 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetAssociatedRoleRequest input57322)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57321] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response57321)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-associated-role-response (:body response57321)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57321 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57321)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57321})))))))))))

(clojure.core/defn get-group ([input__56767__auto__] (get-group input__56767__auto__ portkey.aws/*http-client*)) ([input57324 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetGroupRequest input57324)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57323] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57323)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-response (:body response57323)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57323 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57323)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57323})))))))))))

(clojure.core/defn update-group ([input__56767__auto__] (update-group input__56767__auto__ portkey.aws/*http-client*)) ([input57326 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateGroupRequest input57326)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57325] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57325)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-group-response (:body response57325)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57325 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57325)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57325})))))))))))

(clojure.core/defn get-group-certificate-authority ([input__56767__auto__] (get-group-certificate-authority input__56767__auto__ portkey.aws/*http-client*)) ([input57328 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetGroupCertificateAuthorityRequest input57328)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CertificateAuthorityId" "CertificateAuthorityId", "GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57327] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response57327)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-response (:body response57327)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57327 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57327)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57327})))))))))))

(clojure.core/defn get-core-definition ([input__56767__auto__] (get-core-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57330 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetCoreDefinitionRequest input57330)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57329] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57329)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-core-definition-response (:body response57329)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57329 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57329)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57329})))))))))))

(clojure.core/defn list-core-definitions ([input__56767__auto__] (list-core-definitions input__56767__auto__ portkey.aws/*http-client*)) ([input57332 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListCoreDefinitionsRequest input57332)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57331] (clojure.core/let [errors__56772__auto__ {}] (if (clojure.core/= 200 (:status response57331)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-core-definitions-response (:body response57331)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57331 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57331)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57331})))))))))))

(clojure.core/defn get-deployment-status ([input__56767__auto__] (get-deployment-status input__56767__auto__ portkey.aws/*http-client*)) ([input57334 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetDeploymentStatusRequest input57334)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeploymentId" "DeploymentId", "GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57333] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57333)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-deployment-status-response (:body response57333)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57333 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57333)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57333})))))))))))

(clojure.core/defn get-connectivity-info ([input__56767__auto__] (get-connectivity-info input__56767__auto__ portkey.aws/*http-client*)) ([input57336 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/things/{ThingName}/connectivityInfo"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetConnectivityInfoRequest input57336)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ThingName" "ThingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57335] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response57335)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-response (:body response57335)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57335 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57335)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57335})))))))))))

(clojure.core/defn get-device-definition ([input__56767__auto__] (get-device-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57338 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetDeviceDefinitionRequest input57338)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57337] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57337)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-device-definition-response (:body response57337)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57337 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57337)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57337})))))))))))

(clojure.core/defn list-deployments ([input__56767__auto__] (list-deployments input__56767__auto__ portkey.aws/*http-client*)) ([input57340 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListDeploymentsRequest input57340)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57339] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57339)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-deployments-response (:body response57339)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57339 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57339)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57339})))))))))))

(clojure.core/defn create-group-version ([input__56767__auto__] (create-group-version input__56767__auto__ portkey.aws/*http-client*)) ([input57342 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateGroupVersionRequest input57342)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57341] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57341)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-version-response (:body response57341)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57341 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57341)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57341})))))))))))

(clojure.core/defn get-device-definition-version ([input__56767__auto__] (get-device-definition-version input__56767__auto__ portkey.aws/*http-client*)) ([input57344 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetDeviceDefinitionVersionRequest input57344)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId", "DeviceDefinitionVersionId" "DeviceDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57343] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57343)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-response (:body response57343)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57343 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57343)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57343})))))))))))

(clojure.core/defn update-function-definition ([input__56767__auto__] (update-function-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57346 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateFunctionDefinitionRequest input57346)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57345] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57345)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-function-definition-response (:body response57345)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57345 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57345)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57345})))))))))))

(clojure.core/defn delete-function-definition ([input__56767__auto__] (delete-function-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57348 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteFunctionDefinitionRequest input57348)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57347] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57347)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-function-definition-response (:body response57347)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57347 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57347)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57347})))))))))))

(clojure.core/defn list-core-definition-versions ([input__56767__auto__] (list-core-definition-versions input__56767__auto__ portkey.aws/*http-client*)) ([input57350 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListCoreDefinitionVersionsRequest input57350)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57349] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57349)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-response (:body response57349)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57349 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57349)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57349})))))))))))

(clojure.core/defn list-group-certificate-authorities ([input__56767__auto__] (list-group-certificate-authorities input__56767__auto__ portkey.aws/*http-client*)) ([input57352 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListGroupCertificateAuthoritiesRequest input57352)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57351] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response57351)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-response (:body response57351)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57351 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57351)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57351})))))))))))

(clojure.core/defn get-logger-definition ([input__56767__auto__] (get-logger-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57354 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetLoggerDefinitionRequest input57354)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57353] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57353)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-logger-definition-response (:body response57353)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57353 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57353)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57353})))))))))))

(clojure.core/defn update-device-definition ([input__56767__auto__] (update-device-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57356 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateDeviceDefinitionRequest input57356)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57355] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57355)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-device-definition-response (:body response57355)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57355 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57355)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57355})))))))))))

(clojure.core/defn create-group-certificate-authority ([input__56767__auto__] (create-group-certificate-authority input__56767__auto__ portkey.aws/*http-client*)) ([input57358 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateGroupCertificateAuthorityRequest input57358)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57357] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response57357)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-response (:body response57357)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57357 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57357)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57357})))))))))))

(clojure.core/defn create-function-definition-version ([input__56767__auto__] (create-function-definition-version input__56767__auto__ portkey.aws/*http-client*)) ([input57360 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateFunctionDefinitionVersionRequest input57360)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57359] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57359)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-response (:body response57359)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57359 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57359)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57359})))))))))))

(clojure.core/defn get-core-definition-version ([input__56767__auto__] (get-core-definition-version input__56767__auto__ portkey.aws/*http-client*)) ([input57362 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetCoreDefinitionVersionRequest input57362)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId", "CoreDefinitionVersionId" "CoreDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57361] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57361)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-response (:body response57361)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57361 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57361)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57361})))))))))))

(clojure.core/defn get-function-definition-version ([input__56767__auto__] (get-function-definition-version input__56767__auto__ portkey.aws/*http-client*)) ([input57364 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetFunctionDefinitionVersionRequest input57364)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId", "FunctionDefinitionVersionId" "FunctionDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57363] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57363)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-response (:body response57363)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57363 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57363)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57363})))))))))))

(clojure.core/defn update-core-definition ([input__56767__auto__] (update-core-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57366 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateCoreDefinitionRequest input57366)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57365] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57365)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-core-definition-response (:body response57365)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57365 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57365)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57365})))))))))))

(clojure.core/defn associate-role-to-group ([input__56767__auto__] (associate-role-to-group input__56767__auto__ portkey.aws/*http-client*)) ([input57368 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/AssociateRoleToGroupRequest input57368)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57367] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response57367)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-response (:body response57367)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57367 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57367)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57367})))))))))))

(clojure.core/defn associate-service-role-to-account ([input__56767__auto__] (associate-service-role-to-account input__56767__auto__ portkey.aws/*http-client*)) ([input57370 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/AssociateServiceRoleToAccountRequest input57370)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57369] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response57369)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-response (:body response57369)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57369 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57369)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57369})))))))))))

(clojure.core/defn update-subscription-definition ([input__56767__auto__] (update-subscription-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57372 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateSubscriptionDefinitionRequest input57372)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57371] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57371)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-response (:body response57371)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57371 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57371)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57371})))))))))))

(clojure.core/defn update-connectivity-info ([input__56767__auto__] (update-connectivity-info input__56767__auto__ portkey.aws/*http-client*)) ([input57374 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/things/{ThingName}/connectivityInfo"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/UpdateConnectivityInfoRequest input57374)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ThingName" "ThingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57373] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response57373)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-response (:body response57373)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57373 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57373)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57373})))))))))))

(clojure.core/defn create-group ([input__56767__auto__] (create-group input__56767__auto__ portkey.aws/*http-client*)) ([input57376 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateGroupRequest input57376)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57375] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57375)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-response (:body response57375)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57375 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57375)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57375})))))))))))

(clojure.core/defn create-subscription-definition ([input__56767__auto__] (create-subscription-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57378 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateSubscriptionDefinitionRequest input57378)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57377] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57377)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-response (:body response57377)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57377 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57377)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57377})))))))))))

(clojure.core/defn get-group-version ([input__56767__auto__] (get-group-version input__56767__auto__ portkey.aws/*http-client*)) ([input57380 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions/{GroupVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetGroupVersionRequest input57380)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId", "GroupVersionId" "GroupVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57379] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57379)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-version-response (:body response57379)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57379 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57379)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57379})))))))))))

(clojure.core/defn get-service-role-for-account ([input__56767__auto__] (get-service-role-for-account input__56767__auto__ portkey.aws/*http-client*)) ([input57382 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetServiceRoleForAccountRequest input57382)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57381] (clojure.core/let [errors__56772__auto__ {"InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response57381)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-response (:body response57381)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57381 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57381)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57381})))))))))))

(clojure.core/defn get-group-certificate-configuration ([input__56767__auto__] (get-group-certificate-configuration input__56767__auto__ portkey.aws/*http-client*)) ([input57384 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetGroupCertificateConfigurationRequest input57384)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57383] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response57383)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-response (:body response57383)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57383 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57383)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57383})))))))))))

(clojure.core/defn delete-core-definition ([input__56767__auto__] (delete-core-definition input__56767__auto__ portkey.aws/*http-client*)) ([input57386 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DeleteCoreDefinitionRequest input57386)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57385] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57385)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-core-definition-response (:body response57385)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57385 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57385)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57385})))))))))))

(clojure.core/defn get-logger-definition-version ([input__56767__auto__] (get-logger-definition-version input__56767__auto__ portkey.aws/*http-client*)) ([input57388 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/GetLoggerDefinitionVersionRequest input57388)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId", "LoggerDefinitionVersionId" "LoggerDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57387] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57387)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-response (:body response57387)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57387 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57387)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57387})))))))))))

(clojure.core/defn list-device-definition-versions ([input__56767__auto__] (list-device-definition-versions input__56767__auto__ portkey.aws/*http-client*)) ([input57390 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListDeviceDefinitionVersionsRequest input57390)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57389] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57389)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-response (:body response57389)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57389 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57389)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57389})))))))))))

(clojure.core/defn create-core-definition-version ([input__56767__auto__] (create-core-definition-version input__56767__auto__ portkey.aws/*http-client*)) ([input57392 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/CreateCoreDefinitionVersionRequest input57392)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57391] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response57391)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-response (:body response57391)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57391 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57391)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57391})))))))))))

(clojure.core/defn disassociate-role-from-group ([input__56767__auto__] (disassociate-role-from-group input__56767__auto__ portkey.aws/*http-client*)) ([input57394 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/DisassociateRoleFromGroupRequest input57394)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57393] (clojure.core/let [errors__56772__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response57393)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-response (:body response57393)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57393 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57393)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57393})))))))))))

(clojure.core/defn list-device-definitions ([input__56767__auto__] (list-device-definitions input__56767__auto__ portkey.aws/*http-client*)) ([input57396 http-client__56768__auto__] (clojure.core/let [endpoint__56769__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*) sig-opts__56770__auto__ (clojure.core/into (:credential-scope endpoint__56769__auto__) portkey.aws/*credentials*)] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/ListDeviceDefinitionsRequest input57396)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__56766__56771__auto__] (clojure.core/some-> p1__56766__56771__auto__ cheshire.core/generate-string))) (portkey.aws/sign-v4 sig-opts__56770__auto__) (http-client__56768__auto__ (clojure.core/fn [response57395] (clojure.core/let [errors__56772__auto__ {}] (if (clojure.core/= 200 (:status response57395)) (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-device-definitions-response (:body response57395)) (clojure.core/if-some [[type__56773__auto__ spec__56774__auto__] (clojure.core/find errors__56772__auto__ (clojure.core/get-in response57395 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__56775__auto__ (clojure.spec.alpha/unform spec__56774__auto__ (cheshire.core/parse-string (:body response57395)))] (throw (clojure.core/ex-info (clojure.core/str type__56773__auto__ ": " (:message m__56775__auto__)) m__56775__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response57395})))))))))))
