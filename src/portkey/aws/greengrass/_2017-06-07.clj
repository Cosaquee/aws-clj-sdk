(ns portkey.aws.greengrass.-2017-06-07 (:require [portkey.aws]))

(def
 endpoints
 '{"ap-southeast-2"
   {:credential-scope
    {:service "greengrass", :region "ap-southeast-2"},
    :ssl-common-name "greengrass.ap-southeast-2.amazonaws.com",
    :endpoint "https://greengrass.ap-southeast-2.amazonaws.com",
    :signature-version :v4},
   "eu-central-1"
   {:credential-scope {:service "greengrass", :region "eu-central-1"},
    :ssl-common-name "greengrass.eu-central-1.amazonaws.com",
    :endpoint "https://greengrass.eu-central-1.amazonaws.com",
    :signature-version :v4},
   "us-west-2"
   {:credential-scope {:service "greengrass", :region "us-west-2"},
    :ssl-common-name "greengrass.us-west-2.amazonaws.com",
    :endpoint "https://greengrass.us-west-2.amazonaws.com",
    :signature-version :v4},
   "us-east-1"
   {:credential-scope {:service "greengrass", :region "us-east-1"},
    :ssl-common-name "greengrass.us-east-1.amazonaws.com",
    :endpoint "https://greengrass.us-east-1.amazonaws.com",
    :signature-version :v4}})

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device-definition-version/devices (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/device-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.device-definition-version/Devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-function-definition-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-function-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.internal-server-error-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/ErrorDetails :portkey.aws.greengrass.-2017-06-07.internal-server-error-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-certificate-authority-properties (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/GroupCertificateAuthorityArn :portkey.aws.greengrass.-2017-06-07.group-certificate-authority-properties/GroupCertificateAuthorityId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/empty (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/core-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-core-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.definition-information/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/definition-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.definition-information/Arn :portkey.aws.greengrass.-2017-06-07.definition-information/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.definition-information/Id :portkey.aws.greengrass.-2017-06-07.definition-information/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.definition-information/LatestVersion :portkey.aws.greengrass.-2017-06-07.definition-information/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.definition-information/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/deployment-status (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/error-message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/updated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-deployment-status-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/DeploymentStatus :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/ErrorMessage :portkey.aws.greengrass.-2017-06-07.get-deployment-status-response/UpdatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-device (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/device :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/cores (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-request/Cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-logger-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/loggers (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-logger-definition-version-request/Loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-request/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/devices (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-device))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-device-definition-version-request/Devices]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/created-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.deployment/group-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.deployment/CreatedAt :portkey.aws.greengrass.-2017-06-07.deployment/DeploymentArn :portkey.aws.greengrass.-2017-06-07.deployment/DeploymentId :portkey.aws.greengrass.-2017-06-07.deployment/GroupArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/bad-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/ErrorDetails :portkey.aws.greengrass.-2017-06-07.bad-request-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployment-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"NewDeployment" "NewDeployment", :new-deployment "NewDeployment", "Redeployment" "Redeployment", :redeployment "Redeployment"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-level (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {:warn "WARN", "WARN" "WARN", :debug "DEBUG", "ERROR" "ERROR", :fatal "FATAL", "DEBUG" "DEBUG", "FATAL" "FATAL", :info "INFO", :error "ERROR", "INFO" "INFO"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/host-address (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/metadata (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.connectivity-info/port-number (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/connectivity-info (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.connectivity-info/HostAddress :portkey.aws.greengrass.-2017-06-07.connectivity-info/Id :portkey.aws.greengrass.-2017-06-07.connectivity-info/Metadata :portkey.aws.greengrass.-2017-06-07.connectivity-info/PortNumber]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-request/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-request/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/subscription-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/SubscriptionDefinitionId :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-request/SubscriptionDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-function-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-type (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"FileSystem" "FileSystem", :file-system "FileSystem", "AWSCloudWatch" "AWSCloudWatch", :awscloud-watch "AWSCloudWatch"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-core-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-device-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-service-role-to-account-response/AssociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-associated-role-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-associated-role-response/AssociatedAt :portkey.aws.greengrass.-2017-06-07.get-associated-role-response/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-request/AmznClientToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-group-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/group-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/group-certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/pem-encoded-certificate (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/GroupCertificateAuthorityArn :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/GroupCertificateAuthorityId :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-response/PemEncodedCertificate]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-core-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-core (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/core :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-response/DisassociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/function-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/FunctionDefinitionId :portkey.aws.greengrass.-2017-06-07.get-function-definition-version-request/FunctionDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-associated-role-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-associated-role-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-associated-role-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-definition-version/functions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-definition-version/Functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger-definition-version/loggers (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-logger))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.logger-definition-version/Loggers]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-request/SubscriptionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/device-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/DeviceDefinitionVersionId :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-subscription-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-response/Arn :portkey.aws.greengrass.-2017-06-07.get-group-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-group-response/Id :portkey.aws.greengrass.-2017-06-07.get-group-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-group-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-group-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-group-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.disassociate-role-from-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/CertificateExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-response/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-group-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-response/groups (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-group-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-groups-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-groups-response/Groups :portkey.aws.greengrass.-2017-06-07.list-groups-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-certificate-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/CertificateExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.group-certificate-configuration/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-device-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-group-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.associate-role-to-group-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.associate-role-to-group-response/AssociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/ThingName] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-request/ConnectivityInfo]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-version-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/version-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.version-information/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/version-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.version-information/Arn :portkey.aws.greengrass.-2017-06-07.version-information/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.version-information/Id :portkey.aws.greengrass.-2017-06-07.version-information/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-core-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-function-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-function-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-device-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-device-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-version/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-version/CoreDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/DeviceDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/FunctionDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/LoggerDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.group-version/SubscriptionDefinitionVersionArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.group-information/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/group-information (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.group-information/Arn :portkey.aws.greengrass.-2017-06-07.group-information/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.group-information/Id :portkey.aws.greengrass.-2017-06-07.group-information/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.group-information/LatestVersion :portkey.aws.greengrass.-2017-06-07.group-information/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.group-information/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-function-definition-request/FunctionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.error-detail/detailed-error-code (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.error-detail/detailed-error-message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/error-detail (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.error-detail/DetailedErrorCode :portkey.aws.greengrass.-2017-06-07.error-detail/DetailedErrorMessage]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-logger-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/logger-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/LoggerDefinitionVersionId :portkey.aws.greengrass.-2017-06-07.get-logger-definition-version-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-logger-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/associated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/role-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/AssociatedAt :portkey.aws.greengrass.-2017-06-07.get-service-role-for-account-response/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-group-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/certificate-authority-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/CertificateAuthorityExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/CertificateExpiryInMilliseconds :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-response/GroupId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/connectivity-info (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/ConnectivityInfo :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-response/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-deployments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-deployments-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-deployments-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-deployments-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-definition-information (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/definition-information :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.disassociate-service-role-from-account-response/disassociated-at (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.disassociate-service-role-from-account-response/DisassociatedAt]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-response/group-certificate-authorities (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-group-certificate-authority-properties))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-response/GroupCertificateAuthorities]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core-definition-version/cores (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-core))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/core-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.core-definition-version/Cores]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-deployment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-deployment-request/DeploymentId :portkey.aws.greengrass.-2017-06-07/DeploymentType :portkey.aws.greengrass.-2017-06-07.create-deployment-request/GroupVersionId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription-definition-version/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/subscription-definition-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.subscription-definition-version/Subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-subscription-definition-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-subscription-definition-request/SubscriptionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-group-certificate-authorities-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-core-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-response/group-certificate-authority-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-certificate-authority-response/GroupCertificateAuthorityArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/LoggerDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-logger-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-core-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-core-definition-request/CoreDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/certificate-expiry-in-milliseconds (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-certificate-configuration-request/CertificateExpiryInMilliseconds]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-deployment-status-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/GroupId :portkey.aws.greengrass.-2017-06-07.get-deployment-status-request/DeploymentId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/core-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/device-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/function-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/logger-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-request/subscription-definition-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-group-version-request/CoreDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/DeviceDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/FunctionDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/LoggerDefinitionVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-version-request/SubscriptionDefinitionVersionArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-core-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-core-definition-request/CoreDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-core-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-subscription-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-group-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-group-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-group-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-group-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-group-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/core-definition-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/CoreDefinitionId :portkey.aws.greengrass.-2017-06-07.get-core-definition-version-request/CoreDefinitionVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/definition (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Definition :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.get-device-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/environment (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/function-configuration-environment))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/exec-args (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/executable (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/memory-size (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/pinned (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration/timeout (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-configuration/Environment :portkey.aws.greengrass.-2017-06-07.function-configuration/ExecArgs :portkey.aws.greengrass.-2017-06-07.function-configuration/Executable :portkey.aws.greengrass.-2017-06-07.function-configuration/MemorySize :portkey.aws.greengrass.-2017-06-07.function-configuration/Pinned :portkey.aws.greengrass.-2017-06-07.function-configuration/Timeout]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-device-definition-versions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-groups-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-groups-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-groups-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-groups-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/versions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-version-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/NextToken :portkey.aws.greengrass.-2017-06-07.list-subscription-definition-versions-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function-configuration-environment/variables (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/map-of--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function-configuration-environment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function-configuration-environment/Variables]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-response/Arn :portkey.aws.greengrass.-2017-06-07.create-group-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-group-response/Id :portkey.aws.greengrass.-2017-06-07.create-group-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-group-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-group-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-group-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/error-details (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/error-detail :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/max-results (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-function-definitions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/MaxResults :portkey.aws.greengrass.-2017-06-07.list-function-definitions-request/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/source (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/subject (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.subscription/target (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/subscription (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.subscription/Id :portkey.aws.greengrass.-2017-06-07.subscription/Source :portkey.aws.greengrass.-2017-06-07.subscription/Subject :portkey.aws.greengrass.-2017-06-07.subscription/Target]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/group-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-group-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-group-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.core/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/core (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.core/CertificateArn :portkey.aws.greengrass.-2017-06-07.core/Id :portkey.aws.greengrass.-2017-06-07.core/SyncShadow :portkey.aws.greengrass.-2017-06-07.core/ThingArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-version-request/group-version-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-version-request/GroupVersionId :portkey.aws.greengrass.-2017-06-07.get-group-version-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/subscription-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/subscriptions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-subscription))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/SubscriptionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-version-request/Subscriptions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-configuration-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-deployments-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-deployments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/Deployments :portkey.aws.greengrass.-2017-06-07.list-deployments-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-subscription (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/subscription :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/functions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-function))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/FunctionDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-function-definition-version-request/Functions]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function/function-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.function/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/function (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.function/FunctionArn :portkey.aws.greengrass.-2017-06-07/FunctionConfiguration :portkey.aws.greengrass.-2017-06-07.function/Id]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/--integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-response/deployment-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-deployment-response/deployment-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-deployment-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-deployment-response/DeploymentArn :portkey.aws.greengrass.-2017-06-07.create-deployment-response/DeploymentId]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-logger-definition-request/logger-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-logger-definition-request/LoggerDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.delete-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.delete-device-definition-request/DeviceDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-logger-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/subscription-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-subscription-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-device-definition-request/device-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-device-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-device-definition-request/DeviceDefinitionId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-device-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-subscription-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-core-definition-request/core-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-core-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-core-definition-request/CoreDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/certificate-authority-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/CertificateAuthorityId :portkey.aws.greengrass.-2017-06-07.get-group-certificate-authority-request/GroupId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-logger-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-logger-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/certificate-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/sync-shadow (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--boolean))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.device/thing-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/device (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.device/CertificateArn :portkey.aws.greengrass.-2017-06-07.device/Id :portkey.aws.greengrass.-2017-06-07.device/SyncShadow :portkey.aws.greengrass.-2017-06-07.device/ThingArn]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger-component (clojure.spec.alpha/conformer (clojure.core/let [m__99523__auto__ {"GreengrassSystem" "GreengrassSystem", :greengrass-system "GreengrassSystem", "Lambda" "Lambda", :lambda "Lambda"}] (clojure.core/fn [s__99524__auto__] (m__99523__auto__ s__99524__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-request/function-definition-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-request/FunctionDefinitionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-connectivity-info (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/connectivity-info :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/amzn-client-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/initial-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/device-definition-version))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-device-definition-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-device-definition-request/AmznClientToken :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/InitialVersion :portkey.aws.greengrass.-2017-06-07.create-device-definition-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-group-certificate-authority-properties (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/group-certificate-authority-properties :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-connectivity-info-request/thing-name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.get-connectivity-info-request/ThingName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-group-version-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-group-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-group-version-response/Arn :portkey.aws.greengrass.-2017-06-07.create-group-version-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-group-version-response/Id :portkey.aws.greengrass.-2017-06-07.create-group-version-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-definitions-response/definitions (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-of-definition-information))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.list-definitions-response/next-token (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-definitions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.list-definitions-response/Definitions :portkey.aws.greengrass.-2017-06-07.list-definitions-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-core-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-core-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-core-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.general-error/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/general-error (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07/ErrorDetails :portkey.aws.greengrass.-2017-06-07.general-error/Message]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-function (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/function :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/create-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.create-function-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/Id :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.create-function-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/message (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/Message :portkey.aws.greengrass.-2017-06-07.update-connectivity-info-response/Version]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/creation-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/last-updated-timestamp (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/latest-version (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/latest-version-arn (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/get-function-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.get-function-definition-response/Arn :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/CreationTimestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/Id :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/LastUpdatedTimestamp :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/LatestVersion :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/LatestVersionArn :portkey.aws.greengrass.-2017-06-07.get-function-definition-response/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-request/group-id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.update-group-request/name (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/update-group-request (portkey.awsgen/json-keys :req-un [:portkey.aws.greengrass.-2017-06-07.update-group-request/GroupId] :opt-un [:portkey.aws.greengrass.-2017-06-07.update-group-request/Name]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/list-of-logger (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/logger :max-count nil))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/map-of--string (clojure.spec.alpha/map-of :portkey.aws.greengrass.-2017-06-07/--string :portkey.aws.greengrass.-2017-06-07/--string))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/component (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-component))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/id (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--string))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/level (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-level))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/space (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/--integer))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07.logger/type (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/logger-type))
(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/logger (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.greengrass.-2017-06-07.logger/Component :portkey.aws.greengrass.-2017-06-07.logger/Id :portkey.aws.greengrass.-2017-06-07.logger/Level :portkey.aws.greengrass.-2017-06-07.logger/Space :portkey.aws.greengrass.-2017-06-07.logger/Type]))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/delete-device-definition-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.greengrass.-2017-06-07/deployments (clojure.spec.alpha/coll-of :portkey.aws.greengrass.-2017-06-07/deployment :max-count nil))

(clojure.core/defn create-device-definition [input112963] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-device-definition-request input112963)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112962] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112962)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-device-definition-response (:body response112962))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112962 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112962)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112962}))])))))))
(clojure.spec.alpha/fdef create-device-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-device-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-device-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-device-definition-response))

(clojure.core/defn get-function-definition [input112965] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-function-definition-request input112965)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112964] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112964)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-function-definition-response (:body response112964))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112964 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112964)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112964}))])))))))
(clojure.spec.alpha/fdef get-function-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-function-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-function-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-function-definition-response))

(clojure.core/defn delete-group [input112967] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-group-request input112967)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112966] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112966)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-group-response (:body response112966))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112966 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112966)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112966}))])))))))
(clojure.spec.alpha/fdef delete-group :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-group-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-group-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/delete-group-response))

(clojure.core/defn create-device-definition-version [input112969] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-request input112969)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112968] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112968)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-response (:body response112968))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112968 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112968)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112968}))])))))))
(clojure.spec.alpha/fdef create-device-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-device-definition-version-response))

(clojure.core/defn list-logger-definitions [input112971] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-request input112971)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112970] (clojure.core/let [errors__109313__auto__ {}] (if (clojure.core/= 200 (:status response112970)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-response (:body response112970))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112970 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112970)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112970}))])))))))
(clojure.spec.alpha/fdef list-logger-definitions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-logger-definitions-response))

(clojure.core/defn list-function-definitions [input112973] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-function-definitions-request input112973)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112972] (clojure.core/let [errors__109313__auto__ {}] (if (clojure.core/= 200 (:status response112972)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-function-definitions-response (:body response112972))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112972 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112972)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112972}))])))))))
(clojure.spec.alpha/fdef list-function-definitions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-function-definitions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-function-definitions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-function-definitions-response))

(clojure.core/defn create-function-definition [input112975] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-function-definition-request input112975)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112974] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112974)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-function-definition-response (:body response112974))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112974 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112974)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112974}))])))))))
(clojure.spec.alpha/fdef create-function-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-function-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-function-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-function-definition-response))

(clojure.core/defn create-core-definition [input112977] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-core-definition-request input112977)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112976] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112976)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-core-definition-response (:body response112976))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112976 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112976)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112976}))])))))))
(clojure.spec.alpha/fdef create-core-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-core-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-core-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-core-definition-response))

(clojure.core/defn list-groups [input112979] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-groups-request input112979)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112978] (clojure.core/let [errors__109313__auto__ {}] (if (clojure.core/= 200 (:status response112978)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-groups-response (:body response112978))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112978 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112978)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112978}))])))))))
(clojure.spec.alpha/fdef list-groups :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-groups-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-groups-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-groups-response))

(clojure.core/defn create-logger-definition [input112981] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-logger-definition-request input112981)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112980] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112980)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-logger-definition-response (:body response112980))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112980 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112980)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112980}))])))))))
(clojure.spec.alpha/fdef create-logger-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-logger-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-logger-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-logger-definition-response))

(clojure.core/defn get-subscription-definition-version [input112983] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions/{SubscriptionDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-request input112983)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId", "SubscriptionDefinitionVersionId" "SubscriptionDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112982] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112982)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-response (:body response112982))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112982 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112982)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112982}))])))))))
(clojure.spec.alpha/fdef get-subscription-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-version-response))

(clojure.core/defn list-function-definition-versions [input112985] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-request input112985)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112984] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112984)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-response (:body response112984))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112984 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112984)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112984}))])))))))
(clojure.spec.alpha/fdef list-function-definition-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-function-definition-versions-response))

(clojure.core/defn update-logger-definition [input112987] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-logger-definition-request input112987)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112986] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112986)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-logger-definition-response (:body response112986))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112986 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112986)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112986}))])))))))
(clojure.spec.alpha/fdef update-logger-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-logger-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-logger-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-logger-definition-response))

(clojure.core/defn disassociate-service-role-from-account [input112989] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-request input112989)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112988] (clojure.core/let [errors__109313__auto__ {"InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response112988)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-response (:body response112988))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112988 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112988)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112988}))])))))))
(clojure.spec.alpha/fdef disassociate-service-role-from-account :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/disassociate-service-role-from-account-response))

(clojure.core/defn create-subscription-definition-version [input112991] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-request input112991)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112990] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112990)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-response (:body response112990))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112990 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112990)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112990}))])))))))
(clojure.spec.alpha/fdef create-subscription-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-version-response))

(clojure.core/defn delete-subscription-definition [input112993] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-request input112993)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112992] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112992)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-response (:body response112992))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112992 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112992)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112992}))])))))))
(clojure.spec.alpha/fdef delete-subscription-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/delete-subscription-definition-response))

(clojure.core/defn create-logger-definition-version [input112995] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-request input112995)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112994] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112994)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-response (:body response112994))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112994 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112994)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112994}))])))))))
(clojure.spec.alpha/fdef create-logger-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-logger-definition-version-response))

(clojure.core/defn delete-logger-definition [input112997] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-request input112997)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112996] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112996)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-response (:body response112996))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112996 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112996)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112996}))])))))))
(clojure.spec.alpha/fdef delete-logger-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/delete-logger-definition-response))

(clojure.core/defn get-subscription-definition [input112999] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-request input112999)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response112998] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response112998)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-response (:body response112998))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response112998 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response112998)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response112998}))])))))))
(clojure.spec.alpha/fdef get-subscription-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-subscription-definition-response))

(clojure.core/defn update-group-certificate-configuration [input113001] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-request input113001)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113000] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response113000)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-response (:body response113000))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113000 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113000)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113000}))])))))))
(clojure.spec.alpha/fdef update-group-certificate-configuration :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-group-certificate-configuration-response))

(clojure.core/defn create-deployment [input113003] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-deployment-request input113003)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113002] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113002)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-deployment-response (:body response113002))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113002 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113002)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113002}))])))))))
(clojure.spec.alpha/fdef create-deployment :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-deployment-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-deployment-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-deployment-response))

(clojure.core/defn delete-device-definition [input113005] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-device-definition-request input113005)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113004] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113004)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-device-definition-response (:body response113004))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113004 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113004)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113004}))])))))))
(clojure.spec.alpha/fdef delete-device-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-device-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-device-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/delete-device-definition-response))

(clojure.core/defn list-subscription-definitions [input113007] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-request input113007)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113006] (clojure.core/let [errors__109313__auto__ {}] (if (clojure.core/= 200 (:status response113006)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-response (:body response113006))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113006 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113006)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113006}))])))))))
(clojure.spec.alpha/fdef list-subscription-definitions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-subscription-definitions-response))

(clojure.core/defn list-group-versions [input113009] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-group-versions-request input113009)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113008] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113008)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-group-versions-response (:body response113008))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113008 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113008)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113008}))])))))))
(clojure.spec.alpha/fdef list-group-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-group-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-group-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-group-versions-response))

(clojure.core/defn list-subscription-definition-versions [input113011] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-request input113011)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113010] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113010)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-response (:body response113010))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113010 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113010)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113010}))])))))))
(clojure.spec.alpha/fdef list-subscription-definition-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-subscription-definition-versions-response))

(clojure.core/defn list-logger-definition-versions [input113013] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-request input113013)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113012] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113012)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-response (:body response113012))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113012 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113012)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113012}))])))))))
(clojure.spec.alpha/fdef list-logger-definition-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-logger-definition-versions-response))

(clojure.core/defn get-associated-role [input113015] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-associated-role-request input113015)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113014] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response113014)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-associated-role-response (:body response113014))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113014 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113014)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113014}))])))))))
(clojure.spec.alpha/fdef get-associated-role :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-associated-role-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-associated-role-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-associated-role-response))

(clojure.core/defn get-group [input113017] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-request input113017)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113016] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113016)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-response (:body response113016))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113016 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113016)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113016}))])))))))
(clojure.spec.alpha/fdef get-group :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-group-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-group-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-group-response))

(clojure.core/defn update-group [input113019] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-group-request input113019)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113018] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113018)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-group-response (:body response113018))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113018 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113018)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113018}))])))))))
(clojure.spec.alpha/fdef update-group :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-group-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-group-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-group-response))

(clojure.core/defn get-group-certificate-authority [input113021] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/{CertificateAuthorityId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-request input113021)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CertificateAuthorityId" "CertificateAuthorityId", "GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113020] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response113020)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-response (:body response113020))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113020 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113020)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113020}))])))))))
(clojure.spec.alpha/fdef get-group-certificate-authority :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-group-certificate-authority-response))

(clojure.core/defn get-core-definition [input113023] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-core-definition-request input113023)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113022] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113022)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-core-definition-response (:body response113022))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113022 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113022)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113022}))])))))))
(clojure.spec.alpha/fdef get-core-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-core-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-core-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-core-definition-response))

(clojure.core/defn list-core-definitions [input113025] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-core-definitions-request input113025)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113024] (clojure.core/let [errors__109313__auto__ {}] (if (clojure.core/= 200 (:status response113024)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-core-definitions-response (:body response113024))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113024 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113024)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113024}))])))))))
(clojure.spec.alpha/fdef list-core-definitions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-core-definitions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-core-definitions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-core-definitions-response))

(clojure.core/defn get-deployment-status [input113027] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments/{DeploymentId}/status"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-deployment-status-request input113027)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeploymentId" "DeploymentId", "GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113026] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113026)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-deployment-status-response (:body response113026))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113026 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113026)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113026}))])))))))
(clojure.spec.alpha/fdef get-deployment-status :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-deployment-status-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-deployment-status-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-deployment-status-response))

(clojure.core/defn get-connectivity-info [input113029] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/things/{ThingName}/connectivityInfo"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-request input113029)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ThingName" "ThingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113028] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response113028)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-response (:body response113028))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113028 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113028)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113028}))])))))))
(clojure.spec.alpha/fdef get-connectivity-info :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-connectivity-info-response))

(clojure.core/defn get-device-definition [input113031] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-device-definition-request input113031)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113030] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113030)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-device-definition-response (:body response113030))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113030 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113030)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113030}))])))))))
(clojure.spec.alpha/fdef get-device-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-device-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-device-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-device-definition-response))

(clojure.core/defn list-deployments [input113033] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/deployments"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-deployments-request input113033)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113032] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113032)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-deployments-response (:body response113032))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113032 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113032)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113032}))])))))))
(clojure.spec.alpha/fdef list-deployments :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-deployments-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-deployments-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-deployments-response))

(clojure.core/defn create-group-version [input113035] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-version-request input113035)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113034] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113034)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-version-response (:body response113034))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113034 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113034)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113034}))])))))))
(clojure.spec.alpha/fdef create-group-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-group-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-group-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-group-version-response))

(clojure.core/defn get-device-definition-version [input113037] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions/{DeviceDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-request input113037)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId", "DeviceDefinitionVersionId" "DeviceDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113036] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113036)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-response (:body response113036))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113036 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113036)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113036}))])))))))
(clojure.spec.alpha/fdef get-device-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-device-definition-version-response))

(clojure.core/defn update-function-definition [input113039] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-function-definition-request input113039)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113038] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113038)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-function-definition-response (:body response113038))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113038 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113038)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113038}))])))))))
(clojure.spec.alpha/fdef update-function-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-function-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-function-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-function-definition-response))

(clojure.core/defn delete-function-definition [input113041] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-function-definition-request input113041)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113040] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113040)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-function-definition-response (:body response113040))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113040 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113040)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113040}))])))))))
(clojure.spec.alpha/fdef delete-function-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-function-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-function-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/delete-function-definition-response))

(clojure.core/defn list-core-definition-versions [input113043] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-request input113043)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113042] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113042)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-response (:body response113042))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113042 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113042)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113042}))])))))))
(clojure.spec.alpha/fdef list-core-definition-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-core-definition-versions-response))

(clojure.core/defn list-group-certificate-authorities [input113045] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-request input113045)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113044] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response113044)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-response (:body response113044))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113044 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113044)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113044}))])))))))
(clojure.spec.alpha/fdef list-group-certificate-authorities :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-group-certificate-authorities-response))

(clojure.core/defn get-logger-definition [input113047] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-logger-definition-request input113047)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113046] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113046)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-logger-definition-response (:body response113046))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113046 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113046)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113046}))])))))))
(clojure.spec.alpha/fdef get-logger-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-logger-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-logger-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-logger-definition-response))

(clojure.core/defn update-device-definition [input113049] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-device-definition-request input113049)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113048] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113048)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-device-definition-response (:body response113048))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113048 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113048)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113048}))])))))))
(clojure.spec.alpha/fdef update-device-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-device-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-device-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-device-definition-response))

(clojure.core/defn create-group-certificate-authority [input113051] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-request input113051)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113050] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response113050)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-response (:body response113050))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113050 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113050)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113050}))])))))))
(clojure.spec.alpha/fdef create-group-certificate-authority :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-group-certificate-authority-response))

(clojure.core/defn create-function-definition-version [input113053] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-request input113053)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113052] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113052)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-response (:body response113052))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113052 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113052)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113052}))])))))))
(clojure.spec.alpha/fdef create-function-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-function-definition-version-response))

(clojure.core/defn get-core-definition-version [input113055] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions/{CoreDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-request input113055)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId", "CoreDefinitionVersionId" "CoreDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113054] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113054)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-response (:body response113054))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113054 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113054)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113054}))])))))))
(clojure.spec.alpha/fdef get-core-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-core-definition-version-response))

(clojure.core/defn get-function-definition-version [input113057] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/functions/{FunctionDefinitionId}/versions/{FunctionDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-request input113057)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionDefinitionId" "FunctionDefinitionId", "FunctionDefinitionVersionId" "FunctionDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113056] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113056)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-response (:body response113056))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113056 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113056)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113056}))])))))))
(clojure.spec.alpha/fdef get-function-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-function-definition-version-response))

(clojure.core/defn update-core-definition [input113059] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-core-definition-request input113059)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113058] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113058)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-core-definition-response (:body response113058))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113058 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113058)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113058}))])))))))
(clojure.spec.alpha/fdef update-core-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-core-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-core-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-core-definition-response))

(clojure.core/defn associate-role-to-group [input113061] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-request input113061)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113060] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response113060)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-response (:body response113060))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113060 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113060)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113060}))])))))))
(clojure.spec.alpha/fdef associate-role-to-group :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/associate-role-to-group-response))

(clojure.core/defn associate-service-role-to-account [input113063] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-request input113063)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113062] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response113062)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-response (:body response113062))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113062 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113062)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113062}))])))))))
(clojure.spec.alpha/fdef associate-service-role-to-account :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/associate-service-role-to-account-response))

(clojure.core/defn update-subscription-definition [input113065] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions/{SubscriptionDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-request input113065)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"SubscriptionDefinitionId" "SubscriptionDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113064] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113064)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-response (:body response113064))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113064 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113064)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113064}))])))))))
(clojure.spec.alpha/fdef update-subscription-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-subscription-definition-response))

(clojure.core/defn update-connectivity-info [input113067] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "PUT", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/things/{ThingName}/connectivityInfo"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-request input113067)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ThingName" "ThingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113066] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response113066)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-response (:body response113066))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113066 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113066)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113066}))])))))))
(clojure.spec.alpha/fdef update-connectivity-info :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/update-connectivity-info-response))

(clojure.core/defn create-group [input113069] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-request input113069)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113068] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113068)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-group-response (:body response113068))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113068 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113068)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113068}))])))))))
(clojure.spec.alpha/fdef create-group :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-group-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-group-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-group-response))

(clojure.core/defn create-subscription-definition [input113071] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/subscriptions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-request input113071)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113070] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113070)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-response (:body response113070))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113070 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113070)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113070}))])))))))
(clojure.spec.alpha/fdef create-subscription-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-subscription-definition-response))

(clojure.core/defn get-group-version [input113073] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/versions/{GroupVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-version-request input113073)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId", "GroupVersionId" "GroupVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113072] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113072)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-version-response (:body response113072))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113072 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113072)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113072}))])))))))
(clojure.spec.alpha/fdef get-group-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-group-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-group-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-group-version-response))

(clojure.core/defn get-service-role-for-account [input113075] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/servicerole"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-request input113075)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113074] (clojure.core/let [errors__109313__auto__ {"InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response113074)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-response (:body response113074))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113074 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113074)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113074}))])))))))
(clojure.spec.alpha/fdef get-service-role-for-account :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-service-role-for-account-response))

(clojure.core/defn get-group-certificate-configuration [input113077] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/certificateauthorities/configuration/expiry"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-request input113077)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113076] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response113076)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-response (:body response113076))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113076 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113076)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113076}))])))))))
(clojure.spec.alpha/fdef get-group-certificate-configuration :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-group-certificate-configuration-response))

(clojure.core/defn delete-core-definition [input113079] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-core-definition-request input113079)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113078] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113078)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/delete-core-definition-response (:body response113078))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113078 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113078)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113078}))])))))))
(clojure.spec.alpha/fdef delete-core-definition :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-core-definition-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/delete-core-definition-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/delete-core-definition-response))

(clojure.core/defn get-logger-definition-version [input113081] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/loggers/{LoggerDefinitionId}/versions/{LoggerDefinitionVersionId}"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-request input113081)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"LoggerDefinitionId" "LoggerDefinitionId", "LoggerDefinitionVersionId" "LoggerDefinitionVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113080] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113080)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-response (:body response113080))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113080 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113080)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113080}))])))))))
(clojure.spec.alpha/fdef get-logger-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/get-logger-definition-version-response))

(clojure.core/defn list-device-definition-versions [input113083] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices/{DeviceDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-request input113083)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"DeviceDefinitionId" "DeviceDefinitionId"}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113082] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113082)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-response (:body response113082))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113082 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113082)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113082}))])))))))
(clojure.spec.alpha/fdef list-device-definition-versions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-device-definition-versions-response))

(clojure.core/defn create-core-definition-version [input113085] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "POST", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/cores/{CoreDefinitionId}/versions"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-request input113085)} (portkey.awsgen/params-to-header {"AmznClientToken" ["X-Amzn-Client-Token" nil]}) (portkey.awsgen/params-to-uri {"CoreDefinitionId" "CoreDefinitionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113084] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception}] (if (clojure.core/= 200 (:status response113084)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-response (:body response113084))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113084 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113084)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113084}))])))))))
(clojure.spec.alpha/fdef create-core-definition-version :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/create-core-definition-version-response))

(clojure.core/defn disassociate-role-from-group [input113087] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "DELETE", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/groups/{GroupId}/role"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-request input113087)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"GroupId" "GroupId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113086] (clojure.core/let [errors__109313__auto__ {"BadRequestException" :portkey.aws.greengrass.-2017-06-07/bad-request-exception, "InternalServerErrorException" :portkey.aws.greengrass.-2017-06-07/internal-server-error-exception}] (if (clojure.core/= 200 (:status response113086)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-response (:body response113086))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113086 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113086)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113086}))])))))))
(clojure.spec.alpha/fdef disassociate-role-from-group :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/disassociate-role-from-group-response))

(clojure.core/defn list-device-definitions [input113089] (clojure.core/let [endpoint__109311__auto__ (portkey.aws.greengrass.-2017-06-07/endpoints portkey.aws/*region*)] (clojure.core/-> {:portkey.aws/signature-version (:signature-version endpoint__109311__auto__), :method "GET", :as :json-string-keys, :headers {"content-type" "application/json"}, :portkey.aws/credential-scope (:credential-scope endpoint__109311__auto__), :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/greengrass/definition/devices"), :body (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-device-definitions-request input113089)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxResults" "MaxResults", "NextToken" "NextToken"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__109310__109312__auto__] (clojure.core/some-> p1__109310__109312__auto__ cheshire.core/generate-string))) (portkey.aws/*http-client* (clojure.core/fn [response113088] (clojure.core/let [errors__109313__auto__ {}] (if (clojure.core/= 200 (:status response113088)) [:result (clojure.spec.alpha/unform :portkey.aws.greengrass.-2017-06-07/list-device-definitions-response (:body response113088))] [:exception (clojure.core/if-some [[type__109314__auto__ spec__109315__auto__] (clojure.core/find errors__109313__auto__ (clojure.core/get-in response113088 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__109316__auto__ (clojure.spec.alpha/unform spec__109315__auto__ (cheshire.core/parse-string (:body response113088)))] (clojure.core/ex-info (clojure.core/str type__109314__auto__ ": " (:message m__109316__auto__)) m__109316__auto__)) (clojure.core/ex-info "Unexpected response" {:response response113088}))])))))))
(clojure.spec.alpha/fdef list-device-definitions :args (clojure.spec.alpha/cat :sync (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-device-definitions-request) :async (clojure.spec.alpha/tuple :portkey.aws.greengrass.-2017-06-07/list-device-definitions-request (clojure.spec.alpha/fspec :args (clojure.spec.alpha/cat :result clojure.core/any? :exception clojure.core/ex-data)))) :ret (clojure.spec.alpha/and :portkey.aws.greengrass.-2017-06-07/list-device-definitions-response))
