(ns portkey.aws.pinpoint.-2016-12-01 (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.treatment-resource/id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.treatment-resource/size-percent (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.treatment-resource/state (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/campaign-state))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.treatment-resource/treatment-description (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.treatment-resource/treatment-name (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/treatment-resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.treatment-resource/Id :portkey.aws.pinpoint.-2016-12-01/MessageConfiguration :portkey.aws.pinpoint.-2016-12-01/Schedule :portkey.aws.pinpoint.-2016-12-01.treatment-resource/SizePercent :portkey.aws.pinpoint.-2016-12-01.treatment-resource/State :portkey.aws.pinpoint.-2016-12-01.treatment-resource/TreatmentDescription :portkey.aws.pinpoint.-2016-12-01.treatment-resource/TreatmentName]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/attribute-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"INCLUSIVE" "INCLUSIVE", :inclusive "INCLUSIVE", "EXCLUSIVE" "EXCLUSIVE", :exclusive "EXCLUSIVE"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-request/define-segment (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-request/external-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-request/register-endpoints (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-request/role-arn (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-request/s3-url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-request/segment-name (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/import-job-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.import-job-request/DefineSegment :portkey.aws.pinpoint.-2016-12-01.import-job-request/ExternalId :portkey.aws.pinpoint.-2016-12-01/Format :portkey.aws.pinpoint.-2016-12-01.import-job-request/RegisterEndpoints :portkey.aws.pinpoint.-2016-12-01.import-job-request/RoleArn :portkey.aws.pinpoint.-2016-12-01.import-job-request/S3Url :portkey.aws.pinpoint.-2016-12-01.import-job-request/SegmentId :portkey.aws.pinpoint.-2016-12-01.import-job-request/SegmentName]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.internal-server-error-exception/message (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.internal-server-error-exception/requestid (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.internal-server-error-exception/Message :portkey.aws.pinpoint.-2016-12-01.internal-server-error-exception/RequestID]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.method-not-allowed-exception/message (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.method-not-allowed-exception/requestid (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.method-not-allowed-exception/Message :portkey.aws.pinpoint.-2016-12-01.method-not-allowed-exception/RequestID]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/additional-treatments (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/list-of-write-treatment-resource))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/treatment-description (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/treatment-name (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/limits (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/campaign-limits))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/segment-version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/description (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/is-paused (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/name (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/holdout-percent (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/write-campaign-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.write-campaign-request/AdditionalTreatments :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/TreatmentDescription :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/TreatmentName :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/Limits :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/SegmentVersion :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/Description :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/IsPaused :portkey.aws.pinpoint.-2016-12-01/MessageConfiguration :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/SegmentId :portkey.aws.pinpoint.-2016-12-01/Schedule :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/Name :portkey.aws.pinpoint.-2016-12-01.write-campaign-request/HoldoutPercent]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmmessage/collapse-key (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmmessage/restricted-package-name (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmmessage/body (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmmessage/image-url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmmessage/title (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmmessage/silent-push (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmmessage/sound (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmmessage/raw-content (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmmessage/url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmmessage/substitutions (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmmessage/small-image-icon-url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmmessage/icon-reference (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmmessage/data (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmmessage/image-icon-url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/gcmmessage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.gcmmessage/CollapseKey :portkey.aws.pinpoint.-2016-12-01.gcmmessage/RestrictedPackageName :portkey.aws.pinpoint.-2016-12-01.gcmmessage/Body :portkey.aws.pinpoint.-2016-12-01.gcmmessage/ImageUrl :portkey.aws.pinpoint.-2016-12-01.gcmmessage/Title :portkey.aws.pinpoint.-2016-12-01.gcmmessage/SilentPush :portkey.aws.pinpoint.-2016-12-01.gcmmessage/Sound :portkey.aws.pinpoint.-2016-12-01.gcmmessage/RawContent :portkey.aws.pinpoint.-2016-12-01.gcmmessage/Url :portkey.aws.pinpoint.-2016-12-01.gcmmessage/Substitutions :portkey.aws.pinpoint.-2016-12-01.gcmmessage/SmallImageIconUrl :portkey.aws.pinpoint.-2016-12-01.gcmmessage/IconReference :portkey.aws.pinpoint.-2016-12-01.gcmmessage/Data :portkey.aws.pinpoint.-2016-12-01.gcmmessage/ImageIconUrl :portkey.aws.pinpoint.-2016-12-01/Action]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-application-settings-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/ApplicationSettingsResource] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/send-messages-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/MessageResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-response/request-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-response/result (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of-message-result))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/message-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.message-response/ApplicationId :portkey.aws.pinpoint.-2016-12-01.message-response/RequestId :portkey.aws.pinpoint.-2016-12-01.message-response/Result]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.delete-gcm-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-gcm-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.delete-gcm-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-apns-sandbox-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/APNSSandboxChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-response/failures (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-response/completion-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-response/type (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-response/total-pieces (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-response/total-failures (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-response/definition (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/import-job-resource))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-response/failed-pieces (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-response/completed-pieces (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-response/total-processed (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/import-job-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01/JobStatus :portkey.aws.pinpoint.-2016-12-01.import-job-response/Failures :portkey.aws.pinpoint.-2016-12-01.import-job-response/CompletionDate :portkey.aws.pinpoint.-2016-12-01.import-job-response/Type :portkey.aws.pinpoint.-2016-12-01.import-job-response/TotalPieces :portkey.aws.pinpoint.-2016-12-01.import-job-response/TotalFailures :portkey.aws.pinpoint.-2016-12-01.import-job-response/ApplicationId :portkey.aws.pinpoint.-2016-12-01.import-job-response/Definition :portkey.aws.pinpoint.-2016-12-01.import-job-response/FailedPieces :portkey.aws.pinpoint.-2016-12-01.import-job-response/CompletedPieces :portkey.aws.pinpoint.-2016-12-01.import-job-response/CreationDate :portkey.aws.pinpoint.-2016-12-01.import-job-response/Id :portkey.aws.pinpoint.-2016-12-01.import-job-response/TotalProcessed]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/--timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/create-app-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/ApplicationResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/list-of-segment-response (clojure.spec.alpha/coll-of :portkey.aws.pinpoint.-2016-12-01/segment-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-request/addresses (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of-address-configuration))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-request/context (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-request/message-configuration (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/direct-message-configuration))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/message-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.message-request/Addresses :portkey.aws.pinpoint.-2016-12-01.message-request/Context :portkey.aws.pinpoint.-2016-12-01.message-request/MessageConfiguration]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segment-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segment-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-segment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-segment-request/SegmentId :portkey.aws.pinpoint.-2016-12-01.get-segment-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/campaign-state (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01/CampaignStatus]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-endpoint-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/EndpointResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaign-version-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaign-version-request/campaign-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaign-version-request/version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-campaign-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-campaign-version-request/Version :portkey.aws.pinpoint.-2016-12-01.get-campaign-version-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01.get-campaign-version-request/CampaignId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-limits/daily (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-limits/total (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/campaign-limits (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.campaign-limits/Daily :portkey.aws.pinpoint.-2016-12-01.campaign-limits/Total]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-apps-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/ApplicationsResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.create-campaign-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/create-campaign-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.create-campaign-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01/WriteCampaignRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/platform (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/credential (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/is-archived (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/last-modified-by (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/gcmchannel-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/Platform :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/Credential :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/LastModifiedDate :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/Enabled :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/ApplicationId :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/IsArchived :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/CreationDate :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/Version :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/LastModifiedBy :portkey.aws.pinpoint.-2016-12-01.gcmchannel-response/Id]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.quiet-time/end (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.quiet-time/start (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/quiet-time (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.quiet-time/End :portkey.aws.pinpoint.-2016-12-01.quiet-time/Start]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-application-settings-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/ApplicationSettingsResource] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-app-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/ApplicationResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.bad-request-exception/message (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.bad-request-exception/requestid (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/bad-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.bad-request-exception/Message :portkey.aws.pinpoint.-2016-12-01.bad-request-exception/RequestID]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-campaigns-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/CampaignsResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.activity-response/total-endpoint-count (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.activity-response/timezones-completed-count (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.activity-response/start (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.activity-response/end (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.activity-response/result (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.activity-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.activity-response/successful-endpoint-count (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.activity-response/state (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.activity-response/scheduled-start (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.activity-response/timezones-total-count (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.activity-response/campaign-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.activity-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.activity-response/treatment-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/activity-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.activity-response/TotalEndpointCount :portkey.aws.pinpoint.-2016-12-01.activity-response/TimezonesCompletedCount :portkey.aws.pinpoint.-2016-12-01.activity-response/Start :portkey.aws.pinpoint.-2016-12-01.activity-response/End :portkey.aws.pinpoint.-2016-12-01.activity-response/Result :portkey.aws.pinpoint.-2016-12-01.activity-response/ApplicationId :portkey.aws.pinpoint.-2016-12-01.activity-response/SuccessfulEndpointCount :portkey.aws.pinpoint.-2016-12-01.activity-response/State :portkey.aws.pinpoint.-2016-12-01.activity-response/ScheduledStart :portkey.aws.pinpoint.-2016-12-01.activity-response/TimezonesTotalCount :portkey.aws.pinpoint.-2016-12-01.activity-response/CampaignId :portkey.aws.pinpoint.-2016-12-01.activity-response/Id :portkey.aws.pinpoint.-2016-12-01.activity-response/TreatmentId]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/job-status (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"COMPLETED" "COMPLETED", :initializing "INITIALIZING", "FAILING" "FAILING", :processing "PROCESSING", :completed "COMPLETED", :created "CREATED", "COMPLETING" "COMPLETING", :failing "FAILING", "FAILED" "FAILED", :completing "COMPLETING", "INITIALIZING" "INITIALIZING", "PROCESSING" "PROCESSING", :failed "FAILED", "CREATED" "CREATED"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/create-app-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/CreateApplicationRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-gcm-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-gcm-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-gcm-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/default-state (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/campaign-state))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/additional-treatments (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/list-of-treatment-resource))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/treatment-description (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/treatment-name (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/limits (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/campaign-limits))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/segment-version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/description (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/is-paused (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/state (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/campaign-state))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/name (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-response/holdout-percent (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/campaign-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.campaign-response/DefaultState :portkey.aws.pinpoint.-2016-12-01.campaign-response/LastModifiedDate :portkey.aws.pinpoint.-2016-12-01.campaign-response/AdditionalTreatments :portkey.aws.pinpoint.-2016-12-01.campaign-response/TreatmentDescription :portkey.aws.pinpoint.-2016-12-01.campaign-response/TreatmentName :portkey.aws.pinpoint.-2016-12-01.campaign-response/Limits :portkey.aws.pinpoint.-2016-12-01.campaign-response/ApplicationId :portkey.aws.pinpoint.-2016-12-01.campaign-response/SegmentVersion :portkey.aws.pinpoint.-2016-12-01.campaign-response/Description :portkey.aws.pinpoint.-2016-12-01.campaign-response/IsPaused :portkey.aws.pinpoint.-2016-12-01/MessageConfiguration :portkey.aws.pinpoint.-2016-12-01.campaign-response/SegmentId :portkey.aws.pinpoint.-2016-12-01.campaign-response/CreationDate :portkey.aws.pinpoint.-2016-12-01.campaign-response/State :portkey.aws.pinpoint.-2016-12-01.campaign-response/Version :portkey.aws.pinpoint.-2016-12-01/Schedule :portkey.aws.pinpoint.-2016-12-01.campaign-response/Name :portkey.aws.pinpoint.-2016-12-01.campaign-response/Id :portkey.aws.pinpoint.-2016-12-01.campaign-response/HoldoutPercent]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.create-application-request/name (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/create-application-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.create-application-request/Name]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/segment-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"DIMENSIONAL" "DIMENSIONAL", :dimensional "DIMENSIONAL", "IMPORT" "IMPORT", :import "IMPORT"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.delete-apns-sandbox-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-apns-sandbox-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.delete-apns-sandbox-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.attribute-dimension/values (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/attribute-dimension (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01/AttributeType :portkey.aws.pinpoint.-2016-12-01.attribute-dimension/Values]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/recency-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"ACTIVE" "ACTIVE", :active "ACTIVE", "INACTIVE" "INACTIVE", :inactive "INACTIVE"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.application-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.application-response/name (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/application-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.application-response/Id :portkey.aws.pinpoint.-2016-12-01.application-response/Name]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-campaign-versions-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/CampaignsResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-application-settings-request/limits (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/campaign-limits))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/write-application-settings-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.write-application-settings-request/Limits :portkey.aws.pinpoint.-2016-12-01/QuietTime]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/list-of-treatment-resource (clojure.spec.alpha/coll-of :portkey.aws.pinpoint.-2016-12-01/treatment-resource :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-apns-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/APNSChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segment-import-jobs-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segment-import-jobs-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segment-import-jobs-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segment-import-jobs-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-segment-import-jobs-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-segment-import-jobs-request/SegmentId :portkey.aws.pinpoint.-2016-12-01.get-segment-import-jobs-request/ApplicationId] :opt-un [:portkey.aws.pinpoint.-2016-12-01.get-segment-import-jobs-request/PageSize :portkey.aws.pinpoint.-2016-12-01.get-segment-import-jobs-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.forbidden-exception/message (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.forbidden-exception/requestid (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/forbidden-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.forbidden-exception/Message :portkey.aws.pinpoint.-2016-12-01.forbidden-exception/RequestID]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/map-of-message-result (clojure.spec.alpha/map-of :portkey.aws.pinpoint.-2016-12-01/--string :portkey.aws.pinpoint.-2016-12-01/message-result))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-user/user-attributes (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-user/user-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/endpoint-user (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.endpoint-user/UserAttributes :portkey.aws.pinpoint.-2016-12-01.endpoint-user/UserId]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/--string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-import-job-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-import-job-request/job-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-import-job-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-import-job-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01.get-import-job-request/JobId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.activities-response/item (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/list-of-activity-response))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/activities-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.activities-response/Item]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaigns-response/item (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/list-of-campaign-response))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaigns-response/next-token (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/campaigns-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.campaigns-response/Item :portkey.aws.pinpoint.-2016-12-01.campaigns-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-campaign-activities-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/ActivitiesResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delivery-status (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"SUCCESSFUL" "SUCCESSFUL", :successful "SUCCESSFUL", "THROTTLED" "THROTTLED", :throttled "THROTTLED", "TEMPORARY_FAILURE" "TEMPORARY_FAILURE", :temporary-failure "TEMPORARY_FAILURE", "PERMANENT_FAILURE" "PERMANENT_FAILURE", :permanent-failure "PERMANENT_FAILURE"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-segment-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/SegmentResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-sms-message/body (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-sms-message/sender-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/campaign-sms-message (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.campaign-sms-message/Body :portkey.aws.pinpoint.-2016-12-01/MessageType :portkey.aws.pinpoint.-2016-12-01.campaign-sms-message/SenderId]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.update-apns-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-apns-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.update-apns-channel-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01/APNSChannelRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-apns-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/APNSChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-campaign-version-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/CampaignResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-event-stream-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-event-stream-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-event-stream-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/map-of-list-of--string (clojure.spec.alpha/map-of :portkey.aws.pinpoint.-2016-12-01/--string :portkey.aws.pinpoint.-2016-12-01/list-of--string))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-campaign-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/CampaignResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/app-version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/locale (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/make (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/model (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/model-version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/platform (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/platform-version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/timezone (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/endpoint-demographic (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/AppVersion :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/Locale :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/Make :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/Model :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/ModelVersion :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/Platform :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/PlatformVersion :portkey.aws.pinpoint.-2016-12-01.endpoint-demographic/Timezone]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/create-segment-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/SegmentResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.update-email-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-email-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.update-email-channel-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01/EmailChannelRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.delete-apns-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-apns-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.delete-apns-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/format (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"CSV" "CSV", :csv "CSV", "JSON" "JSON", :json "JSON"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-jobs-response/item (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/list-of-import-job-response))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-jobs-response/next-token (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/import-jobs-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.import-jobs-response/Item :portkey.aws.pinpoint.-2016-12-01.import-jobs-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-sms-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/SMSChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-segments-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/SegmentsResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-sms-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/SMSChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.update-gcm-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-gcm-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.update-gcm-channel-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01/GCMChannelRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-resource/define-segment (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-resource/external-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-resource/register-endpoints (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-resource/role-arn (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-resource/s3-url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-resource/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.import-job-resource/segment-name (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/import-job-resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.import-job-resource/DefineSegment :portkey.aws.pinpoint.-2016-12-01.import-job-resource/ExternalId :portkey.aws.pinpoint.-2016-12-01/Format :portkey.aws.pinpoint.-2016-12-01.import-job-resource/RegisterEndpoints :portkey.aws.pinpoint.-2016-12-01.import-job-resource/RoleArn :portkey.aws.pinpoint.-2016-12-01.import-job-resource/S3Url :portkey.aws.pinpoint.-2016-12-01.import-job-resource/SegmentId :portkey.aws.pinpoint.-2016-12-01.import-job-resource/SegmentName]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/list-of--string (clojure.spec.alpha/coll-of :portkey.aws.pinpoint.-2016-12-01/--string :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smschannel-response/platform (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smschannel-response/short-code (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smschannel-response/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smschannel-response/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smschannel-response/sender-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smschannel-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smschannel-response/is-archived (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smschannel-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smschannel-response/version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smschannel-response/last-modified-by (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smschannel-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/smschannel-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.smschannel-response/Platform :portkey.aws.pinpoint.-2016-12-01.smschannel-response/ShortCode :portkey.aws.pinpoint.-2016-12-01.smschannel-response/LastModifiedDate :portkey.aws.pinpoint.-2016-12-01.smschannel-response/Enabled :portkey.aws.pinpoint.-2016-12-01.smschannel-response/SenderId :portkey.aws.pinpoint.-2016-12-01.smschannel-response/ApplicationId :portkey.aws.pinpoint.-2016-12-01.smschannel-response/IsArchived :portkey.aws.pinpoint.-2016-12-01.smschannel-response/CreationDate :portkey.aws.pinpoint.-2016-12-01.smschannel-response/Version :portkey.aws.pinpoint.-2016-12-01.smschannel-response/LastModifiedBy :portkey.aws.pinpoint.-2016-12-01.smschannel-response/Id]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-endpoint-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/MessageBody] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/list-of-endpoint-batch-item (clojure.spec.alpha/coll-of :portkey.aws.pinpoint.-2016-12-01/endpoint-batch-item :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-segment-versions-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/SegmentsResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-app-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/ApplicationResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.too-many-requests-exception/requestid (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.too-many-requests-exception/Message :portkey.aws.pinpoint.-2016-12-01.too-many-requests-exception/RequestID]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-gcm-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/GCMChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.update-apns-sandbox-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-apns-sandbox-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.update-apns-sandbox-channel-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01/APNSSandboxChannelRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-event-stream-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/EventStream] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-body/message (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-body/requestid (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/message-body (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.message-body/Message :portkey.aws.pinpoint.-2016-12-01.message-body/RequestID]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-apns-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-apns-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-apns-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-endpoint-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-endpoint-request/endpoint-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-endpoint-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-endpoint-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01.get-endpoint-request/EndpointId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-event-stream/destination-stream-arn (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-event-stream/role-arn (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/write-event-stream (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.write-event-stream/DestinationStreamArn :portkey.aws.pinpoint.-2016-12-01.write-event-stream/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/platform (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/is-archived (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/last-modified-by (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/apnssandbox-channel-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/Platform :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/LastModifiedDate :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/Enabled :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/ApplicationId :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/IsArchived :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/CreationDate :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/Version :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/LastModifiedBy :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-response/Id]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segments-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segments-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segments-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-segments-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-segments-request/ApplicationId] :opt-un [:portkey.aws.pinpoint.-2016-12-01.get-segments-request/PageSize :portkey.aws.pinpoint.-2016-12-01.get-segments-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-apns-sandbox-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-apns-sandbox-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-apns-sandbox-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.send-messages-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/send-messages-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.send-messages-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01/MessageRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-import-job-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/ImportJobResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/--boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.update-sms-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-sms-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.update-sms-channel-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01/SMSChannelRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/map-of--double (clojure.spec.alpha/map-of :portkey.aws.pinpoint.-2016-12-01/--string :portkey.aws.pinpoint.-2016-12-01/--double))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-request/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-request/from-address (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-request/identity (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-request/role-arn (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/email-channel-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.email-channel-request/Enabled :portkey.aws.pinpoint.-2016-12-01.email-channel-request/FromAddress :portkey.aws.pinpoint.-2016-12-01.email-channel-request/Identity :portkey.aws.pinpoint.-2016-12-01.email-channel-request/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.set-dimension/values (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/set-dimension (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01/DimensionType :portkey.aws.pinpoint.-2016-12-01.set-dimension/Values]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-behaviors/recency (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/recency-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/segment-behaviors (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.segment-behaviors/Recency]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-dimensions/attributes (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of-attribute-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-dimensions/behavior (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/segment-behaviors))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-dimensions/demographic (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/segment-demographics))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-dimensions/location (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/segment-location))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-dimensions/user-attributes (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of-attribute-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/segment-dimensions (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.segment-dimensions/Attributes :portkey.aws.pinpoint.-2016-12-01.segment-dimensions/Behavior :portkey.aws.pinpoint.-2016-12-01.segment-dimensions/Demographic :portkey.aws.pinpoint.-2016-12-01.segment-dimensions/Location :portkey.aws.pinpoint.-2016-12-01.segment-dimensions/UserAttributes]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-email-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-email-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-email-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.default-message/body (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.default-message/substitutions (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/default-message (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.default-message/Body :portkey.aws.pinpoint.-2016-12-01.default-message/Substitutions]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message/body (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message/image-url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message/title (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message/silent-push (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message/raw-content (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message/url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message/json-body (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message/image-small-icon-url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message/media-url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message/image-icon-url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/message (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.message/Body :portkey.aws.pinpoint.-2016-12-01.message/ImageUrl :portkey.aws.pinpoint.-2016-12-01.message/Title :portkey.aws.pinpoint.-2016-12-01.message/SilentPush :portkey.aws.pinpoint.-2016-12-01.message/RawContent :portkey.aws.pinpoint.-2016-12-01.message/Url :portkey.aws.pinpoint.-2016-12-01.message/JsonBody :portkey.aws.pinpoint.-2016-12-01.message/ImageSmallIconUrl :portkey.aws.pinpoint.-2016-12-01.message/MediaUrl :portkey.aws.pinpoint.-2016-12-01.message/ImageIconUrl :portkey.aws.pinpoint.-2016-12-01/Action]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/map-of-address-configuration (clojure.spec.alpha/map-of :portkey.aws.pinpoint.-2016-12-01/--string :portkey.aws.pinpoint.-2016-12-01/address-configuration))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.update-endpoints-batch-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-endpoints-batch-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.update-endpoints-batch-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01/EndpointBatchRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnschannel-request/certificate (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnschannel-request/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnschannel-request/private-key (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/apnschannel-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.apnschannel-request/Certificate :portkey.aws.pinpoint.-2016-12-01.apnschannel-request/Enabled :portkey.aws.pinpoint.-2016-12-01.apnschannel-request/PrivateKey]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/dimension-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"INCLUSIVE" "INCLUSIVE", :inclusive "INCLUSIVE", "EXCLUSIVE" "EXCLUSIVE", :exclusive "EXCLUSIVE"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.application-settings-resource/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.application-settings-resource/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.application-settings-resource/limits (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/campaign-limits))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/application-settings-resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.application-settings-resource/ApplicationId :portkey.aws.pinpoint.-2016-12-01.application-settings-resource/LastModifiedDate :portkey.aws.pinpoint.-2016-12-01.application-settings-resource/Limits :portkey.aws.pinpoint.-2016-12-01/QuietTime]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.delete-app-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-app-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.delete-app-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.put-event-stream-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/put-event-stream-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.put-event-stream-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01/WriteEventStream] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.not-found-exception/message (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.not-found-exception/requestid (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.not-found-exception/Message :portkey.aws.pinpoint.-2016-12-01.not-found-exception/RequestID]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaign-versions-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaign-versions-request/campaign-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaign-versions-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaign-versions-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-campaign-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-campaign-versions-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01.get-campaign-versions-request/CampaignId] :opt-un [:portkey.aws.pinpoint.-2016-12-01.get-campaign-versions-request/PageSize :portkey.aws.pinpoint.-2016-12-01.get-campaign-versions-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/duration (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"HR_24" "HR_24", :hr-24 "HR_24", "DAY_7" "DAY_7", :day-7 "DAY_7", "DAY_14" "DAY_14", :day-14 "DAY_14", "DAY_30" "DAY_30", :day-30 "DAY_30"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-gcm-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/GCMChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.delete-email-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-email-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.delete-email-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segment-version-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segment-version-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segment-version-request/version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-segment-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-segment-version-request/SegmentId :portkey.aws.pinpoint.-2016-12-01.get-segment-version-request/Version :portkey.aws.pinpoint.-2016-12-01.get-segment-version-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-segment-request/dimensions (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/segment-dimensions))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-segment-request/name (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/write-segment-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.write-segment-request/Dimensions :portkey.aws.pinpoint.-2016-12-01.write-segment-request/Name]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-campaign-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/CampaignResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.update-application-settings-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-application-settings-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.update-application-settings-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01/WriteApplicationSettingsRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-gcm-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/GCMChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/map-of-attribute-dimension (clojure.spec.alpha/map-of :portkey.aws.pinpoint.-2016-12-01/--string :portkey.aws.pinpoint.-2016-12-01/attribute-dimension))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.delete-segment-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.delete-segment-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-segment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.delete-segment-request/SegmentId :portkey.aws.pinpoint.-2016-12-01.delete-segment-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-app-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-app-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-app-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-request/address (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-request/endpoint-status (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-request/request-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-request/location (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/endpoint-location))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-request/demographic (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/endpoint-demographic))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-request/user (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/endpoint-user))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-request/attributes (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-request/effective-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-request/opt-out (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-request/metrics (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of--double))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/endpoint-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.endpoint-request/Address :portkey.aws.pinpoint.-2016-12-01.endpoint-request/EndpointStatus :portkey.aws.pinpoint.-2016-12-01.endpoint-request/RequestId :portkey.aws.pinpoint.-2016-12-01.endpoint-request/Location :portkey.aws.pinpoint.-2016-12-01.endpoint-request/Demographic :portkey.aws.pinpoint.-2016-12-01.endpoint-request/User :portkey.aws.pinpoint.-2016-12-01.endpoint-request/Attributes :portkey.aws.pinpoint.-2016-12-01.endpoint-request/EffectiveDate :portkey.aws.pinpoint.-2016-12-01.endpoint-request/OptOut :portkey.aws.pinpoint.-2016-12-01/ChannelType :portkey.aws.pinpoint.-2016-12-01.endpoint-request/Metrics]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-request/item (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/list-of-endpoint-batch-item))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/endpoint-batch-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.endpoint-batch-request/Item]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smschannel-request/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smschannel-request/sender-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/smschannel-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.smschannel-request/Enabled :portkey.aws.pinpoint.-2016-12-01.smschannel-request/SenderId]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-segment-version-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/SegmentResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/recency-dimension (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01/Duration :portkey.aws.pinpoint.-2016-12-01/RecencyType]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.address-configuration/body-override (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.address-configuration/context (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.address-configuration/raw-content (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.address-configuration/substitutions (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.address-configuration/title-override (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/address-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.address-configuration/BodyOverride :portkey.aws.pinpoint.-2016-12-01/ChannelType :portkey.aws.pinpoint.-2016-12-01.address-configuration/Context :portkey.aws.pinpoint.-2016-12-01.address-configuration/RawContent :portkey.aws.pinpoint.-2016-12-01.address-configuration/Substitutions :portkey.aws.pinpoint.-2016-12-01.address-configuration/TitleOverride]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/put-event-stream-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/EventStream] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-apns-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/APNSChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/address (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/endpoint-status (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/request-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/location (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/endpoint-location))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/demographic (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/endpoint-demographic))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/user (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/endpoint-user))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/attributes (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/effective-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/opt-out (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/metrics (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of--double))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/endpoint-batch-item (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/Address :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/EndpointStatus :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/RequestId :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/Location :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/Demographic :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/User :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/Attributes :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/EffectiveDate :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/OptOut :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/Id :portkey.aws.pinpoint.-2016-12-01/ChannelType :portkey.aws.pinpoint.-2016-12-01.endpoint-batch-item/Metrics]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-application-settings-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-application-settings-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-application-settings-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/create-import-job-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/ImportJobResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/list-of-write-treatment-resource (clojure.spec.alpha/coll-of :portkey.aws.pinpoint.-2016-12-01/write-treatment-resource :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-treatment-resource/size-percent (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-treatment-resource/treatment-description (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.write-treatment-resource/treatment-name (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/write-treatment-resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01/MessageConfiguration :portkey.aws.pinpoint.-2016-12-01/Schedule :portkey.aws.pinpoint.-2016-12-01.write-treatment-resource/SizePercent :portkey.aws.pinpoint.-2016-12-01.write-treatment-resource/TreatmentDescription :portkey.aws.pinpoint.-2016-12-01.write-treatment-resource/TreatmentName]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.event-stream/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.event-stream/destination-stream-arn (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.event-stream/external-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.event-stream/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.event-stream/last-updated-by (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.event-stream/role-arn (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/event-stream (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.event-stream/ApplicationId :portkey.aws.pinpoint.-2016-12-01.event-stream/DestinationStreamArn :portkey.aws.pinpoint.-2016-12-01.event-stream/ExternalId :portkey.aws.pinpoint.-2016-12-01.event-stream/LastModifiedDate :portkey.aws.pinpoint.-2016-12-01.event-stream/LastUpdatedBy :portkey.aws.pinpoint.-2016-12-01.event-stream/RoleArn]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segment-versions-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segment-versions-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segment-versions-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-segment-versions-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-segment-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-segment-versions-request/SegmentId :portkey.aws.pinpoint.-2016-12-01.get-segment-versions-request/ApplicationId] :opt-un [:portkey.aws.pinpoint.-2016-12-01.get-segment-versions-request/PageSize :portkey.aws.pinpoint.-2016-12-01.get-segment-versions-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-email-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/EmailChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smsmessage/body (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smsmessage/sender-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.smsmessage/substitutions (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/smsmessage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.smsmessage/Body :portkey.aws.pinpoint.-2016-12-01/MessageType :portkey.aws.pinpoint.-2016-12-01.smsmessage/SenderId :portkey.aws.pinpoint.-2016-12-01.smsmessage/Substitutions]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-apps-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-apps-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-apps-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.get-apps-request/PageSize :portkey.aws.pinpoint.-2016-12-01.get-apps-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaigns-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaigns-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaigns-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-campaigns-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-campaigns-request/ApplicationId] :opt-un [:portkey.aws.pinpoint.-2016-12-01.get-campaigns-request/PageSize :portkey.aws.pinpoint.-2016-12-01.get-campaigns-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-email-message/body (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-email-message/from-address (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-email-message/html-body (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.campaign-email-message/title (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/campaign-email-message (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.campaign-email-message/Body :portkey.aws.pinpoint.-2016-12-01.campaign-email-message/FromAddress :portkey.aws.pinpoint.-2016-12-01.campaign-email-message/HtmlBody :portkey.aws.pinpoint.-2016-12-01.campaign-email-message/Title]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/list-of-import-job-response (clojure.spec.alpha/coll-of :portkey.aws.pinpoint.-2016-12-01/import-job-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-configuration/apnsmessage (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/message))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-configuration/default-message (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/message))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-configuration/email-message (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/campaign-email-message))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-configuration/gcmmessage (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/message))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-configuration/smsmessage (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/campaign-sms-message))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/message-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.message-configuration/APNSMessage :portkey.aws.pinpoint.-2016-12-01.message-configuration/DefaultMessage :portkey.aws.pinpoint.-2016-12-01.message-configuration/EmailMessage :portkey.aws.pinpoint.-2016-12-01.message-configuration/GCMMessage :portkey.aws.pinpoint.-2016-12-01.message-configuration/SMSMessage]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaign-activities-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaign-activities-request/campaign-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaign-activities-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaign-activities-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-campaign-activities-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-campaign-activities-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01.get-campaign-activities-request/CampaignId] :opt-un [:portkey.aws.pinpoint.-2016-12-01.get-campaign-activities-request/PageSize :portkey.aws.pinpoint.-2016-12-01.get-campaign-activities-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.create-import-job-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/create-import-job-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.create-import-job-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01/ImportJobRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-segment-import-jobs-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/ImportJobsResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/message-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"TRANSACTIONAL" "TRANSACTIONAL", :transactional "TRANSACTIONAL", "PROMOTIONAL" "PROMOTIONAL", :promotional "PROMOTIONAL"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-campaign-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/CampaignResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/frequency (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:daily "DAILY", "ONCE" "ONCE", :monthly "MONTHLY", "MONTHLY" "MONTHLY", "WEEKLY" "WEEKLY", :hourly "HOURLY", :once "ONCE", "DAILY" "DAILY", :weekly "WEEKLY", "HOURLY" "HOURLY"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-response/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-response/dimensions (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/segment-dimensions))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-response/import-definition (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/segment-import-resource))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-response/version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-response/name (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/segment-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01/SegmentType :portkey.aws.pinpoint.-2016-12-01.segment-response/LastModifiedDate :portkey.aws.pinpoint.-2016-12-01.segment-response/ApplicationId :portkey.aws.pinpoint.-2016-12-01.segment-response/Dimensions :portkey.aws.pinpoint.-2016-12-01.segment-response/ImportDefinition :portkey.aws.pinpoint.-2016-12-01.segment-response/CreationDate :portkey.aws.pinpoint.-2016-12-01.segment-response/Version :portkey.aws.pinpoint.-2016-12-01.segment-response/Name :portkey.aws.pinpoint.-2016-12-01.segment-response/Id]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/--double clojure.core/double?)

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-endpoints-batch-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/MessageBody] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-segment-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/SegmentResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/list-of-campaign-response (clojure.spec.alpha/coll-of :portkey.aws.pinpoint.-2016-12-01/campaign-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/address (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/cohort-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/endpoint-status (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/request-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/shard-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/location (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/endpoint-location))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/demographic (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/endpoint-demographic))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/user (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/endpoint-user))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/attributes (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/effective-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/opt-out (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-response/metrics (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of--double))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/endpoint-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.endpoint-response/Address :portkey.aws.pinpoint.-2016-12-01.endpoint-response/CohortId :portkey.aws.pinpoint.-2016-12-01.endpoint-response/EndpointStatus :portkey.aws.pinpoint.-2016-12-01.endpoint-response/RequestId :portkey.aws.pinpoint.-2016-12-01.endpoint-response/ShardId :portkey.aws.pinpoint.-2016-12-01.endpoint-response/Location :portkey.aws.pinpoint.-2016-12-01.endpoint-response/Demographic :portkey.aws.pinpoint.-2016-12-01.endpoint-response/User :portkey.aws.pinpoint.-2016-12-01.endpoint-response/Attributes :portkey.aws.pinpoint.-2016-12-01.endpoint-response/ApplicationId :portkey.aws.pinpoint.-2016-12-01.endpoint-response/CreationDate :portkey.aws.pinpoint.-2016-12-01.endpoint-response/EffectiveDate :portkey.aws.pinpoint.-2016-12-01.endpoint-response/OptOut :portkey.aws.pinpoint.-2016-12-01.endpoint-response/Id :portkey.aws.pinpoint.-2016-12-01/ChannelType :portkey.aws.pinpoint.-2016-12-01.endpoint-response/Metrics]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/campaign-status (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"COMPLETED" "COMPLETED", :paused "PAUSED", :completed "COMPLETED", "EXECUTING" "EXECUTING", "SCHEDULED" "SCHEDULED", :executing "EXECUTING", :pending-next-run "PENDING_NEXT_RUN", :scheduled "SCHEDULED", "PAUSED" "PAUSED", "PENDING_NEXT_RUN" "PENDING_NEXT_RUN"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.update-segment-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.update-segment-request/segment-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-segment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.update-segment-request/SegmentId :portkey.aws.pinpoint.-2016-12-01.update-segment-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01/WriteSegmentRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.applications-response/item (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/list-of-application-response))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.applications-response/next-token (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/applications-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.applications-response/Item :portkey.aws.pinpoint.-2016-12-01.applications-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/create-campaign-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/CampaignResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.delete-sms-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-sms-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.delete-sms-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/--integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-segment-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/SegmentResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.update-endpoint-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.update-endpoint-request/endpoint-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-endpoint-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.update-endpoint-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01.update-endpoint-request/EndpointId :portkey.aws.pinpoint.-2016-12-01/EndpointRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.schedule/end-time (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.schedule/is-local-time (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.schedule/start-time (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.schedule/timezone (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/schedule (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.schedule/EndTime :portkey.aws.pinpoint.-2016-12-01/Frequency :portkey.aws.pinpoint.-2016-12-01.schedule/IsLocalTime :portkey.aws.pinpoint.-2016-12-01/QuietTime :portkey.aws.pinpoint.-2016-12-01.schedule/StartTime :portkey.aws.pinpoint.-2016-12-01.schedule/Timezone]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-import-resource/channel-counts (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-import-resource/external-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-import-resource/role-arn (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-import-resource/s3-url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-import-resource/size (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/segment-import-resource (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.segment-import-resource/ChannelCounts :portkey.aws.pinpoint.-2016-12-01.segment-import-resource/ExternalId :portkey.aws.pinpoint.-2016-12-01/Format :portkey.aws.pinpoint.-2016-12-01.segment-import-resource/RoleArn :portkey.aws.pinpoint.-2016-12-01.segment-import-resource/S3Url :portkey.aws.pinpoint.-2016-12-01.segment-import-resource/Size]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.create-segment-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/create-segment-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.create-segment-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01/WriteSegmentRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.default-push-notification-message/body (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.default-push-notification-message/data (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.default-push-notification-message/silent-push (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.default-push-notification-message/substitutions (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.default-push-notification-message/title (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.default-push-notification-message/url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/default-push-notification-message (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01/Action :portkey.aws.pinpoint.-2016-12-01.default-push-notification-message/Body :portkey.aws.pinpoint.-2016-12-01.default-push-notification-message/Data :portkey.aws.pinpoint.-2016-12-01.default-push-notification-message/SilentPush :portkey.aws.pinpoint.-2016-12-01.default-push-notification-message/Substitutions :portkey.aws.pinpoint.-2016-12-01.default-push-notification-message/Title :portkey.aws.pinpoint.-2016-12-01.default-push-notification-message/Url]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnsmessage/category (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnsmessage/body (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnsmessage/title (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnsmessage/silent-push (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnsmessage/sound (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnsmessage/raw-content (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnsmessage/thread-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnsmessage/url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnsmessage/badge (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnsmessage/substitutions (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of-list-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnsmessage/data (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/map-of--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnsmessage/media-url (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/apnsmessage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.apnsmessage/Category :portkey.aws.pinpoint.-2016-12-01.apnsmessage/Body :portkey.aws.pinpoint.-2016-12-01.apnsmessage/Title :portkey.aws.pinpoint.-2016-12-01.apnsmessage/SilentPush :portkey.aws.pinpoint.-2016-12-01.apnsmessage/Sound :portkey.aws.pinpoint.-2016-12-01.apnsmessage/RawContent :portkey.aws.pinpoint.-2016-12-01.apnsmessage/ThreadId :portkey.aws.pinpoint.-2016-12-01.apnsmessage/Url :portkey.aws.pinpoint.-2016-12-01.apnsmessage/Badge :portkey.aws.pinpoint.-2016-12-01.apnsmessage/Substitutions :portkey.aws.pinpoint.-2016-12-01.apnsmessage/Data :portkey.aws.pinpoint.-2016-12-01.apnsmessage/MediaUrl :portkey.aws.pinpoint.-2016-12-01/Action]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/map-of--integer (clojure.spec.alpha/map-of :portkey.aws.pinpoint.-2016-12-01/--string :portkey.aws.pinpoint.-2016-12-01/--integer))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-response/platform (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-response/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-response/role-arn (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-response/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-response/is-archived (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-response/identity (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-response/from-address (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-response/version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-response/last-modified-by (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.email-channel-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/email-channel-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.email-channel-response/Platform :portkey.aws.pinpoint.-2016-12-01.email-channel-response/LastModifiedDate :portkey.aws.pinpoint.-2016-12-01.email-channel-response/RoleArn :portkey.aws.pinpoint.-2016-12-01.email-channel-response/Enabled :portkey.aws.pinpoint.-2016-12-01.email-channel-response/ApplicationId :portkey.aws.pinpoint.-2016-12-01.email-channel-response/IsArchived :portkey.aws.pinpoint.-2016-12-01.email-channel-response/Identity :portkey.aws.pinpoint.-2016-12-01.email-channel-response/CreationDate :portkey.aws.pinpoint.-2016-12-01.email-channel-response/FromAddress :portkey.aws.pinpoint.-2016-12-01.email-channel-response/Version :portkey.aws.pinpoint.-2016-12-01.email-channel-response/LastModifiedBy :portkey.aws.pinpoint.-2016-12-01.email-channel-response/Id]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-import-jobs-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/ImportJobsResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/direct-message-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01/APNSMessage :portkey.aws.pinpoint.-2016-12-01/DefaultMessage :portkey.aws.pinpoint.-2016-12-01/DefaultPushNotificationMessage :portkey.aws.pinpoint.-2016-12-01/GCMMessage :portkey.aws.pinpoint.-2016-12-01/SMSMessage]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/list-of-application-response (clojure.spec.alpha/coll-of :portkey.aws.pinpoint.-2016-12-01/application-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-request/certificate (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-request/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-request/private-key (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/apnssandbox-channel-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-request/Certificate :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-request/Enabled :portkey.aws.pinpoint.-2016-12-01.apnssandbox-channel-request/PrivateKey]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-event-stream-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/EventStream] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.delete-campaign-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.delete-campaign-request/campaign-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-campaign-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.delete-campaign-request/CampaignId :portkey.aws.pinpoint.-2016-12-01.delete-campaign-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-location/country (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/set-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/segment-location (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.segment-location/Country]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaign-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-campaign-request/campaign-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-campaign-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-campaign-request/CampaignId :portkey.aws.pinpoint.-2016-12-01.get-campaign-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-location/city (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-location/country (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-location/latitude (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--double))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-location/longitude (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--double))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-location/postal-code (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.endpoint-location/region (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/endpoint-location (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.endpoint-location/City :portkey.aws.pinpoint.-2016-12-01.endpoint-location/Country :portkey.aws.pinpoint.-2016-12-01.endpoint-location/Latitude :portkey.aws.pinpoint.-2016-12-01.endpoint-location/Longitude :portkey.aws.pinpoint.-2016-12-01.endpoint-location/PostalCode :portkey.aws.pinpoint.-2016-12-01.endpoint-location/Region]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-sms-channel-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-sms-channel-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-sms-channel-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-apns-sandbox-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/APNSSandboxChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/action (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"OPEN_APP" "OPEN_APP", :open-app "OPEN_APP", "DEEP_LINK" "DEEP_LINK", :deep-link "DEEP_LINK", "URL" "URL", :url "URL"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/list-of-activity-response (clojure.spec.alpha/coll-of :portkey.aws.pinpoint.-2016-12-01/activity-response :max-count nil))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-sms-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/SMSChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmchannel-request/api-key (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.gcmchannel-request/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/gcmchannel-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.gcmchannel-request/ApiKey :portkey.aws.pinpoint.-2016-12-01.gcmchannel-request/Enabled]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-apns-sandbox-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/APNSSandboxChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-result/status-code (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-result/status-message (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.message-result/updated-token (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/message-result (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01/DeliveryStatus :portkey.aws.pinpoint.-2016-12-01.message-result/StatusCode :portkey.aws.pinpoint.-2016-12-01.message-result/StatusMessage :portkey.aws.pinpoint.-2016-12-01.message-result/UpdatedToken]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/platform (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/last-modified-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/enabled (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/is-archived (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--boolean))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/creation-date (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--integer))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/last-modified-by (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/apnschannel-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.apnschannel-response/Platform :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/LastModifiedDate :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/Enabled :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/ApplicationId :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/IsArchived :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/CreationDate :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/Version :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/LastModifiedBy :portkey.aws.pinpoint.-2016-12-01.apnschannel-response/Id]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/map-of--string (clojure.spec.alpha/map-of :portkey.aws.pinpoint.-2016-12-01/--string :portkey.aws.pinpoint.-2016-12-01/--string))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segments-response/item (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/list-of-segment-response))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segments-response/next-token (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/segments-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.segments-response/Item :portkey.aws.pinpoint.-2016-12-01.segments-response/NextToken]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.delete-event-stream-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/delete-event-stream-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.delete-event-stream-request/ApplicationId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-email-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/EmailChannelResponse] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/channel-type (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {:email "EMAIL", "SMS" "SMS", "ADM" "ADM", "GCM" "GCM", "APNS" "APNS", :apns-sandbox "APNS_SANDBOX", :gcm "GCM", :sms "SMS", :adm "ADM", "APNS_SANDBOX" "APNS_SANDBOX", "EMAIL" "EMAIL", :apns "APNS"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-import-jobs-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-import-jobs-request/page-size (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.get-import-jobs-request/token (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/get-import-jobs-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.get-import-jobs-request/ApplicationId] :opt-un [:portkey.aws.pinpoint.-2016-12-01.get-import-jobs-request/PageSize :portkey.aws.pinpoint.-2016-12-01.get-import-jobs-request/Token]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.update-campaign-request/application-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.update-campaign-request/campaign-id (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/--string))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-campaign-request (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01.update-campaign-request/CampaignId :portkey.aws.pinpoint.-2016-12-01.update-campaign-request/ApplicationId :portkey.aws.pinpoint.-2016-12-01/WriteCampaignRequest] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-demographics/app-version (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/set-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-demographics/channel (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/set-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-demographics/device-type (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/set-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-demographics/make (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/set-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-demographics/model (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/set-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01.segment-demographics/platform (clojure.spec.alpha/and :portkey.aws.pinpoint.-2016-12-01/set-dimension))
(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/segment-demographics (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.pinpoint.-2016-12-01.segment-demographics/AppVersion :portkey.aws.pinpoint.-2016-12-01.segment-demographics/Channel :portkey.aws.pinpoint.-2016-12-01.segment-demographics/DeviceType :portkey.aws.pinpoint.-2016-12-01.segment-demographics/Make :portkey.aws.pinpoint.-2016-12-01.segment-demographics/Model :portkey.aws.pinpoint.-2016-12-01.segment-demographics/Platform]))

(clojure.spec.alpha/def :portkey.aws.pinpoint.-2016-12-01/update-email-channel-response (portkey.awsgen/json-keys :req-un [:portkey.aws.pinpoint.-2016-12-01/EmailChannelResponse] :opt-un []))

(clojure.core/defn update-apns-channel ([input__33752__auto__] (update-apns-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35544 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/apns", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/UpdateApnsChannelRequest input35544)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "APNSChannelRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/apns", :body body__33756__auto__} (clojure.core/fn [response35543] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35543)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/update-apns-channel-response (:body response35543)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35543 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35543)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35543}))))))))))

(clojure.core/defn get-apns-channel ([input__33752__auto__] (get-apns-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35546 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/apns", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetApnsChannelRequest input35546)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/apns", :body body__33756__auto__} (clojure.core/fn [response35545] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35545)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-apns-channel-response (:body response35545)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35545 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35545)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35545}))))))))))

(clojure.core/defn update-endpoints-batch ([input__33752__auto__] (update-endpoints-batch input__33752__auto__ portkey.aws/*http-client*)) ([input35548 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/endpoints", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/UpdateEndpointsBatchRequest input35548)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "EndpointBatchRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/endpoints", :body body__33756__auto__} (clojure.core/fn [response35547] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 202 (:status response35547)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/update-endpoints-batch-response (:body response35547)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35547 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35547)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35547}))))))))))

(clojure.core/defn get-import-jobs ([input__33752__auto__] (get-import-jobs input__33752__auto__ portkey.aws/*http-client*)) ([input35550 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/jobs/import", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetImportJobsRequest input35550)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring ["page-size" "PageSize"] ["token" "Token"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/jobs/import", :body body__33756__auto__} (clojure.core/fn [response35549] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35549)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-import-jobs-response (:body response35549)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35549 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35549)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35549}))))))))))

(clojure.core/defn get-sms-channel ([input__33752__auto__] (get-sms-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35552 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/sms", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetSmsChannelRequest input35552)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/sms", :body body__33756__auto__} (clojure.core/fn [response35551] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35551)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-sms-channel-response (:body response35551)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35551 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35551)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35551}))))))))))

(clojure.core/defn get-segment-version ([input__33752__auto__] (get-segment-version input__33752__auto__ portkey.aws/*http-client*)) ([input35554 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments/{segment-id}/versions/{version}", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetSegmentVersionRequest input35554)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["segment-id" "SegmentId"] ["version" "Version"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments/{segment-id}/versions/{version}", :body body__33756__auto__} (clojure.core/fn [response35553] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35553)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-segment-version-response (:body response35553)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35553 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35553)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35553}))))))))))

(clojure.core/defn get-apns-sandbox-channel ([input__33752__auto__] (get-apns-sandbox-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35556 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/apns_sandbox", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetApnsSandboxChannelRequest input35556)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/apns_sandbox", :body body__33756__auto__} (clojure.core/fn [response35555] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35555)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-apns-sandbox-channel-response (:body response35555)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35555 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35555)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35555}))))))))))

(clojure.core/defn get-segment-import-jobs ([input__33752__auto__] (get-segment-import-jobs input__33752__auto__ portkey.aws/*http-client*)) ([input35558 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments/{segment-id}/jobs/import", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetSegmentImportJobsRequest input35558)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["segment-id" "SegmentId"]) (portkey.awsgen/params-to-querystring ["page-size" "PageSize"] ["token" "Token"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments/{segment-id}/jobs/import", :body body__33756__auto__} (clojure.core/fn [response35557] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35557)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-segment-import-jobs-response (:body response35557)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35557 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35557)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35557}))))))))))

(clojure.core/defn get-campaign-activities ([input__33752__auto__] (get-campaign-activities input__33752__auto__ portkey.aws/*http-client*)) ([input35560 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns/{campaign-id}/activities", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetCampaignActivitiesRequest input35560)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["campaign-id" "CampaignId"]) (portkey.awsgen/params-to-querystring ["page-size" "PageSize"] ["token" "Token"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns/{campaign-id}/activities", :body body__33756__auto__} (clojure.core/fn [response35559] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35559)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-campaign-activities-response (:body response35559)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35559 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35559)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35559}))))))))))

(clojure.core/defn delete-email-channel ([input__33752__auto__] (delete-email-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35562 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/email", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/DeleteEmailChannelRequest input35562)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/email", :body body__33756__auto__} (clojure.core/fn [response35561] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35561)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/delete-email-channel-response (:body response35561)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35561 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35561)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35561}))))))))))

(clojure.core/defn get-segment ([input__33752__auto__] (get-segment input__33752__auto__ portkey.aws/*http-client*)) ([input35564 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments/{segment-id}", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetSegmentRequest input35564)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["segment-id" "SegmentId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments/{segment-id}", :body body__33756__auto__} (clojure.core/fn [response35563] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35563)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-segment-response (:body response35563)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35563 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35563)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35563}))))))))))

(clojure.core/defn get-event-stream ([input__33752__auto__] (get-event-stream input__33752__auto__ portkey.aws/*http-client*)) ([input35566 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/eventstream", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetEventStreamRequest input35566)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/eventstream", :body body__33756__auto__} (clojure.core/fn [response35565] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35565)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-event-stream-response (:body response35565)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35565 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35565)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35565}))))))))))

(clojure.core/defn get-campaign-version ([input__33752__auto__] (get-campaign-version input__33752__auto__ portkey.aws/*http-client*)) ([input35568 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns/{campaign-id}/versions/{version}", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetCampaignVersionRequest input35568)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["campaign-id" "CampaignId"] ["version" "Version"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns/{campaign-id}/versions/{version}", :body body__33756__auto__} (clojure.core/fn [response35567] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35567)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-campaign-version-response (:body response35567)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35567 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35567)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35567}))))))))))

(clojure.core/defn get-campaign-versions ([input__33752__auto__] (get-campaign-versions input__33752__auto__ portkey.aws/*http-client*)) ([input35570 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns/{campaign-id}/versions", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetCampaignVersionsRequest input35570)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["campaign-id" "CampaignId"]) (portkey.awsgen/params-to-querystring ["page-size" "PageSize"] ["token" "Token"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns/{campaign-id}/versions", :body body__33756__auto__} (clojure.core/fn [response35569] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35569)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-campaign-versions-response (:body response35569)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35569 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35569)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35569}))))))))))

(clojure.core/defn get-gcm-channel ([input__33752__auto__] (get-gcm-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35572 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/gcm", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetGcmChannelRequest input35572)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/gcm", :body body__33756__auto__} (clojure.core/fn [response35571] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35571)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-gcm-channel-response (:body response35571)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35571 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35571)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35571}))))))))))

(clojure.core/defn update-campaign ([input__33752__auto__] (update-campaign input__33752__auto__ portkey.aws/*http-client*)) ([input35574 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns/{campaign-id}", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/UpdateCampaignRequest input35574)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["campaign-id" "CampaignId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "WriteCampaignRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns/{campaign-id}", :body body__33756__auto__} (clojure.core/fn [response35573] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35573)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/update-campaign-response (:body response35573)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35573 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35573)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35573}))))))))))

(clojure.core/defn get-segments ([input__33752__auto__] (get-segments input__33752__auto__ portkey.aws/*http-client*)) ([input35576 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetSegmentsRequest input35576)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring ["page-size" "PageSize"] ["token" "Token"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments", :body body__33756__auto__} (clojure.core/fn [response35575] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35575)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-segments-response (:body response35575)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35575 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35575)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35575}))))))))))

(clojure.core/defn create-import-job ([input__33752__auto__] (create-import-job input__33752__auto__ portkey.aws/*http-client*)) ([input35578 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/jobs/import", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/CreateImportJobRequest input35578)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "ImportJobRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/jobs/import", :body body__33756__auto__} (clojure.core/fn [response35577] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35577)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/create-import-job-response (:body response35577)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35577 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35577)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35577}))))))))))

(clojure.core/defn update-application-settings ([input__33752__auto__] (update-application-settings input__33752__auto__ portkey.aws/*http-client*)) ([input35580 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/settings", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/UpdateApplicationSettingsRequest input35580)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "WriteApplicationSettingsRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/settings", :body body__33756__auto__} (clojure.core/fn [response35579] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35579)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/update-application-settings-response (:body response35579)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35579 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35579)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35579}))))))))))

(clojure.core/defn get-campaign ([input__33752__auto__] (get-campaign input__33752__auto__ portkey.aws/*http-client*)) ([input35582 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns/{campaign-id}", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetCampaignRequest input35582)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["campaign-id" "CampaignId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns/{campaign-id}", :body body__33756__auto__} (clojure.core/fn [response35581] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35581)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-campaign-response (:body response35581)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35581 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35581)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35581}))))))))))

(clojure.core/defn get-import-job ([input__33752__auto__] (get-import-job input__33752__auto__ portkey.aws/*http-client*)) ([input35584 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/jobs/import/{job-id}", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetImportJobRequest input35584)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["job-id" "JobId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/jobs/import/{job-id}", :body body__33756__auto__} (clojure.core/fn [response35583] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35583)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-import-job-response (:body response35583)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35583 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35583)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35583}))))))))))

(clojure.core/defn update-endpoint ([input__33752__auto__] (update-endpoint input__33752__auto__ portkey.aws/*http-client*)) ([input35586 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/endpoints/{endpoint-id}", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/UpdateEndpointRequest input35586)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["endpoint-id" "EndpointId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "EndpointRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/endpoints/{endpoint-id}", :body body__33756__auto__} (clojure.core/fn [response35585] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 202 (:status response35585)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/update-endpoint-response (:body response35585)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35585 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35585)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35585}))))))))))

(clojure.core/defn get-application-settings ([input__33752__auto__] (get-application-settings input__33752__auto__ portkey.aws/*http-client*)) ([input35588 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/settings", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetApplicationSettingsRequest input35588)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/settings", :body body__33756__auto__} (clojure.core/fn [response35587] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35587)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-application-settings-response (:body response35587)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35587 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35587)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35587}))))))))))

(clojure.core/defn get-campaigns ([input__33752__auto__] (get-campaigns input__33752__auto__ portkey.aws/*http-client*)) ([input35590 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetCampaignsRequest input35590)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring ["page-size" "PageSize"] ["token" "Token"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns", :body body__33756__auto__} (clojure.core/fn [response35589] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35589)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-campaigns-response (:body response35589)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35589 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35589)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35589}))))))))))

(clojure.core/defn update-email-channel ([input__33752__auto__] (update-email-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35592 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/email", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/UpdateEmailChannelRequest input35592)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "EmailChannelRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/email", :body body__33756__auto__} (clojure.core/fn [response35591] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35591)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/update-email-channel-response (:body response35591)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35591 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35591)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35591}))))))))))

(clojure.core/defn create-campaign ([input__33752__auto__] (create-campaign input__33752__auto__ portkey.aws/*http-client*)) ([input35594 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/CreateCampaignRequest input35594)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "WriteCampaignRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns", :body body__33756__auto__} (clojure.core/fn [response35593] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35593)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/create-campaign-response (:body response35593)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35593 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35593)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35593}))))))))))

(clojure.core/defn send-messages ([input__33752__auto__] (send-messages input__33752__auto__ portkey.aws/*http-client*)) ([input35596 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/messages", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/SendMessagesRequest input35596)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "MessageRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/messages", :body body__33756__auto__} (clojure.core/fn [response35595] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35595)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/send-messages-response (:body response35595)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35595 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35595)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35595}))))))))))

(clojure.core/defn update-gcm-channel ([input__33752__auto__] (update-gcm-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35598 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/gcm", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/UpdateGcmChannelRequest input35598)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "GCMChannelRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/gcm", :body body__33756__auto__} (clojure.core/fn [response35597] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35597)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/update-gcm-channel-response (:body response35597)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35597 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35597)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35597}))))))))))

(clojure.core/defn get-segment-versions ([input__33752__auto__] (get-segment-versions input__33752__auto__ portkey.aws/*http-client*)) ([input35600 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments/{segment-id}/versions", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetSegmentVersionsRequest input35600)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["segment-id" "SegmentId"]) (portkey.awsgen/params-to-querystring ["page-size" "PageSize"] ["token" "Token"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments/{segment-id}/versions", :body body__33756__auto__} (clojure.core/fn [response35599] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35599)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-segment-versions-response (:body response35599)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35599 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35599)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35599}))))))))))

(clojure.core/defn delete-app ([input__33752__auto__] (delete-app input__33752__auto__ portkey.aws/*http-client*)) ([input35602 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/DeleteAppRequest input35602)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}", :body body__33756__auto__} (clojure.core/fn [response35601] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35601)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/delete-app-response (:body response35601)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35601 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35601)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35601}))))))))))

(clojure.core/defn create-app ([input__33752__auto__] (create-app input__33752__auto__ portkey.aws/*http-client*)) ([input35604 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/CreateAppRequest input35604)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "CreateApplicationRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps", :body body__33756__auto__} (clojure.core/fn [response35603] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35603)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/create-app-response (:body response35603)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35603 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35603)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35603}))))))))))

(clojure.core/defn delete-apns-sandbox-channel ([input__33752__auto__] (delete-apns-sandbox-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35606 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/apns_sandbox", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/DeleteApnsSandboxChannelRequest input35606)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/apns_sandbox", :body body__33756__auto__} (clojure.core/fn [response35605] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35605)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/delete-apns-sandbox-channel-response (:body response35605)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35605 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35605)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35605}))))))))))

(clojure.core/defn delete-gcm-channel ([input__33752__auto__] (delete-gcm-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35608 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/gcm", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/DeleteGcmChannelRequest input35608)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/gcm", :body body__33756__auto__} (clojure.core/fn [response35607] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35607)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/delete-gcm-channel-response (:body response35607)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35607 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35607)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35607}))))))))))

(clojure.core/defn delete-campaign ([input__33752__auto__] (delete-campaign input__33752__auto__ portkey.aws/*http-client*)) ([input35610 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns/{campaign-id}", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/DeleteCampaignRequest input35610)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["campaign-id" "CampaignId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/campaigns/{campaign-id}", :body body__33756__auto__} (clojure.core/fn [response35609] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35609)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/delete-campaign-response (:body response35609)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35609 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35609)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35609}))))))))))

(clojure.core/defn get-app ([input__33752__auto__] (get-app input__33752__auto__ portkey.aws/*http-client*)) ([input35612 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetAppRequest input35612)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}", :body body__33756__auto__} (clojure.core/fn [response35611] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35611)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-app-response (:body response35611)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35611 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35611)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35611}))))))))))

(clojure.core/defn delete-segment ([input__33752__auto__] (delete-segment input__33752__auto__ portkey.aws/*http-client*)) ([input35614 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments/{segment-id}", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/DeleteSegmentRequest input35614)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["segment-id" "SegmentId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments/{segment-id}", :body body__33756__auto__} (clojure.core/fn [response35613] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35613)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/delete-segment-response (:body response35613)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35613 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35613)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35613}))))))))))

(clojure.core/defn delete-apns-channel ([input__33752__auto__] (delete-apns-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35616 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/apns", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/DeleteApnsChannelRequest input35616)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/apns", :body body__33756__auto__} (clojure.core/fn [response35615] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35615)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/delete-apns-channel-response (:body response35615)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35615 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35615)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35615}))))))))))

(clojure.core/defn update-segment ([input__33752__auto__] (update-segment input__33752__auto__ portkey.aws/*http-client*)) ([input35618 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments/{segment-id}", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/UpdateSegmentRequest input35618)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["segment-id" "SegmentId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "WriteSegmentRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments/{segment-id}", :body body__33756__auto__} (clojure.core/fn [response35617] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35617)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/update-segment-response (:body response35617)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35617 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35617)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35617}))))))))))

(clojure.core/defn delete-event-stream ([input__33752__auto__] (delete-event-stream input__33752__auto__ portkey.aws/*http-client*)) ([input35620 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/eventstream", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/DeleteEventStreamRequest input35620)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/eventstream", :body body__33756__auto__} (clojure.core/fn [response35619] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35619)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/delete-event-stream-response (:body response35619)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35619 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35619)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35619}))))))))))

(clojure.core/defn get-apps ([input__33752__auto__] (get-apps input__33752__auto__ portkey.aws/*http-client*)) ([input35622 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetAppsRequest input35622)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["page-size" "PageSize"] ["token" "Token"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps", :body body__33756__auto__} (clojure.core/fn [response35621] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35621)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-apps-response (:body response35621)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35621 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35621)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35621}))))))))))

(clojure.core/defn get-endpoint ([input__33752__auto__] (get-endpoint input__33752__auto__ portkey.aws/*http-client*)) ([input35624 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/endpoints/{endpoint-id}", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetEndpointRequest input35624)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"] ["endpoint-id" "EndpointId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/endpoints/{endpoint-id}", :body body__33756__auto__} (clojure.core/fn [response35623] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35623)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-endpoint-response (:body response35623)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35623 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35623)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35623}))))))))))

(clojure.core/defn update-apns-sandbox-channel ([input__33752__auto__] (update-apns-sandbox-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35626 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/apns_sandbox", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/UpdateApnsSandboxChannelRequest input35626)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "APNSSandboxChannelRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/apns_sandbox", :body body__33756__auto__} (clojure.core/fn [response35625] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35625)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/update-apns-sandbox-channel-response (:body response35625)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35625 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35625)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35625}))))))))))

(clojure.core/defn get-email-channel ([input__33752__auto__] (get-email-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35628 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/email", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/GetEmailChannelRequest input35628)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/email", :body body__33756__auto__} (clojure.core/fn [response35627] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35627)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/get-email-channel-response (:body response35627)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35627 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35627)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35627}))))))))))

(clojure.core/defn update-sms-channel ([input__33752__auto__] (update-sms-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35630 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/sms", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/UpdateSmsChannelRequest input35630)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "SMSChannelRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/sms", :body body__33756__auto__} (clojure.core/fn [response35629] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35629)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/update-sms-channel-response (:body response35629)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35629 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35629)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35629}))))))))))

(clojure.core/defn create-segment ([input__33752__auto__] (create-segment input__33752__auto__ portkey.aws/*http-client*)) ([input35632 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/CreateSegmentRequest input35632)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "WriteSegmentRequest") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/segments", :body body__33756__auto__} (clojure.core/fn [response35631] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 201 (:status response35631)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/create-segment-response (:body response35631)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35631 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35631)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35631}))))))))))

(clojure.core/defn delete-sms-channel ([input__33752__auto__] (delete-sms-channel input__33752__auto__ portkey.aws/*http-client*)) ([input35634 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/sms", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/DeleteSmsChannelRequest input35634)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/channels/sms", :body body__33756__auto__} (clojure.core/fn [response35633] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35633)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/delete-sms-channel-response (:body response35633)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35633 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35633)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35633}))))))))))

(clojure.core/defn put-event-stream ([input__33752__auto__] (put-event-stream input__33752__auto__ portkey.aws/*http-client*)) ([input35636 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/eventstream", :body (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/PutEventStreamRequest input35636)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["application-id" "ApplicationId"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "WriteEventStream") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/v1/apps/{application-id}/eventstream", :body body__33756__auto__} (clojure.core/fn [response35635] (clojure.core/let [errors__33757__auto__ {"BadRequestException" :portkey.aws.pinpoint.-2016-12-01/bad-request-exception, "InternalServerErrorException" :portkey.aws.pinpoint.-2016-12-01/internal-server-error-exception, "ForbiddenException" :portkey.aws.pinpoint.-2016-12-01/forbidden-exception, "NotFoundException" :portkey.aws.pinpoint.-2016-12-01/not-found-exception, "MethodNotAllowedException" :portkey.aws.pinpoint.-2016-12-01/method-not-allowed-exception, "TooManyRequestsException" :portkey.aws.pinpoint.-2016-12-01/too-many-requests-exception}] (if (clojure.core/= 200 (:status response35635)) (clojure.spec.alpha/unform :portkey.aws.pinpoint.-2016-12-01/put-event-stream-response (:body response35635)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35635 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35635)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35635}))))))))))
