(ns portkey.aws.lambda.-2014-11-11 (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.add-event-source-request/event-source (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.add-event-source-request/role (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/role-arn))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.add-event-source-request/batch-size (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/integer))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.add-event-source-request/parameters (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/map))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/add-event-source-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.-2014-11-11.add-event-source-request/EventSource :portkey.aws.lambda.-2014-11-11/FunctionName :portkey.aws.lambda.-2014-11-11.add-event-source-request/Role] :opt-un [:portkey.aws.lambda.-2014-11-11.add-event-source-request/BatchSize :portkey.aws.lambda.-2014-11-11.add-event-source-request/Parameters]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/function-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"arn:aws:lambda:[a-z]{2}-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(\/[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})?" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/function-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 1 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 64)) (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"[a-zA-Z0-9-_]+" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/timeout (clojure.spec.alpha/and clojure.core/int? (fn* [p1__30878__30879__auto__] (clojure.core/<= 1 p1__30878__30879__auto__)) (fn* [p1__30880__30881__auto__] (clojure.core/<= p1__30880__30881__auto__ 60))))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.upload-function-request/function-zip (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/blob))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.upload-function-request/role (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/role-arn))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/upload-function-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.-2014-11-11/FunctionName :portkey.aws.lambda.-2014-11-11.upload-function-request/FunctionZip :portkey.aws.lambda.-2014-11-11/Runtime :portkey.aws.lambda.-2014-11-11.upload-function-request/Role :portkey.aws.lambda.-2014-11-11/Handler :portkey.aws.lambda.-2014-11-11/Mode] :opt-un [:portkey.aws.lambda.-2014-11-11/Timeout :portkey.aws.lambda.-2014-11-11/MemorySize :portkey.aws.lambda.-2014-11-11/Description]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/map (clojure.spec.alpha/map-of :portkey.aws.lambda.-2014-11-11/string :portkey.aws.lambda.-2014-11-11/string))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.remove-event-source-request/uuid (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/remove-event-source-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.-2014-11-11.remove-event-source-request/UUID] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/handler (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"[a-zA-Z0-9./\-_]+" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/function-list (clojure.spec.alpha/coll-of :portkey.aws.lambda.-2014-11-11/function-configuration :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/runtime (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"nodejs" "nodejs", :nodejs "nodejs"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/role-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30839__auto__] (clojure.core/re-matches #"arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+" s__30839__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.service-exception/type (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.service-exception/message (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/service-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.-2014-11-11.service-exception/Type :portkey.aws.lambda.-2014-11-11.service-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.list-functions-response/next-marker (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.list-functions-response/functions (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/function-list))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/list-functions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.-2014-11-11.list-functions-response/NextMarker :portkey.aws.lambda.-2014-11-11.list-functions-response/Functions]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/delete-function-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.-2014-11-11/FunctionName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/mode (clojure.spec.alpha/conformer (clojure.core/let [m__30835__auto__ {"event" "event", :event "event"}] (clojure.core/fn [s__30836__auto__] (m__30835__auto__ s__30836__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.get-function-response/configuration (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/function-configuration))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.get-function-response/code (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/function-code-location))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/get-function-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.-2014-11-11.get-function-response/Configuration :portkey.aws.lambda.-2014-11-11.get-function-response/Code]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/memory-size (clojure.spec.alpha/and clojure.core/int? (fn* [p1__30878__30879__auto__] (clojure.core/<= 128 p1__30878__30879__auto__)) (fn* [p1__30880__30881__auto__] (clojure.core/<= p1__30880__30881__auto__ 1024))))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.invalid-request-content-exception/type (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.invalid-request-content-exception/message (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/invalid-request-content-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.-2014-11-11.invalid-request-content-exception/Type :portkey.aws.lambda.-2014-11-11.invalid-request-content-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.resource-not-found-exception/type (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/resource-not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.-2014-11-11.resource-not-found-exception/Type :portkey.aws.lambda.-2014-11-11.resource-not-found-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.invoke-async-request/invoke-args (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/blob))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/invoke-async-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.-2014-11-11/FunctionName :portkey.aws.lambda.-2014-11-11.invoke-async-request/InvokeArgs] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/description (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__30837__auto__] (clojure.core/<= 0 (clojure.core/count s__30837__auto__))) (clojure.core/fn [s__30838__auto__] (clojure.core/< (clojure.core/count s__30838__auto__) 256))))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/max-list-items (clojure.spec.alpha/and clojure.core/int? (fn* [p1__30878__30879__auto__] (clojure.core/<= 1 p1__30878__30879__auto__)) (fn* [p1__30880__30881__auto__] (clojure.core/<= p1__30880__30881__auto__ 10000))))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/get-function-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.-2014-11-11/FunctionName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.invoke-async-response/status (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/http-status))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/invoke-async-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.-2014-11-11.invoke-async-response/Status]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.update-function-configuration-request/role (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/role-arn))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/update-function-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.-2014-11-11/FunctionName] :opt-un [:portkey.aws.lambda.-2014-11-11.update-function-configuration-request/Role :portkey.aws.lambda.-2014-11-11/Handler :portkey.aws.lambda.-2014-11-11/Description :portkey.aws.lambda.-2014-11-11/Timeout :portkey.aws.lambda.-2014-11-11/MemorySize]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.list-event-sources-request/event-source-arn (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.list-event-sources-request/marker (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.list-event-sources-request/max-items (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/max-list-items))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/list-event-sources-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.-2014-11-11.list-event-sources-request/EventSourceArn :portkey.aws.lambda.-2014-11-11/FunctionName :portkey.aws.lambda.-2014-11-11.list-event-sources-request/Marker :portkey.aws.lambda.-2014-11-11.list-event-sources-request/MaxItems]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/http-status (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.function-configuration/configuration-id (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.function-configuration/role (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/role-arn))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.function-configuration/last-modified (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/timestamp))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.function-configuration/code-size (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/long))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.function-configuration/functionarn (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/function-arn))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/function-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.-2014-11-11/FunctionName :portkey.aws.lambda.-2014-11-11/Timeout :portkey.aws.lambda.-2014-11-11/Handler :portkey.aws.lambda.-2014-11-11/Runtime :portkey.aws.lambda.-2014-11-11.function-configuration/ConfigurationId :portkey.aws.lambda.-2014-11-11/Mode :portkey.aws.lambda.-2014-11-11/MemorySize :portkey.aws.lambda.-2014-11-11.function-configuration/Role :portkey.aws.lambda.-2014-11-11/Description :portkey.aws.lambda.-2014-11-11.function-configuration/LastModified :portkey.aws.lambda.-2014-11-11.function-configuration/CodeSize :portkey.aws.lambda.-2014-11-11.function-configuration/FunctionARN]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/timestamp (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.list-functions-request/marker (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.list-functions-request/max-items (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/max-list-items))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/list-functions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.-2014-11-11.list-functions-request/Marker :portkey.aws.lambda.-2014-11-11.list-functions-request/MaxItems]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.list-event-sources-response/next-marker (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.list-event-sources-response/event-sources (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/event-source-list))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/list-event-sources-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.-2014-11-11.list-event-sources-response/NextMarker :portkey.aws.lambda.-2014-11-11.list-event-sources-response/EventSources]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/get-function-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.-2014-11-11/FunctionName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.get-event-source-request/uuid (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/get-event-source-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.-2014-11-11.get-event-source-request/UUID] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/blob (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.awsgen/base64-encode portkey.awsgen/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/event-source-list (clojure.spec.alpha/coll-of :portkey.aws.lambda.-2014-11-11/event-source-configuration :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.event-source-configuration/is-active (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/boolean))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.event-source-configuration/batch-size (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/integer))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.event-source-configuration/parameters (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/map))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.event-source-configuration/status (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.event-source-configuration/role (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/role-arn))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.event-source-configuration/last-modified (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/timestamp))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.event-source-configuration/event-source (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.event-source-configuration/uuid (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/event-source-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.-2014-11-11.event-source-configuration/IsActive :portkey.aws.lambda.-2014-11-11.event-source-configuration/BatchSize :portkey.aws.lambda.-2014-11-11/FunctionName :portkey.aws.lambda.-2014-11-11.event-source-configuration/Parameters :portkey.aws.lambda.-2014-11-11.event-source-configuration/Status :portkey.aws.lambda.-2014-11-11.event-source-configuration/Role :portkey.aws.lambda.-2014-11-11.event-source-configuration/LastModified :portkey.aws.lambda.-2014-11-11.event-source-configuration/EventSource :portkey.aws.lambda.-2014-11-11.event-source-configuration/UUID]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.invalid-parameter-value-exception/type (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.invalid-parameter-value-exception/message (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/invalid-parameter-value-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.-2014-11-11.invalid-parameter-value-exception/Type :portkey.aws.lambda.-2014-11-11.invalid-parameter-value-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.function-code-location/repository-type (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11.function-code-location/location (clojure.spec.alpha/and :portkey.aws.lambda.-2014-11-11/string))
(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/function-code-location (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.-2014-11-11.function-code-location/RepositoryType :portkey.aws.lambda.-2014-11-11.function-code-location/Location]))

(clojure.spec.alpha/def :portkey.aws.lambda.-2014-11-11/boolean clojure.core/boolean?)

(clojure.core/defn delete-function ([input__33752__auto__] (delete-function input__33752__auto__ portkey.aws/*http-client*)) ([input35120 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/{FunctionName}", :body (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/DeleteFunctionRequest input35120)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["FunctionName" "FunctionName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/{FunctionName}", :body body__33756__auto__} (clojure.core/fn [response35119] (clojure.core/let [errors__33757__auto__ {"ServiceException" :portkey.aws.lambda.-2014-11-11/service-exception, "ResourceNotFoundException" :portkey.aws.lambda.-2014-11-11/resource-not-found-exception}] (if (clojure.core/= 204 (:status response35119)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35119 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35119)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35119}))))))))))

(clojure.core/defn add-event-source ([input__33752__auto__] (add-event-source input__33752__auto__ portkey.aws/*http-client*)) ([input35122 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/event-source-mappings/", :body (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/AddEventSourceRequest input35122)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/event-source-mappings/", :body body__33756__auto__} (clojure.core/fn [response35121] (clojure.core/let [errors__33757__auto__ {"ServiceException" :portkey.aws.lambda.-2014-11-11/service-exception, "InvalidParameterValueException" :portkey.aws.lambda.-2014-11-11/invalid-parameter-value-exception}] (if (clojure.core/= nil (:status response35121)) (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/event-source-configuration (:body response35121)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35121 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35121)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35121}))))))))))

(clojure.core/defn invoke-async ([input__33752__auto__] (invoke-async input__33752__auto__ portkey.aws/*http-client*)) ([input35124 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/{FunctionName}/invoke-async/", :body (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/InvokeAsyncRequest input35124)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["FunctionName" "FunctionName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload "InvokeArgs") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/{FunctionName}/invoke-async/", :body body__33756__auto__} (clojure.core/fn [response35123] (clojure.core/let [errors__33757__auto__ {"ServiceException" :portkey.aws.lambda.-2014-11-11/service-exception, "ResourceNotFoundException" :portkey.aws.lambda.-2014-11-11/resource-not-found-exception, "InvalidRequestContentException" :portkey.aws.lambda.-2014-11-11/invalid-request-content-exception}] (if (clojure.core/= 202 (:status response35123)) (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/invoke-async-response (:body response35123)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35123 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35123)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35123}))))))))))

(clojure.core/defn remove-event-source ([input__33752__auto__] (remove-event-source input__33752__auto__ portkey.aws/*http-client*)) ([input35126 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/event-source-mappings/{UUID}", :body (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/RemoveEventSourceRequest input35126)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["UUID" "UUID"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/event-source-mappings/{UUID}", :body body__33756__auto__} (clojure.core/fn [response35125] (clojure.core/let [errors__33757__auto__ {"ServiceException" :portkey.aws.lambda.-2014-11-11/service-exception, "ResourceNotFoundException" :portkey.aws.lambda.-2014-11-11/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda.-2014-11-11/invalid-parameter-value-exception}] (if (clojure.core/= 204 (:status response35125)) true (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35125 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35125)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35125}))))))))))

(clojure.core/defn get-function-configuration ([input__33752__auto__] (get-function-configuration input__33752__auto__ portkey.aws/*http-client*)) ([input35128 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/{FunctionName}/configuration", :body (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/GetFunctionConfigurationRequest input35128)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["FunctionName" "FunctionName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/{FunctionName}/configuration", :body body__33756__auto__} (clojure.core/fn [response35127] (clojure.core/let [errors__33757__auto__ {"ServiceException" :portkey.aws.lambda.-2014-11-11/service-exception, "ResourceNotFoundException" :portkey.aws.lambda.-2014-11-11/resource-not-found-exception}] (if (clojure.core/= 200 (:status response35127)) (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/function-configuration (:body response35127)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35127 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35127)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35127}))))))))))

(clojure.core/defn upload-function ([input__33752__auto__] (upload-function input__33752__auto__ portkey.aws/*http-client*)) ([input35130 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/{FunctionName}", :body (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/UploadFunctionRequest input35130)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["FunctionName" "FunctionName"]) (portkey.awsgen/params-to-querystring ["Timeout" "Timeout"] ["Handler" "Handler"] ["Runtime" "Runtime"] ["Mode" "Mode"] ["MemorySize" "MemorySize"] ["Role" "Role"] ["Description" "Description"]) (portkey.awsgen/params-to-payload "FunctionZip") (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/{FunctionName}", :body body__33756__auto__} (clojure.core/fn [response35129] (clojure.core/let [errors__33757__auto__ {"ServiceException" :portkey.aws.lambda.-2014-11-11/service-exception, "InvalidParameterValueException" :portkey.aws.lambda.-2014-11-11/invalid-parameter-value-exception, "ResourceNotFoundException" :portkey.aws.lambda.-2014-11-11/resource-not-found-exception}] (if (clojure.core/= 201 (:status response35129)) (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/function-configuration (:body response35129)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35129 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35129)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35129}))))))))))

(clojure.core/defn list-event-sources ([input__33752__auto__] (list-event-sources input__33752__auto__ portkey.aws/*http-client*)) ([input35132 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/event-source-mappings/", :body (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/ListEventSourcesRequest input35132)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["EventSource" "EventSourceArn"] ["FunctionName" "FunctionName"] ["Marker" "Marker"] ["MaxItems" "MaxItems"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/event-source-mappings/", :body body__33756__auto__} (clojure.core/fn [response35131] (clojure.core/let [errors__33757__auto__ {"ServiceException" :portkey.aws.lambda.-2014-11-11/service-exception, "ResourceNotFoundException" :portkey.aws.lambda.-2014-11-11/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda.-2014-11-11/invalid-parameter-value-exception}] (if (clojure.core/= 200 (:status response35131)) (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/list-event-sources-response (:body response35131)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35131 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35131)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35131}))))))))))

(clojure.core/defn get-function ([input__33752__auto__] (get-function input__33752__auto__ portkey.aws/*http-client*)) ([input35134 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/{FunctionName}", :body (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/GetFunctionRequest input35134)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["FunctionName" "FunctionName"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/{FunctionName}", :body body__33756__auto__} (clojure.core/fn [response35133] (clojure.core/let [errors__33757__auto__ {"ServiceException" :portkey.aws.lambda.-2014-11-11/service-exception, "ResourceNotFoundException" :portkey.aws.lambda.-2014-11-11/resource-not-found-exception}] (if (clojure.core/= 200 (:status response35133)) (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/get-function-response (:body response35133)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35133 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35133)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35133}))))))))))

(clojure.core/defn list-functions ([input__33752__auto__] (list-functions input__33752__auto__ portkey.aws/*http-client*)) ([input35136 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/", :body (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/ListFunctionsRequest input35136)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri) (portkey.awsgen/params-to-querystring ["Marker" "Marker"] ["MaxItems" "MaxItems"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/", :body body__33756__auto__} (clojure.core/fn [response35135] (clojure.core/let [errors__33757__auto__ {"ServiceException" :portkey.aws.lambda.-2014-11-11/service-exception}] (if (clojure.core/= 200 (:status response35135)) (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/list-functions-response (:body response35135)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35135 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35135)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35135}))))))))))

(clojure.core/defn update-function-configuration ([input__33752__auto__] (update-function-configuration input__33752__auto__ portkey.aws/*http-client*)) ([input35138 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/{FunctionName}/configuration", :body (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/UpdateFunctionConfigurationRequest input35138)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["FunctionName" "FunctionName"]) (portkey.awsgen/params-to-querystring ["Role" "Role"] ["Handler" "Handler"] ["Description" "Description"] ["Timeout" "Timeout"] ["MemorySize" "MemorySize"]) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/{FunctionName}/configuration", :body body__33756__auto__} (clojure.core/fn [response35137] (clojure.core/let [errors__33757__auto__ {"ServiceException" :portkey.aws.lambda.-2014-11-11/service-exception, "ResourceNotFoundException" :portkey.aws.lambda.-2014-11-11/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda.-2014-11-11/invalid-parameter-value-exception}] (if (clojure.core/= 200 (:status response35137)) (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/function-configuration (:body response35137)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35137 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35137)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35137}))))))))))

(clojure.core/defn get-event-source ([input__33752__auto__] (get-event-source input__33752__auto__ portkey.aws/*http-client*)) ([input35140 http-client__33753__auto__] (clojure.core/let [req__33754__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/event-source-mappings/{UUID}", :body (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/GetEventSourceRequest input35140)} (portkey.awsgen/params-to-header) (portkey.awsgen/params-to-uri ["UUID" "UUID"]) (portkey.awsgen/params-to-querystring) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__33751__33755__auto__] (clojure.core/some-> p1__33751__33755__auto__ cheshire.core/generate-string))))] (http-client__33753__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/event-source-mappings/{UUID}", :body body__33756__auto__} (clojure.core/fn [response35139] (clojure.core/let [errors__33757__auto__ {"ServiceException" :portkey.aws.lambda.-2014-11-11/service-exception, "ResourceNotFoundException" :portkey.aws.lambda.-2014-11-11/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda.-2014-11-11/invalid-parameter-value-exception}] (if (clojure.core/= 200 (:status response35139)) (clojure.spec.alpha/unform :portkey.aws.lambda.-2014-11-11/event-source-configuration (:body response35139)) (clojure.core/if-some [[type__33758__auto__ spec__33759__auto__] (clojure.core/find errors__33757__auto__ (clojure.core/get-in response35139 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__33760__auto__ (clojure.spec.alpha/unform spec__33759__auto__ (cheshire.core/parse-string (:body response35139)))] (throw (clojure.core/ex-info (clojure.core/str type__33758__auto__ ": " (:message m__33760__auto__)) m__33760__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response35139}))))))))))
