(ns portkey.aws.elasticfilesystem.-2015-02-01 (:require [portkey.aws]))

(def
 endpoints
 '{"eu-west-1"
   {:credentialScope
    {"service" "elasticfilesystem", "region" "eu-west-1"},
    :sslCommonName "elasticfilesystem.eu-west-1.amazonaws.com",
    :endpoint "https://elasticfilesystem.eu-west-1.amazonaws.com"},
   "us-east-2"
   {:credentialScope
    {"service" "elasticfilesystem", "region" "us-east-2"},
    :sslCommonName "elasticfilesystem.us-east-2.amazonaws.com",
    :endpoint "https://elasticfilesystem.us-east-2.amazonaws.com"},
   "ap-southeast-2"
   {:credentialScope
    {"service" "elasticfilesystem", "region" "ap-southeast-2"},
    :sslCommonName "elasticfilesystem.ap-southeast-2.amazonaws.com",
    :endpoint
    "https://elasticfilesystem.ap-southeast-2.amazonaws.com"},
   "eu-central-1"
   {:credentialScope
    {"service" "elasticfilesystem", "region" "eu-central-1"},
    :sslCommonName "elasticfilesystem.eu-central-1.amazonaws.com",
    :endpoint "https://elasticfilesystem.eu-central-1.amazonaws.com"},
   "us-west-2"
   {:credentialScope
    {"service" "elasticfilesystem", "region" "us-west-2"},
    :sslCommonName "elasticfilesystem.us-west-2.amazonaws.com",
    :endpoint "https://elasticfilesystem.us-west-2.amazonaws.com"},
   "us-east-1"
   {:credentialScope
    {"service" "elasticfilesystem", "region" "us-east-1"},
    :sslCommonName "elasticfilesystem.us-east-1.amazonaws.com",
    :endpoint "https://elasticfilesystem.us-east-1.amazonaws.com"}})

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/tag-keys (clojure.spec.alpha/coll-of :portkey.aws.elasticfilesystem.-2015-02-01/tag-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/create-file-system-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/CreationToken] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/PerformanceMode :portkey.aws.elasticfilesystem.-2015-02-01/Encrypted :portkey.aws.elasticfilesystem.-2015-02-01/KmsKeyId]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.unsupported-availability-zone/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/unsupported-availability-zone (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.unsupported-availability-zone/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.describe-tags-response/next-marker (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/marker))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-tags-response (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/Tags] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/Marker :portkey.aws.elasticfilesystem.-2015-02-01.describe-tags-response/NextMarker]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-file-systems-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/MaxItems :portkey.aws.elasticfilesystem.-2015-02-01/Marker :portkey.aws.elasticfilesystem.-2015-02-01/CreationToken :portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.bad-request/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/bad-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.bad-request/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-count (clojure.spec.alpha/and clojure.core/int? (fn* [p1__44539__44540__auto__] (clojure.core/<= 0 p1__44539__44540__auto__))))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/security-group (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/subnet-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/delete-file-system-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/create-mount-target-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId :portkey.aws.elasticfilesystem.-2015-02-01/SubnetId] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/IpAddress :portkey.aws.elasticfilesystem.-2015-02-01/SecurityGroups]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.ip-address-in-use/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/ip-address-in-use (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.ip-address-in-use/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/security-groups (clojure.spec.alpha/coll-of :portkey.aws.elasticfilesystem.-2015-02-01/security-group :max-count 5))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/life-cycle-state (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"creating" "creating", :creating "creating", "available" "available", :available "available", "deleting" "deleting", :deleting "deleting", "deleted" "deleted", :deleted "deleted"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/encrypted clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-mount-target-security-groups-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/MountTargetId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-limit-exceeded/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-limit-exceeded (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.file-system-limit-exceeded/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/owner-id (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/aws-account-id))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/size-in-bytes (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/file-system-size))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/number-of-mount-targets (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-count))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/creation-time (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/timestamp))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/name (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/tag-value))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-description (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/OwnerId :portkey.aws.elasticfilesystem.-2015-02-01/CreationToken :portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/CreationTime :portkey.aws.elasticfilesystem.-2015-02-01/LifeCycleState :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/NumberOfMountTargets :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/SizeInBytes :portkey.aws.elasticfilesystem.-2015-02-01/PerformanceMode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/Encrypted :portkey.aws.elasticfilesystem.-2015-02-01/KmsKeyId :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/Name]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/delete-tags-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId :portkey.aws.elasticfilesystem.-2015-02-01/TagKeys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/marker (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/tag-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44498__auto__] (clojure.core/<= 1 (clojure.core/count s__44498__auto__))) (clojure.core/fn [s__44499__auto__] (clojure.core/< (clojure.core/count s__44499__auto__) 128))))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/tags (clojure.spec.alpha/coll-of :portkey.aws.elasticfilesystem.-2015-02-01/tag :max-count nil))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/network-interface-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.mount-target-conflict/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-conflict (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.mount-target-conflict/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.describe-file-systems-response/file-systems (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/file-system-descriptions))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.describe-file-systems-response/next-marker (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/marker))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-file-systems-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/Marker :portkey.aws.elasticfilesystem.-2015-02-01.describe-file-systems-response/FileSystems :portkey.aws.elasticfilesystem.-2015-02-01.describe-file-systems-response/NextMarker]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.security-group-limit-exceeded/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/security-group-limit-exceeded (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.security-group-limit-exceeded/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.mount-target-not-found/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-not-found (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.mount-target-not-found/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/error-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.incorrect-mount-target-state/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/incorrect-mount-target-state (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.incorrect-mount-target-state/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.subnet-not-found/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/subnet-not-found (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.subnet-not-found/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/error-code (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44498__auto__] (clojure.core/<= 1 (clojure.core/count s__44498__auto__)))))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.describe-mount-targets-response/mount-targets (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-descriptions))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.describe-mount-targets-response/next-marker (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/marker))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-mount-targets-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/Marker :portkey.aws.elasticfilesystem.-2015-02-01.describe-mount-targets-response/MountTargets :portkey.aws.elasticfilesystem.-2015-02-01.describe-mount-targets-response/NextMarker]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-not-found/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.file-system-not-found/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.dependency-timeout/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/dependency-timeout (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.dependency-timeout/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/create-tags-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId :portkey.aws.elasticfilesystem.-2015-02-01/Tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-mount-target-security-groups-response (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/SecurityGroups] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-in-use/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-in-use (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.file-system-in-use/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/tag-value (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44499__auto__] (clojure.core/< (clojure.core/count s__44499__auto__) 256))))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/aws-account-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-size/value (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/file-system-size-value))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-size (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01.file-system-size/Value] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/Timestamp]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/kms-key-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44498__auto__] (clojure.core/<= 1 (clojure.core/count s__44498__auto__))) (clojure.core/fn [s__44499__auto__] (clojure.core/< (clojure.core/count s__44499__auto__) 2048))))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-tags-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/MaxItems :portkey.aws.elasticfilesystem.-2015-02-01/Marker]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.mount-target-description/owner-id (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/aws-account-id))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-description (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/MountTargetId :portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId :portkey.aws.elasticfilesystem.-2015-02-01/SubnetId :portkey.aws.elasticfilesystem.-2015-02-01/LifeCycleState] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.mount-target-description/OwnerId :portkey.aws.elasticfilesystem.-2015-02-01/IpAddress :portkey.aws.elasticfilesystem.-2015-02-01/NetworkInterfaceId]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-already-exists/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-already-exists (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode :portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.file-system-already-exists/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-descriptions (clojure.spec.alpha/coll-of :portkey.aws.elasticfilesystem.-2015-02-01/file-system-description :max-count nil))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.incorrect-file-system-life-cycle-state/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/incorrect-file-system-life-cycle-state (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.incorrect-file-system-life-cycle-state/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-descriptions (clojure.spec.alpha/coll-of :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-description :max-count nil))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/max-items (clojure.spec.alpha/and clojure.core/int? (fn* [p1__44539__44540__auto__] (clojure.core/<= 1 p1__44539__44540__auto__))))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/delete-mount-target-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/MountTargetId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.security-group-not-found/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/security-group-not-found (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.security-group-not-found/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/ip-address (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-mount-targets-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/MaxItems :portkey.aws.elasticfilesystem.-2015-02-01/Marker :portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId :portkey.aws.elasticfilesystem.-2015-02-01/MountTargetId]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.tag/key (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/tag-key))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.tag/value (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/tag-value))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/tag (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01.tag/Key :portkey.aws.elasticfilesystem.-2015-02-01.tag/Value] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.network-interface-limit-exceeded/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/network-interface-limit-exceeded (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.network-interface-limit-exceeded/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.internal-server-error/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.internal-server-error/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/creation-token (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__44498__auto__] (clojure.core/<= 1 (clojure.core/count s__44498__auto__))) (clojure.core/fn [s__44499__auto__] (clojure.core/< (clojure.core/count s__44499__auto__) 64))))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/performance-mode (clojure.spec.alpha/conformer (clojure.core/let [m__44496__auto__ {"generalPurpose" "generalPurpose", :general-purpose "generalPurpose", "maxIO" "maxIO", :maxio "maxIO"}] (clojure.core/fn [s__44497__auto__] (m__44496__auto__ s__44497__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.no-free-addresses-in-subnet/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/no-free-addresses-in-subnet (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.no-free-addresses-in-subnet/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/modify-mount-target-security-groups-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/MountTargetId] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/SecurityGroups]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-size-value clojure.core/int?)

(clojure.core/defn describe-mount-target-security-groups ([input__47307__auto__] (describe-mount-target-security-groups input__47307__auto__ portkey.aws/*http-client*)) ([input48191 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/2015-02-01/mount-targets/{MountTargetId}/security-groups"), :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/DescribeMountTargetSecurityGroupsRequest input48191)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"MountTargetId" "MountTargetId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response48190] (clojure.core/let [errors__47310__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "MountTargetNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-not-found, "IncorrectMountTargetState" :portkey.aws.elasticfilesystem.-2015-02-01/incorrect-mount-target-state}] (if (clojure.core/= 200 (:status response48190)) (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/describe-mount-target-security-groups-response (:body response48190)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response48190 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response48190)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response48190}))))))))))

(clojure.core/defn describe-file-systems ([input__47307__auto__] (describe-file-systems input__47307__auto__ portkey.aws/*http-client*)) ([input48193 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/2015-02-01/file-systems"), :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/DescribeFileSystemsRequest input48193)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxItems" "MaxItems", "Marker" "Marker", "CreationToken" "CreationToken", "FileSystemId" "FileSystemId"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response48192] (clojure.core/let [errors__47310__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "FileSystemNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found}] (if (clojure.core/= 200 (:status response48192)) (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/describe-file-systems-response (:body response48192)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response48192 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response48192)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response48192}))))))))))

(clojure.core/defn modify-mount-target-security-groups ([input__47307__auto__] (modify-mount-target-security-groups input__47307__auto__ portkey.aws/*http-client*)) ([input48195 http-client__47308__auto__] (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/2015-02-01/mount-targets/{MountTargetId}/security-groups"), :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/ModifyMountTargetSecurityGroupsRequest input48195)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"MountTargetId" "MountTargetId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response48194] (clojure.core/let [errors__47310__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "MountTargetNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-not-found, "IncorrectMountTargetState" :portkey.aws.elasticfilesystem.-2015-02-01/incorrect-mount-target-state, "SecurityGroupLimitExceeded" :portkey.aws.elasticfilesystem.-2015-02-01/security-group-limit-exceeded, "SecurityGroupNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/security-group-not-found}] (if (clojure.core/= 204 (:status response48194)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response48194 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response48194)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response48194}))))))))))

(clojure.core/defn delete-tags ([input__47307__auto__] (delete-tags input__47307__auto__ portkey.aws/*http-client*)) ([input48197 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/2015-02-01/delete-tags/{FileSystemId}"), :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/DeleteTagsRequest input48197)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FileSystemId" "FileSystemId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response48196] (clojure.core/let [errors__47310__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "FileSystemNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found}] (if (clojure.core/= 204 (:status response48196)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response48196 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response48196)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response48196}))))))))))

(clojure.core/defn create-tags ([input__47307__auto__] (create-tags input__47307__auto__ portkey.aws/*http-client*)) ([input48199 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/2015-02-01/create-tags/{FileSystemId}"), :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/CreateTagsRequest input48199)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FileSystemId" "FileSystemId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response48198] (clojure.core/let [errors__47310__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "FileSystemNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found}] (if (clojure.core/= 204 (:status response48198)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response48198 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response48198)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response48198}))))))))))

(clojure.core/defn create-mount-target ([input__47307__auto__] (create-mount-target input__47307__auto__ portkey.aws/*http-client*)) ([input48201 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/2015-02-01/mount-targets"), :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/CreateMountTargetRequest input48201)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response48200] (clojure.core/let [errors__47310__auto__ {"UnsupportedAvailabilityZone" :portkey.aws.elasticfilesystem.-2015-02-01/unsupported-availability-zone, "BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "IpAddressInUse" :portkey.aws.elasticfilesystem.-2015-02-01/ip-address-in-use, "MountTargetConflict" :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-conflict, "SecurityGroupLimitExceeded" :portkey.aws.elasticfilesystem.-2015-02-01/security-group-limit-exceeded, "SubnetNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/subnet-not-found, "FileSystemNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found, "IncorrectFileSystemLifeCycleState" :portkey.aws.elasticfilesystem.-2015-02-01/incorrect-file-system-life-cycle-state, "SecurityGroupNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/security-group-not-found, "NetworkInterfaceLimitExceeded" :portkey.aws.elasticfilesystem.-2015-02-01/network-interface-limit-exceeded, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "NoFreeAddressesInSubnet" :portkey.aws.elasticfilesystem.-2015-02-01/no-free-addresses-in-subnet}] (if (clojure.core/= 200 (:status response48200)) (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-description (:body response48200)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response48200 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response48200)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response48200}))))))))))

(clojure.core/defn create-file-system ([input__47307__auto__] (create-file-system input__47307__auto__ portkey.aws/*http-client*)) ([input48203 http-client__47308__auto__] (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/2015-02-01/file-systems"), :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/CreateFileSystemRequest input48203)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response48202] (clojure.core/let [errors__47310__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "FileSystemAlreadyExists" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-already-exists, "FileSystemLimitExceeded" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-limit-exceeded}] (if (clojure.core/= 201 (:status response48202)) (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/file-system-description (:body response48202)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response48202 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response48202)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response48202}))))))))))

(clojure.core/defn describe-tags ([input__47307__auto__] (describe-tags input__47307__auto__ portkey.aws/*http-client*)) ([input48205 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/2015-02-01/tags/{FileSystemId}/"), :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/DescribeTagsRequest input48205)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FileSystemId" "FileSystemId"}) (portkey.awsgen/params-to-querystring {"MaxItems" "MaxItems", "Marker" "Marker"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response48204] (clojure.core/let [errors__47310__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "FileSystemNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found}] (if (clojure.core/= 200 (:status response48204)) (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/describe-tags-response (:body response48204)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response48204 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response48204)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response48204}))))))))))

(clojure.core/defn describe-mount-targets ([input__47307__auto__] (describe-mount-targets input__47307__auto__ portkey.aws/*http-client*)) ([input48207 http-client__47308__auto__] (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/2015-02-01/mount-targets"), :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/DescribeMountTargetsRequest input48207)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxItems" "MaxItems", "Marker" "Marker", "FileSystemId" "FileSystemId", "MountTargetId" "MountTargetId"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response48206] (clojure.core/let [errors__47310__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "FileSystemNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found, "MountTargetNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-not-found}] (if (clojure.core/= 200 (:status response48206)) (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/describe-mount-targets-response (:body response48206)) (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response48206 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response48206)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response48206}))))))))))

(clojure.core/defn delete-mount-target ([input__47307__auto__] (delete-mount-target input__47307__auto__ portkey.aws/*http-client*)) ([input48209 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/2015-02-01/mount-targets/{MountTargetId}"), :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/DeleteMountTargetRequest input48209)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"MountTargetId" "MountTargetId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response48208] (clojure.core/let [errors__47310__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "DependencyTimeout" :portkey.aws.elasticfilesystem.-2015-02-01/dependency-timeout, "MountTargetNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-not-found}] (if (clojure.core/= 204 (:status response48208)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response48208 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response48208)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response48208}))))))))))

(clojure.core/defn delete-file-system ([input__47307__auto__] (delete-file-system input__47307__auto__ portkey.aws/*http-client*)) ([input48211 http-client__47308__auto__] (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url (clojure.core/str (:endpoint (endpoints portkey.aws/*region*)) "/2015-02-01/file-systems/{FileSystemId}"), :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/DeleteFileSystemRequest input48211)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FileSystemId" "FileSystemId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__47306__47309__auto__] (clojure.core/some-> p1__47306__47309__auto__ cheshire.core/generate-string))) (http-client__47308__auto__ (clojure.core/fn [response48210] (clojure.core/let [errors__47310__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "FileSystemNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found, "FileSystemInUse" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-in-use}] (if (clojure.core/= 204 (:status response48210)) true (clojure.core/if-some [[type__47311__auto__ spec__47312__auto__] (clojure.core/find errors__47310__auto__ (clojure.core/get-in response48210 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__47313__auto__ (clojure.spec.alpha/unform spec__47312__auto__ (cheshire.core/parse-string (:body response48210)))] (throw (clojure.core/ex-info (clojure.core/str type__47311__auto__ ": " (:message m__47313__auto__)) m__47313__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response48210}))))))))))
