(ns portkey.aws.elasticfilesystem.-2015-02-01 (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/tag-keys (clojure.spec.alpha/coll-of :portkey.aws.elasticfilesystem.-2015-02-01/tag-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/create-file-system-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/CreationToken] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/PerformanceMode :portkey.aws.elasticfilesystem.-2015-02-01/Encrypted :portkey.aws.elasticfilesystem.-2015-02-01/KmsKeyId]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.unsupported-availability-zone/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/unsupported-availability-zone (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.unsupported-availability-zone/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.describe-tags-response/next-marker (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/marker))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-tags-response (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/Tags] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/Marker :portkey.aws.elasticfilesystem.-2015-02-01.describe-tags-response/NextMarker]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-file-systems-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/MaxItems :portkey.aws.elasticfilesystem.-2015-02-01/Marker :portkey.aws.elasticfilesystem.-2015-02-01/CreationToken :portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.bad-request/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/bad-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.bad-request/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-count (clojure.spec.alpha/and clojure.core/int? (fn* [p1__36568__36569__auto__] (clojure.core/<= 0 p1__36568__36569__auto__))))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/security-group (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/subnet-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/delete-file-system-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/create-mount-target-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId :portkey.aws.elasticfilesystem.-2015-02-01/SubnetId] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/IpAddress :portkey.aws.elasticfilesystem.-2015-02-01/SecurityGroups]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.ip-address-in-use/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/ip-address-in-use (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.ip-address-in-use/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/security-groups (clojure.spec.alpha/coll-of :portkey.aws.elasticfilesystem.-2015-02-01/security-group :max-count 5))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/life-cycle-state (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"creating" "creating", :creating "creating", "available" "available", :available "available", "deleting" "deleting", :deleting "deleting", "deleted" "deleted", :deleted "deleted"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/encrypted clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-mount-target-security-groups-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/MountTargetId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-limit-exceeded/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-limit-exceeded (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.file-system-limit-exceeded/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/owner-id (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/aws-account-id))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/size-in-bytes (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/file-system-size))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/number-of-mount-targets (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-count))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/creation-time (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/timestamp))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/name (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/tag-value))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-description (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/OwnerId :portkey.aws.elasticfilesystem.-2015-02-01/CreationToken :portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/CreationTime :portkey.aws.elasticfilesystem.-2015-02-01/LifeCycleState :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/NumberOfMountTargets :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/SizeInBytes :portkey.aws.elasticfilesystem.-2015-02-01/PerformanceMode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/Encrypted :portkey.aws.elasticfilesystem.-2015-02-01/KmsKeyId :portkey.aws.elasticfilesystem.-2015-02-01.file-system-description/Name]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/delete-tags-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId :portkey.aws.elasticfilesystem.-2015-02-01/TagKeys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/marker (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/tag-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128))))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/tags (clojure.spec.alpha/coll-of :portkey.aws.elasticfilesystem.-2015-02-01/tag :max-count nil))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/network-interface-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.mount-target-conflict/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-conflict (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.mount-target-conflict/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.describe-file-systems-response/file-systems (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/file-system-descriptions))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.describe-file-systems-response/next-marker (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/marker))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-file-systems-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/Marker :portkey.aws.elasticfilesystem.-2015-02-01.describe-file-systems-response/FileSystems :portkey.aws.elasticfilesystem.-2015-02-01.describe-file-systems-response/NextMarker]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.security-group-limit-exceeded/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/security-group-limit-exceeded (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.security-group-limit-exceeded/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.mount-target-not-found/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-not-found (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.mount-target-not-found/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/error-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.incorrect-mount-target-state/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/incorrect-mount-target-state (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.incorrect-mount-target-state/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.subnet-not-found/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/subnet-not-found (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.subnet-not-found/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/error-code (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__)))))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.describe-mount-targets-response/mount-targets (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-descriptions))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.describe-mount-targets-response/next-marker (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/marker))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-mount-targets-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/Marker :portkey.aws.elasticfilesystem.-2015-02-01.describe-mount-targets-response/MountTargets :portkey.aws.elasticfilesystem.-2015-02-01.describe-mount-targets-response/NextMarker]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-not-found/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.file-system-not-found/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.dependency-timeout/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/dependency-timeout (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.dependency-timeout/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/create-tags-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId :portkey.aws.elasticfilesystem.-2015-02-01/Tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-mount-target-security-groups-response (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/SecurityGroups] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-in-use/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-in-use (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.file-system-in-use/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/tag-value (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 256))))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/aws-account-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-size/value (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/file-system-size-value))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-size (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01.file-system-size/Value] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/Timestamp]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/kms-key-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 2048))))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-tags-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/MaxItems :portkey.aws.elasticfilesystem.-2015-02-01/Marker]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.mount-target-description/owner-id (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/aws-account-id))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-description (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/MountTargetId :portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId :portkey.aws.elasticfilesystem.-2015-02-01/SubnetId :portkey.aws.elasticfilesystem.-2015-02-01/LifeCycleState] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.mount-target-description/OwnerId :portkey.aws.elasticfilesystem.-2015-02-01/IpAddress :portkey.aws.elasticfilesystem.-2015-02-01/NetworkInterfaceId]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.file-system-already-exists/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-already-exists (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode :portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.file-system-already-exists/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-descriptions (clojure.spec.alpha/coll-of :portkey.aws.elasticfilesystem.-2015-02-01/file-system-description :max-count nil))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.incorrect-file-system-life-cycle-state/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/incorrect-file-system-life-cycle-state (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.incorrect-file-system-life-cycle-state/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-descriptions (clojure.spec.alpha/coll-of :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-description :max-count nil))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/max-items (clojure.spec.alpha/and clojure.core/int? (fn* [p1__36568__36569__auto__] (clojure.core/<= 1 p1__36568__36569__auto__))))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/delete-mount-target-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/MountTargetId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.security-group-not-found/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/security-group-not-found (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.security-group-not-found/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/ip-address (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/describe-mount-targets-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/MaxItems :portkey.aws.elasticfilesystem.-2015-02-01/Marker :portkey.aws.elasticfilesystem.-2015-02-01/FileSystemId :portkey.aws.elasticfilesystem.-2015-02-01/MountTargetId]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/timestamp clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.tag/key (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/tag-key))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.tag/value (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/tag-value))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/tag (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01.tag/Key :portkey.aws.elasticfilesystem.-2015-02-01.tag/Value] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.network-interface-limit-exceeded/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/network-interface-limit-exceeded (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.network-interface-limit-exceeded/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.internal-server-error/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.internal-server-error/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/creation-token (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 64))))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/performance-mode (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"generalPurpose" "generalPurpose", :general-purpose "generalPurpose", "maxIO" "maxIO", :maxio "maxIO"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01.no-free-addresses-in-subnet/message (clojure.spec.alpha/and :portkey.aws.elasticfilesystem.-2015-02-01/error-message))
(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/no-free-addresses-in-subnet (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/ErrorCode] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01.no-free-addresses-in-subnet/Message]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/modify-mount-target-security-groups-request (portkey.awsgen/json-keys :req-un [:portkey.aws.elasticfilesystem.-2015-02-01/MountTargetId] :opt-un [:portkey.aws.elasticfilesystem.-2015-02-01/SecurityGroups]))

(clojure.spec.alpha/def :portkey.aws.elasticfilesystem.-2015-02-01/file-system-size-value clojure.core/int?)

(clojure.core/defn describe-mount-target-security-groups ([input__36693__auto__] (describe-mount-target-security-groups input__36693__auto__ portkey.aws/*http-client*)) ([input37753 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/mount-targets/{MountTargetId}/security-groups", :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/DescribeMountTargetSecurityGroupsRequest input37753)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"MountTargetId" "MountTargetId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/mount-targets/{MountTargetId}/security-groups", :body body__36697__auto__} (clojure.core/fn [response37752] (clojure.core/let [errors__36698__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "MountTargetNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-not-found, "IncorrectMountTargetState" :portkey.aws.elasticfilesystem.-2015-02-01/incorrect-mount-target-state}] (if (clojure.core/= 200 (:status response37752)) (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/describe-mount-target-security-groups-response (:body response37752)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37752 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37752)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37752}))))))))))

(clojure.core/defn describe-file-systems ([input__36693__auto__] (describe-file-systems input__36693__auto__ portkey.aws/*http-client*)) ([input37755 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/file-systems", :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/DescribeFileSystemsRequest input37755)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxItems" "MaxItems", "Marker" "Marker", "CreationToken" "CreationToken", "FileSystemId" "FileSystemId"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/file-systems", :body body__36697__auto__} (clojure.core/fn [response37754] (clojure.core/let [errors__36698__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "FileSystemNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found}] (if (clojure.core/= 200 (:status response37754)) (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/describe-file-systems-response (:body response37754)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37754 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37754)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37754}))))))))))

(clojure.core/defn modify-mount-target-security-groups ([input__36693__auto__] (modify-mount-target-security-groups input__36693__auto__ portkey.aws/*http-client*)) ([input37757 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/mount-targets/{MountTargetId}/security-groups", :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/ModifyMountTargetSecurityGroupsRequest input37757)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"MountTargetId" "MountTargetId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/mount-targets/{MountTargetId}/security-groups", :body body__36697__auto__} (clojure.core/fn [response37756] (clojure.core/let [errors__36698__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "MountTargetNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-not-found, "IncorrectMountTargetState" :portkey.aws.elasticfilesystem.-2015-02-01/incorrect-mount-target-state, "SecurityGroupLimitExceeded" :portkey.aws.elasticfilesystem.-2015-02-01/security-group-limit-exceeded, "SecurityGroupNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/security-group-not-found}] (if (clojure.core/= 204 (:status response37756)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37756 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37756)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37756}))))))))))

(clojure.core/defn delete-tags ([input__36693__auto__] (delete-tags input__36693__auto__ portkey.aws/*http-client*)) ([input37759 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/delete-tags/{FileSystemId}", :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/DeleteTagsRequest input37759)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FileSystemId" "FileSystemId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/delete-tags/{FileSystemId}", :body body__36697__auto__} (clojure.core/fn [response37758] (clojure.core/let [errors__36698__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "FileSystemNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found}] (if (clojure.core/= 204 (:status response37758)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37758 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37758)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37758}))))))))))

(clojure.core/defn create-tags ([input__36693__auto__] (create-tags input__36693__auto__ portkey.aws/*http-client*)) ([input37761 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/create-tags/{FileSystemId}", :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/CreateTagsRequest input37761)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FileSystemId" "FileSystemId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/create-tags/{FileSystemId}", :body body__36697__auto__} (clojure.core/fn [response37760] (clojure.core/let [errors__36698__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "FileSystemNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found}] (if (clojure.core/= 204 (:status response37760)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37760 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37760)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37760}))))))))))

(clojure.core/defn create-mount-target ([input__36693__auto__] (create-mount-target input__36693__auto__ portkey.aws/*http-client*)) ([input37763 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/mount-targets", :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/CreateMountTargetRequest input37763)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/mount-targets", :body body__36697__auto__} (clojure.core/fn [response37762] (clojure.core/let [errors__36698__auto__ {"UnsupportedAvailabilityZone" :portkey.aws.elasticfilesystem.-2015-02-01/unsupported-availability-zone, "BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "IpAddressInUse" :portkey.aws.elasticfilesystem.-2015-02-01/ip-address-in-use, "MountTargetConflict" :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-conflict, "SecurityGroupLimitExceeded" :portkey.aws.elasticfilesystem.-2015-02-01/security-group-limit-exceeded, "SubnetNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/subnet-not-found, "FileSystemNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found, "IncorrectFileSystemLifeCycleState" :portkey.aws.elasticfilesystem.-2015-02-01/incorrect-file-system-life-cycle-state, "SecurityGroupNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/security-group-not-found, "NetworkInterfaceLimitExceeded" :portkey.aws.elasticfilesystem.-2015-02-01/network-interface-limit-exceeded, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "NoFreeAddressesInSubnet" :portkey.aws.elasticfilesystem.-2015-02-01/no-free-addresses-in-subnet}] (if (clojure.core/= 200 (:status response37762)) (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-description (:body response37762)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37762 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37762)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37762}))))))))))

(clojure.core/defn create-file-system ([input__36693__auto__] (create-file-system input__36693__auto__ portkey.aws/*http-client*)) ([input37765 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/file-systems", :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/CreateFileSystemRequest input37765)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/file-systems", :body body__36697__auto__} (clojure.core/fn [response37764] (clojure.core/let [errors__36698__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "FileSystemAlreadyExists" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-already-exists, "FileSystemLimitExceeded" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-limit-exceeded}] (if (clojure.core/= 201 (:status response37764)) (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/file-system-description (:body response37764)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37764 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37764)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37764}))))))))))

(clojure.core/defn describe-tags ([input__36693__auto__] (describe-tags input__36693__auto__ portkey.aws/*http-client*)) ([input37767 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/tags/{FileSystemId}/", :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/DescribeTagsRequest input37767)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FileSystemId" "FileSystemId"}) (portkey.awsgen/params-to-querystring {"MaxItems" "MaxItems", "Marker" "Marker"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/tags/{FileSystemId}/", :body body__36697__auto__} (clojure.core/fn [response37766] (clojure.core/let [errors__36698__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "FileSystemNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found}] (if (clojure.core/= 200 (:status response37766)) (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/describe-tags-response (:body response37766)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37766 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37766)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37766}))))))))))

(clojure.core/defn describe-mount-targets ([input__36693__auto__] (describe-mount-targets input__36693__auto__ portkey.aws/*http-client*)) ([input37769 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/mount-targets", :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/DescribeMountTargetsRequest input37769)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MaxItems" "MaxItems", "Marker" "Marker", "FileSystemId" "FileSystemId", "MountTargetId" "MountTargetId"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/mount-targets", :body body__36697__auto__} (clojure.core/fn [response37768] (clojure.core/let [errors__36698__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "FileSystemNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found, "MountTargetNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-not-found}] (if (clojure.core/= 200 (:status response37768)) (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/describe-mount-targets-response (:body response37768)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37768 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37768)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37768}))))))))))

(clojure.core/defn delete-mount-target ([input__36693__auto__] (delete-mount-target input__36693__auto__ portkey.aws/*http-client*)) ([input37771 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/mount-targets/{MountTargetId}", :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/DeleteMountTargetRequest input37771)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"MountTargetId" "MountTargetId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/mount-targets/{MountTargetId}", :body body__36697__auto__} (clojure.core/fn [response37770] (clojure.core/let [errors__36698__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "DependencyTimeout" :portkey.aws.elasticfilesystem.-2015-02-01/dependency-timeout, "MountTargetNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/mount-target-not-found}] (if (clojure.core/= 204 (:status response37770)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37770 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37770)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37770}))))))))))

(clojure.core/defn delete-file-system ([input__36693__auto__] (delete-file-system input__36693__auto__ portkey.aws/*http-client*)) ([input37773 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/file-systems/{FileSystemId}", :body (clojure.spec.alpha/unform :portkey.aws.elasticfilesystem.-2015-02-01/DeleteFileSystemRequest input37773)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FileSystemId" "FileSystemId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-02-01/file-systems/{FileSystemId}", :body body__36697__auto__} (clojure.core/fn [response37772] (clojure.core/let [errors__36698__auto__ {"BadRequest" :portkey.aws.elasticfilesystem.-2015-02-01/bad-request, "InternalServerError" :portkey.aws.elasticfilesystem.-2015-02-01/internal-server-error, "FileSystemNotFound" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-not-found, "FileSystemInUse" :portkey.aws.elasticfilesystem.-2015-02-01/file-system-in-use}] (if (clojure.core/= 204 (:status response37772)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response37772 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response37772)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response37772}))))))))))
