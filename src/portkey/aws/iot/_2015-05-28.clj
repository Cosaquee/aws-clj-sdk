(ns portkey.aws.iot.-2015-05-28 (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.accept-certificate-transfer-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.accept-certificate-transfer-request/set-as-active (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/set-as-active))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/accept-certificate-transfer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.accept-certificate-transfer-request/certificateId] :opt-un [:portkey.aws.iot.-2015-05-28.accept-certificate-transfer-request/setAsActive]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/registry-max-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__36568__36569__auto__] (clojure.core/<= 1 p1__36568__36569__auto__)) (fn* [p1__36570__36571__auto__] (clojure.core/<= p1__36570__36571__auto__ 250))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-policy-versions-response/policy-versions (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-versions))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-policy-versions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-policy-versions-response/policyVersions]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/auto-registration-status (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ENABLE" "ENABLE", :enable "ENABLE", "DISABLE" "DISABLE", :disable "DISABLE"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.deprecate-thing-type-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.deprecate-thing-type-request/undo-deprecate (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/undo-deprecate))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/deprecate-thing-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.deprecate-thing-type-request/thingTypeName] :opt-un [:portkey.aws.iot.-2015-05-28.deprecate-thing-type-request/undoDeprecate]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.unauthorized-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/unauthorized-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.unauthorized-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/outgoing-certificates (clojure.spec.alpha/coll-of :portkey.aws.iot.-2015-05-28/outgoing-certificate :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.detach-principal-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.detach-principal-policy-request/principal (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/principal))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/detach-principal-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.detach-principal-policy-request/policyName :portkey.aws.iot.-2015-05-28.detach-principal-policy-request/principal] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/range-key-field (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/thing-attribute-list (clojure.spec.alpha/coll-of :portkey.aws.iot.-2015-05-28/thing-attribute :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.thing-type-properties/thing-type-description (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-description))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.thing-type-properties/searchable-attributes (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/searchable-attributes))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/thing-type-properties (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.thing-type-properties/thingTypeDescription :portkey.aws.iot.-2015-05-28.thing-type-properties/searchableAttributes]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.register-certificate-request/certificate-pem (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.register-certificate-request/ca-certificate-pem (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.register-certificate-request/set-as-active (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/set-as-active-flag))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.register-certificate-request/status (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-status))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/register-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.register-certificate-request/certificatePem] :opt-un [:portkey.aws.iot.-2015-05-28.register-certificate-request/caCertificatePem :portkey.aws.iot.-2015-05-28.register-certificate-request/setAsActive :portkey.aws.iot.-2015-05-28.register-certificate-request/status]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/detach-thing-principal-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-thing-request/thing-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-thing-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-thing-request/attribute-payload (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/attribute-payload))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/create-thing-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.create-thing-request/thingName] :opt-un [:portkey.aws.iot.-2015-05-28.create-thing-request/thingTypeName :portkey.aws.iot.-2015-05-28.create-thing-request/attributePayload]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/stream-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.dynamodbv2-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.dynamodbv2-action/put-item (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/put-item-input))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/dynamodbv2-action (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.dynamodbv2-action/roleArn :portkey.aws.iot.-2015-05-28.dynamodbv2-action/putItem]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/delete-registration-code-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule-payload/sql (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/sql))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule-payload/description (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/description))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule-payload/actions (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/action-list))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule-payload/rule-disabled (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/is-disabled))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule-payload/aws-iot-sql-version (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-iot-sql-version))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/topic-rule-payload (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.topic-rule-payload/sql :portkey.aws.iot.-2015-05-28.topic-rule-payload/actions] :opt-un [:portkey.aws.iot.-2015-05-28.topic-rule-payload/description :portkey.aws.iot.-2015-05-28.topic-rule-payload/ruleDisabled :portkey.aws.iot.-2015-05-28.topic-rule-payload/awsIotSqlVersion]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-principal-things-response/things (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-name-list))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-principal-things-response/next-token (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/next-token))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-principal-things-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-principal-things-response/things :portkey.aws.iot.-2015-05-28.list-principal-things-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/private-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__)))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.transfer-certificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.transfer-certificate-request/target-aws-account (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-account-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.transfer-certificate-request/transfer-message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/transfer-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.transfer-certificate-request/certificateId :portkey.aws.iot.-2015-05-28.transfer-certificate-request/targetAwsAccount] :opt-un [:portkey.aws.iot.-2015-05-28.transfer-certificate-request/transferMessage]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/deprecation-date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.update-certificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.update-certificate-request/new-status (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-status))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/update-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.update-certificate-request/certificateId :portkey.aws.iot.-2015-05-28.update-certificate-request/newStatus] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/function-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/topic-pattern (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/rule-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"^[a-zA-Z0-9_]+$" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describe-thing-response/default-client-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/client-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describe-thing-response/thing-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describe-thing-response/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describe-thing-response/attributes (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/attributes))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describe-thing-response/version (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/version))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/describe-thing-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.describe-thing-response/defaultClientId :portkey.aws.iot.-2015-05-28.describe-thing-response/thingName :portkey.aws.iot.-2015-05-28.describe-thing-response/thingTypeName :portkey.aws.iot.-2015-05-28.describe-thing-response/attributes :portkey.aws.iot.-2015-05-28.describe-thing-response/version]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-keys-and-certificate-request/set-as-active (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/set-as-active))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/create-keys-and-certificate-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.create-keys-and-certificate-request/setAsActive]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.updatecacertificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.updatecacertificate-request/new-status (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/cacertificate-status))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.updatecacertificate-request/new-auto-registration-status (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/auto-registration-status))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/updatecacertificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.updatecacertificate-request/certificateId] :opt-un [:portkey.aws.iot.-2015-05-28.updatecacertificate-request/newStatus :portkey.aws.iot.-2015-05-28.updatecacertificate-request/newAutoRegistrationStatus]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate-state-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/certificate-state-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.certificate-state-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/certificate-signing-request (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__)))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/page-size (clojure.spec.alpha/and clojure.core/int? (fn* [p1__36568__36569__auto__] (clojure.core/<= 1 p1__36568__36569__auto__)) (fn* [p1__36570__36571__auto__] (clojure.core/<= p1__36570__36571__auto__ 250))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.invalid-request-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/invalid-request-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.invalid-request-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/thing-type-description (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 2028)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\p{Graph}\x20]*" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate-validation-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/certificate-validation-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.certificate-validation-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.thing-attribute/thing-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.thing-attribute/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.thing-attribute/attributes (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/attributes))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.thing-attribute/version (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/version))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/thing-attribute (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.thing-attribute/thingName :portkey.aws.iot.-2015-05-28.thing-attribute/thingTypeName :portkey.aws.iot.-2015-05-28.thing-attribute/attributes :portkey.aws.iot.-2015-05-28.thing-attribute/version]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-topic-rules-request/topic (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/topic))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-topic-rules-request/max-results (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/max-results))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-topic-rules-request/next-token (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/next-token))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-topic-rules-request/rule-disabled (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/is-disabled))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-topic-rules-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-topic-rules-request/topic :portkey.aws.iot.-2015-05-28.list-topic-rules-request/maxResults :portkey.aws.iot.-2015-05-28.list-topic-rules-request/nextToken :portkey.aws.iot.-2015-05-28.list-topic-rules-request/ruleDisabled]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/canned-access-control-list (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"authenticated-read" "authenticated-read", "public-read-write" "public-read-write", :bucket-owner-full-control "bucket-owner-full-control", :private "private", "bucket-owner-full-control" "bucket-owner-full-control", "private" "private", :log-delivery-write "log-delivery-write", :authenticated-read "authenticated-read", "aws-exec-read" "aws-exec-read", :aws-exec-read "aws-exec-read", :bucket-owner-read "bucket-owner-read", "bucket-owner-read" "bucket-owner-read", "public-read" "public-read", "log-delivery-write" "log-delivery-write", :public-read-write "public-read-write", :public-read "public-read"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-outgoing-certificates-request/page-size (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/page-size))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-outgoing-certificates-request/marker (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/marker))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-outgoing-certificates-request/ascending-order (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/ascending-order))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-outgoing-certificates-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-outgoing-certificates-request/pageSize :portkey.aws.iot.-2015-05-28.list-outgoing-certificates-request/marker :portkey.aws.iot.-2015-05-28.list-outgoing-certificates-request/ascendingOrder]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/thing-type-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[a-zA-Z0-9:_-]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-principal-policies-request/principal (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/principal))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-principal-policies-request/marker (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/marker))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-principal-policies-request/page-size (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/page-size))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-principal-policies-request/ascending-order (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/ascending-order))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-principal-policies-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.list-principal-policies-request/principal] :opt-un [:portkey.aws.iot.-2015-05-28.list-principal-policies-request/marker :portkey.aws.iot.-2015-05-28.list-principal-policies-request/pageSize :portkey.aws.iot.-2015-05-28.list-principal-policies-request/ascendingOrder]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/resource-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-logging-options-response/role-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-logging-options-response/log-level (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/log-level))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/get-logging-options-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.get-logging-options-response/roleArn :portkey.aws.iot.-2015-05-28.get-logging-options-response/logLevel]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/attribute-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[a-zA-Z0-9_.,@/:#-]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.outgoing-certificate/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.outgoing-certificate/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.outgoing-certificate/transferred-to (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-account-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.outgoing-certificate/transfer-date (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.outgoing-certificate/transfer-message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.outgoing-certificate/creation-date (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/outgoing-certificate (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.outgoing-certificate/certificateArn :portkey.aws.iot.-2015-05-28.outgoing-certificate/certificateId :portkey.aws.iot.-2015-05-28.outgoing-certificate/transferredTo :portkey.aws.iot.-2015-05-28.outgoing-certificate/transferDate :portkey.aws.iot.-2015-05-28.outgoing-certificate/transferMessage :portkey.aws.iot.-2015-05-28.outgoing-certificate/creationDate]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-certificates-response/certificates (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificates))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-certificates-response/next-marker (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/marker))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-certificates-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-certificates-response/certificates :portkey.aws.iot.-2015-05-28.list-certificates-response/nextMarker]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.set-default-policy-version-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.set-default-policy-version-request/policy-version-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/set-default-policy-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.set-default-policy-version-request/policyName :portkey.aws.iot.-2015-05-28.set-default-policy-version-request/policyVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.enable-topic-rule-request/rule-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/enable-topic-rule-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.enable-topic-rule-request/ruleName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/log-level (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"DISABLED" "DISABLED", :disabled "DISABLED", :warn "WARN", "WARN" "WARN", :debug "DEBUG", "ERROR" "ERROR", "DEBUG" "DEBUG", :info "INFO", :error "ERROR", "INFO" "INFO"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/policy-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[\w+=,.@-]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/cacertificates (clojure.spec.alpha/coll-of :portkey.aws.iot.-2015-05-28/cacertificate :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/error-message (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/action-list (clojure.spec.alpha/coll-of :portkey.aws.iot.-2015-05-28/action :max-count 10))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.reject-certificate-transfer-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.reject-certificate-transfer-request/reject-reason (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/reject-certificate-transfer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.reject-certificate-transfer-request/certificateId] :opt-un [:portkey.aws.iot.-2015-05-28.reject-certificate-transfer-request/rejectReason]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-certificates-request/page-size (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/page-size))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-certificates-request/marker (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/marker))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-certificates-request/ascending-order (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/ascending-order))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-certificates-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-certificates-request/pageSize :portkey.aws.iot.-2015-05-28.list-certificates-request/marker :portkey.aws.iot.-2015-05-28.list-certificates-request/ascendingOrder]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/thing-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describe-thing-request/thing-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/describe-thing-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.describe-thing-request/thingName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-topic-rule-response/rule-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/rule-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-topic-rule-response/rule (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/topic-rule))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/get-topic-rule-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.get-topic-rule-response/ruleArn :portkey.aws.iot.-2015-05-28.get-topic-rule-response/rule]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/certificates (clojure.spec.alpha/coll-of :portkey.aws.iot.-2015-05-28/certificate :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.thing-type-metadata/deprecated (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/boolean))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.thing-type-metadata/deprecation-date (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/deprecation-date))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.thing-type-metadata/creation-date (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/creation-date))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/thing-type-metadata (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.thing-type-metadata/deprecated :portkey.aws.iot.-2015-05-28.thing-type-metadata/deprecationDate :portkey.aws.iot.-2015-05-28.thing-type-metadata/creationDate]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.attribute-payload/attributes (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/attributes))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.attribute-payload/merge (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/flag))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/attribute-payload (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.attribute-payload/attributes :portkey.aws.iot.-2015-05-28.attribute-payload/merge]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describe-thing-type-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/describe-thing-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.describe-thing-type-request/thingTypeName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describecacertificate-response/certificate-description (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/cacertificate-description))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/describecacertificate-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.describecacertificate-response/certificateDescription]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/state-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/use-base64 clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describe-certificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/describe-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.describe-certificate-request/certificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/principal-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-thing-types-request/next-token (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/next-token))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-thing-types-request/max-results (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/registry-max-results))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-thing-types-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-thing-types-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-thing-types-request/nextToken :portkey.aws.iot.-2015-05-28.list-thing-types-request/maxResults :portkey.aws.iot.-2015-05-28.list-thing-types-request/thingTypeName]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/cacertificate-status (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ACTIVE" "ACTIVE", :active "ACTIVE", "INACTIVE" "INACTIVE", :inactive "INACTIVE"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/partition-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.delete-thing-request/thing-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.delete-thing-request/expected-version (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/optional-version))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/delete-thing-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.delete-thing-request/thingName] :opt-un [:portkey.aws.iot.-2015-05-28.delete-thing-request/expectedVersion]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-principal-policies-response/policies (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policies))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-principal-policies-response/next-marker (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/marker))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-principal-policies-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-principal-policies-response/policies :portkey.aws.iot.-2015-05-28.list-principal-policies-response/nextMarker]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/flag clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate-description/creation-date (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate-description/certificate-pem (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate-description/ca-certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate-description/last-modified-date (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate-description/owned-by (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-account-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate-description/transfer-data (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/transfer-data))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate-description/status (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-status))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate-description/previous-owned-by (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-account-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate-description/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate-description/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/certificate-description (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.certificate-description/creationDate :portkey.aws.iot.-2015-05-28.certificate-description/certificatePem :portkey.aws.iot.-2015-05-28.certificate-description/caCertificateId :portkey.aws.iot.-2015-05-28.certificate-description/lastModifiedDate :portkey.aws.iot.-2015-05-28.certificate-description/ownedBy :portkey.aws.iot.-2015-05-28.certificate-description/transferData :portkey.aws.iot.-2015-05-28.certificate-description/status :portkey.aws.iot.-2015-05-28.certificate-description/previousOwnedBy :portkey.aws.iot.-2015-05-28.certificate-description/certificateArn :portkey.aws.iot.-2015-05-28.certificate-description/certificateId]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.delete-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/delete-conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.delete-conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/marker (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.detach-thing-principal-request/thing-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.detach-thing-principal-request/principal (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/principal))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/detach-thing-principal-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.detach-thing-principal-request/thingName :portkey.aws.iot.-2015-05-28.detach-thing-principal-request/principal] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/rule-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.transfer-certificate-response/transferred-certificate-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/transfer-certificate-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.transfer-certificate-response/transferredCertificateArn]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.thing-type-definition/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.thing-type-definition/thing-type-properties (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-properties))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.thing-type-definition/thing-type-metadata (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-metadata))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/thing-type-definition (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.thing-type-definition/thingTypeName :portkey.aws.iot.-2015-05-28.thing-type-definition/thingTypeProperties :portkey.aws.iot.-2015-05-28.thing-type-definition/thingTypeMetadata]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/deprecate-thing-type-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-topic-rules-response/rules (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/topic-rule-list))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-topic-rules-response/next-token (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/next-token))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-topic-rules-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-topic-rules-response/rules :portkey.aws.iot.-2015-05-28.list-topic-rules-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/thing-name-list (clojure.spec.alpha/coll-of :portkey.aws.iot.-2015-05-28/thing-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-certificate-from-csr-request/certificate-signing-request (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-signing-request))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-certificate-from-csr-request/set-as-active (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/set-as-active))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/create-certificate-from-csr-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.create-certificate-from-csr-request/certificateSigningRequest] :opt-un [:portkey.aws.iot.-2015-05-28.create-certificate-from-csr-request/setAsActive]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describe-thing-type-response/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describe-thing-type-response/thing-type-properties (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-properties))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describe-thing-type-response/thing-type-metadata (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-metadata))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/describe-thing-type-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.describe-thing-type-response/thingTypeName :portkey.aws.iot.-2015-05-28.describe-thing-type-response/thingTypeProperties :portkey.aws.iot.-2015-05-28.describe-thing-type-response/thingTypeMetadata]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/elasticsearch-type (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.delete-topic-rule-request/rule-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/delete-topic-rule-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.delete-topic-rule-request/ruleName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/set-as-active-flag clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/thing-type-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.resource-already-exists-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/resource-already-exists-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.resource-already-exists-exception/message :portkey.aws.iot.-2015-05-28/resourceId :portkey.aws.iot.-2015-05-28/resourceArn]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-certificates-bycaresponse/certificates (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificates))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-certificates-bycaresponse/next-marker (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/marker))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-certificates-bycaresponse (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-certificates-bycaresponse/certificates :portkey.aws.iot.-2015-05-28.list-certificates-bycaresponse/nextMarker]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-thing-principals-request/thing-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-thing-principals-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.list-thing-principals-request/thingName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.listcacertificates-response/certificates (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/cacertificates))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.listcacertificates-response/next-marker (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/marker))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/listcacertificates-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.listcacertificates-response/certificates :portkey.aws.iot.-2015-05-28.listcacertificates-response/nextMarker]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.service-unavailable-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/service-unavailable-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.service-unavailable-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-keys-and-certificate-response/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-keys-and-certificate-response/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-keys-and-certificate-response/certificate-pem (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-keys-and-certificate-response/key-pair (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/key-pair))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/create-keys-and-certificate-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.create-keys-and-certificate-response/certificateArn :portkey.aws.iot.-2015-05-28.create-keys-and-certificate-response/certificateId :portkey.aws.iot.-2015-05-28.create-keys-and-certificate-response/certificatePem :portkey.aws.iot.-2015-05-28.create-keys-and-certificate-response/keyPair]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/aws-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/delete-registration-code-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/metric-unit (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/allow-auto-registration clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.policy-version/version-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.policy-version/is-default-version (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/is-default-version))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.policy-version/create-date (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/policy-version (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.policy-version/versionId :portkey.aws.iot.-2015-05-28.policy-version/isDefaultVersion :portkey.aws.iot.-2015-05-28.policy-version/createDate]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.put-item-input/table-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/table-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/put-item-input (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.put-item-input/tableName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/next-token (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.deletecacertificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/deletecacertificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.deletecacertificate-request/certificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/range-key-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/hash-key-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.firehose-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.firehose-action/delivery-stream-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/delivery-stream-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.firehose-action/separator (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/firehose-separator))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/firehose-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.firehose-action/roleArn :portkey.aws.iot.-2015-05-28.firehose-action/deliveryStreamName] :opt-un [:portkey.aws.iot.-2015-05-28.firehose-action/separator]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/metric-timestamp (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/topic (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-topic-rule-request/rule-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/get-topic-rule-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.get-topic-rule-request/ruleName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-policy-request/policy-document (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-document))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/create-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.create-policy-request/policyName :portkey.aws.iot.-2015-05-28.create-policy-request/policyDocument] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.attach-principal-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.attach-principal-policy-request/principal (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/principal))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/attach-principal-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.attach-principal-policy-request/policyName :portkey.aws.iot.-2015-05-28.attach-principal-policy-request/principal] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/salesforce-token (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 40 (clojure.core/count s__36527__auto__)))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/attributes (clojure.spec.alpha/map-of :portkey.aws.iot.-2015-05-28/attribute-name :portkey.aws.iot.-2015-05-28/attribute-value))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-certificate-from-csr-response/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-certificate-from-csr-response/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-certificate-from-csr-response/certificate-pem (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/create-certificate-from-csr-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.create-certificate-from-csr-response/certificateArn :portkey.aws.iot.-2015-05-28.create-certificate-from-csr-response/certificateId :portkey.aws.iot.-2015-05-28.create-certificate-from-csr-response/certificatePem]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/queue-url (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.internal-failure-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/internal-failure-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.internal-failure-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-policy-version-response/policy-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-policy-version-response/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-policy-version-response/policy-document (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-document))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-policy-version-response/policy-version-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-policy-version-response/is-default-version (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/is-default-version))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/get-policy-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.get-policy-version-response/policyArn :portkey.aws.iot.-2015-05-28.get-policy-version-response/policyName :portkey.aws.iot.-2015-05-28.get-policy-version-response/policyDocument :portkey.aws.iot.-2015-05-28.get-policy-version-response/policyVersionId :portkey.aws.iot.-2015-05-28.get-policy-version-response/isDefaultVersion]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.versions-limit-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/versions-limit-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.versions-limit-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/searchable-attributes (clojure.spec.alpha/coll-of :portkey.aws.iot.-2015-05-28/attribute-name :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/message-format (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"RAW" "RAW", :raw "RAW", "JSON" "JSON", :json "JSON"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/date-type clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/attribute-value (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 800)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[a-zA-Z0-9_.,@/:#-]*" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.listcacertificates-request/page-size (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/page-size))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.listcacertificates-request/marker (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/marker))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.listcacertificates-request/ascending-order (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/ascending-order))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/listcacertificates-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.listcacertificates-request/pageSize :portkey.aws.iot.-2015-05-28.listcacertificates-request/marker :portkey.aws.iot.-2015-05-28.listcacertificates-request/ascendingOrder]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/dynamo-key-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"STRING" "STRING", :string "STRING", "NUMBER" "NUMBER", :number "NUMBER"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.delete-certificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/delete-certificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.delete-certificate-request/certificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cancel-certificate-transfer-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/cancel-certificate-transfer-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.cancel-certificate-transfer-request/certificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/get-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.get-policy-request/policyName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-registration-code-response/registration-code (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/registration-code))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/get-registration-code-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.get-registration-code-response/registrationCode]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/get-logging-options-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/resource-not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.resource-not-found-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.sns-action/target-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.sns-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.sns-action/message-format (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/message-format))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/sns-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.sns-action/targetArn :portkey.aws.iot.-2015-05-28.sns-action/roleArn] :opt-un [:portkey.aws.iot.-2015-05-28.sns-action/messageFormat]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/undo-deprecate clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/delete-thing-type-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/deletecacertificate-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.delete-thing-type-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/delete-thing-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.delete-thing-type-request/thingTypeName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.delete-policy-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/delete-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.delete-policy-request/policyName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/description (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.delete-policy-version-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.delete-policy-version-request/policy-version-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/delete-policy-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.delete-policy-version-request/policyName :portkey.aws.iot.-2015-05-28.delete-policy-version-request/policyVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/policy-document (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/aws-account-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[0-9]{12}" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/message (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/is-disabled clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.sql-parse-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/sql-parse-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.sql-parse-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.internal-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/internal-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.internal-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-policy-response/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-policy-response/policy-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-policy-response/policy-document (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-document))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-policy-response/default-version-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/get-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.get-policy-response/policyName :portkey.aws.iot.-2015-05-28.get-policy-response/policyArn :portkey.aws.iot.-2015-05-28.get-policy-response/policyDocument :portkey.aws.iot.-2015-05-28.get-policy-response/defaultVersionId]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cloudwatch-metric-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cloudwatch-metric-action/metric-namespace (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/metric-namespace))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cloudwatch-metric-action/metric-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/metric-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cloudwatch-metric-action/metric-value (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/metric-value))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cloudwatch-metric-action/metric-unit (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/metric-unit))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cloudwatch-metric-action/metric-timestamp (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/metric-timestamp))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/cloudwatch-metric-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.cloudwatch-metric-action/roleArn :portkey.aws.iot.-2015-05-28.cloudwatch-metric-action/metricNamespace :portkey.aws.iot.-2015-05-28.cloudwatch-metric-action/metricName :portkey.aws.iot.-2015-05-28.cloudwatch-metric-action/metricValue :portkey.aws.iot.-2015-05-28.cloudwatch-metric-action/metricUnit] :opt-un [:portkey.aws.iot.-2015-05-28.cloudwatch-metric-action/metricTimestamp]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.version-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/version-conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.version-conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-policy-response/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-policy-response/policy-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-policy-response/policy-document (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-document))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-policy-response/policy-version-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/create-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.create-policy-response/policyName :portkey.aws.iot.-2015-05-28.create-policy-response/policyArn :portkey.aws.iot.-2015-05-28.create-policy-response/policyDocument :portkey.aws.iot.-2015-05-28.create-policy-response/policyVersionId]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/remove-thing-type clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/delivery-stream-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.attach-thing-principal-request/thing-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.attach-thing-principal-request/principal (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/principal))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/attach-thing-principal-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.attach-thing-principal-request/thingName :portkey.aws.iot.-2015-05-28.attach-thing-principal-request/principal] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.sqs-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.sqs-action/queue-url (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/queue-url))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.sqs-action/use-base64 (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/use-base64))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/sqs-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.sqs-action/roleArn :portkey.aws.iot.-2015-05-28.sqs-action/queueUrl] :opt-un [:portkey.aws.iot.-2015-05-28.sqs-action/useBase64]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-policy-versions-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-policy-versions-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.list-policy-versions-request/policyName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-policy-version-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.get-policy-version-request/policy-version-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/get-policy-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.get-policy-version-request/policyName :portkey.aws.iot.-2015-05-28.get-policy-version-request/policyVersionId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/update-thing-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/policy-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-principal-things-request/next-token (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/next-token))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-principal-things-request/max-results (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/registry-max-results))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-principal-things-request/principal (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/principal))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-principal-things-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.list-principal-things-request/principal] :opt-un [:portkey.aws.iot.-2015-05-28.list-principal-things-request/nextToken :portkey.aws.iot.-2015-05-28.list-principal-things-request/maxResults]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describe-certificate-response/certificate-description (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-description))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/describe-certificate-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.describe-certificate-response/certificateDescription]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/describe-endpoint-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-certificates-bycarequest/ca-certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-certificates-bycarequest/page-size (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/page-size))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-certificates-bycarequest/marker (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/marker))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-certificates-bycarequest/ascending-order (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/ascending-order))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-certificates-bycarequest (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.list-certificates-bycarequest/caCertificateId] :opt-un [:portkey.aws.iot.-2015-05-28.list-certificates-bycarequest/pageSize :portkey.aws.iot.-2015-05-28.list-certificates-bycarequest/marker :portkey.aws.iot.-2015-05-28.list-certificates-bycarequest/ascendingOrder]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/alarm-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/hash-key-field (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/thing-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[a-zA-Z0-9:_-]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.republish-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.republish-action/topic (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/topic-pattern))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/republish-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.republish-action/roleArn :portkey.aws.iot.-2015-05-28.republish-action/topic] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.registercacertificate-request/ca-certificate (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.registercacertificate-request/verification-certificate (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.registercacertificate-request/set-as-active (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/set-as-active))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.registercacertificate-request/allow-auto-registration (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/allow-auto-registration))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/registercacertificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.registercacertificate-request/caCertificate :portkey.aws.iot.-2015-05-28.registercacertificate-request/verificationCertificate] :opt-un [:portkey.aws.iot.-2015-05-28.registercacertificate-request/setAsActive :portkey.aws.iot.-2015-05-28.registercacertificate-request/allowAutoRegistration]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-policies-request/marker (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/marker))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-policies-request/page-size (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/page-size))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-policies-request/ascending-order (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/ascending-order))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-policies-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-policies-request/marker :portkey.aws.iot.-2015-05-28.list-policies-request/pageSize :portkey.aws.iot.-2015-05-28.list-policies-request/ascendingOrder]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.register-certificate-response/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.register-certificate-response/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/register-certificate-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.register-certificate-response/certificateArn :portkey.aws.iot.-2015-05-28.register-certificate-response/certificateId]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/metric-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/client-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.transfer-already-completed-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/transfer-already-completed-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.transfer-already-completed-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-thing-principals-response/principals (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/principals))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-thing-principals-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-thing-principals-response/principals]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.elasticsearch-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.elasticsearch-action/endpoint (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/elasticsearch-endpoint))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.elasticsearch-action/index (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/elasticsearch-index))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.elasticsearch-action/type (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/elasticsearch-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.elasticsearch-action/id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/elasticsearch-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/elasticsearch-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.elasticsearch-action/roleArn :portkey.aws.iot.-2015-05-28.elasticsearch-action/endpoint :portkey.aws.iot.-2015-05-28.elasticsearch-action/index :portkey.aws.iot.-2015-05-28.elasticsearch-action/type :portkey.aws.iot.-2015-05-28.elasticsearch-action/id] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/elasticsearch-index (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/policies (clojure.spec.alpha/coll-of :portkey.aws.iot.-2015-05-28/policy :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/certificate-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/set-as-active clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/table-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/aws-iot-sql-version (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.disable-topic-rule-request/rule-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/disable-topic-rule-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.disable-topic-rule-request/ruleName] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/sql (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/creation-date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.dynamodbaction/range-key-value (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/range-key-value))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.dynamodbaction/table-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/table-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.dynamodbaction/hash-key-value (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/hash-key-value))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.dynamodbaction/role-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.dynamodbaction/range-key-field (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/range-key-field))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.dynamodbaction/hash-key-type (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/dynamo-key-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.dynamodbaction/operation (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/dynamo-operation))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.dynamodbaction/payload-field (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/payload-field))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.dynamodbaction/hash-key-field (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/hash-key-field))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.dynamodbaction/range-key-type (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/dynamo-key-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/dynamodbaction (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.dynamodbaction/tableName :portkey.aws.iot.-2015-05-28.dynamodbaction/roleArn :portkey.aws.iot.-2015-05-28.dynamodbaction/hashKeyField :portkey.aws.iot.-2015-05-28.dynamodbaction/hashKeyValue] :opt-un [:portkey.aws.iot.-2015-05-28.dynamodbaction/rangeKeyValue :portkey.aws.iot.-2015-05-28.dynamodbaction/rangeKeyField :portkey.aws.iot.-2015-05-28.dynamodbaction/hashKeyType :portkey.aws.iot.-2015-05-28.dynamodbaction/operation :portkey.aws.iot.-2015-05-28.dynamodbaction/payloadField :portkey.aws.iot.-2015-05-28.dynamodbaction/rangeKeyType]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/delete-thing-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-policy-principals-response/principals (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/principals))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-policy-principals-response/next-marker (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/marker))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-policy-principals-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-policy-principals-response/principals :portkey.aws.iot.-2015-05-28.list-policy-principals-response/nextMarker]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/topic-rule-list (clojure.spec.alpha/coll-of :portkey.aws.iot.-2015-05-28/topic-rule-list-item :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.update-thing-request/thing-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.update-thing-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.update-thing-request/attribute-payload (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/attribute-payload))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.update-thing-request/expected-version (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/optional-version))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.update-thing-request/remove-thing-type (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/remove-thing-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/update-thing-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.update-thing-request/thingName] :opt-un [:portkey.aws.iot.-2015-05-28.update-thing-request/thingTypeName :portkey.aws.iot.-2015-05-28.update-thing-request/attributePayload :portkey.aws.iot.-2015-05-28.update-thing-request/expectedVersion :portkey.aws.iot.-2015-05-28.update-thing-request/removeThingType]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/policy-version-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[0-9]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-thing-types-response/thing-types (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-list))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-thing-types-response/next-token (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/next-token))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-thing-types-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-thing-types-response/thingTypes :portkey.aws.iot.-2015-05-28.list-thing-types-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describecacertificate-request/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/describecacertificate-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.describecacertificate-request/certificateId] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/dynamo-operation (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-thing-response/thing-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-thing-response/thing-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/create-thing-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.create-thing-response/thingName :portkey.aws.iot.-2015-05-28.create-thing-response/thingArn]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-policy-principals-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-policy-principals-request/marker (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/marker))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-policy-principals-request/page-size (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/page-size))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-policy-principals-request/ascending-order (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/ascending-order))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-policy-principals-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.list-policy-principals-request/policyName] :opt-un [:portkey.aws.iot.-2015-05-28.list-policy-principals-request/marker :portkey.aws.iot.-2015-05-28.list-policy-principals-request/pageSize :portkey.aws.iot.-2015-05-28.list-policy-principals-request/ascendingOrder]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/certificate-status (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {:inactive "INACTIVE", "REGISTER_INACTIVE" "REGISTER_INACTIVE", "REVOKED" "REVOKED", :revoked "REVOKED", :pending-activation "PENDING_ACTIVATION", :register-inactive "REGISTER_INACTIVE", :pending-transfer "PENDING_TRANSFER", :active "ACTIVE", "INACTIVE" "INACTIVE", "PENDING_ACTIVATION" "PENDING_ACTIVATION", "ACTIVE" "ACTIVE", "PENDING_TRANSFER" "PENDING_TRANSFER"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.policy/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.policy/policy-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/policy (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.policy/policyName :portkey.aws.iot.-2015-05-28.policy/policyArn]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/key-pair (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28/PublicKey :portkey.aws.iot.-2015-05-28/PrivateKey]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/max-results (clojure.spec.alpha/and clojure.core/int? (fn* [p1__36568__36569__auto__] (clojure.core/<= 1 p1__36568__36569__auto__)) (fn* [p1__36570__36571__auto__] (clojure.core/<= p1__36570__36571__auto__ 10000))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.malformed-policy-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/malformed-policy-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.malformed-policy-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/set-as-default clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/version clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.registercacertificate-response/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.registercacertificate-response/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/registercacertificate-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.registercacertificate-response/certificateArn :portkey.aws.iot.-2015-05-28.registercacertificate-response/certificateId]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/metric-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.logging-options-payload/role-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.logging-options-payload/log-level (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/log-level))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/logging-options-payload (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.logging-options-payload/roleArn] :opt-un [:portkey.aws.iot.-2015-05-28.logging-options-payload/logLevel]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/elasticsearch-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.throttling-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/throttling-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.throttling-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/resource-arn (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.salesforce-action/token (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/salesforce-token))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.salesforce-action/url (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/salesforce-endpoint))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/salesforce-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.salesforce-action/token :portkey.aws.iot.-2015-05-28.salesforce-action/url] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/salesforce-endpoint (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 2000)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"https://ingestion-[a-zA-Z0-9]{1,12}\.[a-zA-Z0-9]+\.((sfdc-matrix\.net)|(sfdcnow\.com))/streams/\w{1,20}/\w{1,20}/event" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/metric-namespace (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-policies-response/policies (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policies))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-policies-response/next-marker (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/marker))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-policies-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-policies-response/policies :portkey.aws.iot.-2015-05-28.list-policies-response/nextMarker]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/ascending-order clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/is-default-version clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.transfer-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/transfer-conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.transfer-conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/optional-version clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/principal (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cacertificate-description/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cacertificate-description/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cacertificate-description/status (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/cacertificate-status))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cacertificate-description/certificate-pem (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-pem))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cacertificate-description/owned-by (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-account-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cacertificate-description/creation-date (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cacertificate-description/auto-registration-status (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/auto-registration-status))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/cacertificate-description (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.cacertificate-description/certificateArn :portkey.aws.iot.-2015-05-28.cacertificate-description/certificateId :portkey.aws.iot.-2015-05-28.cacertificate-description/status :portkey.aws.iot.-2015-05-28.cacertificate-description/certificatePem :portkey.aws.iot.-2015-05-28.cacertificate-description/ownedBy :portkey.aws.iot.-2015-05-28.cacertificate-description/creationDate :portkey.aws.iot.-2015-05-28.cacertificate-description/autoRegistrationStatus]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.transfer-data/transfer-message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.transfer-data/reject-reason (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.transfer-data/transfer-date (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.transfer-data/accept-date (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.transfer-data/reject-date (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/transfer-data (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.transfer-data/transferMessage :portkey.aws.iot.-2015-05-28.transfer-data/rejectReason :portkey.aws.iot.-2015-05-28.transfer-data/transferDate :portkey.aws.iot.-2015-05-28.transfer-data/acceptDate :portkey.aws.iot.-2015-05-28.transfer-data/rejectDate]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.registration-code-validation-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/registration-code-validation-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.registration-code-validation-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/policy-versions (clojure.spec.alpha/coll-of :portkey.aws.iot.-2015-05-28/policy-version :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cloudwatch-alarm-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cloudwatch-alarm-action/alarm-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/alarm-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cloudwatch-alarm-action/state-reason (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/state-reason))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cloudwatch-alarm-action/state-value (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/state-value))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/cloudwatch-alarm-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.cloudwatch-alarm-action/roleArn :portkey.aws.iot.-2015-05-28.cloudwatch-alarm-action/alarmName :portkey.aws.iot.-2015-05-28.cloudwatch-alarm-action/stateReason :portkey.aws.iot.-2015-05-28.cloudwatch-alarm-action/stateValue] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.lambda-action/function-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/function-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/lambda-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.lambda-action/functionArn] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.set-logging-options-request/logging-options-payload (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/logging-options-payload))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/set-logging-options-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.set-logging-options-request/loggingOptionsPayload] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/bucket-name (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/certificate-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 64 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 64)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"(0x)?[a-fA-F0-9]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/attach-thing-principal-response (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/endpoint-address (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/certificate-pem (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 65536))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-thing-type-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-thing-type-request/thing-type-properties (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-properties))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/create-thing-type-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.create-thing-type-request/thingTypeName] :opt-un [:portkey.aws.iot.-2015-05-28.create-thing-type-request/thingTypeProperties]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.action/dynamodb (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/dynamodbaction))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.action/sns (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/sns-action))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.action/cloudwatch-alarm (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/cloudwatch-alarm-action))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.action/republish (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/republish-action))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.action/kinesis (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/kinesis-action))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.action/s3 (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/s3-action))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.action/salesforce (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/salesforce-action))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.action/sqs (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/sqs-action))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.action/elasticsearch (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/elasticsearch-action))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.action/cloudwatch-metric (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/cloudwatch-metric-action))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.action/firehose (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/firehose-action))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.action/dynamodbv2 (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/dynamodbv2-action))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.action/lambda (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/lambda-action))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/action (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.action/dynamoDB :portkey.aws.iot.-2015-05-28.action/sns :portkey.aws.iot.-2015-05-28.action/cloudwatchAlarm :portkey.aws.iot.-2015-05-28.action/republish :portkey.aws.iot.-2015-05-28.action/kinesis :portkey.aws.iot.-2015-05-28.action/s3 :portkey.aws.iot.-2015-05-28.action/salesforce :portkey.aws.iot.-2015-05-28.action/sqs :portkey.aws.iot.-2015-05-28.action/elasticsearch :portkey.aws.iot.-2015-05-28.action/cloudwatchMetric :portkey.aws.iot.-2015-05-28.action/firehose :portkey.aws.iot.-2015-05-28.action/dynamoDBv2 :portkey.aws.iot.-2015-05-28.action/lambda]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/thing-type-list (clojure.spec.alpha/coll-of :portkey.aws.iot.-2015-05-28/thing-type-definition :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-topic-rule-request/rule-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-topic-rule-request/topic-rule-payload (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/topic-rule-payload))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/create-topic-rule-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.create-topic-rule-request/ruleName :portkey.aws.iot.-2015-05-28.create-topic-rule-request/topicRulePayload] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/created-at-date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate/status (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-status))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate/creation-date (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/certificate (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.certificate/certificateArn :portkey.aws.iot.-2015-05-28.certificate/certificateId :portkey.aws.iot.-2015-05-28.certificate/status :portkey.aws.iot.-2015-05-28.certificate/creationDate]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-policy-version-response/policy-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-policy-version-response/policy-document (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-document))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-policy-version-response/policy-version-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-version-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-policy-version-response/is-default-version (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/is-default-version))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/create-policy-version-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.create-policy-version-response/policyArn :portkey.aws.iot.-2015-05-28.create-policy-version-response/policyDocument :portkey.aws.iot.-2015-05-28.create-policy-version-response/policyVersionId :portkey.aws.iot.-2015-05-28.create-policy-version-response/isDefaultVersion]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/state-reason (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/elasticsearch-endpoint (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"https?://.*" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-things-request/next-token (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/next-token))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-things-request/max-results (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/registry-max-results))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-things-request/attribute-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/attribute-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-things-request/attribute-value (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/attribute-value))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-things-request/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-things-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-things-request/nextToken :portkey.aws.iot.-2015-05-28.list-things-request/maxResults :portkey.aws.iot.-2015-05-28.list-things-request/attributeName :portkey.aws.iot.-2015-05-28.list-things-request/attributeValue :portkey.aws.iot.-2015-05-28.list-things-request/thingTypeName]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.describe-endpoint-response/endpoint-address (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/endpoint-address))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/describe-endpoint-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.describe-endpoint-response/endpointAddress]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.replace-topic-rule-request/rule-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.replace-topic-rule-request/topic-rule-payload (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/topic-rule-payload))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/replace-topic-rule-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.replace-topic-rule-request/ruleName :portkey.aws.iot.-2015-05-28.replace-topic-rule-request/topicRulePayload] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.s3-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.s3-action/bucket-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/bucket-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.s3-action/key (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/key))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.s3-action/canned-acl (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/canned-access-control-list))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/s3-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.s3-action/roleArn :portkey.aws.iot.-2015-05-28.s3-action/bucketName :portkey.aws.iot.-2015-05-28.s3-action/key] :opt-un [:portkey.aws.iot.-2015-05-28.s3-action/cannedAcl]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/get-registration-code-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.kinesis-action/role-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.kinesis-action/stream-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/stream-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.kinesis-action/partition-key (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/partition-key))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/kinesis-action (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.kinesis-action/roleArn :portkey.aws.iot.-2015-05-28.kinesis-action/streamName] :opt-un [:portkey.aws.iot.-2015-05-28.kinesis-action/partitionKey]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cacertificate/certificate-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cacertificate/certificate-id (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/certificate-id))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cacertificate/status (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/cacertificate-status))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.cacertificate/creation-date (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/date-type))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/cacertificate (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.cacertificate/certificateArn :portkey.aws.iot.-2015-05-28.cacertificate/certificateId :portkey.aws.iot.-2015-05-28.cacertificate/status :portkey.aws.iot.-2015-05-28.cacertificate/creationDate]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/public-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__)))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-things-response/things (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-attribute-list))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-things-response/next-token (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/next-token))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-things-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-things-response/things :portkey.aws.iot.-2015-05-28.list-things-response/nextToken]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-policy-version-request/policy-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-policy-version-request/policy-document (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/policy-document))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-policy-version-request/set-as-default (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/set-as-default))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/create-policy-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.iot.-2015-05-28.create-policy-version-request/policyName :portkey.aws.iot.-2015-05-28.create-policy-version-request/policyDocument] :opt-un [:portkey.aws.iot.-2015-05-28.create-policy-version-request/setAsDefault]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-thing-type-response/thing-type-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.create-thing-type-response/thing-type-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/thing-type-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/create-thing-type-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.create-thing-type-response/thingTypeName :portkey.aws.iot.-2015-05-28.create-thing-type-response/thingTypeArn]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.certificate-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/error-message))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/certificate-conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.certificate-conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-outgoing-certificates-response/outgoing-certificates (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/outgoing-certificates))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.list-outgoing-certificates-response/next-marker (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/marker))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/list-outgoing-certificates-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.list-outgoing-certificates-response/outgoingCertificates :portkey.aws.iot.-2015-05-28.list-outgoing-certificates-response/nextMarker]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/payload-field (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule-list-item/rule-arn (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/rule-arn))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule-list-item/rule-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule-list-item/topic-pattern (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/topic-pattern))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule-list-item/created-at (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/created-at-date))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule-list-item/rule-disabled (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/is-disabled))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/topic-rule-list-item (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.topic-rule-list-item/ruleArn :portkey.aws.iot.-2015-05-28.topic-rule-list-item/ruleName :portkey.aws.iot.-2015-05-28.topic-rule-list-item/topicPattern :portkey.aws.iot.-2015-05-28.topic-rule-list-item/createdAt :portkey.aws.iot.-2015-05-28.topic-rule-list-item/ruleDisabled]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/firehose-separator (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"([\n\t])|(\r\n)|(,)" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/principals (clojure.spec.alpha/coll-of :portkey.aws.iot.-2015-05-28/principal-arn :max-count nil))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule/rule-name (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/rule-name))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule/sql (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/sql))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule/description (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/description))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule/created-at (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/created-at-date))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule/actions (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/action-list))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule/rule-disabled (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/is-disabled))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28.topic-rule/aws-iot-sql-version (clojure.spec.alpha/and :portkey.aws.iot.-2015-05-28/aws-iot-sql-version))
(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/topic-rule (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.iot.-2015-05-28.topic-rule/ruleName :portkey.aws.iot.-2015-05-28.topic-rule/sql :portkey.aws.iot.-2015-05-28.topic-rule/description :portkey.aws.iot.-2015-05-28.topic-rule/createdAt :portkey.aws.iot.-2015-05-28.topic-rule/actions :portkey.aws.iot.-2015-05-28.topic-rule/ruleDisabled :portkey.aws.iot.-2015-05-28.topic-rule/awsIotSqlVersion]))

(clojure.spec.alpha/def :portkey.aws.iot.-2015-05-28/registration-code (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 64 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 64)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"(0x)?[a-fA-F0-9]+" s__36529__auto__))))

(clojure.core/defn list-policy-versions ([input__36693__auto__] (list-policy-versions input__36693__auto__ portkey.aws/*http-client*)) ([input38451 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/ListPolicyVersionsRequest input38451)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"policyName" "policyName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version", :body body__36697__auto__} (clojure.core/fn [response38450] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38450)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/list-policy-versions-response (:body response38450)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38450 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38450)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38450}))))))))))

(clojure.core/defn delete-policy-version ([input__36693__auto__] (delete-policy-version input__36693__auto__ portkey.aws/*http-client*)) ([input38453 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version/{policyVersionId}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DeletePolicyVersionRequest input38453)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"policyName" "policyName", "policyVersionId" "policyVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version/{policyVersionId}", :body body__36697__auto__} (clojure.core/fn [response38452] (clojure.core/let [errors__36698__auto__ {"DeleteConflictException" :portkey.aws.iot.-2015-05-28/delete-conflict-exception, "ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38452)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38452 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38452)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38452}))))))))))

(clojure.core/defn attach-principal-policy ([input__36693__auto__] (attach-principal-policy input__36693__auto__ portkey.aws/*http-client*)) ([input38455 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principal-policies/{policyName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/AttachPrincipalPolicyRequest input38455)} (portkey.awsgen/params-to-header {"principal" ["x-amzn-iot-principal" nil]}) (portkey.awsgen/params-to-uri {"policyName" "policyName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principal-policies/{policyName}", :body body__36697__auto__} (clojure.core/fn [response38454] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception, "LimitExceededException" :portkey.aws.iot.-2015-05-28/limit-exceeded-exception}] (if (clojure.core/= nil (:status response38454)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38454 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38454)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38454}))))))))))

(clojure.core/defn list-certificates-byca ([input__36693__auto__] (list-certificates-byca input__36693__auto__ portkey.aws/*http-client*)) ([input38457 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates-by-ca/{caCertificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/ListCertificatesByCARequest input38457)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"caCertificateId" "caCertificateId"}) (portkey.awsgen/params-to-querystring {"pageSize" "pageSize", "marker" "marker", "isAscendingOrder" "ascendingOrder"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates-by-ca/{caCertificateId}", :body body__36697__auto__} (clojure.core/fn [response38456] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38456)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/list-certificates-bycaresponse (:body response38456)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38456 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38456)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38456}))))))))))

(clojure.core/defn get-policy-version ([input__36693__auto__] (get-policy-version input__36693__auto__ portkey.aws/*http-client*)) ([input38459 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version/{policyVersionId}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/GetPolicyVersionRequest input38459)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"policyName" "policyName", "policyVersionId" "policyVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version/{policyVersionId}", :body body__36697__auto__} (clojure.core/fn [response38458] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38458)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/get-policy-version-response (:body response38458)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38458 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38458)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38458}))))))))))

(clojure.core/defn cancel-certificate-transfer ([input__36693__auto__] (cancel-certificate-transfer input__36693__auto__ portkey.aws/*http-client*)) ([input38461 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cancel-certificate-transfer/{certificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/CancelCertificateTransferRequest input38461)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"certificateId" "certificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cancel-certificate-transfer/{certificateId}", :body body__36697__auto__} (clojure.core/fn [response38460] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "TransferAlreadyCompletedException" :portkey.aws.iot.-2015-05-28/transfer-already-completed-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38460)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38460 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38460)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38460}))))))))))

(clojure.core/defn listcacertificates ([input__36693__auto__] (listcacertificates input__36693__auto__ portkey.aws/*http-client*)) ([input38463 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificates", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/ListCACertificatesRequest input38463)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"pageSize" "pageSize", "marker" "marker", "isAscendingOrder" "ascendingOrder"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificates", :body body__36697__auto__} (clojure.core/fn [response38462] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38462)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/listcacertificates-response (:body response38462)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38462 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38462)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38462}))))))))))

(clojure.core/defn create-thing ([input__36693__auto__] (create-thing input__36693__auto__ portkey.aws/*http-client*)) ([input38465 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/CreateThingRequest input38465)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"thingName" "thingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body body__36697__auto__} (clojure.core/fn [response38464] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception, "ResourceAlreadyExistsException" :portkey.aws.iot.-2015-05-28/resource-already-exists-exception, "ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception}] (if (clojure.core/= nil (:status response38464)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/create-thing-response (:body response38464)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38464 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38464)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38464}))))))))))

(clojure.core/defn create-topic-rule ([input__36693__auto__] (create-topic-rule input__36693__auto__ portkey.aws/*http-client*)) ([input38467 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/CreateTopicRuleRequest input38467)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ruleName" "ruleName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "topicRulePayload") (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body body__36697__auto__} (clojure.core/fn [response38466] (clojure.core/let [errors__36698__auto__ {"SqlParseException" :portkey.aws.iot.-2015-05-28/sql-parse-exception, "InternalException" :portkey.aws.iot.-2015-05-28/internal-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ResourceAlreadyExistsException" :portkey.aws.iot.-2015-05-28/resource-already-exists-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception}] (if (clojure.core/= nil (:status response38466)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38466 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38466)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38466}))))))))))

(clojure.core/defn accept-certificate-transfer ([input__36693__auto__] (accept-certificate-transfer input__36693__auto__ portkey.aws/*http-client*)) ([input38469 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/accept-certificate-transfer/{certificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/AcceptCertificateTransferRequest input38469)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"certificateId" "certificateId"}) (portkey.awsgen/params-to-querystring {"setAsActive" "setAsActive"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/accept-certificate-transfer/{certificateId}", :body body__36697__auto__} (clojure.core/fn [response38468] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "TransferAlreadyCompletedException" :portkey.aws.iot.-2015-05-28/transfer-already-completed-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38468)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38468 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38468)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38468}))))))))))

(clojure.core/defn get-registration-code ([input__36693__auto__] (get-registration-code input__36693__auto__ portkey.aws/*http-client*)) ([input38471 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/registrationcode", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/GetRegistrationCodeRequest input38471)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/registrationcode", :body body__36697__auto__} (clojure.core/fn [response38470] (clojure.core/let [errors__36698__auto__ {"ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception}] (if (clojure.core/= nil (:status response38470)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/get-registration-code-response (:body response38470)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38470 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38470)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38470}))))))))))

(clojure.core/defn list-policies ([input__36693__auto__] (list-policies input__36693__auto__ portkey.aws/*http-client*)) ([input38473 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/ListPoliciesRequest input38473)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"marker" "marker", "pageSize" "pageSize", "isAscendingOrder" "ascendingOrder"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies", :body body__36697__auto__} (clojure.core/fn [response38472] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38472)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/list-policies-response (:body response38472)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38472 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38472)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38472}))))))))))

(clojure.core/defn delete-registration-code ([input__36693__auto__] (delete-registration-code input__36693__auto__ portkey.aws/*http-client*)) ([input38475 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/registrationcode", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DeleteRegistrationCodeRequest input38475)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/registrationcode", :body body__36697__auto__} (clojure.core/fn [response38474] (clojure.core/let [errors__36698__auto__ {"ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38474)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/delete-registration-code-response (:body response38474)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38474 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38474)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38474}))))))))))

(clojure.core/defn describecacertificate ([input__36693__auto__] (describecacertificate input__36693__auto__ portkey.aws/*http-client*)) ([input38477 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate/{caCertificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DescribeCACertificateRequest input38477)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"caCertificateId" "certificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate/{caCertificateId}", :body body__36697__auto__} (clojure.core/fn [response38476] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception, "ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception}] (if (clojure.core/= nil (:status response38476)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/describecacertificate-response (:body response38476)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38476 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38476)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38476}))))))))))

(clojure.core/defn detach-thing-principal ([input__36693__auto__] (detach-thing-principal input__36693__auto__ portkey.aws/*http-client*)) ([input38479 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}/principals", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DetachThingPrincipalRequest input38479)} (portkey.awsgen/params-to-header {"principal" ["x-amzn-principal" nil]}) (portkey.awsgen/params-to-uri {"thingName" "thingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}/principals", :body body__36697__auto__} (clojure.core/fn [response38478] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38478)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/detach-thing-principal-response (:body response38478)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38478 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38478)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38478}))))))))))

(clojure.core/defn list-outgoing-certificates ([input__36693__auto__] (list-outgoing-certificates input__36693__auto__ portkey.aws/*http-client*)) ([input38481 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates-out-going", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/ListOutgoingCertificatesRequest input38481)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"pageSize" "pageSize", "marker" "marker", "isAscendingOrder" "ascendingOrder"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates-out-going", :body body__36697__auto__} (clojure.core/fn [response38480] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38480)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/list-outgoing-certificates-response (:body response38480)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38480 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38480)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38480}))))))))))

(clojure.core/defn deletecacertificate ([input__36693__auto__] (deletecacertificate input__36693__auto__ portkey.aws/*http-client*)) ([input38483 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate/{caCertificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DeleteCACertificateRequest input38483)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"caCertificateId" "certificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate/{caCertificateId}", :body body__36697__auto__} (clojure.core/fn [response38482] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "CertificateStateException" :portkey.aws.iot.-2015-05-28/certificate-state-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception, "ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception}] (if (clojure.core/= nil (:status response38482)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/deletecacertificate-response (:body response38482)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38482 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38482)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38482}))))))))))

(clojure.core/defn list-principal-things ([input__36693__auto__] (list-principal-things input__36693__auto__ portkey.aws/*http-client*)) ([input38485 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principals/things", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/ListPrincipalThingsRequest input38485)} (portkey.awsgen/params-to-header {"principal" ["x-amzn-principal" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"nextToken" "nextToken", "maxResults" "maxResults"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principals/things", :body body__36697__auto__} (clojure.core/fn [response38484] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception, "ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception}] (if (clojure.core/= nil (:status response38484)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/list-principal-things-response (:body response38484)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38484 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38484)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38484}))))))))))

(clojure.core/defn create-policy-version ([input__36693__auto__] (create-policy-version input__36693__auto__ portkey.aws/*http-client*)) ([input38487 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/CreatePolicyVersionRequest input38487)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"policyName" "policyName"}) (portkey.awsgen/params-to-querystring {"setAsDefault" "setAsDefault"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version", :body body__36697__auto__} (clojure.core/fn [response38486] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "MalformedPolicyException" :portkey.aws.iot.-2015-05-28/malformed-policy-exception, "VersionsLimitExceededException" :portkey.aws.iot.-2015-05-28/versions-limit-exceeded-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38486)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/create-policy-version-response (:body response38486)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38486 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38486)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38486}))))))))))

(clojure.core/defn describe-endpoint ([input__36693__auto__] (describe-endpoint input__36693__auto__ portkey.aws/*http-client*)) ([input38489 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/endpoint", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DescribeEndpointRequest input38489)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/endpoint", :body body__36697__auto__} (clojure.core/fn [response38488] (clojure.core/let [errors__36698__auto__ {"InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception}] (if (clojure.core/= nil (:status response38488)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/describe-endpoint-response (:body response38488)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38488 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38488)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38488}))))))))))

(clojure.core/defn register-certificate ([input__36693__auto__] (register-certificate input__36693__auto__ portkey.aws/*http-client*)) ([input38491 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificate/register", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/RegisterCertificateRequest input38491)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"setAsActive" "setAsActive"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificate/register", :body body__36697__auto__} (clojure.core/fn [response38490] (clojure.core/let [errors__36698__auto__ {"UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "CertificateStateException" :portkey.aws.iot.-2015-05-28/certificate-state-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "CertificateValidationException" :portkey.aws.iot.-2015-05-28/certificate-validation-exception, "ResourceAlreadyExistsException" :portkey.aws.iot.-2015-05-28/resource-already-exists-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "CertificateConflictException" :portkey.aws.iot.-2015-05-28/certificate-conflict-exception}] (if (clojure.core/= nil (:status response38490)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/register-certificate-response (:body response38490)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38490 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38490)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38490}))))))))))

(clojure.core/defn get-policy ([input__36693__auto__] (get-policy input__36693__auto__ portkey.aws/*http-client*)) ([input38493 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/GetPolicyRequest input38493)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"policyName" "policyName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}", :body body__36697__auto__} (clojure.core/fn [response38492] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38492)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/get-policy-response (:body response38492)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38492 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38492)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38492}))))))))))

(clojure.core/defn enable-topic-rule ([input__36693__auto__] (enable-topic-rule input__36693__auto__ portkey.aws/*http-client*)) ([input38495 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}/enable", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/EnableTopicRuleRequest input38495)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ruleName" "ruleName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}/enable", :body body__36697__auto__} (clojure.core/fn [response38494] (clojure.core/let [errors__36698__auto__ {"InternalException" :portkey.aws.iot.-2015-05-28/internal-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception}] (if (clojure.core/= nil (:status response38494)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38494 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38494)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38494}))))))))))

(clojure.core/defn deprecate-thing-type ([input__36693__auto__] (deprecate-thing-type input__36693__auto__ portkey.aws/*http-client*)) ([input38497 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}/deprecate", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DeprecateThingTypeRequest input38497)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"thingTypeName" "thingTypeName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}/deprecate", :body body__36697__auto__} (clojure.core/fn [response38496] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38496)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/deprecate-thing-type-response (:body response38496)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38496 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38496)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38496}))))))))))

(clojure.core/defn delete-thing-type ([input__36693__auto__] (delete-thing-type input__36693__auto__ portkey.aws/*http-client*)) ([input38499 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DeleteThingTypeRequest input38499)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"thingTypeName" "thingTypeName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}", :body body__36697__auto__} (clojure.core/fn [response38498] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38498)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/delete-thing-type-response (:body response38498)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38498 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38498)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38498}))))))))))

(clojure.core/defn replace-topic-rule ([input__36693__auto__] (replace-topic-rule input__36693__auto__ portkey.aws/*http-client*)) ([input38501 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/ReplaceTopicRuleRequest input38501)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ruleName" "ruleName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "topicRulePayload") (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body body__36697__auto__} (clojure.core/fn [response38500] (clojure.core/let [errors__36698__auto__ {"SqlParseException" :portkey.aws.iot.-2015-05-28/sql-parse-exception, "InternalException" :portkey.aws.iot.-2015-05-28/internal-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception}] (if (clojure.core/= nil (:status response38500)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38500 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38500)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38500}))))))))))

(clojure.core/defn get-topic-rule ([input__36693__auto__] (get-topic-rule input__36693__auto__ portkey.aws/*http-client*)) ([input38503 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/GetTopicRuleRequest input38503)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ruleName" "ruleName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body body__36697__auto__} (clojure.core/fn [response38502] (clojure.core/let [errors__36698__auto__ {"InternalException" :portkey.aws.iot.-2015-05-28/internal-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception}] (if (clojure.core/= nil (:status response38502)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/get-topic-rule-response (:body response38502)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38502 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38502)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38502}))))))))))

(clojure.core/defn reject-certificate-transfer ([input__36693__auto__] (reject-certificate-transfer input__36693__auto__ portkey.aws/*http-client*)) ([input38505 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/reject-certificate-transfer/{certificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/RejectCertificateTransferRequest input38505)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"certificateId" "certificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/reject-certificate-transfer/{certificateId}", :body body__36697__auto__} (clojure.core/fn [response38504] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "TransferAlreadyCompletedException" :portkey.aws.iot.-2015-05-28/transfer-already-completed-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38504)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38504 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38504)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38504}))))))))))

(clojure.core/defn delete-thing ([input__36693__auto__] (delete-thing input__36693__auto__ portkey.aws/*http-client*)) ([input38507 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DeleteThingRequest input38507)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"thingName" "thingName"}) (portkey.awsgen/params-to-querystring {"expectedVersion" "expectedVersion"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body body__36697__auto__} (clojure.core/fn [response38506] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "VersionConflictException" :portkey.aws.iot.-2015-05-28/version-conflict-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38506)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/delete-thing-response (:body response38506)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38506 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38506)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38506}))))))))))

(clojure.core/defn list-certificates ([input__36693__auto__] (list-certificates input__36693__auto__ portkey.aws/*http-client*)) ([input38509 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/ListCertificatesRequest input38509)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"pageSize" "pageSize", "marker" "marker", "isAscendingOrder" "ascendingOrder"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates", :body body__36697__auto__} (clojure.core/fn [response38508] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38508)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/list-certificates-response (:body response38508)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38508 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38508)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38508}))))))))))

(clojure.core/defn list-thing-types ([input__36693__auto__] (list-thing-types input__36693__auto__ portkey.aws/*http-client*)) ([input38511 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/ListThingTypesRequest input38511)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"nextToken" "nextToken", "maxResults" "maxResults", "thingTypeName" "thingTypeName"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types", :body body__36697__auto__} (clojure.core/fn [response38510] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38510)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/list-thing-types-response (:body response38510)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38510 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38510)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38510}))))))))))

(clojure.core/defn describe-thing ([input__36693__auto__] (describe-thing input__36693__auto__ portkey.aws/*http-client*)) ([input38513 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DescribeThingRequest input38513)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"thingName" "thingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body body__36697__auto__} (clojure.core/fn [response38512] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38512)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/describe-thing-response (:body response38512)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38512 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38512)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38512}))))))))))

(clojure.core/defn list-policy-principals ([input__36693__auto__] (list-policy-principals input__36693__auto__ portkey.aws/*http-client*)) ([input38515 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policy-principals", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/ListPolicyPrincipalsRequest input38515)} (portkey.awsgen/params-to-header {"policyName" ["x-amzn-iot-policy" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"marker" "marker", "pageSize" "pageSize", "isAscendingOrder" "ascendingOrder"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policy-principals", :body body__36697__auto__} (clojure.core/fn [response38514] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38514)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/list-policy-principals-response (:body response38514)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38514 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38514)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38514}))))))))))

(clojure.core/defn set-default-policy-version ([input__36693__auto__] (set-default-policy-version input__36693__auto__ portkey.aws/*http-client*)) ([input38517 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version/{policyVersionId}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/SetDefaultPolicyVersionRequest input38517)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"policyName" "policyName", "policyVersionId" "policyVersionId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}/version/{policyVersionId}", :body body__36697__auto__} (clojure.core/fn [response38516] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38516)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38516 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38516)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38516}))))))))))

(clojure.core/defn create-policy ([input__36693__auto__] (create-policy input__36693__auto__ portkey.aws/*http-client*)) ([input38519 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/CreatePolicyRequest input38519)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"policyName" "policyName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}", :body body__36697__auto__} (clojure.core/fn [response38518] (clojure.core/let [errors__36698__auto__ {"ResourceAlreadyExistsException" :portkey.aws.iot.-2015-05-28/resource-already-exists-exception, "MalformedPolicyException" :portkey.aws.iot.-2015-05-28/malformed-policy-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38518)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/create-policy-response (:body response38518)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38518 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38518)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38518}))))))))))

(clojure.core/defn describe-thing-type ([input__36693__auto__] (describe-thing-type input__36693__auto__ portkey.aws/*http-client*)) ([input38521 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DescribeThingTypeRequest input38521)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"thingTypeName" "thingTypeName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}", :body body__36697__auto__} (clojure.core/fn [response38520] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38520)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/describe-thing-type-response (:body response38520)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38520 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38520)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38520}))))))))))

(clojure.core/defn attach-thing-principal ([input__36693__auto__] (attach-thing-principal input__36693__auto__ portkey.aws/*http-client*)) ([input38523 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}/principals", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/AttachThingPrincipalRequest input38523)} (portkey.awsgen/params-to-header {"principal" ["x-amzn-principal" nil]}) (portkey.awsgen/params-to-uri {"thingName" "thingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}/principals", :body body__36697__auto__} (clojure.core/fn [response38522] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38522)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/attach-thing-principal-response (:body response38522)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38522 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38522)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38522}))))))))))

(clojure.core/defn create-keys-and-certificate ([input__36693__auto__] (create-keys-and-certificate input__36693__auto__ portkey.aws/*http-client*)) ([input38525 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/keys-and-certificate", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/CreateKeysAndCertificateRequest input38525)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"setAsActive" "setAsActive"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/keys-and-certificate", :body body__36697__auto__} (clojure.core/fn [response38524] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38524)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/create-keys-and-certificate-response (:body response38524)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38524 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38524)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38524}))))))))))

(clojure.core/defn registercacertificate ([input__36693__auto__] (registercacertificate input__36693__auto__ portkey.aws/*http-client*)) ([input38527 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/RegisterCACertificateRequest input38527)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"setAsActive" "setAsActive", "allowAutoRegistration" "allowAutoRegistration"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate", :body body__36697__auto__} (clojure.core/fn [response38526] (clojure.core/let [errors__36698__auto__ {"UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "CertificateValidationException" :portkey.aws.iot.-2015-05-28/certificate-validation-exception, "LimitExceededException" :portkey.aws.iot.-2015-05-28/limit-exceeded-exception, "ResourceAlreadyExistsException" :portkey.aws.iot.-2015-05-28/resource-already-exists-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "RegistrationCodeValidationException" :portkey.aws.iot.-2015-05-28/registration-code-validation-exception}] (if (clojure.core/= nil (:status response38526)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/registercacertificate-response (:body response38526)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38526 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38526)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38526}))))))))))

(clojure.core/defn disable-topic-rule ([input__36693__auto__] (disable-topic-rule input__36693__auto__ portkey.aws/*http-client*)) ([input38529 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}/disable", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DisableTopicRuleRequest input38529)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ruleName" "ruleName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}/disable", :body body__36697__auto__} (clojure.core/fn [response38528] (clojure.core/let [errors__36698__auto__ {"InternalException" :portkey.aws.iot.-2015-05-28/internal-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception}] (if (clojure.core/= nil (:status response38528)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38528 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38528)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38528}))))))))))

(clojure.core/defn list-topic-rules ([input__36693__auto__] (list-topic-rules input__36693__auto__ portkey.aws/*http-client*)) ([input38531 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/ListTopicRulesRequest input38531)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"topic" "topic", "maxResults" "maxResults", "nextToken" "nextToken", "ruleDisabled" "ruleDisabled"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules", :body body__36697__auto__} (clojure.core/fn [response38530] (clojure.core/let [errors__36698__auto__ {"InternalException" :portkey.aws.iot.-2015-05-28/internal-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception}] (if (clojure.core/= nil (:status response38530)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/list-topic-rules-response (:body response38530)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38530 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38530)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38530}))))))))))

(clojure.core/defn detach-principal-policy ([input__36693__auto__] (detach-principal-policy input__36693__auto__ portkey.aws/*http-client*)) ([input38533 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principal-policies/{policyName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DetachPrincipalPolicyRequest input38533)} (portkey.awsgen/params-to-header {"principal" ["x-amzn-iot-principal" nil]}) (portkey.awsgen/params-to-uri {"policyName" "policyName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principal-policies/{policyName}", :body body__36697__auto__} (clojure.core/fn [response38532] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38532)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38532 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38532)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38532}))))))))))

(clojure.core/defn updatecacertificate ([input__36693__auto__] (updatecacertificate input__36693__auto__ portkey.aws/*http-client*)) ([input38535 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate/{caCertificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/UpdateCACertificateRequest input38535)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"caCertificateId" "certificateId"}) (portkey.awsgen/params-to-querystring {"newStatus" "newStatus", "newAutoRegistrationStatus" "newAutoRegistrationStatus"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/cacertificate/{caCertificateId}", :body body__36697__auto__} (clojure.core/fn [response38534] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38534)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38534 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38534)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38534}))))))))))

(clojure.core/defn delete-topic-rule ([input__36693__auto__] (delete-topic-rule input__36693__auto__ portkey.aws/*http-client*)) ([input38537 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DeleteTopicRuleRequest input38537)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ruleName" "ruleName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/rules/{ruleName}", :body body__36697__auto__} (clojure.core/fn [response38536] (clojure.core/let [errors__36698__auto__ {"InternalException" :portkey.aws.iot.-2015-05-28/internal-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception}] (if (clojure.core/= nil (:status response38536)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38536 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38536)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38536}))))))))))

(clojure.core/defn describe-certificate ([input__36693__auto__] (describe-certificate input__36693__auto__ portkey.aws/*http-client*)) ([input38539 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates/{certificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DescribeCertificateRequest input38539)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"certificateId" "certificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates/{certificateId}", :body body__36697__auto__} (clojure.core/fn [response38538] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception, "ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception}] (if (clojure.core/= nil (:status response38538)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/describe-certificate-response (:body response38538)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38538 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38538)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38538}))))))))))

(clojure.core/defn set-logging-options ([input__36693__auto__] (set-logging-options input__36693__auto__ portkey.aws/*http-client*)) ([input38541 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/loggingOptions", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/SetLoggingOptionsRequest input38541)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "loggingOptionsPayload") (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/loggingOptions", :body body__36697__auto__} (clojure.core/fn [response38540] (clojure.core/let [errors__36698__auto__ {"InternalException" :portkey.aws.iot.-2015-05-28/internal-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception}] (if (clojure.core/= nil (:status response38540)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38540 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38540)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38540}))))))))))

(clojure.core/defn list-thing-principals ([input__36693__auto__] (list-thing-principals input__36693__auto__ portkey.aws/*http-client*)) ([input38543 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}/principals", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/ListThingPrincipalsRequest input38543)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"thingName" "thingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}/principals", :body body__36697__auto__} (clojure.core/fn [response38542] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception, "ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception}] (if (clojure.core/= nil (:status response38542)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/list-thing-principals-response (:body response38542)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38542 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38542)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38542}))))))))))

(clojure.core/defn list-principal-policies ([input__36693__auto__] (list-principal-policies input__36693__auto__ portkey.aws/*http-client*)) ([input38545 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principal-policies", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/ListPrincipalPoliciesRequest input38545)} (portkey.awsgen/params-to-header {"principal" ["x-amzn-iot-principal" nil]}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"marker" "marker", "pageSize" "pageSize", "isAscendingOrder" "ascendingOrder"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/principal-policies", :body body__36697__auto__} (clojure.core/fn [response38544] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38544)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/list-principal-policies-response (:body response38544)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38544 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38544)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38544}))))))))))

(clojure.core/defn transfer-certificate ([input__36693__auto__] (transfer-certificate input__36693__auto__ portkey.aws/*http-client*)) ([input38547 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/transfer-certificate/{certificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/TransferCertificateRequest input38547)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"certificateId" "certificateId"}) (portkey.awsgen/params-to-querystring {"targetAwsAccount" "targetAwsAccount"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/transfer-certificate/{certificateId}", :body body__36697__auto__} (clojure.core/fn [response38546] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "CertificateStateException" :portkey.aws.iot.-2015-05-28/certificate-state-exception, "TransferConflictException" :portkey.aws.iot.-2015-05-28/transfer-conflict-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38546)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/transfer-certificate-response (:body response38546)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38546 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38546)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38546}))))))))))

(clojure.core/defn delete-policy ([input__36693__auto__] (delete-policy input__36693__auto__ portkey.aws/*http-client*)) ([input38549 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DeletePolicyRequest input38549)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"policyName" "policyName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/policies/{policyName}", :body body__36697__auto__} (clojure.core/fn [response38548] (clojure.core/let [errors__36698__auto__ {"DeleteConflictException" :portkey.aws.iot.-2015-05-28/delete-conflict-exception, "ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38548)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38548 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38548)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38548}))))))))))

(clojure.core/defn update-thing ([input__36693__auto__] (update-thing input__36693__auto__ portkey.aws/*http-client*)) ([input38551 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/UpdateThingRequest input38551)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"thingName" "thingName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PATCH", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things/{thingName}", :body body__36697__auto__} (clojure.core/fn [response38550] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "VersionConflictException" :portkey.aws.iot.-2015-05-28/version-conflict-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception, "ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception}] (if (clojure.core/= nil (:status response38550)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/update-thing-response (:body response38550)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38550 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38550)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38550}))))))))))

(clojure.core/defn delete-certificate ([input__36693__auto__] (delete-certificate input__36693__auto__ portkey.aws/*http-client*)) ([input38553 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates/{certificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/DeleteCertificateRequest input38553)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"certificateId" "certificateId"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates/{certificateId}", :body body__36697__auto__} (clojure.core/fn [response38552] (clojure.core/let [errors__36698__auto__ {"CertificateStateException" :portkey.aws.iot.-2015-05-28/certificate-state-exception, "DeleteConflictException" :portkey.aws.iot.-2015-05-28/delete-conflict-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception, "ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception}] (if (clojure.core/= nil (:status response38552)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38552 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38552)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38552}))))))))))

(clojure.core/defn get-logging-options ([input__36693__auto__] (get-logging-options input__36693__auto__ portkey.aws/*http-client*)) ([input38555 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/loggingOptions", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/GetLoggingOptionsRequest input38555)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/loggingOptions", :body body__36697__auto__} (clojure.core/fn [response38554] (clojure.core/let [errors__36698__auto__ {"InternalException" :portkey.aws.iot.-2015-05-28/internal-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception}] (if (clojure.core/= nil (:status response38554)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/get-logging-options-response (:body response38554)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38554 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38554)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38554}))))))))))

(clojure.core/defn create-thing-type ([input__36693__auto__] (create-thing-type input__36693__auto__ portkey.aws/*http-client*)) ([input38557 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/CreateThingTypeRequest input38557)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"thingTypeName" "thingTypeName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/thing-types/{thingTypeName}", :body body__36697__auto__} (clojure.core/fn [response38556] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception, "ResourceAlreadyExistsException" :portkey.aws.iot.-2015-05-28/resource-already-exists-exception}] (if (clojure.core/= nil (:status response38556)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/create-thing-type-response (:body response38556)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38556 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38556)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38556}))))))))))

(clojure.core/defn update-certificate ([input__36693__auto__] (update-certificate input__36693__auto__ portkey.aws/*http-client*)) ([input38559 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates/{certificateId}", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/UpdateCertificateRequest input38559)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"certificateId" "certificateId"}) (portkey.awsgen/params-to-querystring {"newStatus" "newStatus"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates/{certificateId}", :body body__36697__auto__} (clojure.core/fn [response38558] (clojure.core/let [errors__36698__auto__ {"ResourceNotFoundException" :portkey.aws.iot.-2015-05-28/resource-not-found-exception, "CertificateStateException" :portkey.aws.iot.-2015-05-28/certificate-state-exception, "InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38558)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38558 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38558)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38558}))))))))))

(clojure.core/defn create-certificate-from-csr ([input__36693__auto__] (create-certificate-from-csr input__36693__auto__ portkey.aws/*http-client*)) ([input38561 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/CreateCertificateFromCsrRequest input38561)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"setAsActive" "setAsActive"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/certificates", :body body__36697__auto__} (clojure.core/fn [response38560] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38560)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/create-certificate-from-csr-response (:body response38560)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38560 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38560)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38560}))))))))))

(clojure.core/defn list-things ([input__36693__auto__] (list-things input__36693__auto__ portkey.aws/*http-client*)) ([input38563 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things", :body (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/ListThingsRequest input38563)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"nextToken" "nextToken", "maxResults" "maxResults", "attributeName" "attributeName", "attributeValue" "attributeValue", "thingTypeName" "thingTypeName"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/things", :body body__36697__auto__} (clojure.core/fn [response38562] (clojure.core/let [errors__36698__auto__ {"InvalidRequestException" :portkey.aws.iot.-2015-05-28/invalid-request-exception, "ThrottlingException" :portkey.aws.iot.-2015-05-28/throttling-exception, "UnauthorizedException" :portkey.aws.iot.-2015-05-28/unauthorized-exception, "ServiceUnavailableException" :portkey.aws.iot.-2015-05-28/service-unavailable-exception, "InternalFailureException" :portkey.aws.iot.-2015-05-28/internal-failure-exception}] (if (clojure.core/= nil (:status response38562)) (clojure.spec.alpha/unform :portkey.aws.iot.-2015-05-28/list-things-response (:body response38562)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38562 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38562)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38562}))))))))))
