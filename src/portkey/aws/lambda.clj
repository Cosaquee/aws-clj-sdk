(ns portkey.aws.lambda (:require [portkey.aws]))

(clojure.spec.alpha/def :portkey.aws.lambda.create-function-request/role (clojure.spec.alpha/and :portkey.aws.lambda/role-arn))
(clojure.spec.alpha/def :portkey.aws.lambda.create-function-request/publish (clojure.spec.alpha/and :portkey.aws.lambda/boolean))
(clojure.spec.alpha/def :portkey.aws.lambda.create-function-request/code (clojure.spec.alpha/and :portkey.aws.lambda/function-code))
(clojure.spec.alpha/def :portkey.aws.lambda/create-function-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda/FunctionName :portkey.aws.lambda/Runtime :portkey.aws.lambda.create-function-request/Role :portkey.aws.lambda/Handler :portkey.aws.lambda.create-function-request/Code] :opt-un [:portkey.aws.lambda/TracingConfig :portkey.aws.lambda/Timeout :portkey.aws.lambda/DeadLetterConfig :portkey.aws.lambda/Tags :portkey.aws.lambda/MemorySize :portkey.aws.lambda/KMSKeyArn :portkey.aws.lambda/Description :portkey.aws.lambda/Environment :portkey.aws.lambda/VpcConfig :portkey.aws.lambda.create-function-request/Publish]))

(clojure.spec.alpha/def :portkey.aws.lambda/event-source-mappings-list (clojure.spec.alpha/coll-of :portkey.aws.lambda/event-source-mapping-configuration :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lambda.update-alias-request/name (clojure.spec.alpha/and :portkey.aws.lambda/alias))
(clojure.spec.alpha/def :portkey.aws.lambda.update-alias-request/function-version (clojure.spec.alpha/and :portkey.aws.lambda/version))
(clojure.spec.alpha/def :portkey.aws.lambda/update-alias-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda/FunctionName :portkey.aws.lambda.update-alias-request/Name] :opt-un [:portkey.aws.lambda.update-alias-request/FunctionVersion :portkey.aws.lambda/Description]))

(clojure.spec.alpha/def :portkey.aws.lambda.unsupported-media-type-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.unsupported-media-type-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/unsupported-media-type-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.unsupported-media-type-exception/Type :portkey.aws.lambda.unsupported-media-type-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lambda.list-event-source-mappings-request/event-source-arn (clojure.spec.alpha/and :portkey.aws.lambda/arn))
(clojure.spec.alpha/def :portkey.aws.lambda.list-event-source-mappings-request/marker (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.list-event-source-mappings-request/max-items (clojure.spec.alpha/and :portkey.aws.lambda/max-list-items))
(clojure.spec.alpha/def :portkey.aws.lambda/list-event-source-mappings-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.list-event-source-mappings-request/EventSourceArn :portkey.aws.lambda/FunctionName :portkey.aws.lambda.list-event-source-mappings-request/Marker :portkey.aws.lambda.list-event-source-mappings-request/MaxItems]))

(clojure.spec.alpha/def :portkey.aws.lambda.tracing-config/mode (clojure.spec.alpha/and :portkey.aws.lambda/tracing-mode))
(clojure.spec.alpha/def :portkey.aws.lambda/tracing-config (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.tracing-config/Mode]))

(clojure.spec.alpha/def :portkey.aws.lambda.request-too-large-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.request-too-large-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/request-too-large-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.request-too-large-exception/Type :portkey.aws.lambda.request-too-large-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lambda.invalid-subnetidexception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.invalid-subnetidexception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/invalid-subnetidexception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.invalid-subnetidexception/Type :portkey.aws.lambda.invalid-subnetidexception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda.subnetipaddress-limit-reached-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.subnetipaddress-limit-reached-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/subnetipaddress-limit-reached-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.subnetipaddress-limit-reached-exception/Type :portkey.aws.lambda.subnetipaddress-limit-reached-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda.function-code/zip-file (clojure.spec.alpha/and :portkey.aws.lambda/blob))
(clojure.spec.alpha/def :portkey.aws.lambda/function-code (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.function-code/ZipFile :portkey.aws.lambda/S3Bucket :portkey.aws.lambda/S3Key :portkey.aws.lambda/S3ObjectVersion]))

(clojure.spec.alpha/def :portkey.aws.lambda/s3-object-version (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 1024))))

(clojure.spec.alpha/def :portkey.aws.lambda/function-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"arn:aws:lambda:[a-z]{2}-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_]+(:(\$LATEST|[a-zA-Z0-9-_]+))?" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda/subnet-ids (clojure.spec.alpha/coll-of :portkey.aws.lambda/subnet-id :max-count 16))

(clojure.spec.alpha/def :portkey.aws.lambda/batch-size (clojure.spec.alpha/and clojure.core/int? (fn* [p1__36568__36569__auto__] (clojure.core/<= 1 p1__36568__36569__auto__)) (fn* [p1__36570__36571__auto__] (clojure.core/<= p1__36570__36571__auto__ 10000))))

(clojure.spec.alpha/def :portkey.aws.lambda/function-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 140)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"(arn:aws:lambda:)?([a-z]{2}-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda/security-group-ids (clojure.spec.alpha/coll-of :portkey.aws.lambda/security-group-id :max-count 5))

(clojure.spec.alpha/def :portkey.aws.lambda/timeout (clojure.spec.alpha/and clojure.core/int? (fn* [p1__36568__36569__auto__] (clojure.core/<= 1 p1__36568__36569__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda.list-versions-by-function-response/next-marker (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.list-versions-by-function-response/versions (clojure.spec.alpha/and :portkey.aws.lambda/function-list))
(clojure.spec.alpha/def :portkey.aws.lambda/list-versions-by-function-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.list-versions-by-function-response/NextMarker :portkey.aws.lambda.list-versions-by-function-response/Versions]))

(clojure.spec.alpha/def :portkey.aws.lambda.account-usage/total-code-size (clojure.spec.alpha/and :portkey.aws.lambda/long))
(clojure.spec.alpha/def :portkey.aws.lambda.account-usage/function-count (clojure.spec.alpha/and :portkey.aws.lambda/long))
(clojure.spec.alpha/def :portkey.aws.lambda/account-usage (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.account-usage/TotalCodeSize :portkey.aws.lambda.account-usage/FunctionCount]))

(clojure.spec.alpha/def :portkey.aws.lambda/subnet-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lambda.update-function-code-request/zip-file (clojure.spec.alpha/and :portkey.aws.lambda/blob))
(clojure.spec.alpha/def :portkey.aws.lambda.update-function-code-request/publish (clojure.spec.alpha/and :portkey.aws.lambda/boolean))
(clojure.spec.alpha/def :portkey.aws.lambda.update-function-code-request/dry-run (clojure.spec.alpha/and :portkey.aws.lambda/boolean))
(clojure.spec.alpha/def :portkey.aws.lambda/update-function-code-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda/FunctionName] :opt-un [:portkey.aws.lambda.update-function-code-request/ZipFile :portkey.aws.lambda/S3Bucket :portkey.aws.lambda/S3Key :portkey.aws.lambda/S3ObjectVersion :portkey.aws.lambda.update-function-code-request/Publish :portkey.aws.lambda.update-function-code-request/DryRun]))

(clojure.spec.alpha/def :portkey.aws.lambda.delete-event-source-mapping-request/uuid (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/delete-event-source-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.delete-event-source-mapping-request/UUID] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lambda/environment-variables (clojure.spec.alpha/map-of :portkey.aws.lambda/environment-variable-name :portkey.aws.lambda/environment-variable-value))

(clojure.spec.alpha/def :portkey.aws.lambda.dead-letter-config/target-arn (clojure.spec.alpha/and :portkey.aws.lambda/resource-arn))
(clojure.spec.alpha/def :portkey.aws.lambda/dead-letter-config (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.dead-letter-config/TargetArn]))

(clojure.spec.alpha/def :portkey.aws.lambda/list-tags-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda/Tags]))

(clojure.spec.alpha/def :portkey.aws.lambda/handler (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[^\s]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda/namespaced-function-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 170)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"(arn:aws:lambda:)?([a-z]{2}-[a-z]+-\d{1}:)?(\d{12}:)?(function:)?([a-zA-Z0-9-_\.]+)(:(\$LATEST|[a-zA-Z0-9-_]+))?" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda/function-list (clojure.spec.alpha/coll-of :portkey.aws.lambda/function-configuration :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lambda/vpc-config-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda/SubnetIds :portkey.aws.lambda/SecurityGroupIds :portkey.aws.lambda/VpcId]))

(clojure.spec.alpha/def :portkey.aws.lambda/runtime (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {:nodejs4.3-edge "nodejs4.3-edge", :nodejs6.10 "nodejs6.10", :python3.6 "python3.6", :nodejs "nodejs", "dotnetcore1.0" "dotnetcore1.0", "java8" "java8", :python2.7 "python2.7", "nodejs4.3" "nodejs4.3", "python2.7" "python2.7", "nodejs4.3-edge" "nodejs4.3-edge", :java8 "java8", :nodejs4.3 "nodejs4.3", "nodejs6.10" "nodejs6.10", "python3.6" "python3.6", :dotnetcore1.0 "dotnetcore1.0", "nodejs" "nodejs"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lambda/role-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"arn:aws:iam::\d{12}:role/?[a-zA-Z_0-9+=,.@\-_/]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda.service-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.service-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/service-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.service-exception/Type :portkey.aws.lambda.service-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda/source-owner (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"\d{12}" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda/tag-key (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lambda.list-event-source-mappings-response/next-marker (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.list-event-source-mappings-response/event-source-mappings (clojure.spec.alpha/and :portkey.aws.lambda/event-source-mappings-list))
(clojure.spec.alpha/def :portkey.aws.lambda/list-event-source-mappings-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.list-event-source-mappings-response/NextMarker :portkey.aws.lambda.list-event-source-mappings-response/EventSourceMappings]))

(clojure.spec.alpha/def :portkey.aws.lambda/statement-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 100)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"([a-zA-Z0-9-_]+)" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda.environment-response/variables (clojure.spec.alpha/and :portkey.aws.lambda/environment-variables))
(clojure.spec.alpha/def :portkey.aws.lambda.environment-response/error (clojure.spec.alpha/and :portkey.aws.lambda/environment-error))
(clojure.spec.alpha/def :portkey.aws.lambda/environment-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.environment-response/Variables :portkey.aws.lambda.environment-response/Error]))

(clojure.spec.alpha/def :portkey.aws.lambda/alias (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"(?!^[0-9]+$)([a-zA-Z0-9-_]+)" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda.kmsnot-found-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.kmsnot-found-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/kmsnot-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.kmsnot-found-exception/Type :portkey.aws.lambda.kmsnot-found-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda.kmsinvalid-state-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.kmsinvalid-state-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/kmsinvalid-state-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.kmsinvalid-state-exception/Type :portkey.aws.lambda.kmsinvalid-state-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda.invalid-runtime-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.invalid-runtime-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/invalid-runtime-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.invalid-runtime-exception/Type :portkey.aws.lambda.invalid-runtime-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda/tags (clojure.spec.alpha/map-of :portkey.aws.lambda/tag-key :portkey.aws.lambda/tag-value))

(clojure.spec.alpha/def :portkey.aws.lambda.list-functions-response/next-marker (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.list-functions-response/functions (clojure.spec.alpha/and :portkey.aws.lambda/function-list))
(clojure.spec.alpha/def :portkey.aws.lambda/list-functions-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.list-functions-response/NextMarker :portkey.aws.lambda.list-functions-response/Functions]))

(clojure.spec.alpha/def :portkey.aws.lambda/delete-function-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda/FunctionName] :opt-un [:portkey.aws.lambda/Qualifier]))

(clojure.spec.alpha/def :portkey.aws.lambda.invocation-request/function-name (clojure.spec.alpha/and :portkey.aws.lambda/namespaced-function-name))
(clojure.spec.alpha/def :portkey.aws.lambda.invocation-request/client-context (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.invocation-request/payload (clojure.spec.alpha/and :portkey.aws.lambda/blob))
(clojure.spec.alpha/def :portkey.aws.lambda/invocation-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.invocation-request/FunctionName] :opt-un [:portkey.aws.lambda/InvocationType :portkey.aws.lambda/LogType :portkey.aws.lambda.invocation-request/ClientContext :portkey.aws.lambda.invocation-request/Payload :portkey.aws.lambda/Qualifier]))

(clojure.spec.alpha/def :portkey.aws.lambda.kmsdisabled-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.kmsdisabled-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/kmsdisabled-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.kmsdisabled-exception/Type :portkey.aws.lambda.kmsdisabled-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda/enabled clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.lambda.get-function-response/configuration (clojure.spec.alpha/and :portkey.aws.lambda/function-configuration))
(clojure.spec.alpha/def :portkey.aws.lambda.get-function-response/code (clojure.spec.alpha/and :portkey.aws.lambda/function-code-location))
(clojure.spec.alpha/def :portkey.aws.lambda/get-function-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.get-function-response/Configuration :portkey.aws.lambda.get-function-response/Code :portkey.aws.lambda/Tags]))

(clojure.spec.alpha/def :portkey.aws.lambda/function-version (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ALL" "ALL", :all "ALL"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lambda.create-alias-request/name (clojure.spec.alpha/and :portkey.aws.lambda/alias))
(clojure.spec.alpha/def :portkey.aws.lambda.create-alias-request/function-version (clojure.spec.alpha/and :portkey.aws.lambda/version))
(clojure.spec.alpha/def :portkey.aws.lambda/create-alias-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda/FunctionName :portkey.aws.lambda.create-alias-request/Name :portkey.aws.lambda.create-alias-request/FunctionVersion] :opt-un [:portkey.aws.lambda/Description]))

(clojure.spec.alpha/def :portkey.aws.lambda.code-storage-exceeded-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.code-storage-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/code-storage-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.code-storage-exceeded-exception/Type :portkey.aws.lambda.code-storage-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lambda/date clojure.core/inst?)

(clojure.spec.alpha/def :portkey.aws.lambda/sensitive-string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lambda/memory-size (clojure.spec.alpha/and clojure.core/int? (fn* [p1__36568__36569__auto__] (clojure.core/<= 128 p1__36568__36569__auto__)) (fn* [p1__36570__36571__auto__] (clojure.core/<= p1__36570__36571__auto__ 1536))))

(clojure.spec.alpha/def :portkey.aws.lambda.too-many-requests-exception/retry-after-seconds (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.too-many-requests-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.too-many-requests-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.too-many-requests-exception/reason (clojure.spec.alpha/and :portkey.aws.lambda/throttle-reason))
(clojure.spec.alpha/def :portkey.aws.lambda/too-many-requests-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.too-many-requests-exception/retryAfterSeconds :portkey.aws.lambda.too-many-requests-exception/Type :portkey.aws.lambda.too-many-requests-exception/message :portkey.aws.lambda.too-many-requests-exception/Reason]))

(clojure.spec.alpha/def :portkey.aws.lambda.invalid-request-content-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.invalid-request-content-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/invalid-request-content-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.invalid-request-content-exception/Type :portkey.aws.lambda.invalid-request-content-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lambda.get-event-source-mapping-request/uuid (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/get-event-source-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.get-event-source-mapping-request/UUID] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lambda.kmsaccess-denied-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.kmsaccess-denied-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/kmsaccess-denied-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.kmsaccess-denied-exception/Type :portkey.aws.lambda.kmsaccess-denied-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda.add-permission-request/source-arn (clojure.spec.alpha/and :portkey.aws.lambda/arn))
(clojure.spec.alpha/def :portkey.aws.lambda.add-permission-request/source-account (clojure.spec.alpha/and :portkey.aws.lambda/source-owner))
(clojure.spec.alpha/def :portkey.aws.lambda/add-permission-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda/FunctionName :portkey.aws.lambda/StatementId :portkey.aws.lambda/Action :portkey.aws.lambda/Principal] :opt-un [:portkey.aws.lambda.add-permission-request/SourceArn :portkey.aws.lambda.add-permission-request/SourceAccount :portkey.aws.lambda/EventSourceToken :portkey.aws.lambda/Qualifier]))

(clojure.spec.alpha/def :portkey.aws.lambda/get-account-settings-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda/AccountLimit :portkey.aws.lambda/AccountUsage]))

(clojure.spec.alpha/def :portkey.aws.lambda/throttle-reason (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"ConcurrentInvocationLimitExceeded" "ConcurrentInvocationLimitExceeded", :concurrent-invocation-limit-exceeded "ConcurrentInvocationLimitExceeded", "FunctionInvocationRateLimitExceeded" "FunctionInvocationRateLimitExceeded", :function-invocation-rate-limit-exceeded "FunctionInvocationRateLimitExceeded", "CallerRateLimitExceeded" "CallerRateLimitExceeded", :caller-rate-limit-exceeded "CallerRateLimitExceeded"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lambda.tag-resource-request/resource (clojure.spec.alpha/and :portkey.aws.lambda/function-arn))
(clojure.spec.alpha/def :portkey.aws.lambda/tag-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.tag-resource-request/Resource :portkey.aws.lambda/Tags] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lambda/namespaced-statement-id (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 100)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"([a-zA-Z0-9-_.]+)" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda/log-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"None" "None", :none "None", "Tail" "Tail", :tail "Tail"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lambda.get-alias-request/name (clojure.spec.alpha/and :portkey.aws.lambda/alias))
(clojure.spec.alpha/def :portkey.aws.lambda/get-alias-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda/FunctionName :portkey.aws.lambda.get-alias-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lambda/tag-key-list (clojure.spec.alpha/coll-of :portkey.aws.lambda/tag-key :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lambda.enilimit-reached-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.enilimit-reached-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/enilimit-reached-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.enilimit-reached-exception/Type :portkey.aws.lambda.enilimit-reached-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda.add-permission-response/statement (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/add-permission-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.add-permission-response/Statement]))

(clojure.spec.alpha/def :portkey.aws.lambda.get-policy-request/function-name (clojure.spec.alpha/and :portkey.aws.lambda/namespaced-function-name))
(clojure.spec.alpha/def :portkey.aws.lambda/get-policy-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.get-policy-request/FunctionName] :opt-un [:portkey.aws.lambda/Qualifier]))

(clojure.spec.alpha/def :portkey.aws.lambda.invocation-response/status-code (clojure.spec.alpha/and :portkey.aws.lambda/integer))
(clojure.spec.alpha/def :portkey.aws.lambda.invocation-response/function-error (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.invocation-response/log-result (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.invocation-response/payload (clojure.spec.alpha/and :portkey.aws.lambda/blob))
(clojure.spec.alpha/def :portkey.aws.lambda/invocation-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.invocation-response/StatusCode :portkey.aws.lambda.invocation-response/FunctionError :portkey.aws.lambda.invocation-response/LogResult :portkey.aws.lambda.invocation-response/Payload]))

(clojure.spec.alpha/def :portkey.aws.lambda.resource-not-found-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.resource-not-found-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/resource-not-found-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.resource-not-found-exception/Type :portkey.aws.lambda.resource-not-found-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda.invoke-async-request/function-name (clojure.spec.alpha/and :portkey.aws.lambda/namespaced-function-name))
(clojure.spec.alpha/def :portkey.aws.lambda.invoke-async-request/invoke-args (clojure.spec.alpha/and :portkey.aws.lambda/blob-stream))
(clojure.spec.alpha/def :portkey.aws.lambda/invoke-async-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.invoke-async-request/FunctionName :portkey.aws.lambda.invoke-async-request/InvokeArgs] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lambda.account-limit/total-code-size (clojure.spec.alpha/and :portkey.aws.lambda/long))
(clojure.spec.alpha/def :portkey.aws.lambda.account-limit/code-size-unzipped (clojure.spec.alpha/and :portkey.aws.lambda/long))
(clojure.spec.alpha/def :portkey.aws.lambda.account-limit/code-size-zipped (clojure.spec.alpha/and :portkey.aws.lambda/long))
(clojure.spec.alpha/def :portkey.aws.lambda.account-limit/concurrent-executions (clojure.spec.alpha/and :portkey.aws.lambda/integer))
(clojure.spec.alpha/def :portkey.aws.lambda/account-limit (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.account-limit/TotalCodeSize :portkey.aws.lambda.account-limit/CodeSizeUnzipped :portkey.aws.lambda.account-limit/CodeSizeZipped :portkey.aws.lambda.account-limit/ConcurrentExecutions]))

(clojure.spec.alpha/def :portkey.aws.lambda.environment-error/error-code (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.environment-error/message (clojure.spec.alpha/and :portkey.aws.lambda/sensitive-string))
(clojure.spec.alpha/def :portkey.aws.lambda/environment-error (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.environment-error/ErrorCode :portkey.aws.lambda.environment-error/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda/environment-variable-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lambda/kmskey-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"(arn:aws:[a-z0-9-.]+:.*)|()" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda/description (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 0 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 256))))

(clojure.spec.alpha/def :portkey.aws.lambda/tag-value (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lambda.update-event-source-mapping-request/uuid (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/update-event-source-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.update-event-source-mapping-request/UUID] :opt-un [:portkey.aws.lambda/FunctionName :portkey.aws.lambda/Enabled :portkey.aws.lambda/BatchSize]))

(clojure.spec.alpha/def :portkey.aws.lambda/alias-list (clojure.spec.alpha/coll-of :portkey.aws.lambda/alias-configuration :max-count nil))

(clojure.spec.alpha/def :portkey.aws.lambda/security-group-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lambda/invocation-type (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"Event" "Event", :event "Event", "RequestResponse" "RequestResponse", :request-response "RequestResponse", "DryRun" "DryRun", :dry-run "DryRun"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lambda.get-policy-response/policy (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/get-policy-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.get-policy-response/Policy]))

(clojure.spec.alpha/def :portkey.aws.lambda/vpc-id (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lambda/blob-stream (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.awsgen/base64-encode portkey.awsgen/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.lambda/max-list-items (clojure.spec.alpha/and clojure.core/int? (fn* [p1__36568__36569__auto__] (clojure.core/<= 1 p1__36568__36569__auto__)) (fn* [p1__36570__36571__auto__] (clojure.core/<= p1__36570__36571__auto__ 10000))))

(clojure.spec.alpha/def :portkey.aws.lambda.delete-alias-request/name (clojure.spec.alpha/and :portkey.aws.lambda/alias))
(clojure.spec.alpha/def :portkey.aws.lambda/delete-alias-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda/FunctionName :portkey.aws.lambda.delete-alias-request/Name] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lambda.publish-version-request/code-sha256 (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/publish-version-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda/FunctionName] :opt-un [:portkey.aws.lambda.publish-version-request/CodeSha256 :portkey.aws.lambda/Description]))

(clojure.spec.alpha/def :portkey.aws.lambda/integer (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.lambda/string (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lambda.remove-permission-request/statement-id (clojure.spec.alpha/and :portkey.aws.lambda/namespaced-statement-id))
(clojure.spec.alpha/def :portkey.aws.lambda/remove-permission-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda/FunctionName :portkey.aws.lambda.remove-permission-request/StatementId] :opt-un [:portkey.aws.lambda/Qualifier]))

(clojure.spec.alpha/def :portkey.aws.lambda/tracing-mode (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"Active" "Active", :active "Active", "PassThrough" "PassThrough", :pass-through "PassThrough"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lambda.get-function-request/function-name (clojure.spec.alpha/and :portkey.aws.lambda/namespaced-function-name))
(clojure.spec.alpha/def :portkey.aws.lambda/get-function-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.get-function-request/FunctionName] :opt-un [:portkey.aws.lambda/Qualifier]))

(clojure.spec.alpha/def :portkey.aws.lambda.invoke-async-response/status (clojure.spec.alpha/and :portkey.aws.lambda/http-status))
(clojure.spec.alpha/def :portkey.aws.lambda/invoke-async-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.invoke-async-response/Status]))

(clojure.spec.alpha/def :portkey.aws.lambda.update-function-configuration-request/role (clojure.spec.alpha/and :portkey.aws.lambda/role-arn))
(clojure.spec.alpha/def :portkey.aws.lambda/update-function-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda/FunctionName] :opt-un [:portkey.aws.lambda/TracingConfig :portkey.aws.lambda/Timeout :portkey.aws.lambda/DeadLetterConfig :portkey.aws.lambda/Handler :portkey.aws.lambda/Runtime :portkey.aws.lambda/MemorySize :portkey.aws.lambda.update-function-configuration-request/Role :portkey.aws.lambda/KMSKeyArn :portkey.aws.lambda/Description :portkey.aws.lambda/Environment :portkey.aws.lambda/VpcConfig]))

(clojure.spec.alpha/def :portkey.aws.lambda.environment/variables (clojure.spec.alpha/and :portkey.aws.lambda/environment-variables))
(clojure.spec.alpha/def :portkey.aws.lambda/environment (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.environment/Variables]))

(clojure.spec.alpha/def :portkey.aws.lambda/s3-key (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 1024))))

(clojure.spec.alpha/def :portkey.aws.lambda.resource-conflict-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.resource-conflict-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/resource-conflict-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.resource-conflict-exception/Type :portkey.aws.lambda.resource-conflict-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lambda.list-versions-by-function-request/function-name (clojure.spec.alpha/and :portkey.aws.lambda/namespaced-function-name))
(clojure.spec.alpha/def :portkey.aws.lambda.list-versions-by-function-request/marker (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.list-versions-by-function-request/max-items (clojure.spec.alpha/and :portkey.aws.lambda/max-list-items))
(clojure.spec.alpha/def :portkey.aws.lambda/list-versions-by-function-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.list-versions-by-function-request/FunctionName] :opt-un [:portkey.aws.lambda.list-versions-by-function-request/Marker :portkey.aws.lambda.list-versions-by-function-request/MaxItems]))

(clojure.spec.alpha/def :portkey.aws.lambda/master-region (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"ALL|[a-z]{2}(-gov)?-[a-z]+-\d{1}" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda/http-status (clojure.spec.alpha/and clojure.core/int?))

(clojure.spec.alpha/def :portkey.aws.lambda.invalid-zip-file-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.invalid-zip-file-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/invalid-zip-file-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.invalid-zip-file-exception/Type :portkey.aws.lambda.invalid-zip-file-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda/arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"arn:aws:([a-zA-Z0-9\-])+:([a-z]{2}-[a-z]+-\d{1})?:(\d{12})?:(.*)" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda.list-aliases-response/next-marker (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.list-aliases-response/aliases (clojure.spec.alpha/and :portkey.aws.lambda/alias-list))
(clojure.spec.alpha/def :portkey.aws.lambda/list-aliases-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.list-aliases-response/NextMarker :portkey.aws.lambda.list-aliases-response/Aliases]))

(clojure.spec.alpha/def :portkey.aws.lambda/environment-variable-name (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[a-zA-Z]([a-zA-Z0-9_])+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda.function-configuration/tracing-config (clojure.spec.alpha/and :portkey.aws.lambda/tracing-config-response))
(clojure.spec.alpha/def :portkey.aws.lambda.function-configuration/function-arn (clojure.spec.alpha/and :portkey.aws.lambda/name-spaced-function-arn))
(clojure.spec.alpha/def :portkey.aws.lambda.function-configuration/function-name (clojure.spec.alpha/and :portkey.aws.lambda/namespaced-function-name))
(clojure.spec.alpha/def :portkey.aws.lambda.function-configuration/role (clojure.spec.alpha/and :portkey.aws.lambda/role-arn))
(clojure.spec.alpha/def :portkey.aws.lambda.function-configuration/last-modified (clojure.spec.alpha/and :portkey.aws.lambda/timestamp))
(clojure.spec.alpha/def :portkey.aws.lambda.function-configuration/environment (clojure.spec.alpha/and :portkey.aws.lambda/environment-response))
(clojure.spec.alpha/def :portkey.aws.lambda.function-configuration/code-size (clojure.spec.alpha/and :portkey.aws.lambda/long))
(clojure.spec.alpha/def :portkey.aws.lambda.function-configuration/vpc-config (clojure.spec.alpha/and :portkey.aws.lambda/vpc-config-response))
(clojure.spec.alpha/def :portkey.aws.lambda.function-configuration/code-sha256 (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.function-configuration/master-arn (clojure.spec.alpha/and :portkey.aws.lambda/function-arn))
(clojure.spec.alpha/def :portkey.aws.lambda/function-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.function-configuration/TracingConfig :portkey.aws.lambda.function-configuration/FunctionArn :portkey.aws.lambda.function-configuration/FunctionName :portkey.aws.lambda/Timeout :portkey.aws.lambda/DeadLetterConfig :portkey.aws.lambda/Handler :portkey.aws.lambda/Runtime :portkey.aws.lambda/MemorySize :portkey.aws.lambda.function-configuration/Role :portkey.aws.lambda/KMSKeyArn :portkey.aws.lambda/Description :portkey.aws.lambda.function-configuration/LastModified :portkey.aws.lambda.function-configuration/Environment :portkey.aws.lambda.function-configuration/CodeSize :portkey.aws.lambda.function-configuration/VpcConfig :portkey.aws.lambda/Version :portkey.aws.lambda.function-configuration/CodeSha256 :portkey.aws.lambda.function-configuration/MasterArn]))

(clojure.spec.alpha/def :portkey.aws.lambda/s3-bucket (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 3 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 63)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"^[0-9A-Za-z\.\-_]*(?<!\.)$" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda/vpc-config (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda/SubnetIds :portkey.aws.lambda/SecurityGroupIds]))

(clojure.spec.alpha/def :portkey.aws.lambda/qualifier (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 128)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"(|[a-zA-Z0-9$_-]+)" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda/long clojure.core/int?)

(clojure.spec.alpha/def :portkey.aws.lambda.policy-length-exceeded-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.policy-length-exceeded-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/policy-length-exceeded-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.policy-length-exceeded-exception/Type :portkey.aws.lambda.policy-length-exceeded-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lambda/timestamp (clojure.spec.alpha/and clojure.core/string?))

(clojure.spec.alpha/def :portkey.aws.lambda.list-functions-request/marker (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.list-functions-request/max-items (clojure.spec.alpha/and :portkey.aws.lambda/max-list-items))
(clojure.spec.alpha/def :portkey.aws.lambda/list-functions-request (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda/MasterRegion :portkey.aws.lambda/FunctionVersion :portkey.aws.lambda.list-functions-request/Marker :portkey.aws.lambda.list-functions-request/MaxItems]))

(clojure.spec.alpha/def :portkey.aws.lambda/resource-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"(arn:aws:[a-z0-9-.]+:.*)|()" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda/event-source-token (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 0 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 256)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"[a-zA-Z0-9._\-]+" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda/version (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36527__auto__] (clojure.core/<= 1 (clojure.core/count s__36527__auto__))) (clojure.core/fn [s__36528__auto__] (clojure.core/< (clojure.core/count s__36528__auto__) 1024)) (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"(\$LATEST|[0-9]+)" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda.tracing-config-response/mode (clojure.spec.alpha/and :portkey.aws.lambda/tracing-mode))
(clojure.spec.alpha/def :portkey.aws.lambda/tracing-config-response (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.tracing-config-response/Mode]))

(clojure.spec.alpha/def :portkey.aws.lambda.get-function-configuration-request/function-name (clojure.spec.alpha/and :portkey.aws.lambda/namespaced-function-name))
(clojure.spec.alpha/def :portkey.aws.lambda/get-function-configuration-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.get-function-configuration-request/FunctionName] :opt-un [:portkey.aws.lambda/Qualifier]))

(clojure.spec.alpha/def :portkey.aws.lambda/blob (clojure.spec.alpha/and clojure.core/bytes? (clojure.spec.alpha/conformer portkey.awsgen/base64-encode portkey.awsgen/base64-decode)))

(clojure.spec.alpha/def :portkey.aws.lambda/principal (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #".*" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda.alias-configuration/alias-arn (clojure.spec.alpha/and :portkey.aws.lambda/function-arn))
(clojure.spec.alpha/def :portkey.aws.lambda.alias-configuration/name (clojure.spec.alpha/and :portkey.aws.lambda/alias))
(clojure.spec.alpha/def :portkey.aws.lambda.alias-configuration/function-version (clojure.spec.alpha/and :portkey.aws.lambda/version))
(clojure.spec.alpha/def :portkey.aws.lambda/alias-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.alias-configuration/AliasArn :portkey.aws.lambda.alias-configuration/Name :portkey.aws.lambda.alias-configuration/FunctionVersion :portkey.aws.lambda/Description]))

(clojure.spec.alpha/def :portkey.aws.lambda.ec2-throttled-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.ec2-throttled-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/ec2-throttled-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.ec2-throttled-exception/Type :portkey.aws.lambda.ec2-throttled-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda.ec2-access-denied-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.ec2-access-denied-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/ec2-access-denied-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.ec2-access-denied-exception/Type :portkey.aws.lambda.ec2-access-denied-exception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda.create-event-source-mapping-request/event-source-arn (clojure.spec.alpha/and :portkey.aws.lambda/arn))
(clojure.spec.alpha/def :portkey.aws.lambda.create-event-source-mapping-request/starting-position (clojure.spec.alpha/and :portkey.aws.lambda/event-source-position))
(clojure.spec.alpha/def :portkey.aws.lambda.create-event-source-mapping-request/starting-position-timestamp (clojure.spec.alpha/and :portkey.aws.lambda/date))
(clojure.spec.alpha/def :portkey.aws.lambda/create-event-source-mapping-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.create-event-source-mapping-request/EventSourceArn :portkey.aws.lambda/FunctionName :portkey.aws.lambda.create-event-source-mapping-request/StartingPosition] :opt-un [:portkey.aws.lambda/Enabled :portkey.aws.lambda/BatchSize :portkey.aws.lambda.create-event-source-mapping-request/StartingPositionTimestamp]))

(clojure.spec.alpha/def :portkey.aws.lambda.event-source-mapping-configuration/uuid (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.event-source-mapping-configuration/event-source-arn (clojure.spec.alpha/and :portkey.aws.lambda/arn))
(clojure.spec.alpha/def :portkey.aws.lambda.event-source-mapping-configuration/last-modified (clojure.spec.alpha/and :portkey.aws.lambda/date))
(clojure.spec.alpha/def :portkey.aws.lambda.event-source-mapping-configuration/last-processing-result (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.event-source-mapping-configuration/state (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.event-source-mapping-configuration/state-transition-reason (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/event-source-mapping-configuration (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.event-source-mapping-configuration/UUID :portkey.aws.lambda/BatchSize :portkey.aws.lambda.event-source-mapping-configuration/EventSourceArn :portkey.aws.lambda/FunctionArn :portkey.aws.lambda.event-source-mapping-configuration/LastModified :portkey.aws.lambda.event-source-mapping-configuration/LastProcessingResult :portkey.aws.lambda.event-source-mapping-configuration/State :portkey.aws.lambda.event-source-mapping-configuration/StateTransitionReason]))

(clojure.spec.alpha/def :portkey.aws.lambda/action (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"(lambda:[*]|lambda:[a-zA-Z]+|[*])" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda.ec2-unexpected-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.ec2-unexpected-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.ec2-unexpected-exception/ec2-error-code (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/ec2-unexpected-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.ec2-unexpected-exception/Type :portkey.aws.lambda.ec2-unexpected-exception/Message :portkey.aws.lambda.ec2-unexpected-exception/EC2ErrorCode]))

(clojure.spec.alpha/def :portkey.aws.lambda.invalid-parameter-value-exception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.invalid-parameter-value-exception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/invalid-parameter-value-exception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.invalid-parameter-value-exception/Type :portkey.aws.lambda.invalid-parameter-value-exception/message]))

(clojure.spec.alpha/def :portkey.aws.lambda.function-code-location/repository-type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.function-code-location/location (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/function-code-location (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.function-code-location/RepositoryType :portkey.aws.lambda.function-code-location/Location]))

(clojure.spec.alpha/def :portkey.aws.lambda/name-spaced-function-arn (clojure.spec.alpha/and clojure.core/string? (clojure.core/fn [s__36529__auto__] (clojure.core/re-matches #"arn:aws:lambda:[a-z]{2}-[a-z]+-\d{1}:\d{12}:function:[a-zA-Z0-9-_\.]+(:(\$LATEST|[a-zA-Z0-9-_]+))?" s__36529__auto__))))

(clojure.spec.alpha/def :portkey.aws.lambda/get-account-settings-request (portkey.awsgen/json-keys :req-un [] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lambda.list-aliases-request/function-version (clojure.spec.alpha/and :portkey.aws.lambda/version))
(clojure.spec.alpha/def :portkey.aws.lambda.list-aliases-request/marker (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.list-aliases-request/max-items (clojure.spec.alpha/and :portkey.aws.lambda/max-list-items))
(clojure.spec.alpha/def :portkey.aws.lambda/list-aliases-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda/FunctionName] :opt-un [:portkey.aws.lambda.list-aliases-request/FunctionVersion :portkey.aws.lambda.list-aliases-request/Marker :portkey.aws.lambda.list-aliases-request/MaxItems]))

(clojure.spec.alpha/def :portkey.aws.lambda.invalid-security-groupidexception/type (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda.invalid-security-groupidexception/message (clojure.spec.alpha/and :portkey.aws.lambda/string))
(clojure.spec.alpha/def :portkey.aws.lambda/invalid-security-groupidexception (portkey.awsgen/json-keys :req-un [] :opt-un [:portkey.aws.lambda.invalid-security-groupidexception/Type :portkey.aws.lambda.invalid-security-groupidexception/Message]))

(clojure.spec.alpha/def :portkey.aws.lambda.untag-resource-request/resource (clojure.spec.alpha/and :portkey.aws.lambda/function-arn))
(clojure.spec.alpha/def :portkey.aws.lambda.untag-resource-request/tag-keys (clojure.spec.alpha/and :portkey.aws.lambda/tag-key-list))
(clojure.spec.alpha/def :portkey.aws.lambda/untag-resource-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.untag-resource-request/Resource :portkey.aws.lambda.untag-resource-request/TagKeys] :opt-un []))

(clojure.spec.alpha/def :portkey.aws.lambda/event-source-position (clojure.spec.alpha/conformer (clojure.core/let [m__36525__auto__ {"TRIM_HORIZON" "TRIM_HORIZON", :trim-horizon "TRIM_HORIZON", "LATEST" "LATEST", :latest "LATEST", "AT_TIMESTAMP" "AT_TIMESTAMP", :at-timestamp "AT_TIMESTAMP"}] (clojure.core/fn [s__36526__auto__] (m__36525__auto__ s__36526__auto__ :clojure.spec.alpha/invalid))) (clojure.core/comp clojure.core/keyword portkey.awsgen/dashed)))

(clojure.spec.alpha/def :portkey.aws.lambda/boolean clojure.core/boolean?)

(clojure.spec.alpha/def :portkey.aws.lambda.list-tags-request/resource (clojure.spec.alpha/and :portkey.aws.lambda/function-arn))
(clojure.spec.alpha/def :portkey.aws.lambda/list-tags-request (portkey.awsgen/json-keys :req-un [:portkey.aws.lambda.list-tags-request/Resource] :opt-un []))

(clojure.core/defn tag-resource ([input__36693__auto__] (tag-resource input__36693__auto__ portkey.aws/*http-client*)) ([input38179 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2017-03-31/tags/{ARN}", :body (clojure.spec.alpha/unform :portkey.aws.lambda/TagResourceRequest input38179)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ARN" "Resource"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2017-03-31/tags/{ARN}", :body body__36697__auto__} (clojure.core/fn [response38178] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception}] (if (clojure.core/= 204 (:status response38178)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38178 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38178)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38178}))))))))))

(clojure.core/defn create-alias ([input__36693__auto__] (create-alias input__36693__auto__ portkey.aws/*http-client*)) ([input38181 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/aliases", :body (clojure.spec.alpha/unform :portkey.aws.lambda/CreateAliasRequest input38181)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/aliases", :body body__36697__auto__} (clojure.core/fn [response38180] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "ResourceConflictException" :portkey.aws.lambda/resource-conflict-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception}] (if (clojure.core/= 201 (:status response38180)) (clojure.spec.alpha/unform :portkey.aws.lambda/alias-configuration (:body response38180)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38180 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38180)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38180}))))))))))

(clojure.core/defn delete-function ([input__36693__auto__] (delete-function input__36693__auto__ portkey.aws/*http-client*)) ([input38183 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}", :body (clojure.spec.alpha/unform :portkey.aws.lambda/DeleteFunctionRequest input38183)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName"}) (portkey.awsgen/params-to-querystring {"Qualifier" "Qualifier"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}", :body body__36697__auto__} (clojure.core/fn [response38182] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "ResourceConflictException" :portkey.aws.lambda/resource-conflict-exception}] (if (clojure.core/= 204 (:status response38182)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38182 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38182)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38182}))))))))))

(clojure.core/defn list-event-source-mappings ([input__36693__auto__] (list-event-source-mappings input__36693__auto__ portkey.aws/*http-client*)) ([input38185 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/event-source-mappings/", :body (clojure.spec.alpha/unform :portkey.aws.lambda/ListEventSourceMappingsRequest input38185)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"EventSourceArn" "EventSourceArn", "FunctionName" "FunctionName", "Marker" "Marker", "MaxItems" "MaxItems"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/event-source-mappings/", :body body__36697__auto__} (clojure.core/fn [response38184] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception}] (if (clojure.core/= 200 (:status response38184)) (clojure.spec.alpha/unform :portkey.aws.lambda/list-event-source-mappings-response (:body response38184)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38184 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38184)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38184}))))))))))

(clojure.core/defn delete-event-source-mapping ([input__36693__auto__] (delete-event-source-mapping input__36693__auto__ portkey.aws/*http-client*)) ([input38187 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/event-source-mappings/{UUID}", :body (clojure.spec.alpha/unform :portkey.aws.lambda/DeleteEventSourceMappingRequest input38187)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"UUID" "UUID"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/event-source-mappings/{UUID}", :body body__36697__auto__} (clojure.core/fn [response38186] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception}] (if (clojure.core/= 202 (:status response38186)) (clojure.spec.alpha/unform :portkey.aws.lambda/event-source-mapping-configuration (:body response38186)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38186 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38186)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38186}))))))))))

(clojure.core/defn invoke ([input__36693__auto__] (invoke input__36693__auto__ portkey.aws/*http-client*)) ([input38189 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/invocations", :body (clojure.spec.alpha/unform :portkey.aws.lambda/InvocationRequest input38189)} (portkey.awsgen/params-to-header {"InvocationType" ["X-Amz-Invocation-Type" nil], "LogType" ["X-Amz-Log-Type" nil], "ClientContext" ["X-Amz-Client-Context" nil]}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName"}) (portkey.awsgen/params-to-querystring {"Qualifier" "Qualifier"}) (portkey.awsgen/params-to-payload "Payload") (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/invocations", :body body__36697__auto__} (clojure.core/fn [response38188] (clojure.core/let [errors__36698__auto__ {"UnsupportedMediaTypeException" :portkey.aws.lambda/unsupported-media-type-exception, "RequestTooLargeException" :portkey.aws.lambda/request-too-large-exception, "InvalidSubnetIDException" :portkey.aws.lambda/invalid-subnetidexception, "SubnetIPAddressLimitReachedException" :portkey.aws.lambda/subnetipaddress-limit-reached-exception, "ServiceException" :portkey.aws.lambda/service-exception, "KMSNotFoundException" :portkey.aws.lambda/kmsnot-found-exception, "KMSInvalidStateException" :portkey.aws.lambda/kmsinvalid-state-exception, "InvalidRuntimeException" :portkey.aws.lambda/invalid-runtime-exception, "KMSDisabledException" :portkey.aws.lambda/kmsdisabled-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception, "InvalidRequestContentException" :portkey.aws.lambda/invalid-request-content-exception, "KMSAccessDeniedException" :portkey.aws.lambda/kmsaccess-denied-exception, "ENILimitReachedException" :portkey.aws.lambda/enilimit-reached-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidZipFileException" :portkey.aws.lambda/invalid-zip-file-exception, "EC2ThrottledException" :portkey.aws.lambda/ec2-throttled-exception, "EC2AccessDeniedException" :portkey.aws.lambda/ec2-access-denied-exception, "EC2UnexpectedException" :portkey.aws.lambda/ec2-unexpected-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "InvalidSecurityGroupIDException" :portkey.aws.lambda/invalid-security-groupidexception}] (if (clojure.core/= nil (:status response38188)) (clojure.spec.alpha/unform :portkey.aws.lambda/invocation-response (:body response38188)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38188 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38188)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38188}))))))))))

(clojure.core/defn get-account-settings ([input__36693__auto__] (get-account-settings input__36693__auto__ portkey.aws/*http-client*)) ([input38191 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2016-08-19/account-settings/", :body (clojure.spec.alpha/unform :portkey.aws.lambda/GetAccountSettingsRequest input38191)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2016-08-19/account-settings/", :body body__36697__auto__} (clojure.core/fn [response38190] (clojure.core/let [errors__36698__auto__ {"TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception, "ServiceException" :portkey.aws.lambda/service-exception}] (if (clojure.core/= 200 (:status response38190)) (clojure.spec.alpha/unform :portkey.aws.lambda/get-account-settings-response (:body response38190)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38190 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38190)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38190}))))))))))

(clojure.core/defn invoke-async ([input__36693__auto__] (invoke-async input__36693__auto__ portkey.aws/*http-client*)) ([input38193 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/{FunctionName}/invoke-async/", :body (clojure.spec.alpha/unform :portkey.aws.lambda/InvokeAsyncRequest input38193)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload "InvokeArgs") (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2014-11-13/functions/{FunctionName}/invoke-async/", :body body__36697__auto__} (clojure.core/fn [response38192] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidRequestContentException" :portkey.aws.lambda/invalid-request-content-exception, "InvalidRuntimeException" :portkey.aws.lambda/invalid-runtime-exception}] (if (clojure.core/= 202 (:status response38192)) (clojure.spec.alpha/unform :portkey.aws.lambda/invoke-async-response (:body response38192)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38192 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38192)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38192}))))))))))

(clojure.core/defn get-function-configuration ([input__36693__auto__] (get-function-configuration input__36693__auto__ portkey.aws/*http-client*)) ([input38195 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/configuration", :body (clojure.spec.alpha/unform :portkey.aws.lambda/GetFunctionConfigurationRequest input38195)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName"}) (portkey.awsgen/params-to-querystring {"Qualifier" "Qualifier"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/configuration", :body body__36697__auto__} (clojure.core/fn [response38194] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception}] (if (clojure.core/= 200 (:status response38194)) (clojure.spec.alpha/unform :portkey.aws.lambda/function-configuration (:body response38194)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38194 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38194)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38194}))))))))))

(clojure.core/defn update-function-code ([input__36693__auto__] (update-function-code input__36693__auto__ portkey.aws/*http-client*)) ([input38197 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/code", :body (clojure.spec.alpha/unform :portkey.aws.lambda/UpdateFunctionCodeRequest input38197)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/code", :body body__36697__auto__} (clojure.core/fn [response38196] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception, "CodeStorageExceededException" :portkey.aws.lambda/code-storage-exceeded-exception}] (if (clojure.core/= 200 (:status response38196)) (clojure.spec.alpha/unform :portkey.aws.lambda/function-configuration (:body response38196)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38196 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38196)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38196}))))))))))

(clojure.core/defn list-versions-by-function ([input__36693__auto__] (list-versions-by-function input__36693__auto__ portkey.aws/*http-client*)) ([input38199 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/versions", :body (clojure.spec.alpha/unform :portkey.aws.lambda/ListVersionsByFunctionRequest input38199)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName"}) (portkey.awsgen/params-to-querystring {"Marker" "Marker", "MaxItems" "MaxItems"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/versions", :body body__36697__auto__} (clojure.core/fn [response38198] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception}] (if (clojure.core/= 200 (:status response38198)) (clojure.spec.alpha/unform :portkey.aws.lambda/list-versions-by-function-response (:body response38198)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38198 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38198)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38198}))))))))))

(clojure.core/defn update-event-source-mapping ([input__36693__auto__] (update-event-source-mapping input__36693__auto__ portkey.aws/*http-client*)) ([input38201 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/event-source-mappings/{UUID}", :body (clojure.spec.alpha/unform :portkey.aws.lambda/UpdateEventSourceMappingRequest input38201)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"UUID" "UUID"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/event-source-mappings/{UUID}", :body body__36697__auto__} (clojure.core/fn [response38200] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception, "ResourceConflictException" :portkey.aws.lambda/resource-conflict-exception}] (if (clojure.core/= 202 (:status response38200)) (clojure.spec.alpha/unform :portkey.aws.lambda/event-source-mapping-configuration (:body response38200)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38200 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38200)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38200}))))))))))

(clojure.core/defn list-tags ([input__36693__auto__] (list-tags input__36693__auto__ portkey.aws/*http-client*)) ([input38203 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2017-03-31/tags/{ARN}", :body (clojure.spec.alpha/unform :portkey.aws.lambda/ListTagsRequest input38203)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ARN" "Resource"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2017-03-31/tags/{ARN}", :body body__36697__auto__} (clojure.core/fn [response38202] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception}] (if (clojure.core/= nil (:status response38202)) (clojure.spec.alpha/unform :portkey.aws.lambda/list-tags-response (:body response38202)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38202 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38202)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38202}))))))))))

(clojure.core/defn update-alias ([input__36693__auto__] (update-alias input__36693__auto__ portkey.aws/*http-client*)) ([input38205 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/aliases/{Name}", :body (clojure.spec.alpha/unform :portkey.aws.lambda/UpdateAliasRequest input38205)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName", "Name" "Name"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/aliases/{Name}", :body body__36697__auto__} (clojure.core/fn [response38204] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception}] (if (clojure.core/= 200 (:status response38204)) (clojure.spec.alpha/unform :portkey.aws.lambda/alias-configuration (:body response38204)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38204 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38204)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38204}))))))))))

(clojure.core/defn get-event-source-mapping ([input__36693__auto__] (get-event-source-mapping input__36693__auto__ portkey.aws/*http-client*)) ([input38207 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/event-source-mappings/{UUID}", :body (clojure.spec.alpha/unform :portkey.aws.lambda/GetEventSourceMappingRequest input38207)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"UUID" "UUID"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/event-source-mappings/{UUID}", :body body__36697__auto__} (clojure.core/fn [response38206] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception}] (if (clojure.core/= 200 (:status response38206)) (clojure.spec.alpha/unform :portkey.aws.lambda/event-source-mapping-configuration (:body response38206)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38206 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38206)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38206}))))))))))

(clojure.core/defn get-function ([input__36693__auto__] (get-function input__36693__auto__ portkey.aws/*http-client*)) ([input38209 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}", :body (clojure.spec.alpha/unform :portkey.aws.lambda/GetFunctionRequest input38209)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName"}) (portkey.awsgen/params-to-querystring {"Qualifier" "Qualifier"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}", :body body__36697__auto__} (clojure.core/fn [response38208] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception}] (if (clojure.core/= 200 (:status response38208)) (clojure.spec.alpha/unform :portkey.aws.lambda/get-function-response (:body response38208)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38208 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38208)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38208}))))))))))

(clojure.core/defn get-policy ([input__36693__auto__] (get-policy input__36693__auto__ portkey.aws/*http-client*)) ([input38211 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/policy", :body (clojure.spec.alpha/unform :portkey.aws.lambda/GetPolicyRequest input38211)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName"}) (portkey.awsgen/params-to-querystring {"Qualifier" "Qualifier"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/policy", :body body__36697__auto__} (clojure.core/fn [response38210] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception}] (if (clojure.core/= 200 (:status response38210)) (clojure.spec.alpha/unform :portkey.aws.lambda/get-policy-response (:body response38210)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38210 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38210)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38210}))))))))))

(clojure.core/defn add-permission ([input__36693__auto__] (add-permission input__36693__auto__ portkey.aws/*http-client*)) ([input38213 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/policy", :body (clojure.spec.alpha/unform :portkey.aws.lambda/AddPermissionRequest input38213)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName"}) (portkey.awsgen/params-to-querystring {"Qualifier" "Qualifier"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/policy", :body body__36697__auto__} (clojure.core/fn [response38212] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "ResourceConflictException" :portkey.aws.lambda/resource-conflict-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "PolicyLengthExceededException" :portkey.aws.lambda/policy-length-exceeded-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception}] (if (clojure.core/= 201 (:status response38212)) (clojure.spec.alpha/unform :portkey.aws.lambda/add-permission-response (:body response38212)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38212 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38212)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38212}))))))))))

(clojure.core/defn create-event-source-mapping ([input__36693__auto__] (create-event-source-mapping input__36693__auto__ portkey.aws/*http-client*)) ([input38215 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/event-source-mappings/", :body (clojure.spec.alpha/unform :portkey.aws.lambda/CreateEventSourceMappingRequest input38215)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/event-source-mappings/", :body body__36697__auto__} (clojure.core/fn [response38214] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "ResourceConflictException" :portkey.aws.lambda/resource-conflict-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception}] (if (clojure.core/= 202 (:status response38214)) (clojure.spec.alpha/unform :portkey.aws.lambda/event-source-mapping-configuration (:body response38214)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38214 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38214)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38214}))))))))))

(clojure.core/defn get-alias ([input__36693__auto__] (get-alias input__36693__auto__ portkey.aws/*http-client*)) ([input38217 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/aliases/{Name}", :body (clojure.spec.alpha/unform :portkey.aws.lambda/GetAliasRequest input38217)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName", "Name" "Name"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/aliases/{Name}", :body body__36697__auto__} (clojure.core/fn [response38216] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception}] (if (clojure.core/= 200 (:status response38216)) (clojure.spec.alpha/unform :portkey.aws.lambda/alias-configuration (:body response38216)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38216 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38216)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38216}))))))))))

(clojure.core/defn list-aliases ([input__36693__auto__] (list-aliases input__36693__auto__ portkey.aws/*http-client*)) ([input38219 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/aliases", :body (clojure.spec.alpha/unform :portkey.aws.lambda/ListAliasesRequest input38219)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName"}) (portkey.awsgen/params-to-querystring {"FunctionVersion" "FunctionVersion", "Marker" "Marker", "MaxItems" "MaxItems"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/aliases", :body body__36697__auto__} (clojure.core/fn [response38218] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception}] (if (clojure.core/= 200 (:status response38218)) (clojure.spec.alpha/unform :portkey.aws.lambda/list-aliases-response (:body response38218)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38218 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38218)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38218}))))))))))

(clojure.core/defn list-functions ([input__36693__auto__] (list-functions input__36693__auto__ portkey.aws/*http-client*)) ([input38221 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/", :body (clojure.spec.alpha/unform :portkey.aws.lambda/ListFunctionsRequest input38221)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {"MasterRegion" "MasterRegion", "FunctionVersion" "FunctionVersion", "Marker" "Marker", "MaxItems" "MaxItems"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "GET", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/", :body body__36697__auto__} (clojure.core/fn [response38220] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception}] (if (clojure.core/= 200 (:status response38220)) (clojure.spec.alpha/unform :portkey.aws.lambda/list-functions-response (:body response38220)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38220 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38220)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38220}))))))))))

(clojure.core/defn remove-permission ([input__36693__auto__] (remove-permission input__36693__auto__ portkey.aws/*http-client*)) ([input38223 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/policy/{StatementId}", :body (clojure.spec.alpha/unform :portkey.aws.lambda/RemovePermissionRequest input38223)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName", "StatementId" "StatementId"}) (portkey.awsgen/params-to-querystring {"Qualifier" "Qualifier"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/policy/{StatementId}", :body body__36697__auto__} (clojure.core/fn [response38222] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception}] (if (clojure.core/= 204 (:status response38222)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38222 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38222)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38222}))))))))))

(clojure.core/defn delete-alias ([input__36693__auto__] (delete-alias input__36693__auto__ portkey.aws/*http-client*)) ([input38225 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/aliases/{Name}", :body (clojure.spec.alpha/unform :portkey.aws.lambda/DeleteAliasRequest input38225)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName", "Name" "Name"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/aliases/{Name}", :body body__36697__auto__} (clojure.core/fn [response38224] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception}] (if (clojure.core/= 204 (:status response38224)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38224 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38224)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38224}))))))))))

(clojure.core/defn create-function ([input__36693__auto__] (create-function input__36693__auto__ portkey.aws/*http-client*)) ([input38227 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions", :body (clojure.spec.alpha/unform :portkey.aws.lambda/CreateFunctionRequest input38227)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions", :body body__36697__auto__} (clojure.core/fn [response38226] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "ResourceConflictException" :portkey.aws.lambda/resource-conflict-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception, "CodeStorageExceededException" :portkey.aws.lambda/code-storage-exceeded-exception}] (if (clojure.core/= 201 (:status response38226)) (clojure.spec.alpha/unform :portkey.aws.lambda/function-configuration (:body response38226)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38226 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38226)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38226}))))))))))

(clojure.core/defn untag-resource ([input__36693__auto__] (untag-resource input__36693__auto__ portkey.aws/*http-client*)) ([input38229 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2017-03-31/tags/{ARN}", :body (clojure.spec.alpha/unform :portkey.aws.lambda/UntagResourceRequest input38229)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"ARN" "Resource"}) (portkey.awsgen/params-to-querystring {"tagKeys" "TagKeys"}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "DELETE", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2017-03-31/tags/{ARN}", :body body__36697__auto__} (clojure.core/fn [response38228] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception}] (if (clojure.core/= 204 (:status response38228)) true (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38228 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38228)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38228}))))))))))

(clojure.core/defn publish-version ([input__36693__auto__] (publish-version input__36693__auto__ portkey.aws/*http-client*)) ([input38231 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/versions", :body (clojure.spec.alpha/unform :portkey.aws.lambda/PublishVersionRequest input38231)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "POST", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/versions", :body body__36697__auto__} (clojure.core/fn [response38230] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception, "CodeStorageExceededException" :portkey.aws.lambda/code-storage-exceeded-exception}] (if (clojure.core/= 201 (:status response38230)) (clojure.spec.alpha/unform :portkey.aws.lambda/function-configuration (:body response38230)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38230 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38230)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38230}))))))))))

(clojure.core/defn update-function-configuration ([input__36693__auto__] (update-function-configuration input__36693__auto__ portkey.aws/*http-client*)) ([input38233 http-client__36694__auto__] (clojure.core/let [req__36695__auto__ (clojure.core/-> {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/configuration", :body (clojure.spec.alpha/unform :portkey.aws.lambda/UpdateFunctionConfigurationRequest input38233)} (portkey.awsgen/params-to-header {}) (portkey.awsgen/params-to-uri {"FunctionName" "FunctionName"}) (portkey.awsgen/params-to-querystring {}) (portkey.awsgen/params-to-payload nil) (clojure.core/update :body (fn* [p1__36692__36696__auto__] (clojure.core/some-> p1__36692__36696__auto__ cheshire.core/generate-string))))] (http-client__36694__auto__ {:method "PUT", :headers {"content-type" "application/json"}, :url "https://lambda.eu-central-1.amazonaws.com/2015-03-31/functions/{FunctionName}/configuration", :body body__36697__auto__} (clojure.core/fn [response38232] (clojure.core/let [errors__36698__auto__ {"ServiceException" :portkey.aws.lambda/service-exception, "ResourceNotFoundException" :portkey.aws.lambda/resource-not-found-exception, "InvalidParameterValueException" :portkey.aws.lambda/invalid-parameter-value-exception, "TooManyRequestsException" :portkey.aws.lambda/too-many-requests-exception, "ResourceConflictException" :portkey.aws.lambda/resource-conflict-exception}] (if (clojure.core/= 200 (:status response38232)) (clojure.spec.alpha/unform :portkey.aws.lambda/function-configuration (:body response38232)) (clojure.core/if-some [[type__36699__auto__ spec__36700__auto__] (clojure.core/find errors__36698__auto__ (clojure.core/get-in response38232 [:headers "x-amzn-ErrorType"]))] (clojure.core/let [m__36701__auto__ (clojure.spec.alpha/unform spec__36700__auto__ (cheshire.core/parse-string (:body response38232)))] (throw (clojure.core/ex-info (clojure.core/str type__36699__auto__ ": " (:message m__36701__auto__)) m__36701__auto__))) (throw (clojure.core/ex-info "Unexpected response" {:response response38232}))))))))))
